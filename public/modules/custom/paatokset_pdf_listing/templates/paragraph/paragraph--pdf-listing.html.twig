{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
  set classes = [
    'pdf-listing',
    'component',
  ]
%}

{% block paragraph %}
{% if documents %}
<div{{ attributes.addClass(classes) }}>
  {% if (years is not empty ) %}
    <div class="paatokset__decision-tree-container">
      <div class="decision-tree__title">
        <span>{{ 'Select year' |trans }}</span>
      </div>
      {% embed "@hdbt/misc/container.twig" with {container_element: 'tabbed-content'} %}
        {% block container_content %}
          <div class="tabbed-list">
            <div class="tabbed-list__content">
              <div class="tabbed-list__content__inner">
                <ul class="menu">
                  {% for year in years %}
                    {% set item_attributes = create_attribute() %}
                    {%
                      set item_classes = [
                        'item',
                        loop.index == 1 ? 'selected'
                      ]
                    %}
                    <li{{ item_attributes.addClass(item_classes) }}>
                      {% if loop.index == 1 %}
                        <input type="button" id="yearSelection_{{ year }}" value="{{ year }}" aria-pressed="true"/>
                      {% else %}
                        <input type="button" id="yearSelection_{{ year }}" value="{{ year }}" aria-pressed="false"/>
                      {% endif %}
                    </li>
                  {% endfor %}
                </ul>
                <div class="custom-select-wrapper">
                  <div class="custom-select">
                    <button class="custom-select__trigger" id="custom-select__trigger"><span id="showMoreTitle">{{ 'Show more' |trans }}</span>
                      <div class="arrow">
                        <i class="hel-icon hel-icon--angle-down"></i>
                      </div>
                    </button>
                    <div class="custom-options" id="custom-options">
                      {% for year in years %}
                        <div class="custom-option">
                          <input type="button" value="{{ year }}"/>
                        </div>
                      {% endfor %}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        {% endblock %}
      {% endembed %}
      {% for year, files in documents %}
        {% set document_container_attributes = create_attribute() %}
        {%
          set document_container_classes = [
            'policymakers-documents',
            loop.index == 1 ? 'selected-year'
          ]
        %}

        <div{{ document_container_attributes.addClass(document_container_classes).setAttribute('value', year) }}>
          {% for file in files %}
            <a href="{{ file.link }}" class="policymaker-list-item policymaker-list-item--document">
              <div class="list-item__date">
                <span>{{ file.date }}</span>
              </div>
              <div class="list-item__subject">
                <span>
                  {{ file.title }}
                </span>
              </div>
            </a>
          {% endfor %}
        </div>
      {% endfor %}
    </div>
  {% endif %}
</div>
{% endif %}
{% endblock paragraph %}
