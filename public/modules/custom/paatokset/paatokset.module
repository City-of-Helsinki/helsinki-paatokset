<?php

/**
 * @file
 * Primary module hooks for Paatokset RSS module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\paatokset\Lupapiste\ItemsStorage;
use Drupal\paatokset\Entity\Article;

/**
 * Implements hook_theme().
 */
function paatokset_theme() : array {
  return [
    'lupapiste_rss_list' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
        'feed_link' => NULL,
      ],
      'template' => 'lupapiste-rss-list',
    ],
    'lupapiste_rss_item' => [
      'variables' => [
        'item' => NULL,
      ],
      'template' => 'lupapiste-rss-item',
    ],
    'all_articles' => [
      'variables' => [
        'articles_by_year' => [],
      ],
      'template' => 'block/all-articles',
    ],
  ];
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function paatokset_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['article'])) {
    $bundles['node']['article']['class'] = Article::class;
  }
}

/**
 * Implements hook_cron().
 */
function paatokset_cron() : void {
  // Clear lupapiste RSS-feed cache if it's over 24 hours old (failsafe) or if
  // the RSS feed was updated since the last fetch.
  $lupapiste_storage = \Drupal::getContainer()->get(ItemsStorage::class);
  $lupapiste_storage->purgeCacheIfNeeded();
}

/**
 * Implements hook_views_data_alter().
 */
function paatokset_views_data_alter(&$data): void {
  $manager = \Drupal::entityTypeManager();
  $field_config_storage = $manager->getStorage('field_config');

  /** @var \Drupal\field\FieldConfigInterface[] $field_configs */
  $field_configs = $field_config_storage->loadByProperties([
    'field_type' => 'datetime',
  ]);

  foreach ($field_configs as $field_config) {
    $table_name = $field_config->getTargetEntityTypeId() . '__' . $field_config->getName();
    $column_name = $field_config->getName() . '_year';

    // Create datetime filters.
    $data[$table_name][$column_name] = [
      'group' => new TranslatableMarkup('P채채tokset'),
      'help' => new TranslatableMarkup('Field: @field (@entity:@bundle)', [
        '@field' => $field_config->getName(),
        '@entity' => $field_config->getTargetEntityTypeId(),
        '@bundle' => $field_config->getTargetBundle(),
      ]),
      'filter' => [
        'title' => new TranslatableMarkup('Filter by year'),
        'field' => $field_config->getName() . '_value',
        'id' => 'paatokset_year',
        'entity_type' => $field_config->getTargetEntityTypeId(),
        'time_type' => 'datetime',
      ],
    ];
  }

  $entity_types = $manager->getDefinitions();
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if (empty($data[$entity_type->getBaseTable()]) || !$entity_type->entityClassImplements(ContentEntityInterface::class)) {
      continue;
    }

    $table_name = $entity_type->getDataTable() ?: $entity_type->getBaseTable();

    $fields = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions($entity_type_id);
    foreach ($fields as $field_name => $field) {
      if (!in_array($field->getType(), ['created', 'published_at'])) {
        continue;
      }

      if (!isset($data[$table_name][$field_name])) {
        continue;
      }

      $column_name = $field_name . '_year';

      // Create timestamp filters.
      $data[$table_name][$column_name] = [
        'group' => new TranslatableMarkup('P채채tokset'),
        'help' => new TranslatableMarkup('Timestamp field: @field (@entity)', [
          '@field' => $field_name,
          '@entity' => $field->getTargetEntityTypeId(),
        ]),
        'filter' => [
          'title' => new TranslatableMarkup('Filter by year'),
          'field' => $field_name,
          'id' => 'paatokset_year',
          'entity_type' => $field->getTargetEntityTypeId(),
          'time_type' => 'timestamp',
        ],
      ];
    }
  }
}
