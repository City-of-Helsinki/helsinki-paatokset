<?php

/**
 * @file
 * Primary module hooks for Helsinki Kanava integration.
 */

declare(strict_types = 1);

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\paatokset_helsinki_kanava\Entity\MeetingVideo;

/**
 * Implements hook_theme().
 */
function paatokset_helsinki_kanava_theme($existing, $type, $theme, $path): array {
  return [
    'meeting_video' => [
      'render element' => 'elements',
      'template' => 'meeting-video'
    ],
    'block__paatokset_helsinki_kanava_announcements' => [
      'base hook' => 'block',
      'render element' => 'elements',
      'template' => 'block--paatokset-helsinki-kanava-announcements'
    ]
  ];
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: meeting-video.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function paatokset_helsinki_kanava_preprocess_meeting_video(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#paatokset_meeting'])) {
    $variables['entity'] = $variables['elements']['#paatokset_meeting'];
  }
}

/**
 * Implements hook_preprocess_node__policymaker().
 */
function paatokset_helsinki_kanava_preprocess_node__policymaker(array &$variables): void {
  $node = $variables['node'];

  // Only act on council nodes.
  $council_id = \Drupal::config('paatokset_helsinki_kanava.settings')->get('city_council_id');

  if (!$node->hasField('field_policymaker_id') || $node->get('field_policymaker_id')->value !== $council_id) {
    return;
  }

  $query = \Drupal::entityQuery('meeting_video')
    ->range(0, 1)
    ->condition('start_time', strtotime('now'), '<')
    ->sort('start_time', 'DESC');

  $ids = $query->execute();

  $video = NULL;
  if (!empty($ids)) {
    $video = MeetingVideo::load(reset($ids));
  }

  if ($video instanceof MeetingVideo) {
    $view_builder = \Drupal::entityTypeManager()
      ->getViewBuilder($video
      ->getEntityTypeId());

    $variables['most_recent_meeting'] = $view_builder->view($video);
    $variables['all_recordings_link'] = Url::fromUri(\Drupal::config('paatokset_helsinki_kanava.settings')->get('all_recordings_link'), [
      'query' => [
        'assetId' => $video->get('asset_id')->value
      ]
    ])->toString();
  }

  $liveStreamQuery = \Drupal::entityQuery('meeting_video');
  $liveStreamQuery->range(0, 1);
  $liveStreamQuery->condition('start_time', strtotime('now'), '>');
  $upcomingIds = $liveStreamQuery->execute();

  $liveStream = NULL;
  if (!empty($upcomingIds)) {
    $liveStream = MeetingVideo::load(reset($upcomingIds));
  }

  if ($liveStream instanceof MeetingVideo) {
    if (!$liveStream->get('start_time')->isEmpty() && _paatokset_helsinki_kanava_should_show_label($liveStream->get('start_time')->value)) {
      $variables['next_meeting_time'] = date('j.n.Y G:i', (int) $liveStream->get('start_time')->value);
    }
    if (!$liveStream->get('start_time')->isEmpty() && _paatokset_helsinki_kanava_should_show_stream($liveStream->get('start_time')->value)) {
      $view_builder = \Drupal::entityTypeManager()
        ->getViewBuilder($liveStream
        ->getEntityTypeId());

      $variables['live_stream'] = $view_builder->view($liveStream);
    }
  }
}

/**
 * Check if livestream is current (or if testing mode is on).
 *
 * @param string $time
 *   Timestamp of when livestream starts.
 *
 * @return bool
 *   If livestream should be displayed.
 */
function _paatokset_helsinki_kanava_should_show_stream(string $time): bool {
  if (\Drupal::config('paatokset_helsinki_kanava.settings')->get('debug_mode')) {
    return TRUE;
  }

  return strtotime('+1 hour') > $time;
}

function _paatokset_helsinki_kanava_should_show_label(string $time): bool {
  if (\Drupal::config('paatokset_helsinki_kanava.settings')->get('debug_mode')) {
    return TRUE;
  }

  // Convert start time to date only.
  $date = strtotime(date('j.n.Y', (int) $time));
  return strtotime('now') < $date;
}

/**
 * Add start_time field to meeting videos.
 */
function paatokset_helsinki_kanava_update_9001() {
  $entity_type_id = 'meeting_video';
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('start_time'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('start_time', $entity_type_id, $entity_type_id, $field_storage_definition);
}

/**
 * Add asset ID field for meeting videos.
 */
function paatokset_helsinki_kanava_update_9002() {
  $entity_type_id = 'meeting_video';
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('asset_id'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('asset_id', $entity_type_id, $entity_type_id, $field_storage_definition);
}
