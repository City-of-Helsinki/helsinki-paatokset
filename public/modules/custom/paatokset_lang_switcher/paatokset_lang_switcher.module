<?php

/**
 * @file
 * Primary module hooks for Päätökser language switcher module.
 */

declare(strict_types = 1);

use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_language_switch_links_alter().
 */
function paatokset_lang_switcher_language_switch_links_alter(array &$links, $type, Url $url): void {
  $currentLanguage = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $route = \Drupal::routeMatch();
  $route_name = $route->getRouteName();

  // Don't act on NULL routes.
  if ($route_name === NULL) {
    return;
  }

  $node = NULL;
  if ($route_name === 'entity.node.canonical') {
    $node = $route->getParameter('node');
  }

  if (!_paatokset_lang_switcher_route_is_allowed($route_name)) {
    return;
  }

  foreach ($links as $langCode => $link) {
    // Don't do anything for current page.
    if ($langCode === $currentLanguage) {
      continue;
    }

    // Only act on untranslated node links.
    if ($node instanceof NodeInterface && isset($link['#untranslated']) && $link['#untranslated']) {
      $url = _paatokset_lang_switcher_get_alt_urls_for_node($node, $langCode);
    }
    elseif ($route_name !== 'entity.node.canonical') {
      $url = _paatokset_lang_switcher_get_alt_urls_for_routes($route, $langCode, $currentLanguage);

      // Set link as untranslated regardless if we get the localized URL.
      $links[$langCode]['#untranslated'] = TRUE;
    }

    if ($url instanceof Url) {
      try {
        $url->setOption('language', $link['language']);
        $links[$langCode]['#override_url'] = $url->toString();
        $links[$langCode]['#lang_override'] = TRUE;
      }
      // Catch exceptions just in case.
      catch (\Exception $e) {
        $links[$langCode]['#lang_override'] = FALSE;
      }
    }
  }
}

/**
 * Get alternate localized URLs for untranslated nodes.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Current node.
 * @param string $langCode
 *   Langcode to get localized URL for.
 *
 * @return \Drupal\Core\Url|null
 *   Localized URL, if found.
 */
function _paatokset_lang_switcher_get_alt_urls_for_node(NodeInterface $node, string $langCode): ?Url {
  if ($node->bundle() === 'case' || $node->bundle() === 'decision') {
    /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
    $caseService = \Drupal::service('paatokset_ahjo_cases');
  }

  if ($node->bundle() === 'policymaker' || $node->bundle() === 'trustee') {
    /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
    $policymakerService = \Drupal::service('paatokset_policymakers');
  }

  if ($node->bundle() === 'policymaker') {
    return $policymakerService->getPolicymakerRoute($node, $langCode);
  }
  elseif ($node->bundle() === 'case') {
    return $caseService->getCaseUrlFromNode($node, $langCode);
  }
  elseif ($node->bundle() === 'decision') {
    return $caseService->getDecisionUrlFromNode($node, $langCode);
  }
  elseif ($node->bundle() === 'trustee') {
    return $policymakerService->getTrusteeUrl($node, $langCode);
  }

  return NULL;
}

/**
 * Get alternative localized URLs based on routes.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route
 *   Route to get localized URL from.
 * @param string $langCode
 *   Langcode to get localized URL for.
 * @param string $currentLanguage
 *   Current language.
 *
 * @return \Drupal\Core\Url|null
 *   Localized URL, if found.
 */
function _paatokset_lang_switcher_get_alt_urls_for_routes(RouteMatchInterface $route, string $langCode, string $currentLanguage): ?Url {
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');

  $route_name = $route->getRouteName();

  // Special case for getting case URLs.
  // This is because we might want to get translated decision IDs.
  if (strpos($route_name, 'paatokset_case') !== FALSE) {
    /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
    $caseService = \Drupal::service('paatokset_ahjo_cases');
    $url = $caseService->getCaseUrlFromNode(NULL, $langCode);
    if ($url === NULL) {
      $url = $caseService->getDecisionUrlFromNode(NULL, $langCode);
    }
    return $url;
  }

  $localized_route = str_replace('.' . $currentLanguage, '.' . $langCode, $route_name);

  // Quit early if route doesn't exist.
  if (!$policymakerService->routeExists($localized_route)) {
    return NULL;
  }

  // Get parameters from current route.
  $parameters = [];
  foreach ($route->getParameters() as $key => $value) {
    // Special case for translating policymaker organization parameter.
    if ($key === 'organization') {
      $organization = $policymakerService->getPolicymakerOrganizationFromUrl(NULL, $langCode);
      if ($organization) {
        $parameters[$key] = $organization;
      }
      // Fallback for trustee nodes.
      else {
        $parameters[$key] = $value;
      }
    }
    else {
      $parameters[$key] = $value;
    }
  }

  $url = Url::fromRoute($localized_route, $parameters);

  return $url;
}

/**
 * Check if route is allowed to be altered.
 *
 * @param string $route_name
 *   Route name to check.
 *
 * @return bool
 *   If route can be altered (internal Päätökset routes).
 */
function _paatokset_lang_switcher_route_is_allowed(string $route_name): bool {
  // Always allow node routes to be altered.
  if ($route_name === 'entity.node.canonical') {
    return TRUE;
  }

  // Always disallow admin routes.
  if (strpos($route_name, 'system.') !== FALSE) {
    return FALSE;
  }

  // Check custom route patterns.
  $partial_routes = [
    'policymakers.',
    'policymaker.',
    'paatokset_decision.',
    'paatokset_case.',
    'paatokset_search.decisions',
  ];

  foreach ($partial_routes as $allowed_route) {
    if (strpos($route_name, $allowed_route) !== FALSE) {
      return TRUE;
    }
  }

  return FALSE;
}
