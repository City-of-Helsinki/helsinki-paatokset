<?php

/**
 * @file
 * Contains paatokset_ahjo.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\paatokset_ahjo\Service\IssueService;

/**
 * Implements hook_theme().
 */
function paatokset_ahjo_theme($existing, $type, $theme, $path) {
  return [
    'paatokset_issue' => [
      'render element' => 'elements',
      'template' => 'paatokset-issue',
    ],
    'paatokset_meeting' => [
      'render element' => 'elements',
      'template' => 'paatokset-meeting',
    ],
    'paatokset_policymaker' => [
      'render element' => 'elements',
      'template' => 'paatokset-policymaker',
    ],
    'paatokset_organization' => [
      'render element' => 'elements',
      'template' => 'paatokset-organization',
    ],
    'paatokset_meeting_document' => [
      'render element' => 'elements',
      'template' => 'paatokset-meeting-document',
    ],
    'paatokset_agenda_item' => [
      'render element' => 'elements',
      'template' => 'paatokset-agenda-item',
    ],
    'node__policymaker' => [
      'render element' => 'elements',
      'template' => 'node--policymaker',
      'path' => $path . '/templates/content',
      'base hook' => 'node',
    ],
    'tpr_unit__contact_card' => [
      'base hook' => 'entity',
      'template' => 'content/tpr-unit--contact-card',
    ],
    'policymaker_minutes' => [
      'render element' => 'elements',
      'template' => 'content/minutes',
    ],
    'block__policymaker_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--policymaker-calendar',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_paatokset_issue(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'paatokset_issue__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_paatokset_meeting(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'paatokset_meeting__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_paatokset_policymaker(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'paatokset_policymaker__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_paatokset_organization(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'paatokset_organization__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_paatokset_meeting_document(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'paatokset_meeting_document__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_paatokset_agenda_item(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'paatokset_agenda_item__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_theme_suggestions_block__policymaker_calendar(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'block__policymaker_calendar__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-issue.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_paatokset_issue(array &$variables) {
  $entityTypeIndicator = \Drupal::routeMatch()->getParameters()->keys()[0];
  $entity = \Drupal::routeMatch()->getParameter($entityTypeIndicator);
  if (is_object($entity) && $entity instanceof ContentEntityInterface) {
    $variables['entity'] = $entity;
    $issueService = \Drupal::getContainer()->get(IssueService::class);
    $data = $issueService->getData($entity->get('id')->value);
  }
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  if (isset($data)) {
    foreach ($data as $key => $value) {
      $variables[$key] = $data[$key];
    }
  }
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-meeting.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_paatokset_meeting(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#paatokset_meeting'])) {
    $variables['entity'] = $variables['elements']['#paatokset_meeting'];
  }
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-meeting.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_block__policymaker_calendar(array &$variables) {
  $meetingService = \Drupal::service('Drupal\paatokset_ahjo_api\Service\MeetingService');
  $node = \Drupal::routeMatch()->getParameter('node');

  $params = [
    'policymaker' => $node->get('title')->value,
    'from' => date("Y-m-d"),
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_calendar'];
  }

  $variables['date'] = t('Date');
  $variables['time'] = t('Time');
  $variables['additional_info'] = t('Additional information');
  $variables['open_motions'] = t('Open motions');
  $variables['open_minutes'] = t('Open minutes');
  $variables['meetings'] = $meetingService->query($params);
  $variables['meetings_description'] = $node->get('field_meetings_description');
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-policymaker.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_paatokset_policymaker(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#paatokset_policymaker'])) {
    $variables['entity'] = $variables['elements']['#paatokset_policymaker'];
  }
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-organization.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_paatokset_organization(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#paatokset_organization'])) {
    $variables['entity'] = $variables['elements']['#paatokset_organization'];
  }
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-meeting-document.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_paatokset_meeting_document(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#paatokset_meeting_document'])) {
    $variables['entity'] = $variables['elements']['#paatokset_meeting_document'];
  }
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-agenda-item.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_paatokset_agenda_item(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#paatokset_agenda_item'])) {
    $variables['entity'] = $variables['elements']['#paatokset_agenda_item'];
  }
}

/**
 *
 */
function paatokset_ahjo_preprocess_node__policymaker(&$variables) {
  $policymakerService = \Drupal::service('Drupal\paatokset_ahjo\Service\PolicymakerService');
  $meetingService = \Drupal::service('Drupal\paatokset_ahjo_api\Service\MeetingService');
  $councilId = \Drupal::config('paatokset_helsinki_kanava.settings')->get('city_council_node');

  $policymaker = $policymakerService->getPolicymaker();
  $orgType = $policymaker->get('field_organization_type')->value;
  if ($orgType) {
    $variables['org_type_class'] = $policymakerService->transformType($orgType);

    if ($orgType !== 'trustee') {
      $variables['is_organization'] = TRUE;

      $documents = $policymakerService->getApiMinutes(2);
      if ($documents) {
        $variables['recent_documents'] = $documents;
        $variables['all_documents_link'] = $policymakerService->getDocumentsRoute();
      }

      $params = [
        'policymaker' => $policymaker->get('title')->value,
        'from' => date("Y-m-d"),
      ];
      $upcomingMeetings = $meetingService->query($params);

      if(!empty($upcomingMeetings)) {
        $variables['meeting_calendar'] = true;
      }
    }
    else {
      // Get the two most recent decisions.
      $recentDecisions = $policymakerService->getAgendasList(FALSE, 2);
      if (!empty($recentDecisions)) {
        $variables['recent_decisions'] = $recentDecisions;
        $variables['all_decisions_link'] = $policymakerService->getDecisionsRoute();
      }
    }
  }

  if($councilId && ($policymaker->id() === $councilId)) {
    $variables['render_announcement_block'] = true;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paatokset_ahjo_preprocess_policymaker_minutes(&$variables) {
  if (isset($variables['elements']['meeting']) && !empty($variables['elements']['meeting'])) {
    $variables['meeting'] = $variables['elements']['meeting'];
  }
  if (isset($variables['elements']['list']) && !empty($variables['elements']['list'])) {
    $variables['list'] = $variables['elements']['list'];
  }
  if (isset($variables['elements']['file']) && !empty($variables['elements']['file'])) {
    $variables['file'] = $variables['elements']['file'];
  }
  if (isset($variables['elements']['minutes_of_discussion']) && !empty($variables['elements']['minutes_of_discussion'])) {
    $variables['minutes_of_discussion'] = $variables['elements']['minutes_of_discussion'];
  }
}

/**
 * Implements hook_preprocess_tpr_unit__contact_card().
 */
function paatokset_ahjo_preprocess_tpr_unit__contact_card(&$variables) {
  $mapEmbed = $variables['content']['service_map_embed'];

  if (isset($mapEmbed[0]) && isset($mapEmbed[0]['link'])) {
    $variables['content']['service_map_embed_url'] = $mapEmbed[0]['link']['#attributes']['href'];
  }
}

/**
 *
 */
function paatokset_ahjo_update_8001() {
  $entity_type_id = 'paatokset_issue';
  $field_storage_definition = BaseFieldDefinition::create('string_long')
    ->setLabel(new TranslatableMarkup('top_category_name'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setSettings([
      'text_processing' => 0,
    ]);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('top_category_name', $entity_type_id, $entity_type_id, $field_storage_definition);
}

/**
 *
 */
function paatokset_ahjo_update_9002() {
  $entity_type_id = 'paatokset_agenda_item';
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('issue_id'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('issue_id', $entity_type_id, $entity_type_id, $field_storage_definition);

  $entity_type_id = 'paatokset_meeting';
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('policymaker_uri'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('policymaker_uri', $entity_type_id, $entity_type_id, $field_storage_definition);
}

/**
 *
 */
function paatokset_ahjo_update_9003() {
  $entity_type_id = 'paatokset_agenda_item';
  $field_storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(new TranslatableMarkup('content_resolution'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayOptions('form', [
      'type'   => 'text_textarea',
      'weight' => -6,
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('content_resolution', $entity_type_id, $entity_type_id, $field_storage_definition);

  $entity_type_id = 'paatokset_agenda_item';
  $field_storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(new TranslatableMarkup('content_draft_proposal'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayOptions('form', [
      'type'   => 'text_textarea',
      'weight' => -6,
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('content_draft_proposal', $entity_type_id, $entity_type_id, $field_storage_definition);

  $entity_type_id = 'paatokset_agenda_item';
  $field_storage_definition = BaseFieldDefinition::create('text_long')
    ->setLabel(new TranslatableMarkup('content_presenter'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayOptions('form', [
      'type'   => 'text_textarea',
      'weight' => -6,
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('content_presenter', $entity_type_id, $entity_type_id, $field_storage_definition);
}

/**
 *
 */
function paatokset_ahjo_update_9004() {
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  \Drupal::entityDefinitionUpdateManager()
    ->installEntityType(\Drupal::entityTypeManager()->getDefinition('paatokset_attachment'));
}

/**
 *
 */
function paatokset_ahjo_update_9005() {
  $entity_type_id = 'paatokset_agenda_item';

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('origin_last_modifed_time'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('origin_last_modifed_time', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('last_modifed_time'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('last_modifed_time', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('resource_uri'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('resource_uri', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('preparer'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('preparer', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('from_minutes'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('from_minutes', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('index'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('index', $entity_type_id, $entity_type_id, $field_storage_definition);
}

/**
 *
 */
function paatokset_ahjo_update_9006() {
  $entity_type_id = 'paatokset_meeting';

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Display name'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setSettings([
      'max_length' => 255,
      'text_processing' => 0,
    ]);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('display_name', $entity_type_id, $entity_type_id, $field_storage_definition);
}

/**
 *
 */
function paatokset_ahjo_update_9007() {
  $entity_type_id = 'paatokset_attachment';

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('number'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('number', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('confidentiality_reason'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('confidentiality_reason', $entity_type_id, $entity_type_id, $field_storage_definition);
}

function paatokset_ahjo_update_9008() {
  $entity_type_id = 'paatokset_agenda_item';

  $field_storage_definition = BaseFieldDefinition::create('string')
  ->setLabel(new TranslatableMarkup('meeting_number'))
  ->setTranslatable(TRUE)
  ->setRevisionable(TRUE)
  ->setDefaultValue('')
  ->setCardinality(1)
  ->setDisplayConfigurable('view', TRUE)
  ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('meeting_number', $entity_type_id, $entity_type_id, $field_storage_definition);

  $entity_type_id = 'paatokset_meeting';
  $field_storage_definition = BaseFieldDefinition::create('string')
  ->setLabel(new TranslatableMarkup('number'))
  ->setTranslatable(TRUE)
  ->setRevisionable(TRUE)
  ->setDefaultValue('')
  ->setCardinality(1)
  ->setDisplayConfigurable('view', TRUE)
  ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('number', $entity_type_id, $entity_type_id, $field_storage_definition);
}

function paatokset_ahjo_update_9009() {
  $entity_type_id = 'paatokset_agenda_item';

  $field_storage_definition =  BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('issue_subject'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('issue_subject', $entity_type_id, $entity_type_id, $field_storage_definition);

  $field_storage_definition =  BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('top_category_name'))
    ->setTranslatable(TRUE)
    ->setRevisionable(TRUE)
    ->setDefaultValue('')
    ->setCardinality(1)
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);
  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('top_category_name', $entity_type_id, $entity_type_id, $field_storage_definition);
}
