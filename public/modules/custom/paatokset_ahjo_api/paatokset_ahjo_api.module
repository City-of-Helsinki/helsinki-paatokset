<?php

/**
 * @file
 * Primary module hooks for Ahjo API module.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Unicode;

function _paatokset_ahjo_api_lookup_case_nid(string $case_id) {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'case')
    ->condition('field_diary_number', $case_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return;
  }
  return reset($ids);
}

function _paatokset_ahjo_api_lookup_meeting_nid(string $meeting_id) {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'meeting')
    ->condition('field_meeting_id', $meeting_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return;
  }
  return reset($ids);
}

function _paatokset_ahjo_api_lookup_policymaker_nid(string $decisionmaker_id) {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'policymaker')
    ->condition('field_policymaker_id', $decisionmaker_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return;
  }
  return reset($ids);
}


/**
 * Truncate text value.
 *
 * @param string $value
 *   The value to work with.
 * @param int $length
 *   Max length of string.
 *
 * @return string|null $value
 *   Truncated value.
 */
function _paatokset_ahjo_api_truncate_value(string $value, int $length = 255): string {
  return Unicode::truncate($value, $length, TRUE, TRUE);
}

/**
 * Callback to check if array or text value is empty.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is not empty, FALSE if it is.
 */
function _paatokset_ahjo_api_true_if_not_empty($value): bool {
  return !empty($value);
}

/**
 * Convert string to boolean.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is "true", FALSE if it is not.
 */
function _paatokset_ahjo_api_string_to_boolean($value): bool {
  if (strtolower($value) === 'true') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Callback to check if meeting minutes have been published
 *
 * @param mixed $documents
 *   An array of meeting documents.
 *
 * @return bool
 *   TRUE is thee minutes are found, FALSE if they are not.
 */
function _paatokset_ahjo_api_meeting_minutes_published($documents): bool {
  if (empty($documents) || !is_array($documents)) {
    return FALSE;
  }

  foreach ($documents as $document) {
    if (isset($document['Type']) && $document['Type'] === 'pÃ¶ytÃ¤kirja') {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Update diary number and diary number label field max lengths.
 */
function paatokset_ahjo_api_update_9001() {
  // Update case diary number max length.
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_diary_number MODIFY field_diary_number_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_diary_number MODIFY field_diary_number_value VARCHAR(255)");
  $storage_key = 'node.field_schema_data.field_diary_number';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_diary_number']['fields']['field_diary_number_value']['length'] = 255;
  $field_schema['node_revision__field_diary_number']['fields']['field_diary_number_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);

  // Update case diary label number max length.
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_diary_number_label MODIFY field_diary_number_label_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_diary_number_label MODIFY field_diary_number_label_value VARCHAR(255)");
  $storage_key = 'node.field_schema_data.field_diary_number_label';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_diary_number']['fields']['field_diary_number_label_value']['length'] = 255;
  $field_schema['node_revision__field_diary_number']['fields']['field_diary_number_label_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);
}

/**
 * Update diary number field max length in config.
 */
function paatokset_ahjo_api_update_9002() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_diary_number');
  $settings = $config->get('settings');
  $settings['max_length'] = 255;
  $config->set('settings', $settings);
  $config->save();
}

/**
 * Update diary number label field max length in config.
 */
function paatokset_ahjo_api_update_9003() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_diary_number_label');
  $settings = $config->get('settings');
  $settings['max_length'] = 255;
  $config->set('settings', $settings);
  $config->save();
}
