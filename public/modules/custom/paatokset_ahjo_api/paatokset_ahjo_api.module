<?php

/**
 * @file
 * Primary module hooks for Ahjo API module.
 */

declare(strict_types = 1);

use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function paatokset_ahjo_api_theme($existing, $type, $theme, $path) {
  return [
    'node__meeting' => [
      'render element' => 'elements',
      'template' => 'node--meeting',
      'path' => $path . '/templates/content',
      'base hook' => 'node',
    ],
    'block__frontpage_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--frontpage-calendar',
    ],
    'block__policymaker_listing' => [
      'base hook' => 'entity',
      'template' => 'block/block--policymaker-listing',
    ],
    'block__decision_tree' => [
      'base hook' => 'entity',
      'template' => 'block/block--decision-tree',
    ],
    'block__all_initiatives' => [
      'base hook' => 'entity',
      'template' => 'block/block--all-initiatives',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_api_theme_suggestions_block__policymaker_calendar(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'block__policymaker_calendar__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Preprocess frontpage calendar block.
 */
function paatokset_ahjo_api_preprocess_block__frontpage_calendar(array &$variables): void {
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');

  $params = [
    'from' => date("Y-m-d"),
    'limit' => 8,
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_calendar'];
  }

  $all_meetings = array_merge(...array_values($meetingService->query($params)));

  $variables['open_motions'] = t('Open motions');
  $variables['open_minutes'] = t('Open minutes');
  $variables['calendar_link'] = '/kokouskalenteri';
  $variables['open_meeting_calendar'] = t('Open meeting calendar');
  $variables['meetings'] = $all_meetings;
}

/**
 * Preprocess policymaker listing block.
 */
function paatokset_ahjo_api_preprocess_block__policymaker_listing(array &$variables): void {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_listing'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_listing'];
  }

  /**
   * Gets trustees for Kaupunginvaltuusto
   */

  $policymakerService = \Drupal::service('paatokset_policymakers');

  $policymakerService->setPolicymaker('02900');

  $valtuusto_nodes = $policymakerService->getComposition();

  $filter = 'Jäsen';
  $members = array_filter($valtuusto_nodes, function ($var) use ($filter) {
      return (str_contains($var['role'], $filter));
  });

  $filter = 'Varajäsen';
  $deputies = array_filter($valtuusto_nodes, function ($var) use ($filter) {
      return (str_contains($var['role'], $filter));
  });

  /** A function to sort arrays by last name */

  function cmp($a, $b) {
    return strcmp($a['last_name'], $b['last_name']);
  }

  usort($members, 'cmp');
  usort($deputies, 'cmp');

  foreach($members as $node) {
    $members_formatted[] = [
      'title' => $node['first_name'] . ' ' . $node['last_name'] . ', ' . t('Valtuutettu'),
      'link' => $node['url'],
      'organization_type' => 'trustee'
    ];
  };

  foreach($deputies as $node) {
    $deputies_formatted[] = [
      'title' => $node['first_name'] . ' ' . $node['last_name'] . ', ' . t('Varavaltuutettu'),
      'link' => $node['url'],
      'organization_type' => 'trustee'
    ];
  };

  $nids_policymakers = \Drupal::entityQuery('node')
    ->condition('type','policymaker')
    ->condition('status', 1)
    ->execute();
  $nodes_policymakers =  \Drupal\node\Entity\Node::loadMultiple($nids_policymakers);

  foreach ($nodes_policymakers as $node) {
    if (!$node instanceof NodeInterface) {
      continue;
    }

    if (!$node->hasField('field_ahjo_title') || !$node->hasField('field_dm_org_name') || $node->get('field_ahjo_title')->isEmpty()) {
      continue;
    }

    $options = ['absolute' => TRUE];
    $filtered[] = [
      'title' => $node->get('field_ahjo_title')->value,
      'link' => \Drupal\Core\Url::fromRoute('entity.node.canonical', ['node' => $node->id()], $options),
      'organization_type' => $node->get('field_organization_type')->value,
      'organization_name' => $node->get('field_dm_org_name')->value,
      'image' => $node->get('field_policymaker_image')->view('default'),
    ];
  }

  $accordion_contents = [
    'valtuusto' => ['Valtuusto', []],
    'hallitus' => ['Hallitus', []],
    'viranhaltija' => ['Viranhaltija', []],
    'trustee' => ['Luottamushenkilö', []],
    'lautakunta' => ['Lautakunta', []],
    'jaosto' => ['Jaosto', []],
    'toimi_neuvotteku' => ['Toimi-/Neuvottelukunta', []]
  ];

  foreach ($accordion_contents as $key => $value) {
    $filter = $value[0];

    $accordion_contents[$key][1] = array_filter($filtered, function ($var) use ($filter) {
      return ($var['organization_type'] == $filter);
    });
  };

  $hallituksen_jaosto_filter = 'hallitu';
  $hallituksen_jaosto = array_filter($accordion_contents['lautakunta'][1], function ($var) use ($hallituksen_jaosto_filter) {
      return (str_contains($var['title'], $hallituksen_jaosto_filter));
  });

  //Removes kaupunginhallituksen jaostot from array
  $lautakunta = array_filter($accordion_contents['lautakunta'][1], function ($var) use ($hallituksen_jaosto_filter) {
    return (!str_contains($var['title'], $hallituksen_jaosto_filter));
  });

  $variables['cards'] = [$accorion_contents['valtuusto'][1], $accorion_contents['hallitus'][1]];

  $variables['accordions'][] = [
    'Kaupinginhallituksen jaostot' => $hallituksen_jaosto,
    'Lautakunnat ja jaostot' => array_merge($lautakunta, $accorion_contents['jaosto'][1]),
    'Viranhaltijat' => $accorion_contents['viranhaltija'][1],
    'Luottamushenkilöpäättäjät' => $accorion_contents['trustee'][1],
    'Kaupunginvaltuuston jäsenet' => array_merge($members_formatted, $deputies_formatted),
  ];

  $variables['title'] = $variables['elements']['content']['label'];
}


/**
 * Preprocess all initiatives block.
 */
function paatokset_ahjo_api_preprocess_block__all_initiatives(array &$variables): void {
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */

  $policymakerService = \Drupal::service('paatokset_policymakers');
  $initiatives = $policymakerService->getAllInitiatives();

  $years = array(); 

  foreach ($initiatives as $initiative ) {
    $date = date_format(date_create($initiative['Date']),"Y");
    if (!in_array($date, $years)) {
      $years[] = $date; 
    }
  }

  foreach($years as $year ) {
    foreach ($initiatives as $initiative) {
      $date = date_format(date_create($initiative['Date']),"Y");
      if( $date == $year) {
        $all[] = $initiative;
        $by_year = [
          $year => $all,
        ];
      }
    }
  }

  $variables['initiatives'] = $by_year;
  $variables['years'] = $years;

   // Helpful $content variable for templates.
   foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__all_initiatives'])) {
    $variables['entity'] = $variables['elements']['#block__all_initiatives'];
  }
}

/**
 * Preprocess frontpage calendar block.
 */
function paatokset_ahjo_api_preprocess_block__decision_tree(array &$variables): void {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__decision_tree'])) {
    $variables['entity'] = $variables['elements']['#block__decision_tree'];
  }

  $variables['decision_process'] = [
    t('Asia tulee vireille'),
    t('Lauta- ja johtokunta'),
    t('Kaupunginhallitus'),
    t('Kaupuginvaltuusto'),
    t('Päätös pannaan täytäntöön')
  ];

  $variables['decisionmaker_process'] = [
    t('Asia tulee vireille'),
    t('Viranhaltija päättää'),
    t('Päätös pannaan täytäntöön'),
  ];

  $variables['info_1'] = t('Tavallisin päätöksen tekemisen prosessi');
  $variables['info_2'] = t('Viranhaltija tekee päätöksen');
}

/**
 * Lookup case nodes by case ID.
 *
 * @param string $case_id
 *   Case ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_case_nid(string $case_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'case')
    ->condition('field_diary_number', $case_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup decision nodes by Native ID.
 *
 * @param string $native_id
 *   Native ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_decision_nid(string $native_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'decision')
    ->condition('field_decision_native_id', $native_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup trustee nodes by Agent ID.
 *
 * @param string $agent_id
 *   Agent ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_trustee_nid(string $agent_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'trustee')
    ->condition('field_trustee_id', $agent_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup meeting nodes by meeting ID.
 *
 * @param string $meeting_id
 *   Meeting ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_meeting_nid(string $meeting_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'meeting')
    ->condition('field_meeting_id', $meeting_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup policymaker nodes by ID.
 *
 * @param string $decisionmaker_id
 *   Policymaker ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_policymaker_nid(string $decisionmaker_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'policymaker')
    ->condition('field_policymaker_id', $decisionmaker_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Truncate text value.
 *
 * @param string $value
 *   The value to work with.
 * @param int $length
 *   Max length of string.
 *
 * @return string|null
 *   Truncated value.
 */
function _paatokset_ahjo_api_truncate_value(string $value, int $length = 255): string {
  return Unicode::truncate($value, $length, TRUE, TRUE);
}

/**
 * Callback to check if array or text value is empty.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is not empty, FALSE if it is.
 */
function _paatokset_ahjo_api_true_if_not_empty($value): bool {
  return !empty($value);
}

/**
 * Convert string to boolean.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is "true", FALSE if it is not.
 */
function _paatokset_ahjo_api_string_to_boolean($value): bool {
  if (strtolower($value) === 'true') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Callback to check if meeting minutes have been published.
 *
 * @param mixed $documents
 *   An array of meeting documents.
 *
 * @return bool
 *   TRUE is thee minutes are found, FALSE if they are not.
 */
function _paatokset_ahjo_api_meeting_minutes_published($documents): bool {
  if (empty($documents) || !is_array($documents)) {
    return FALSE;
  }

  foreach ($documents as $document) {
    if (isset($document['Type']) && $document['Type'] === 'pöytäkirja') {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Get first name.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string
 *   First name from formatted name string.
 */
function _paatokset_ahjo_api_get_first_name($value): string {
  $bits = explode(', ', (string) $value);
  return (string) array_shift(array_slice($bits, -1));
}

/**
 * Get last name.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string
 *   First name from formatted name string.
 */
function _paatokset_ahjo_api_get_last_name($value): string {
  $bits = explode(', ', (string) $value);
  return (string) array_shift(array_slice($bits, 0, 1));
}

/**
 * Get existing value, if node already exists.
 */
function _paatokset_ahjo_api_get_existing_value(array $values) {
  $nid = $values[0];
  $field = $values[1];
  $default = $values[2];

  if (!$nid) {
    return $default;
  }

  $node = Node::load($nid);
  if ($node instanceof NodeInterface && $node->hasField($field) && !$node->get($field)->isEmpty()) {
    return $node->get($field)->value;
  }

  return $default;
}

/**
 * Get top category name from classifiction code.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string|null
 *   Top category name based on the first part of the code, if found.
 */
function _paatokset_ahjo_api_get_top_category($value): ?string {
  if (!is_string($value)) {
    return NULL;
  }

  $bits = explode(', ', (string) $value);
  $code = array_shift($bits);

  switch ($code) {
    case "00":
      return "Hallintoasiat";
      break;

    case "01":
      return "Henkilöstöasiat";
      break;

    case "02":
      return "Talousasiat, verotus ja omaisuuden hallinta";
      break;

    case "03":
      return "Lainsäädäntö ja lainsäädännön soveltaminen";
      break;

    case "04":
      return "Kansainvälinen toiminta ja maahanmuuttopolitiikka";
      break;

    case "05":
      return "Sosiaalitoimi";
      break;

    case "06":
      return "Terveydenhuolto";
      break;

    case "07":
      return "Tiedon hallinta";
      break;

    case "08":
      return "Liikenne";
      break;

    case "09":
      return "Turvallisuus ja yleinen järjestys";
      break;

    case "10":
      return "Maankäyttö, rakentaminen ja asuminen";
      break;

    case "11":
      return "Ympäristöasia";
      break;

    case "12":
      return "Opetus- ja sivistystoimi";
      break;

    case "13":
      return "Tutkimus- ja kehittämistoiminta";
      break;

    case "14":
      return "Elinkeino- ja työvoimapalvelut";
      break;
  }

  return NULL;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function paatokset_ahjo_api_entity_extra_field_info(): array {
  $extra['node']['meeting']['display']['meeting_link'] = [
    'label' => t('Meeting minutes link.'),
    'description' => t('Meeting minutes link under policymaker page.'),
    'weight' => 0,
    'visible' => FALSE,
  ];

  return $extra;
}


/**
 * Implements hook_ENTITY_TYPE_view().
 */
function paatokset_ahjo_api_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->id() === NULL) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $entity */
  if ($display->getComponent('meeting_link')) {
    /** @var \Drupal\paatokset_ahjo_api\Service\MeetingService $meetingService */
    $meetingService = \Drupal::service('paatokset_ahjo_meetings');
    $link = $meetingService->getMeetingLink($entity);
    if ($link instanceof Link) {
      $build['meeting_link'] = $link->toRenderable();
    }
  }
}

/**
 * Update diary number and diary number label field max lengths.
 */
function paatokset_ahjo_api_update_9001() {
  // Update case diary number max length.
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_diary_number MODIFY field_diary_number_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_diary_number MODIFY field_diary_number_value VARCHAR(255)");
  $storage_key = 'node.field_schema_data.field_diary_number';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_diary_number']['fields']['field_diary_number_value']['length'] = 255;
  $field_schema['node_revision__field_diary_number']['fields']['field_diary_number_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);

  // Update case diary label number max length.
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_diary_number_label MODIFY field_diary_number_label_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_diary_number_label MODIFY field_diary_number_label_value VARCHAR(255)");
  $storage_key = 'node.field_schema_data.field_diary_number_label';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_diary_number']['fields']['field_diary_number_label_value']['length'] = 255;
  $field_schema['node_revision__field_diary_number']['fields']['field_diary_number_label_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);
}

/**
 * Update diary number field max length in config.
 */
function paatokset_ahjo_api_update_9002() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_diary_number');
  $settings = $config->get('settings');
  $settings['max_length'] = 255;
  $config->set('settings', $settings);
  $config->save();
}

/**
 * Update diary number label field max length in config.
 */
function paatokset_ahjo_api_update_9003() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_diary_number_label');
  $settings = $config->get('settings');
  $settings['max_length'] = 255;
  $config->set('settings', $settings);
  $config->save();
}
