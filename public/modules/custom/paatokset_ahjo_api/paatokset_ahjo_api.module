<?php

/**
 * @file
 * Primary module hooks for Ahjo API module.
 */

declare(strict_types = 1);

use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function paatokset_ahjo_api_theme($existing, $type, $theme, $path) {
  return [
    'node__meeting' => [
      'render element' => 'elements',
      'template' => 'node--meeting',
      'path' => $path . '/templates/content',
      'base hook' => 'node',
    ],
    'block__frontpage_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--frontpage-calendar',
    ],
    'block__policymaker_listing' => [
      'base hook' => 'entity',
      'template' => 'block/block--policymaker-listing',
    ],
    'block__decision_tree' => [
      'base hook' => 'entity',
      'template' => 'block/block--decision-tree',
    ],
    'block__all_initiatives' => [
      'base hook' => 'entity',
      'template' => 'block/block--all-initiatives',
    ],
    'block__all_articles' => [
      'base hook' => 'entity',
      'template' => 'block/block--all-articles',
    ],
    'block__meetings_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--meetings-calendar',
    ],
    'block__dictionary_banner' => [
      'base hook' => 'entity',
      'template' => 'block/block--dictionary-banner'
    ]
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_api_theme_suggestions_block__policymaker_calendar(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'block__policymaker_calendar__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Preprocess frontpage calendar block.
 */
function paatokset_ahjo_api_preprocess_block__frontpage_calendar(array &$variables): void {
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');
  $policymakerService = \Drupal::service('paatokset_policymakers');
  $currentLanguage = \Drupal::languageManager()->getCurrentLanguage()->getId();

  $params = [
    'from' => date("Y-m-d"),
    'not_cancelled' => TRUE,
    'limit' => 8,
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_calendar'];
  }

  $all_meetings = array_merge(...array_values($meetingService->query($params)));

  $meetings_with_color = [];
  foreach($all_meetings as $meeting) {
    $meeting['organization_color'] = $policymakerService->getPolicymakerClassById($meeting['policymaker']);
    $meetings_with_color[] = $meeting;
  }

  $variables['open_motions'] = t('Open motions');
  $variables['open_decisions'] = t('Open decisions');
  $variables['open_minutes'] = t('Open minutes');
  if ($currentLanguage === 'fi') {
    $variables['calendar_link'] = '/fi/kokouskalenteri';
  }
  elseif ($currentLanguage === 'sv') {
    $variables['calendar_link'] = '/sv/moteskalender';
  }
  elseif ($currentLanguage === 'en') {
    $variables['calendar_link'] = '/en/meetings-calendar';
  }

  $defaults_config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $calendar_notice = $defaults_config->get('calendar_notice_text');
  if ($calendar_notice !== NULL) {
    $variables['calendar_notice'] = $calendar_notice;
  }

  $variables['open_meeting_calendar'] = t('Open meeting calendar');
  $variables['meetings'] = $meetings_with_color;
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: block--meetings-calendar.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_block__meetings_calendar(array &$variables) {
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');

  $variables['#attached']['library'][] = 'paatokset_ahjo_api/meetings_calendar';

  $params = [
    'from' => date("Y-m-d"),
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__meetings_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__meetings_calendar'];
  }

  $all_meetings = array_merge(...array_values($meetingService->query($params)));

  if (count($all_meetings) > 8) {
    $all_meetings = array_slice($all_meetings, 0, 8);
  }

  $variables['open_motions'] = t('Open motions');
  $variables['open_minutes'] = t('Open minutes');
  $variables['open_meeting_calendar'] = t('Open meeting calendar');
  $variables['meetings'] = $all_meetings;
}

/**
 * Preprocess policymaker listing block.
 */
function paatokset_ahjo_api_preprocess_block__policymaker_listing(array &$variables): void {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_listing'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_listing'];
  }

  $variables['title'] = $variables['elements']['content']['label'];

  $variables['cards'] = [
    '#lazy_builder' => [
      'policymakers_lazy_builder:policymakersCards', [],
    ],
    '#create_placeholder' => TRUE,
  ];

  $variables['accordions'] = [
    '#lazy_builder' => [
      'policymakers_lazy_builder:policymakersAccordions', [],
    ],
    '#create_placeholder' => TRUE,
  ];
}

/**
 * Get english version of finnish sector name.
 *
 * @param string $sector
 *   Sector name.
 * @return string
 *   English translation of sector, or original value.
 */
function _paatokset_ahjo_api_get_sector_english_translation(string $sector): string {
  switch ($sector) {
    case 'Kasvatuksen ja koulutuksen toimiala':
      $value = 'Education Division';
      break;
    case 'KaupunkiympÃ¤ristÃ¶n toimiala':
      $value = 'Urban Environment Division';
      break;
    case 'Keskushallinto':
      $value = 'Central Administration';
      break;
    case 'Kulttuurin ja vapaa-ajan toimiala':
      $value = 'Culture and Leisure Division';
      break;
    case 'Sosiaali- ja terveystoimiala':
      $value = 'Social Services and Health Care Division';
      break;
    default:
      $value = $sector;
      break;
  }

  return $value;
}

/**
 * Preprocess all initiatives block.
 */
function paatokset_ahjo_api_preprocess_block__all_initiatives(array &$variables): void {
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');
  $initiatives = $policymakerService->getAllInitiatives();
  $years = array();

  usort($initiatives, function ($item1, $item2) {
    return strtotime($item2['Date']) - strtotime($item1['Date']);
  });

  foreach ($initiatives as $initiative ) {
    $date = date_format(date_create($initiative['Date']),"Y");
    if (!in_array($date, $years)) {
      $years[] = $date;
    }
  }

  $by_year = array();

  foreach($years as $year) {
    $filtered = array_filter($initiatives, function ($var) use ($year) {
        return (str_contains(date_format(date_create($var['Date']),"Y"), $year));
    });
    $by_year[$year] = $filtered;
  };

  $variables['initiatives'] = $by_year;
  $variables['years'] = $years;

   // Helpful $content variable for templates.
   foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__all_initiatives'])) {
    $variables['entity'] = $variables['elements']['#block__all_initiatives'];
  }
}

/**
 * Preprocess all initiatives block.
 */
function paatokset_ahjo_api_preprocess_block__all_articles(array &$variables): void {
  $currentLanguage = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    ->condition('status', 1)
    ->sort('published_at', 'DESC')
    ->execute();

  $nodes = Node::loadMultiple($nids);

  $years = [];
  $by_year = [];
  foreach ($nodes as $node) {
    if ($node->hasTranslation($currentLanguage)) {
      $node = $node->getTranslation($currentLanguage);
    }

    if ($node->hasField('published_at') && !$node->get('published_at')->isEmpty()) {
      $timestamp = (int) $node->get('published_at')->value;
    }
    else {
      $timestamp = (int) $node->get('created')->value;
    }
    $year = date('Y', $timestamp);

    if (!in_array($year, $years)) {
      $by_year[$year] = [];
      $years[] = $year;
    }

    $by_year[$year][] = [
      'url' => $node->toUrl(),
      'date' => $timestamp,
      'title' => $node->title->value,
    ];
  }

  $variables['years'] = $years;
  $variables['articles'] = $by_year;

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  if (isset($variables['elements']['#block__all_articles'])) {
    $variables['entity'] = $variables['elements']['#block__all_articles'];
  }
}

/**
 * Preprocess decision tree page.
 */
function paatokset_ahjo_api_preprocess_block__decision_tree(array &$variables): void {
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');

  $defaults_config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $committees_url = $defaults_config->get('committees_boards_url');
  if (!$committees_url) {
    $committees_url = '/fi/paattajat';
  }
  $office_holders_url = $defaults_config->get('office_holders_url');
  if (!$office_holders_url) {
    $office_holders_url = '/fi/paattajat';
  }


  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__decision_tree'])) {
    $variables['entity'] = $variables['elements']['#block__decision_tree'];
  }

  $municipality_url = NULL;
  if ($policymakerService->getPolicymaker('00400')) {
    $municipality_url = $policymakerService->getPolicymaker('00400')->toUrl()->toString();
  }

  $council_url = NULL;
  if ($policymakerService->getPolicymaker('02900')) {
    $council_url = $policymakerService->getPolicymaker('02900')->toUrl()->toString();
  }

  $variables['decision_process'] = [
    '0' => [
      'title' => t('Initiation'),
    ],
    '1' => [
      'title' => t('Committees and Boards'),
      'link' => $committees_url,
    ],
    '2' => [
      'title' => t('City board'),
      'link' => $municipality_url,
    ],
    '3' => [
      'title' => t('City council'),
      'link' => $council_url,
    ],
    '4' => [
      'title' => t('Implementation'),
      ]
  ];

  $variables['decisionmaker_process'] = [
    '0' => [
      'title' => t('Initiation'),
    ],
    '1' => [
      'title' => t('Office holder decision'),
      'link' => $office_holders_url,
    ],
    '2' => [
      'title' => t('Implementation'),
    ]
  ];

  $variables['info_1'] = t('Standard decision-making process');
  $variables['info_2'] = t('Standard process for office holder decisions');
}

/**
 * Preprocess Case nodes.
 */
function paatokset_ahjo_api_preprocess_node__case__full(&$variables): void {
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  $caseService->setEntitiesByPath();
  $variables['decision_pdf'] = $caseService->getDecisionPdf();
  $variables['selectedDecision'] = $caseService->getSelectedDecision();
  $variables['policymaker_is_active'] = $caseService->decisionPmIsActive();
  $variables['decision_section'] = $caseService->getFormattedDecisionSection();
  $variables['decision_org_name'] = $caseService->getDecisionOrgName();
  $variables['selected_label'] = $caseService->getDecisionLabel();
  $variables['selected_class'] = $caseService->getDecisionClass();
  $variables['attachments'] = $caseService->getAttachments();
  $variables['all_decisions'] = $caseService->getDecisionsList();
  $variables['next_decision'] = $caseService->getNextDecision();
  $variables['previous_decision'] = $caseService->getPrevDecision();
  $variables['decision_content'] = $caseService->parseContent();
  $variables['all_decisions_link'] = $caseService->getDecisionMeetingLink();
  $variables['other_decisions_link'] = $caseService->getPolicymakerDecisionsLink();
  $variables['vote_results'] = $caseService->getVotingResults();

  $variables['#cache'] = [
    'tags' => ['node_list:decision'],
  ];
}

/**
 * Preprocess Decision nodes.
 */
function paatokset_ahjo_api_preprocess_node__decision__full(&$variables): void {
  $node = $variables['node'];
  if (!$node instanceof NodeInterface) {
    return;
  }

  $case_id = $node->get('field_diary_number')->value;
  $decision_id = $node->get('field_decision_native_id')->value;

  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  $caseService->setEntitiesById($case_id, $decision_id);

  $variables['main_heading'] = $caseService->getDecisionHeading();
  $variables['decision_pdf'] = $caseService->getDecisionPdf();
  $variables['selectedDecision'] = $caseService->getSelectedDecision();
  $variables['policymaker_is_active'] = $caseService->decisionPmIsActive();
  $variables['decision_section'] = $caseService->getFormattedDecisionSection();
  $variables['decision_org_name'] = $caseService->getDecisionOrgName();
  $variables['selected_label'] = $caseService->getDecisionLabel();
  $variables['selected_class'] = $caseService->getDecisionClass();
  $variables['attachments'] = $caseService->getAttachments();
  $variables['all_decisions'] = $caseService->getDecisionsList();
  $variables['next_decision'] = $caseService->getNextDecision();
  $variables['previous_decision'] = $caseService->getPrevDecision();
  $variables['decision_content'] = $caseService->parseContent();
  $variables['all_decisions_link'] = $caseService->getDecisionMeetingLink();
  $variables['other_decisions_link'] = $caseService->getPolicymakerDecisionsLink();
  $variables['vote_results'] = $caseService->getVotingResults();

  $variables['#cache'] = [
    'tags' => [
      'node_list:decision',
      'node_list:case',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paatokset_ahjo_api_preprocess_block__dictionary_banner(&$variables) {
  $config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $title = $config->get('banner_heading');
  $text = $config->get('banner_text.value');
  $label = $config->get('banner_label');
  $url = $config->get('banner_url');

  $variables['banner_title'] = $title;
  $variables['banner_desc'] = $text;
  $variables['banner_link'] = [
    'url' => $url,
    'label' => $label,
    'classes' => 'banner__button hds-button hds-button--primary hdbt-icon hdbt-icon--link-external',
    'target_new' => TRUE,
  ];
}

/**
 * Lookup case nodes by case ID.
 *
 * @param string $case_id
 *   Case ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_case_nid(string $case_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'case')
    ->condition('field_diary_number', $case_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup decision nodes by Native ID, Meeting ID, Case ID and Title.
 *
 * @param array $values
 *   Native ID, Meeting ID, Case ID, Title.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_decision_nid(array $values): ?string {
  // First attempt to find node with native ID.
  $native_id = $values[0];
  if (!empty($values[1])) {
    $case_id = $values[1];
  }
  else {
    $case_id = NULL;
  }
  if (!empty($values[2])) {
    $meeting_id = $values[2];
  }
  else {
    $meeting_id = NULL;
  }
  if (!empty($values[3])) {
    $title = $values[3];
  }
  else {
    $title = NULL;
  }

  $query = Drupal::entityQuery('node')
    ->condition('type', 'decision')
    ->condition('field_decision_native_id', $native_id)
    ->range(0, 1)
    ->latestRevision();

  $ids = $query->execute();
  if (!empty($ids)) {
    return reset($ids);
  }

  if (!$meeting_id) {
    return NULL;
  }

  if (!$case_id && !$title) {
    return NULL;
  }

  $query = Drupal::entityQuery('node')
    ->condition('type', 'decision')
    ->condition('field_meeting_id', $meeting_id)
    ->condition('field_is_decision', 0)
    ->condition('status', 1)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();

  if ($case_id) {
    $query->condition('field_diary_number', $case_id);
  }
  else {
    $query->condition('field_full_title', $title);
  }

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Lookup trustee nodes by Agent ID.
 *
 * @param string $agent_id
 *   Agent ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_trustee_nid(string $agent_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'trustee')
    ->condition('field_trustee_id', $agent_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup meeting nodes by meeting ID.
 *
 * @param string $meeting_id
 *   Meeting ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_meeting_nid(string $meeting_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'meeting')
    ->condition('field_meeting_id', $meeting_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup policymaker nodes by ID.
 *
 * @param string $decisionmaker_id
 *   Policymaker ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_policymaker_nid(string $decisionmaker_id): ?string {
  $query = Drupal::entityQuery('node')
    ->condition('type', 'policymaker')
    ->condition('field_policymaker_id', $decisionmaker_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Truncate text value.
 *
 * @param string $value
 *   The value to work with.
 * @param int $length
 *   Max length of string.
 *
 * @return string|null
 *   Truncated value.
 */
function _paatokset_ahjo_api_truncate_value(string $value, int $length = 255): string {
  return Unicode::truncate($value, $length, TRUE, TRUE);
}

/**
 * Callback to check if array or text value is empty.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is not empty, FALSE if it is.
 */
function _paatokset_ahjo_api_true_if_not_empty($value): bool {
  return !empty($value);
}

/**
 * Convert string to boolean.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is "true", FALSE if it is not.
 */
function _paatokset_ahjo_api_string_to_boolean($value): bool {
  if (strtolower($value) === 'true') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Callback to check if meeting minutes have been published.
 *
 * @param mixed $documents
 *   An array of meeting documents.
 *
 * @return bool
 *   TRUE is thee minutes are found, FALSE if they are not.
 */
function _paatokset_ahjo_api_meeting_minutes_published($documents): bool {
  if (empty($documents) || !is_array($documents)) {
    return FALSE;
  }

  foreach ($documents as $document) {
    if (isset($document['Type']) && $document['Type'] === 'pÃ¶ytÃ¤kirja') {
      return TRUE;
    }
  }

  return FALSE;
}


/**
 * Get first name.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string
 *   First name from formatted name string.
 */
function _paatokset_ahjo_api_get_first_name($value): string {
  $bits = explode(', ', (string) $value);
  $bit = array_slice($bits, -1);
  $bit = array_shift($bit);
  return (string) $bit;
}

/**
 * Get last name.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string
 *   First name from formatted name string.
 */
function _paatokset_ahjo_api_get_last_name($value): string {
  $bits = explode(', ', (string) $value);
  $bit = array_slice($bits, 0, 1);
  $bit = array_shift($bit);
  return (string) $bit;
}

/**
 * Get existing value, if node already exists.
 */
function _paatokset_ahjo_api_get_existing_value(array $values) {
  $nid = $values[0];
  $field = $values[1];
  $default = $values[2];
  $langcode = $values[3];

  if (!$nid) {
    return $default;
  }

  $node = Node::load($nid);
  if ($node->hasTranslation($langcode)) {
    $node = $node->getTranslation($langcode);
  }
  else {
    return $default;
  }
  if ($node instanceof NodeInterface && $node->hasField($field) && !$node->get($field)->isEmpty()) {
    return $node->get($field)->value;
  }

  return $default;
}

/**
 * Get top category name from classifiction code.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string|null
 *   Top category name based on the first part of the code, if found.
 */
function _paatokset_ahjo_api_get_top_category($value): ?string {
  if (!is_string($value)) {
    NULL;
  }
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  return $caseService->getTopCategoryFromClassificationCode($value);
}

/**
 * Parse decision content from raw HTML.
 *
 * @param mixed $value
 * @return string|null
 */
function _paatokset_ahjo_api_parse_decision_content($value): string|null {
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  return $caseService->parseContentSectionsFromHtml((string) $value);
}

/**
 * Parse decision motion from raw HTML.
 *
 * @param mixed $value
 *
 * @return string|null
 */
function _paatokset_ahjo_api_parse_decision_motion($value): string|null {
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  return $caseService->parseContentSectionsFromHtml((string) $value);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function paatokset_ahjo_api_entity_extra_field_info(): array {
  $extra['node']['meeting']['display']['meeting_link'] = [
    'label' => t('Meeting minutes link.'),
    'description' => t('Meeting minutes link under policymaker page.'),
    'weight' => 0,
    'visible' => FALSE,
  ];

  return $extra;
}


/**
 * Implements hook_ENTITY_TYPE_view().
 */
function paatokset_ahjo_api_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->id() === NULL) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $entity */
  if ($display->getComponent('meeting_link')) {
    /** @var \Drupal\paatokset_ahjo_api\Service\MeetingService $meetingService */
    $meetingService = \Drupal::service('paatokset_ahjo_meetings');
    $link = $meetingService->getMeetingLink($entity);
    if ($link instanceof Link) {
      $build['meeting_link'] = $link->toRenderable();
    }
  }
}

/**
 * Update diary number and diary number label field max lengths.
 */
function paatokset_ahjo_api_update_9001() {
  // Update case diary number max length.
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_diary_number MODIFY field_diary_number_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_diary_number MODIFY field_diary_number_value VARCHAR(255)");
  $storage_key = 'node.field_schema_data.field_diary_number';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_diary_number']['fields']['field_diary_number_value']['length'] = 255;
  $field_schema['node_revision__field_diary_number']['fields']['field_diary_number_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);

  // Update case diary label number max length.
  $database = \Drupal::database();
  $database->query("ALTER TABLE node__field_diary_number_label MODIFY field_diary_number_label_value VARCHAR(255)");
  $database->query("ALTER TABLE node_revision__field_diary_number_label MODIFY field_diary_number_label_value VARCHAR(255)");
  $storage_key = 'node.field_schema_data.field_diary_number_label';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['node__field_diary_number']['fields']['field_diary_number_label_value']['length'] = 255;
  $field_schema['node_revision__field_diary_number']['fields']['field_diary_number_label_value']['length'] = 255;
  $storage_schema->set($storage_key, $field_schema);
}

/**
 * Update diary number field max length in config.
 */
function paatokset_ahjo_api_update_9002() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_diary_number');
  $settings = $config->get('settings');
  $settings['max_length'] = 255;
  $config->set('settings', $settings);
  $config->save();
}

/**
 * Update diary number label field max length in config.
 */
function paatokset_ahjo_api_update_9003() {
  $config = \Drupal::configFactory()->getEditable('field.storage.node.field_diary_number_label');
  $settings = $config->get('settings');
  $settings['max_length'] = 255;
  $config->set('settings', $settings);
  $config->save();
}
