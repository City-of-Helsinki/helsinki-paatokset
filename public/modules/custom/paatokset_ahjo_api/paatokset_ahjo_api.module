<?php

/**
 * @file
 * Primary module hooks for Ahjo API module.
 */

declare(strict_types=1);

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\paatokset_ahjo_api\AhjoAdmin\AdminHooks;
use Drupal\paatokset_ahjo_api\Entity\CaseBundle;
use Drupal\paatokset_ahjo_api\Entity\Decision;
use Drupal\paatokset_ahjo_api\Entity\Meeting;
use Drupal\paatokset_ahjo_api\Entity\Policymaker;
use Drupal\paatokset_ahjo_api\Entity\Trustee;

require_once __DIR__ . '/includes/paatokset_lang_switcher.php';

/**
 * Implements hook_entity_bundle_info_alter().
 */
function paatokset_ahjo_api_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['trustee'])) {
    $bundles['node']['trustee']['class'] = Trustee::class;
  }
  if (isset($bundles['node']['decision'])) {
    $bundles['node']['decision']['class'] = Decision::class;
  }
  if (isset($bundles['node']['policymaker'])) {
    $bundles['node']['policymaker']['class'] = Policymaker::class;
  }
  if (isset($bundles['node']['case'])) {
    $bundles['node']['case']['class'] = CaseBundle::class;
  }
  if (isset($bundles['node']['meeting'])) {
    $bundles['node']['meeting']['class'] = Meeting::class;
  }
}

/**
 * Implements hook_platform_config_grant_permissions().
 */
function paatokset_ahjo_api_grant_permissions() : array {
  return [
    'admin' => 'access ahjo proxy',
  ];
}

/**
 * Implements hook_theme().
 */
function paatokset_ahjo_api_theme($existing, $type, $theme, $path): array {
  return [
    'ahjo_initiative' => [
      'render element' => 'elements',
      'template' => 'ahjo-initiative',
    ],
    'organization_path' => [
      'variables' => [
        'organizations' => [],
      ],
      'path' => $path . '/templates/component',
    ],
    'decision_content' => [
      'variables' => [
        'selectedDecision' => NULL,
        'policymaker_is_active' => NULL,
        'selected_class' => NULL,
        'decision_org_name' => NULL,
        'decision_content' => NULL,
        'decision_section' => NULL,
        'vote_results' => NULL,
      ],
    ],
    'case_attachments' => [
      'variables' => [
        'attachments' => NULL,
      ],
    ],
    'decision_navigation' => [
      'variables' => [
        'next_decision' => NULL,
        'previous_decision' => NULL,
      ],
    ],
    'node__meeting' => [
      'render element' => 'elements',
      'template' => 'node--meeting',
      'path' => $path . '/templates/content',
      'base hook' => 'node',
    ],
    'block__frontpage_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--frontpage-calendar',
    ],
    'block__policymaker_listing' => [
      'base hook' => 'entity',
      'template' => 'block/block--policymaker-listing',
    ],
    'block__decision_tree' => [
      'base hook' => 'entity',
      'template' => 'block/block--decision-tree',
    ],
    'block__meetings_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--meetings-calendar',
    ],
    'block__dictionary_banner' => [
      'base hook' => 'entity',
      'template' => 'block/block--dictionary-banner',
    ],
    'policymaker_side_navigation' => [
      'variables' => [
        'items' => [],
        'menu_attributes' => NULL,
        'menu_link_parent' => NULL,
      ],
    ],
    'policymaker_side_navigation_mobile' => [
      'variables' => [
        'items' => [],
        'current_option' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function paatokset_ahjo_api_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'landing_page' => [
        'field_content' => [
          'image' => 18,
          'accordion' => 19,
          'meetings_calendar' => 20,
          'pdf_listing' => 21,
          'custom_content_links' => 22,
          'text' => 23,
        ],
      ],
      'page' => [
        'field_content' => [
          'pdf_listing' => 18,
        ],
        'field_lower_content' => [
          'pdf_listing' => 18,
          'custom_content_links' => 19,
          'liftup_with_image' => 20,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_platform_config_grant_permissions().
 */
function paatokset_ahjo_api_platform_config_grant_permissions() : array {
  return [
    'admin' => [
      'administer paatokset',
      'access ahjo openid token',
      'administer ahjo openid',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function paatokset_ahjo_api_node_insert(EntityInterface $entity) {
  if ($entity->bundle() === 'decision') {
    _paatokset_ahjo_api_invalidate_decision_cache_tags($entity);
  }
  elseif ($entity->bundle() === 'meeting') {
    _paatokset_ahjo_api_invalidate_meeting_cache_tags($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function paatokset_ahjo_api_node_update(EntityInterface $entity) {
  if ($entity->bundle() === 'decision') {
    _paatokset_ahjo_api_invalidate_decision_cache_tags($entity);
  }
  elseif ($entity->bundle() === 'meeting') {
    _paatokset_ahjo_api_invalidate_meeting_cache_tags($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function paatokset_ahjo_api_node_delete(EntityInterface $entity) {
  if ($entity->bundle() === 'decision') {
    _paatokset_ahjo_api_invalidate_decision_cache_tags($entity);
  }
  elseif ($entity->bundle() === 'meeting') {
    _paatokset_ahjo_api_invalidate_meeting_cache_tags($entity);
  }
}

/**
 * Invalidates custom cache tags for decisions.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   Entity to base cache invalidations on.
 */
function _paatokset_ahjo_api_invalidate_decision_cache_tags(FieldableEntityInterface $entity): void {
  $meeting_id = NULL;
  if ($entity->hasField('field_meeting_id') && !$entity->get('field_meeting_id')->isEmpty()) {
    $meeting_id = $entity->get('field_meeting_id')->value;
  }

  $policymaker_id = NULL;
  if ($entity->hasField('field_policymaker_id') && !$entity->get('field_policymaker_id')->isEmpty()) {
    $policymaker_id = $entity->get('field_policymaker_id')->value;
  }

  $tags = [];
  if ($meeting_id) {
    $tags[] = 'meeting:' . $meeting_id;
  }
  if ($policymaker_id) {
    $tags[] = 'decision_pm:' . $policymaker_id;
  }

  if (!empty($tags)) {
    /** @var Drupal\Core\Cache\CacheTagsInvalidator $cache_invalidator */
    $cache_invalidator = \Drupal::service('cache_tags.invalidator');
    $cache_invalidator->invalidateTags($tags);
  }
}

/**
 * Invalidates custom cache tags for meetings.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   Entity to base cache invalidations on.
 */
function _paatokset_ahjo_api_invalidate_meeting_cache_tags(FieldableEntityInterface $entity): void {
  $policymaker_id = NULL;
  if ($entity->hasField('field_meeting_dm_id') && !$entity->get('field_meeting_dm_id')->isEmpty()) {
    $policymaker_id = $entity->get('field_meeting_dm_id')->value;
  }

  $tags = [];
  if ($policymaker_id) {
    $tags[] = 'meeting_pm:' . $policymaker_id;
  }

  if (!empty($tags)) {
    /** @var Drupal\Core\Cache\CacheTagsInvalidator $cache_invalidator */
    $cache_invalidator = \Drupal::service('cache_tags.invalidator');
    $cache_invalidator->invalidateTags($tags);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paatokset_ahjo_api_theme_suggestions_block__policymaker_calendar(array $variables) {
  $suggestions = [];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'block__policymaker_calendar__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Preprocess frontpage calendar block.
 */
function paatokset_ahjo_api_preprocess_block__frontpage_calendar(array &$variables): void {
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');
  $currentLanguage = \Drupal::languageManager()->getCurrentLanguage()->getId();

  $params = [
    'from' => date("Y-m-d"),
    'not_cancelled' => TRUE,
    'limit' => 8,
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_calendar'];
  }

  $all_meetings = array_merge(...array_values($meetingService->elasticQuery($params)));

  $meetings_with_color = [];
  foreach ($all_meetings as $meeting) {
    $policymaker = $policymakerService->getPolicyMaker($meeting['policymaker']);
    $meeting['organization_color'] = Html::cleanCssIdentifier($policymaker?->getPolicymakerClass() ?? 'color-sumu');
    $meetings_with_color[] = $meeting;
  }

  $variables['open_motions'] = t('Open agenda');
  $variables['open_decisions'] = t('Open decision announcement');
  $variables['open_minutes'] = t('Open minutes');
  if ($currentLanguage === 'fi') {
    $variables['calendar_link'] = '/fi/kokouskalenteri';
  }
  elseif ($currentLanguage === 'sv') {
    $variables['calendar_link'] = '/sv/moteskalender';
  }
  elseif ($currentLanguage === 'en') {
    $variables['calendar_link'] = '/en/meetings-calendar';
  }

  $defaults_config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $calendar_notice = $defaults_config->get('calendar_notice_text');
  if ($calendar_notice !== NULL) {
    $variables['calendar_notice'] = $calendar_notice;
  }

  $variables['open_meeting_calendar'] = t('Open meeting calendar');
  $variables['meetings'] = $meetings_with_color;
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: block--meetings-calendar.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_block__meetings_calendar(array &$variables) {
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');

  $variables['#attached']['library'][] = 'paatokset_ahjo_api/meetings_calendar';

  $params = [
    'from' => date("Y-m-d"),
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__meetings_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__meetings_calendar'];
  }

  $all_meetings = array_merge(...array_values($meetingService->elasticQuery($params)));

  if (count($all_meetings) > 8) {
    $all_meetings = array_slice($all_meetings, 0, 8);
  }

  $defaults_config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $meeting_calendar_description = $defaults_config->get('meeting_calendar_description');
  if ($meeting_calendar_description !== NULL) {
    $variables['meeting_calendar_description'] = _paatokset_ahjo_api_render_default_text($meeting_calendar_description);
  }

  $variables['open_motions'] = t('Open agenda');
  $variables['open_minutes'] = t('Open minutes');
  $variables['open_meeting_calendar'] = t('Open meeting calendar');
  $variables['meetings'] = $all_meetings;
}

/**
 * Preprocess policymaker listing block.
 */
function paatokset_ahjo_api_preprocess_block__policymaker_listing(array &$variables): void {
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_listing'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_listing'];
  }

  $variables['title'] = $variables['elements']['content']['label'];

  $variables['cards'] = [
    '#lazy_builder' => [
      'policymakers_lazy_builder:policymakersCards', [],
    ],
    '#create_placeholder' => TRUE,
  ];

  $variables['accordions'] = [
    '#lazy_builder' => [
      'policymakers_lazy_builder:policymakersAccordions', [],
    ],
    '#create_placeholder' => TRUE,
  ];
}

/**
 * Preprocess decision tree page.
 */
function paatokset_ahjo_api_preprocess_block__decision_tree(array &$variables): void {
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');

  $defaults_config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $committees_url = $defaults_config->get('committees_boards_url');
  if (!$committees_url) {
    $committees_url = '/fi/paattajat';
  }
  $office_holders_url = $defaults_config->get('office_holders_url');
  if (!$office_holders_url) {
    $office_holders_url = '/fi/paattajat';
  }

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__decision_tree'])) {
    $variables['entity'] = $variables['elements']['#block__decision_tree'];
  }

  $municipality_url = NULL;
  if ($policymakerService->getPolicymaker('00400')) {
    $municipality_url = $policymakerService->getPolicymaker('00400')->toUrl()->toString();
  }

  $council_url = NULL;
  if ($policymakerService->getPolicymaker('02900')) {
    $council_url = $policymakerService->getPolicymaker('02900')->toUrl()->toString();
  }

  $variables['decision_process'] = [
    '0' => [
      'title' => t('Initiation'),
    ],
    '1' => [
      'title' => t('Committees and Boards'),
      'link' => $committees_url,
    ],
    '2' => [
      'title' => t('City board'),
      'link' => $municipality_url,
    ],
    '3' => [
      'title' => t('City council'),
      'link' => $council_url,
    ],
    '4' => [
      'title' => t('Implementation'),
    ],
  ];

  $variables['decisionmaker_process'] = [
    '0' => [
      'title' => t('Initiation'),
    ],
    '1' => [
      'title' => t('Office holder decision'),
      'link' => $office_holders_url,
    ],
    '2' => [
      'title' => t('Implementation'),
    ],
  ];

  $variables['info_1'] = t('Standard decision-making process');
  $variables['info_2'] = t('Standard process for office holder decisions');
}

/**
 * Preprocess variables for case and decision pages.
 */
function _paatokset_ahjo_api_get_decision_variables(&$variables, ?CaseBundle $case, ?Decision $decision): void {
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $policymaker = $decision?->getPolicymaker($langcode);

  // Case migration sets 'NO TITLE' as a default
  // value, if the case has no title in Ahjo.
  $variables['main_heading'] = $case?->get('field_full_title')?->getString() ?: $decision?->getDecisionHeading() ?: '';
  $variables['no_title_for_case'] = $case instanceof CaseBundle && (empty($case->getTitle()) || $case->getTitle() === 'NO TITLE');

  $variables['decision_pdf'] = $decision?->getDecisionPdf();
  $variables['selectedDecision'] = $decision;
  $variables['policymaker_is_active'] = $policymaker?->isActive() ?? FALSE;
  $variables['decision_section'] = $decision?->getFormattedDecisionSection();
  $variables['decision_org_name'] = $policymaker?->getPolicymakerName() ?? $decision?->getDecisionMakerOrgName();
  $variables['selected_label'] = $decision ? $caseService->formatDecisionLabel($decision, $policymaker) : NULL;
  $variables['selected_class'] = Html::cleanCssIdentifier($policymaker?->getPolicymakerClass() ?? 'color-sumu');
  $variables['attachments'] = $decision?->getAttachments() ?? [];
  $variables['all_decisions'] = $case ? $caseService->getDecisionsList($case) : NULL;

  if ($decision && $adjacent = $case?->getNextDecision($decision)) {
    $variables['next_decision'] = [
      'title' => $adjacent->label(),
      'id' => $adjacent->getNormalizedNativeId(),
    ];
  }

  if ($decision && $adjacent = $case?->getPrevDecision($decision)) {
    $variables['previous_decision'] = [
      'title' => $adjacent->label(),
      'id' => $adjacent->getNormalizedNativeId(),
    ];
  }

  $variables['decision_content'] = $decision?->parseContent() ?? [];
  $variables['all_decisions_link'] = $decision?->getDecisionMeetingLink();
  $variables['other_decisions_link'] = $policymaker?->getDecisionsRoute($langcode);
  $variables['vote_results'] = $decision?->getVotingResults() ?? [];
}

/**
 * Preprocess Case nodes.
 */
function paatokset_ahjo_api_preprocess_node__case__full(&$variables): void {
  $case = $variables['node'];
  assert($case instanceof CaseBundle);

  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');

  $decision = $caseService->guessDecisionFromPath($case);

  _paatokset_ahjo_api_get_decision_variables($variables, $case, $decision);

  // @fixme should not case all cases with node_list:decision.
  $variables['#cache'] = [
    'tags' => ['node_list:decision'],
    'contexts' => [
      'url.query_args:decision',
      'url.query_args:paatos',
      'url.query_args:beslut',
    ],
  ];

}

/**
 * Preprocess Decision nodes.
 */
function paatokset_ahjo_api_preprocess_node__decision__full(&$variables): void {
  $decision = $variables['node'];
  assert($decision instanceof Decision);

  _paatokset_ahjo_api_get_decision_variables($variables, $decision->getCase(), $decision);

  // @fixme should not case all decisions with node_list:decision & node_list:case.
  $variables['#cache'] = [
    'tags' => [
      'node_list:decision',
      'node_list:case',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function paatokset_ahjo_api_preprocess_block__dictionary_banner(&$variables) {
  $config = \Drupal::config('paatokset_ahjo_api.default_texts');
  $title = $config->get('banner_heading');
  $text = _paatokset_ahjo_api_render_default_text($config->get('banner_text'));
  $label = $config->get('banner_label');
  $url = $config->get('banner_url');

  $variables['banner_title'] = $title;
  $variables['banner_desc'] = $text;
  $variables['banner_link'] = [
    'url' => $url,
    'label' => $label,
  ];
}

/**
 * Prepares variables for ahjo_initiative templates.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_ahjo_initiative(array &$variables) : void {
  $variables['entity'] = $variables['elements']['#ahjo_initiative'];

  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Lookup case nodes by case ID.
 *
 * @param string $case_id
 *   Case ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_case_nid(string $case_id): ?string {
  $query = Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'case')
    ->condition('field_diary_number', $case_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup decision nodes by Native ID, Meeting ID, Case ID and Title.
 *
 * @param array $values
 *   Native ID, Meeting ID, Case ID, Title.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_decision_nid(array $values): ?string {
  // Get values defined by source key in the migration. Defaults to  NULL if
  // migration provides fewer values than required here.
  [
    $native_id,
    $series_id,
    $case_id,
    $meeting_id,
    $title,
    $language,
  ] = $values + array_fill(0, 5, NULL);

  // First search for native ID (unique for document).
  // Allow for unpublished nodes to prevent conflicts.
  $ids = Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'decision')
    ->condition('field_decision_native_id', $native_id)
    ->range(0, 1)
    ->latestRevision()
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  // If native ID is not found, search for series ID (shared by doc versions).
  // For this, do not allow unpublished nodes.
  // If a previous version is unpublished, create a new one.
  if ($series_id) {
    $query = Drupal::entityQuery('node')
      ->accessCheck(TRUE)
      ->condition('type', 'decision')
      ->condition('field_decision_series_id', $series_id)
      ->condition('status', 1)
      ->range(0, 1)
      ->latestRevision();

    $ids = $query->execute();
    if (!empty($ids)) {
      return reset($ids);
    }
  }

  // If nothing is found with series ID, try other IDs and fields.
  if (!$meeting_id) {
    return NULL;
  }

  if (!$case_id && !$title) {
    return NULL;
  }

  $query = Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'decision')
    ->condition('field_meeting_id', $meeting_id)
    ->condition('field_is_decision', 0)
    ->condition('status', 1)
    ->range(0, 1)
    ->latestRevision();

  if ($language) {
    $query->condition('langcode', $language);
  }

  if ($case_id) {
    $query->condition('field_diary_number', $case_id);
  }
  else {
    $query->condition('field_full_title', $title);
  }

  $ids = $query->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Lookup trustee nodes by Agent ID.
 *
 * @param string $agent_id
 *   Agent ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_trustee_nid(string $agent_id): ?string {
  $query = Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'trustee')
    ->condition('field_trustee_id', $agent_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup meeting nodes by meeting ID.
 *
 * @param string $meeting_id
 *   Meeting ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_meeting_nid(string $meeting_id): ?string {
  $query = Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'meeting')
    ->condition('field_meeting_id', $meeting_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Lookup policymaker nodes by ID.
 *
 * @param string $decisionmaker_id
 *   Policymaker ID.
 *
 * @return string|null
 *   Existing nid, if found.
 */
function _paatokset_ahjo_api_lookup_policymaker_nid(string $decisionmaker_id): ?string {
  $query = Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'policymaker')
    ->condition('field_policymaker_id', $decisionmaker_id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $query->execute();
  if (empty($ids)) {
    return NULL;
  }
  return reset($ids);
}

/**
 * Truncate text value.
 *
 * @param string $value
 *   The value to work with.
 * @param int $length
 *   Max length of string.
 *
 * @return string
 *   Truncated value.
 */
function _paatokset_ahjo_api_truncate_value(string $value, int $length = 255): string {
  return Unicode::truncate($value, $length, TRUE, TRUE);
}

/**
 * Callback to check if array or text value is not empty.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is not empty, FALSE if it is.
 */
function _paatokset_ahjo_api_true_if_not_empty(mixed $value): bool {
  return !empty($value);
}

/**
 * Convert string to boolean.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return bool
 *   TRUE is value is "true", FALSE if it is not.
 */
function _paatokset_ahjo_api_string_to_boolean(mixed $value): bool {
  return strtolower($value) === 'true';
}

/**
 * Callback to check if meeting minutes have been published.
 *
 * @param mixed $documents
 *   An array of meeting documents.
 *
 * @return bool
 *   TRUE is the minutes are found, FALSE if they are not.
 */
function _paatokset_ahjo_api_meeting_minutes_published($documents): bool {
  if (empty($documents) || !is_array($documents)) {
    return FALSE;
  }

  foreach ($documents as $document) {
    if (isset($document['Type']) && $document['Type'] === 'pöytäkirja') {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get first name.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string
 *   First name from formatted name string.
 */
function _paatokset_ahjo_api_get_first_name($value): string {
  $bits = explode(', ', (string) $value);
  $bit = array_slice($bits, -1);
  $bit = array_shift($bit);
  return (string) $bit;
}

/**
 * Get last name.
 *
 * @param mixed $value
 *   The value to work with.
 *
 * @return string
 *   First name from formatted name string.
 */
function _paatokset_ahjo_api_get_last_name($value): string {
  $bits = explode(', ', (string) $value);
  $bit = array_slice($bits, 0, 1);
  $bit = array_shift($bit);
  return (string) $bit;
}

/**
 * Get existing value, if node already exists.
 */
function _paatokset_ahjo_api_get_existing_value(array $values) {
  $nid = $values[0];
  $field = $values[1];
  $default = $values[2];
  $langcode = $values[3];

  if (!$nid) {
    return $default;
  }

  $node = Node::load($nid);
  if ($node->hasTranslation($langcode)) {
    $node = $node->getTranslation($langcode);
  }
  else {
    return $default;
  }
  if ($node instanceof NodeInterface && $node->hasField($field) && !$node->get($field)->isEmpty()) {
    return $node->get($field)->value;
  }

  return $default;
}

/**
 * Get existing value, if node already exists and title field is overridden.
 */
function _paatokset_ahjo_api_get_existing_value_with_override(array $values) {
  $nid = $values[0];
  $field = $values[1];
  $override_field = $values[2];
  $default = $values[3];
  $langcode = $values[4];
  $fallback = $values[5];

  // If Name field is empty for some reason, use ID instead.
  if (empty($default)) {
    $default = $fallback;
  }

  if (!$nid) {
    return $default;
  }

  $node = Node::load($nid);
  if ($node->hasTranslation($langcode)) {
    $node = $node->getTranslation($langcode);
  }
  else {
    return $default;
  }

  if (!$node instanceof NodeInterface) {
    return $default;
  }

  // Return existing value if override field is value is not empty.
  if ($node->hasField($override_field) && $node->get($override_field)->value && $node->hasField($field) && !$node->get($field)->isEmpty()) {
    return $node->get($field)->value;
  }

  return $default;
}

/**
 * Get top category name from classifiction code.
 *
 * @param mixed $values
 *   The values to work with.
 *
 * @return string|null
 *   Top category name based on the first part of the code, if found.
 */
function _paatokset_ahjo_api_get_top_category(mixed $values): ?string {
  if (!is_array($values)) {
    return NULL;
  }
  $value = $values[0];
  if (!empty($values[1])) {
    $langcode = $values[1];
  }
  else {
    $langcode = 'fi';
  }

  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  return $caseService->getTopCategoryFromClassificationCode($value, $langcode);
}

/**
 * Parse decision content from raw HTML.
 *
 * @param mixed $value
 *   Raw HTML.
 *
 * @return string|null
 *   Content sections from HTML, if found.
 */
function _paatokset_ahjo_api_parse_decision_content($value): string|null {
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  return $caseService->parseContentSectionsFromHtml((string) $value, TRUE);
}

/**
 * Parse decision motion from raw HTML.
 *
 * @param mixed $value
 *   Raw HTML.
 *
 * @return string|null
 *   Contect sections from HTML, if found.
 */
function _paatokset_ahjo_api_parse_decision_motion($value): string|null {
  /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
  $caseService = \Drupal::service('paatokset_ahjo_cases');
  return $caseService->parseContentSectionsFromHtml((string) $value, TRUE);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function paatokset_ahjo_api_entity_extra_field_info(): array {
  $extra['node']['meeting']['display']['meeting_link'] = [
    'label' => t('Meeting minutes link.'),
    'description' => t('Meeting minutes link under policymaker page.'),
    'weight' => 0,
    'visible' => FALSE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function paatokset_ahjo_api_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode): void {
  if ($entity->id() === NULL) {
    return;
  }

  // @todo meeting canonical url should contain the actual content
  // that the site wants to show, so we would have jump through less
  // hoops to get links to the meeting page.
  if ($display->getComponent('meeting_link')) {
    assert($entity instanceof Meeting);

    // Url can be null in some cases, maybe in non-city-council meetings?
    if ($url = $entity->getMinutesUrl()) {
      $build['meeting_link'] = Link::fromTextAndUrl(new TranslatableMarkup('Meeting minutes.'), $url)
        ->toRenderable();
    }
  }
}

/**
 * Alter the Hero design selection array.
 *
 * @param array $designs
 *   The designs for the hero.
 */
function paatokset_ahjo_api_helfi_hero_design_alter(array &$designs) {
  $designs['paatokset-search-bar'] = t('Paatokset decision search');
}

/**
 * Implements hook_metatag_route_entity().
 *
 * @see \Drupal\paatokset_ahjo_api\Controller\CaseNodeViewController
 * @see \Drupal\paatokset_ahjo_api\Routing\DecisionConverter
 */
function paatokset_ahjo_api_metatag_route_entity(RouteMatchInterface $route_match): ?EntityInterface {
  // Metatag module need a bit of help to determine the entity for custom
  // routes. This hook ensure that there is an entity to render tags from in
  // custom routes defined by paatokset_ahjo_api.
  $currentRoute = $route_match->getRouteName();

  if (str_starts_with($currentRoute, 'paatokset_decision.')) {
    return $route_match->getParameter('decision');
  }
  elseif (str_starts_with($currentRoute, "paatokset_case.")) {
    /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
    $caseService = \Drupal::service('paatokset_ahjo_cases');
    $case = $route_match->getParameter('case');

    // Untranslated case route displays decisions, so tags
    // should not be generated from case node.
    return $caseService->guessDecisionFromPath($case);
  }

  return NULL;
}

/**
 * Implements hook_metatags_attachments_alter().
 *
 * @see \paatokset_ahjo_api_metatag_route_entity()
 */
function paatokset_ahjo_api_metatags_attachments_alter(array &$metatag_attachments): void {
  $route_match = \Drupal::routeMatch();
  $currentRoute = $route_match->getRouteName();

  // In addition to fixing the metatags for custom routes in the hook above, we
  // also need to fix the case urls for `entity.node.canonical` route with a
  // decision query parameter.
  if (str_starts_with($currentRoute, 'entity.node.canonical')) {
    $node = \Drupal::routeMatch()->getParameter('node');

    if (!$node instanceof CaseBundle) {
      return;
    }

    /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
    $caseService = \Drupal::service('paatokset_ahjo_cases');

    /** @var \Drupal\paatokset_ahjo_api\Entity\Decision $decision */
    $decision = $caseService->guessDecisionFromPath($node);

    // Alter if decision was found from query parameters.
    if (!empty($decision)) {
      $canonical_url = $decision
        ->toUrl('canonical', ['absolute' => TRUE])
        ->toString();

      foreach ($metatag_attachments['#attached']['html_head'] as $id => [$options, $tag]) {
        if (
          $tag === 'canonical_url' &&
          !empty($caseService->getDecisionQuery())
        ) {
          $metatag_attachments['#attached']['html_head'][$id][0]['#attributes']['href'] = $canonical_url;
        }
        // Case migration sets 'NO TITLE' as a default
        // value, if the case has no title in Ahjo.
        // @fixme https://helsinkisolutionoffice.atlassian.net/browse/UHF-11625
        elseif (
          ($tag === 'title' || $tag === 'og_title') &&
          str_contains($options['#attributes']['content'], 'NO TITLE') &&
          $heading = $decision->getDecisionHeading()
        ) {
          $metatag_attachments['#attached']['html_head'][$id][0]['#attributes']['content'] =
            str_replace('NO TITLE', $heading, $options['#attributes']['content']);
        }
      }
    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function paatokset_ahjo_api_system_breadcrumb_alter(
  Breadcrumb &$breadcrumb,
  RouteMatchInterface $route_match,
  array $context,
): void {
  // Skip admin routes.
  if ($route_match->getRouteObject()?->getOption('_admin_route')) {
    return;
  }

  $links = $breadcrumb->getLinks();

  // Case migration sets 'NO TITLE' as a default
  // value, if the case has no title in Ahjo.
  if (end($links)?->getText() === 'NO TITLE') {
    $cases = array_filter($route_match->getParameters()->all(), function ($value) {
      return $value instanceof CaseBundle;
    });

    if (empty($case = reset($cases))) {
      return;
    }

    /** @var \Drupal\paatokset_ahjo_api\Service\CaseService $caseService */
    $caseService = \Drupal::service('paatokset_ahjo_cases');
    $decision = $caseService->guessDecisionFromPath($case);

    // Replace the link text if current route entity is case, the case service
    // has found a decision, and the decision has custom title field set.
    if ($heading = $decision?->getDecisionHeading()) {
      end($links)->setText($heading);

      // We have to recreate entire breadcrumb trail here, because breadcrumb
      // class forbids setting links after they've been set once.
      // @see \Drupal\Core\Breadcrumb\Breadcrumb::setLinks().
      $newBreadcrumb = new Breadcrumb();
      $newBreadcrumb->setLinks($links);
      // Merge cacheable metadata.
      $newBreadcrumb->addCacheTags($breadcrumb->getCacheTags())
        ->addCacheContexts($breadcrumb->getCacheContexts());

      $breadcrumb = $newBreadcrumb;
    }
  }

  $breadcrumb->addCacheContexts(['url.query_args']);
}

/**
 * Change the default text array to render_array.
 *
 * @param array $configuration_array
 *   The default text as an array.
 *
 * @return array
 *   Returns render_array.
 */
function _paatokset_ahjo_api_render_default_text(?array $configuration_array): array {
  $configuration_array = $configuration_array ?? [];
  return [
    '#type' => 'processed_text',
    '#text' => $configuration_array['value'] ?? '',
    '#format' => $configuration_array['format'] ?? 'full_html',
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function paatokset_ahjo_api_form_node_form_alter(array &$form, FormStateInterface $form_state): void {
  \Drupal::service(AdminHooks::class)->alterForm($form, $form_state);
}
