<?php

/**
 * @file
 * Install hooks for ahjo api module.
 */

declare(strict_types=1);

use Drupal\Core\Utility\UpdateException;
use Drupal\helfi_api_base\Environment\EnvironmentResolverInterface;
use Drupal\paatokset_ahjo_api\AhjoOpenId\DTO\AhjoAuthToken;

/**
 * Implements hook_update_last_removed().
 */
function paatokset_ahjo_api_update_last_removed(): int {
  return 9003;
}

/**
 * Install ahjo_organizations entity.
 */
function paatokset_ahjo_api_update_9004(): void {
  // Drop migrate map.
  \Drupal::database()->schema()->dropTable('migrate_map_ahjo_organizations');

  $entityType = \Drupal::entityTypeManager()->getDefinition('ahjo_organization');
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $updateManager->installEntityType($entityType);
}

/**
 * Install ahjo_initiative entity.
 */
function paatokset_ahjo_api_update_9005(): void {
  $entityType = \Drupal::entityTypeManager()->getDefinition('ahjo_initiative');
  $updateManager = \Drupal::entityDefinitionUpdateManager();
  $updateManager->installEntityType($entityType);
}

/**
 * Move paatokset_ahjo_openid.settings to paatokset_ahjo_api.settings.
 */
function paatokset_ahjo_api_update_9006(): void {
  \Drupal::configFactory()
    ->getEditable('paatokset_ahjo_openid.settings')
    ->delete();
}

/**
 * Migrate ahjo token to new format.
 */
function paatokset_ahjo_api_update_9007(): void {
  $state = \Drupal::state();

  $token = $state->get('ahjo-api-auth-key');
  $expiration = $state->get('ahjo-api-auth-expiration');
  $refreshToken = $state->get('ahjo_api_refresh_token');

  // Migrate token to the new format.
  if (!empty($token) && !empty($expiration) && !empty($refreshToken)) {
    $state->set('ahjo-auth', json_encode(new AhjoAuthToken($token, (int) $expiration, $refreshToken)));
  }

}

/**
 * Add per environment ahjo tokens.
 */
function paatokset_ahjo_api_update_9008(): void {
  $state = \Drupal::state();
  $lock = \Drupal::lock();

  try {
    $environment = \Drupal::service(EnvironmentResolverInterface::class)
      ->getActiveEnvironmentName();
  }
  catch (\InvalidArgumentException) {
    return;
  }

  if ($lock->acquire('ahjo-auth')) {
    try {
      if ($lock->acquire("ahjo-auth-$environment")) {
        try {
          // Migrate token to the new key.
          $state->set("ahjo-auth-$environment", $state->get('ahjo-auth', ''));
          return;
        }
        finally {
          $lock->release("ahjo-auth-$environment");
        }
      }
    }
    finally {
      $lock->release('ahjo-auth');
    }
  }

  throw new UpdateException("Failed to migrate ahjo token");
}
