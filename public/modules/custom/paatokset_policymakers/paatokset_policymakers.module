<?php

/**
 * @file
 * Primary module hooks for Ahjo Policymakers module.
 */

declare(strict_types = 1);

use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_theme().
 */
function paatokset_policymakers_theme($existing, $type, $theme, $path) {
  return [
    'policymaker_cards' => [
      'variables' => [
        'cards' => [],
      ],
      'path' => $path . '/templates/component',
    ],
    'policymaker_accordions' => [
      'variables' => [
        'accordions' => [],
      ],
      'path' => $path . '/templates/component',
    ],
    'node__policymaker' => [
      'render element' => 'elements',
      'template' => 'node--policymaker',
      'path' => $path . '/templates/content',
      'base hook' => 'node',
    ],
    'block__policymaker_calendar' => [
      'base hook' => 'entity',
      'template' => 'block/block--policymaker-calendar',
    ],
    'policymaker_minutes' => [
      'render element' => 'elements',
      'template' => 'content/minutes',
    ],
    'block__policymaker_members' => [
      'base hook' => 'entity',
      'template' => 'block/block--policymaker-members',
    ],
    'tpr_unit__contact_card' => [
      'base hook' => 'entity',
      'template' => 'content/tpr-unit--contact-card',
    ],
  ];
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: paatokset-meeting.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function paatokset_policymakers_preprocess_block__policymaker_calendar(array &$variables) {
  /** @var \Drupal\paatokset_ahjo_api\Service\MeetingService $meetingService */
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');
  $policymakerService->setPolicyMakerByPath();
  $node = $policymakerService->getPolicyMaker();

  $params = [
    'policymaker' => $node->get('field_policymaker_id')->value,
    'from' => date("Y-m-d"),
  ];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_calendar'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_calendar'];
  }

  $variables['date'] = t('Date');
  $variables['time'] = t('Time');
  $variables['additional_info'] = t('Additional information');
  $variables['open_motions'] = t('Open agenda');
  $variables['open_decisions'] = t('Open decision announcement');
  $variables['open_minutes'] = t('Open minutes');
  $variables['meetings'] = $meetingService->query($params);

  if ($node->hasField('field_meetings_description') && !$node->get('field_meetings_description')->isEmpty()) {
    $variables['meetings_description'] = $node->get('field_meetings_description')->value;
  }
  else {
    $variables['meetings_description'] = \Drupal::config('paatokset_ahjo_api.default_texts')->get('meetings_description.value');
  }
}

/**
 * Implements preprocess_node hook.
 */
function paatokset_policymakers_preprocess_node__policymaker(&$variables) {
  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');

  /** @var \Drupal\paatokset_ahjo_api\Service\MeetingService $meetingService */
  $meetingService = \Drupal::service('paatokset_ahjo_meetings');
  $councilId = \Drupal::config('paatokset_helsinki_kanava.settings')->get('city_council_id');

  $policymaker = $variables['node'];

  $policymakerService->setPolicyMakerNode($policymaker);
  $variables['organization_type'] = $policymakerService->getPolicymakerTypeFromNode($policymaker);
  $variables['organization_type_color'] = $policymakerService->getPolicymakerClass($policymaker);
  $no_content = TRUE;

  $not_organization_types = [
    'LuottamushenkilÃ¶',
    'Viranhaltija',
  ];

  $cache_tags = [];

  $orgType = $policymaker->get('field_organization_type')->value;
  $variables['is_organization'] = FALSE;
  $variables['is_active'] = TRUE;

  // If policymaker is not existing, hide all content.
  if ($policymaker->hasField('field_policymaker_existing') && !$policymaker->get('field_policymaker_existing')->isEmpty() && !$policymaker->get('field_policymaker_existing')->value) {
    $variables['is_active'] = FALSE;
    if (!in_array($orgType, $not_organization_types)) {
      $variables['is_organization'] = TRUE;
    }
    return;
  }

  if ($orgType) {
    if (!in_array($orgType, $not_organization_types)) {
      $variables['is_organization'] = TRUE;

      $members = $policymakerService->getComposition();
      if ($members) {
        $variables['has_members'] = TRUE;
        $no_content = FALSE;
      }

      $documents = $policymakerService->getApiMinutes(2);
      if ($documents) {
        $variables['recent_documents'] = $documents;
        $variables['all_documents_link'] = $policymakerService->getDocumentsRoute();
        $no_content = FALSE;
      }

      $params = [
        'policymaker' => $policymaker->get('field_policymaker_id')->value,
        'from' => date("Y-m-d"),
      ];
      $upcomingMeetings = $meetingService->query($params);

      if (!empty($upcomingMeetings)) {
        $variables['meeting_calendar'] = TRUE;
        $no_content = FALSE;
      }
    }
    else {
      // Get the two most recent decisions.
      $recentDecisions = $policymakerService->getAgendasList(2, FALSE);
      if (!empty($recentDecisions)) {
        $variables['recent_decisions'] = $recentDecisions;
        $variables['all_decisions_link'] = $policymakerService->getDecisionsRoute();
        $no_content = FALSE;
      }
    }
  }

  if ($councilId && ($policymaker->get('field_policymaker_id')->value === $councilId)) {
    $variables['render_announcement_block'] = TRUE;
    $no_content = FALSE;

    // Add cache tag for Helsinki Kanava videos.
    $cache_tags[] = 'meeting_video_list';
  }

  // Add custom cache tags for meetings or decisions based on org type.
  if ($variables['is_organization']) {
    $cache_tags[] = 'meeting_pm:' . $policymaker->get('field_policymaker_id')->value;
  }
  else {
    $cache_tags[] = 'decision_pm:' . $policymaker->get('field_policymaker_id')->value;
  }

  if (!empty($cache_tags)) {
    $variables['#cache'] = [
      'tags' => $cache_tags,
    ];
  }

  $variables['no_content'] = $no_content;

  $node = $variables['node'];

  if ($node->hasField('field_documents_description') && !$node->get('field_documents_description')->isEmpty()) {
    $variables['documents_description'] = $node->get('field_documents_description')->value;
  }
  else {
    $variables['documents_description'] = \Drupal::config('paatokset_ahjo_api.default_texts')->get('documents_description.value');
  }

  if ($node->hasField('field_decisions_description') && !$node->get('field_decisions_description')->isEmpty()) {
    $variables['decisions_description'] = $node->get('field_decisions_description')->value;
  }
  else {
    $variables['decisions_description'] = \Drupal::config('paatokset_ahjo_api.default_texts')->get('decisions_description.value');
  }

  if ($node->hasField('field_recording_description') && !$node->get('field_recording_description')->isEmpty()) {
    $variables['recording_description'] = $node->get('field_meetings_description')->value;
  }
  else {
    $variables['recording_description'] = \Drupal::config('paatokset_ahjo_api.default_texts')->get('recording_description.value');
  }
}

/**
 * Implements preprocess_field hook.
 */
function paatokset_policymakers_preprocess_field__node__title(&$variables) {
  $title = $variables['items'][0]['content']['#context']['value'];
  $node = $variables['element']['#object'];
  $first_name = '';
  $last_name = '';

  if ($node->getType() === 'policymaker') {
    if ($node->hasField('field_first_name') && !$node->get('field_first_name')->isEmpty()) {
      $first_name = $node->get('field_first_name')->value;
    }

    if ($node->hasField('field_last_name') && !$node->get('field_last_name')->isEmpty()) {
      $last_name = $node->get('field_last_name')->value;
    }

    if (!empty($first_name) || !empty($last_name)) {
      $variables['items'][0]['content']['#context']['value'] = $title . ' ' . $first_name . ' ' . $last_name;
    }
  }
}

/**
 * Implements preprocess hook.
 */
function paatokset_policymakers_preprocess_policymaker_minutes(&$variables) {
  if (isset($variables['elements']['meeting']) && !empty($variables['elements']['meeting'])) {
    $variables['meeting'] = $variables['elements']['meeting'];
  }
  if (isset($variables['elements']['list']) && !empty($variables['elements']['list'])) {
    $variables['list'] = $variables['elements']['list'];
  }
  if (isset($variables['elements']['file']) && !empty($variables['elements']['file'])) {
    $variables['file'] = $variables['elements']['file'];
  }
  if (isset($variables['elements']['minutes_of_discussion']) && !empty($variables['elements']['minutes_of_discussion'])) {
    $variables['minutes_of_discussion'] = $variables['elements']['minutes_of_discussion'];
  }
  if (isset($variables['elements']['decision_announcement']) && !empty($variables['elements']['decision_announcement'])) {
    $variables['decision_announcement'] = $variables['elements']['decision_announcement'];
  }
  if (isset($variables['elements']['meeting_metadata']) && !empty($variables['elements']['meeting_metadata'])) {
    $variables['meeting_metadata'] = $variables['elements']['meeting_metadata'];
  }
  if (isset($variables['elements']['#documents_description']) && !empty($variables['elements']['#documents_description'])) {
    $variables['documents_description'] = $variables['elements']['#documents_description'];
  }
}

/**
 * Prepares variables for paatokset_ahjo templates.
 *
 * Default template: block--policymaker-members.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_block__policymaker_members(array &$variables) {
  $variables['#attached']['library'][] = 'paatokset_policymakers/policymaker_members';

  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');
  $policymakerService->setPolicyMakerByPath();
  $node = $policymakerService->getPolicyMaker();

  if (!$node instanceof NodeInterface) {
    return;
  }

  $variables['policymaker_name'] = $node->get('field_ahjo_title')->value;
  $variables['policymaker_id'] = $node->get('field_policymaker_id')->value;
  $variables['policymaker_type'] = $node->get('field_organization_type')->value;

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  if (isset($variables['elements']['#block__policymaker_members'])) {
    $variables['entity'] = $variables['elements']['#block__policymaker_members'];
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 *
 * Custom node path for Viranhaltija decisionmakers, add org name to URL.
 */
function paatokset_policymakers_pathauto_pattern_alter(&$pattern, array $context) {
  // Only act on node context.
  if (!isset($context['module'], $context['data']['node']) || $context['module'] !== 'node') {
    return;
  }
  /** @var \Drupal\node\NodeInterface $node */
  $node = $context['data']['node'];

  // No overrides for english language nodes.
  if ($node->get('langcode')->value === 'en') {
    return;
  }

  // Only act on policymaker nodes and make sure fields exist.
  if (!$node->bundle() === 'policymaker' || !$node->hasField('field_ahjo_title') || !$node->hasField('field_dm_org_name') || !$node->hasField('field_organization_type')) {
    return;
  }

  $allowed_types = [
    'Viranhaltija',
    'LuottamushenkilÃ¶',
  ];

  // Only act on Viranhaltija decisionmakers.
  if (!in_array($node->get('field_organization_type')->value, $allowed_types)) {
    return;
  }

  // Special case: Dont' add org name to Pormestari URL.
  $skipped_titles = [
    'Pormestari',
    'BorgmÃ¤stare',
  ];

  if (in_array($node->get('field_ahjo_title')->value, $skipped_titles)) {
    return;
  }

  // Handle translated langcodes.
  if ($node->get('langcode')->value === 'sv') {
    $prefix = 'beslutsfattare';
  }
  else {
    $prefix = 'paattajat';
  }

  // If org name exists, add it to the path.
  if (!$node->get('field_dm_org_name')->isEmpty()) {
    $pattern->setPattern($prefix . '/[node:field_ahjo_title]-[node:field_dm_org_name:value]');
    return;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function paatokset_policymakers_preprocess_page(&$variables) {
  // DM search page is landing page, fix title alignment.
  if (isset($variables['page']['content']) && array_key_exists('paatoksetpolicymakersearch', $variables['page']['content'])) {
    $variables['move_before_content'] = TRUE;
  }

  if (!empty($variables['node']) && $variables['node']->hasField('field_contacts') && !$variables['node']->get('field_contacts')->isEmpty()) {
    $variables['has_sidebar_second'] = TRUE;
  }

  // Add template variables on dm pages.
  if (_paatokset_policymakers_page_is_pm_subpage($variables)) {
    $variables['has_sidebar_first'] = TRUE;
    $variables['move_before_content'] = TRUE;
    $variables['has_section_nav'] = TRUE;

    // Unset main navigation.
    unset($variables['page']['sidebar_first']['helfi_paatokset_main_navigation_level_2']);
  }
  elseif (_paatokset_policymakers_page_is_pm_custom_link($variables)) {
    $variables['has_sidebar_first'] = TRUE;
    $variables['move_before_content'] = TRUE;
    $variables['has_section_nav'] = TRUE;

    // Force pm sidebar and mobile navi to be visible.
    $variables['policymaker_navigation'] = TRUE;

    // Unset main navigation.
    unset($variables['page']['sidebar_first']['helfi_paatokset_main_navigation_level_2']);
  }
  // Unset policymaker side navi.
  else {
    unset($variables['page']['sidebar_first']['policymakersidenavigation']);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function paatokset_policymakers_preprocess_html(&$variables) {
  if (_paatokset_policymakers_page_is_pm_subpage($variables)) {
    $variables['attributes']['class'][] = 'has-policymaker-nav';
  }

  // Remove title block on minutes page.
  if (preg_match('/policymaker\.minutes\./', \Drupal::routeMatch()->getRouteName()) && isset($variables['page']['before_content']['helfi_paatokset_page_title'])) {
    unset($variables['page']['before_content']['helfi_paatokset_page_title']);
  }
}

/**
 * Helper function to decipher if page is policymaker subpage.
 *
 * @param array $variables
 *   Drupal-provided variables array.
 *
 * @return bool
 *   Return result of conditional check.
 */
function _paatokset_policymakers_page_is_pm_subpage(array $variables): bool {
  if (isset($variables['node']) && $variables['node']) {
    // Always show on trustee pages.
    if ($variables['node']->bundle() === 'trustee') {
      return TRUE;
    }

    /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
    $policymakerService = \Drupal::service('paatokset_policymakers');
    if (!$policymakerService->setPolicyMakerByPath()) {
      return FALSE;
    }
    if ($policymakerService->getPolicyMaker() instanceof NodeInterface) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

  return isset($variables['page']['sidebar_first']) && array_key_exists('policymakersidenavigation', $variables['page']['sidebar_first']);
}

/**
 * Check if node is in a policymaker menu as a custom link.
 *
 * @param array $variables
 *   Node variables.
 *
 * @return bool
 *   Returns TRUE if node is in a pm menu as a custom link.
 */
function _paatokset_policymakers_page_is_pm_custom_link(array $variables): bool {
  if (!isset($variables['node'])) {
    return FALSE;
  }

  $node = $variables['node'];
  if (!$node instanceof NodeInterface) {
    return FALSE;
  }

  $node_id = $node->id();

  // Don't act if this node is in a menu already.
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $node_id]);

  if (!empty($links)) {
    return FALSE;
  }

  // Query for a custom link that has this node as its target.
  $paragraph_query = \Drupal::entityTypeManager()->getStorage('paragraph')->getQuery()
    ->condition('type', 'custom_content_links')
    ->condition('field_referenced_content.target_id', $node_id)
    ->latestRevision();

  $pids = $paragraph_query->execute();
  if (empty($pids)) {
    return FALSE;
  }

  // Always pick the first one if multiple are found.
  $paragraph_id = reset($pids);
  $paragraph = Paragraph::load($paragraph_id);

  if (!$paragraph instanceof ParagraphInterface) {
    return FALSE;
  }

  // Check that the parent node is a policymaker node.
  $parent = $paragraph->getParentEntity();
  if (!$parent instanceof NodeInterface) {
    return FALSE;
  }
  if ($parent->bundle() !== 'policymaker') {
    return FALSE;
  }

  // Check that the ID value exists.
  if (!$parent->hasField('field_policymaker_id') || $parent->get('field_policymaker_id')->isEmpty()) {
    return FALSE;
  }

  /** @var \Drupal\paatokset_policymakers\Service\PolicymakerService $policymakerService */
  $policymakerService = \Drupal::service('paatokset_policymakers');
  $policymakerService->setPolicyMakerNode($parent);
  return TRUE;
}
