
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a21, b6) => (typeof require !== "undefined" ? require : a21)[b6]
  }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to5, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to5, key) && key !== except)
          __defProp(to5, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to5;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../../contrib/hdbt/node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "../../contrib/hdbt/node_modules/object-assign/index.js"(exports, module) {
      
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      __name(toObject, "toObject");
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i12 = 0; i12 < 10; i12++) {
            test2["_" + String.fromCharCode(i12)] = i12;
          }
          var order22 = Object.getOwnPropertyNames(test2).map(function(n21) {
            return test2[n21];
          });
          if (order22.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      __name(shouldUseNative, "shouldUseNative");
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to5 = toObject(target);
        var symbols;
        for (var s21 = 1; s21 < arguments.length; s21++) {
          from = Object(arguments[s21]);
          for (var key in from) {
            if (hasOwnProperty3.call(from, key)) {
              to5[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i12 = 0; i12 < symbols.length; i12++) {
              if (propIsEnumerable.call(from, symbols[i12])) {
                to5[symbols[i12]] = from[symbols[i12]];
              }
            }
          }
        }
        return to5;
      };
    }
  });

  // ../../contrib/hdbt/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../../contrib/hdbt/node_modules/react/cjs/react.development.js"(exports) {
      
      if (true) {
        (function() {
          
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          __name(setExtraStackFrame, "setExtraStackFrame");
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            // Used by renderers to avoid bundling object-assign twice in UMD bundles:
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn2(format4) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format4, args);
            }
          }
          __name(warn2, "warn");
          function error2(format4) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format4, args);
            }
          }
          __name(error2, "error");
          function printWarning(level3, format4, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format4 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format4);
              Function.prototype.apply.call(console[level3], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          __name(warnNoop, "warnNoop");
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: /* @__PURE__ */ __name(function(publicInstance) {
              return false;
            }, "isMounted"),
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: /* @__PURE__ */ __name(function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            }, "enqueueForceUpdate"),
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: /* @__PURE__ */ __name(function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            }, "enqueueReplaceState"),
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: /* @__PURE__ */ __name(function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }, "enqueueSetState")
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          __name(Component2, "Component");
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = /* @__PURE__ */ __name(function(methodName, info2) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: /* @__PURE__ */ __name(function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
                  return void 0;
                }, "get")
              });
            }, "defineDeprecationWarning");
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          __name(ComponentDummy, "ComponentDummy");
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          __name(PureComponent, "PureComponent");
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef2() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          __name(createRef2, "createRef");
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentName, "getComponentName");
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config3) {
            {
              if (hasOwnProperty3.call(config3, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.ref !== void 0;
          }
          __name(hasValidRef, "hasValidRef");
          function hasValidKey(config3) {
            {
              if (hasOwnProperty3.call(config3, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.key !== void 0;
          }
          __name(hasValidKey, "hasValidKey");
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = /* @__PURE__ */ __name(function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            }, "warnAboutAccessingKey");
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          __name(defineKeyPropWarningGetter, "defineKeyPropWarningGetter");
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = /* @__PURE__ */ __name(function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            }, "warnAboutAccessingRef");
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          __name(defineRefPropWarningGetter, "defineRefPropWarningGetter");
          function warnIfStringRefCannotBeAutoConverted(config3) {
            {
              if (typeof config3.ref === "string" && ReactCurrentOwner.current && config3.__self && ReactCurrentOwner.current.stateNode !== config3.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config3.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          __name(warnIfStringRefCannotBeAutoConverted, "warnIfStringRefCannotBeAutoConverted");
          var ReactElement2 = /* @__PURE__ */ __name(function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          }, "ReactElement");
          function createElement8(type, config3, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config3 != null) {
              if (hasValidRef(config3)) {
                ref = config3.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config3);
                }
              }
              if (hasValidKey(config3)) {
                key = "" + config3.key;
              }
              self2 = config3.__self === void 0 ? null : config3.__self;
              source = config3.__source === void 0 ? null : config3.__source;
              for (propName in config3) {
                if (hasOwnProperty3.call(config3, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  props[propName] = config3[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i12 = 0; i12 < childrenLength; i12++) {
                childArray[i12] = arguments[i12 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement2(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          __name(createElement8, "createElement");
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement2(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          __name(cloneAndReplaceKey, "cloneAndReplaceKey");
          function cloneElement(element, config3, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config3 != null) {
              if (hasValidRef(config3)) {
                ref = config3.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config3)) {
                key = "" + config3.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config3) {
                if (hasOwnProperty3.call(config3, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  if (config3[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config3[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i12 = 0; i12 < childrenLength; i12++) {
                childArray[i12] = arguments[i12 + 2];
              }
              props.children = childArray;
            }
            return ReactElement2(element.type, key, ref, self2, source, owner, props);
          }
          __name(cloneElement, "cloneElement");
          function isValidElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          __name(isValidElement2, "isValidElement");
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match4) {
              return escaperLookup[match4];
            });
            return "$" + escapedString;
          }
          __name(escape2, "escape");
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          __name(escapeUserProvidedKey, "escapeUserProvidedKey");
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          __name(getElementKey, "getElementKey");
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c6) {
                  return c6;
                });
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i12 = 0; i12 < children.length; i12++) {
                child = children[i12];
                nextName = nextNamePrefix + getElementKey(child, i12);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          __name(mapIntoArray, "mapIntoArray");
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          __name(mapChildren, "mapChildren");
          function countChildren(children) {
            var n21 = 0;
            mapChildren(children, function() {
              n21++;
            });
            return n21;
          }
          __name(countChildren, "countChildren");
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          __name(forEachChildren, "forEachChildren");
          function toArray3(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          __name(toArray3, "toArray");
          function onlyChild(children) {
            if (!isValidElement2(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          __name(onlyChild, "onlyChild");
          function createContext5(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error2("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: /* @__PURE__ */ __name(function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(_Provider) {
                    context.Provider = _Provider;
                  }, "set")
                },
                _currentValue: {
                  get: /* @__PURE__ */ __name(function() {
                    return context._currentValue;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(_currentValue) {
                    context._currentValue = _currentValue;
                  }, "set")
                },
                _currentValue2: {
                  get: /* @__PURE__ */ __name(function() {
                    return context._currentValue2;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }, "set")
                },
                _threadCount: {
                  get: /* @__PURE__ */ __name(function() {
                    return context._threadCount;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(_threadCount) {
                    context._threadCount = _threadCount;
                  }, "set")
                },
                Consumer: {
                  get: /* @__PURE__ */ __name(function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }, "get")
                },
                displayName: {
                  get: /* @__PURE__ */ __name(function() {
                    return context.displayName;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }, "set")
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          __name(createContext5, "createContext");
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error3) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          __name(lazyInitializer, "lazyInitializer");
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: /* @__PURE__ */ __name(function() {
                    return defaultProps;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }, "set")
                },
                propTypes: {
                  configurable: true,
                  get: /* @__PURE__ */ __name(function() {
                    return propTypes;
                  }, "get"),
                  set: /* @__PURE__ */ __name(function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }, "set")
                }
              });
            }
            return lazyType;
          }
          __name(lazy, "lazy");
          function forwardRef6(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: /* @__PURE__ */ __name(function() {
                  return ownName;
                }, "get"),
                set: /* @__PURE__ */ __name(function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }, "set")
              });
            }
            return elementType;
          }
          __name(forwardRef6, "forwardRef");
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          __name(isValidElementType, "isValidElementType");
          function memo(type, compare2) {
            {
              if (!isValidElementType(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare2 === void 0 ? null : compare2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: /* @__PURE__ */ __name(function() {
                  return ownName;
                }, "get"),
                set: /* @__PURE__ */ __name(function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }, "set")
              });
            }
            return elementType;
          }
          __name(memo, "memo");
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          __name(resolveDispatcher, "resolveDispatcher");
          function useContext5(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error2("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          __name(useContext5, "useContext");
          function useState10(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          __name(useState10, "useState");
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          __name(useReducer2, "useReducer");
          function useRef14(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          __name(useRef14, "useRef");
          function useEffect14(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          __name(useEffect14, "useEffect");
          function useLayoutEffect8(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          __name(useLayoutEffect8, "useLayoutEffect");
          function useCallback7(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          __name(useCallback7, "useCallback");
          function useMemo8(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          __name(useMemo8, "useMemo");
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          __name(useImperativeHandle, "useImperativeHandle");
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          __name(useDebugValue3, "useDebugValue");
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match4 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match4 && match4[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn3, construct) {
            if (!fn3 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn3);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: /* @__PURE__ */ __name(function() {
                    throw Error();
                  }, "set")
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn3, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn3.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn3();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s21 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s21 >= 1 && c6 >= 0 && sampleLines[s21] !== controlLines[c6]) {
                  c6--;
                }
                for (; s21 >= 1 && c6 >= 0; s21--, c6--) {
                  if (sampleLines[s21] !== controlLines[c6]) {
                    if (s21 !== 1 || c6 !== 1) {
                      do {
                        s21--;
                        c6--;
                        if (c6 < 0 || sampleLines[s21] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s21].replace(" at new ", " at ");
                          {
                            if (typeof fn3 === "function") {
                              componentFrameCache.set(fn3, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s21 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn3 ? fn3.displayName || fn3.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn3 === "function") {
                componentFrameCache.set(fn3, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeFunctionComponentFrame(fn3, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn3, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement$1, "setCurrentlyValidatingElement$1");
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          __name(getSourceInfoErrorAddendum, "getSourceInfoErrorAddendum");
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          __name(getSourceInfoErrorAddendumForProps, "getSourceInfoErrorAddendumForProps");
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info2 = getDeclarationErrorAddendum();
            if (!info2) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info2;
          }
          __name(getCurrentComponentErrorInfo, "getCurrentComponentErrorInfo");
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          __name(validateExplicitKey, "validateExplicitKey");
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i12 = 0; i12 < node.length; i12++) {
                var child = node[i12];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement2(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          __name(validateChildKeys, "validateChildKeys");
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          __name(validatePropTypes, "validatePropTypes");
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i12 = 0; i12 < keys.length; i12++) {
                var key = keys[i12];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          __name(validateFragmentProps, "validateFragmentProps");
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info2 = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info2 += sourceInfo;
              } else {
                info2 += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info2 = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
              }
            }
            var element = createElement8.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i12 = 2; i12 < arguments.length; i12++) {
                validateChildKeys(arguments[i12], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          __name(createElementWithValidation, "createElementWithValidation");
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: /* @__PURE__ */ __name(function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }, "get")
              });
            }
            return validatedFactory;
          }
          __name(createFactoryWithValidation, "createFactoryWithValidation");
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i12 = 2; i12 < arguments.length; i12++) {
              validateChildKeys(arguments[i12], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          __name(cloneElementWithValidation, "cloneElementWithValidation");
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e18) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray3,
            only: onlyChild
          };
          exports.Children = Children2;
          exports.Component = Component2;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext5;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef2;
          exports.forwardRef = forwardRef6;
          exports.isValidElement = isValidElement2;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback7;
          exports.useContext = useContext5;
          exports.useDebugValue = useDebugValue3;
          exports.useEffect = useEffect14;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect8;
          exports.useMemo = useMemo8;
          exports.useReducer = useReducer2;
          exports.useRef = useRef14;
          exports.useState = useState10;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/react/index.js
  var require_react = __commonJS({
    "../../contrib/hdbt/node_modules/react/index.js"(exports, module) {
      
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../../contrib/hdbt/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      
      if (true) {
        (function() {
          
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (
            // If Scheduler runs in a non-DOM environment, it falls back to a naive
            // implementation using setTimeout.
            typeof window === "undefined" || // Check if MessageChannel is supported, too.
            typeof MessageChannel !== "function"
          ) {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = /* @__PURE__ */ __name(function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e18) {
                  setTimeout(_flushCallback, 0);
                  throw e18;
                }
              }
            }, "_flushCallback");
            requestHostCallback = /* @__PURE__ */ __name(function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            }, "requestHostCallback");
            requestHostTimeout = /* @__PURE__ */ __name(function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            }, "requestHostTimeout");
            cancelHostTimeout = /* @__PURE__ */ __name(function() {
              clearTimeout(_timeoutID);
            }, "cancelHostTimeout");
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = /* @__PURE__ */ __name(function() {
              }, "requestPaint");
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = /* @__PURE__ */ __name(function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error2) {
                  port.postMessage(null);
                  throw error2;
                }
              } else {
                isMessageLoopRunning = false;
              }
            }, "performWorkUntilDeadline");
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = /* @__PURE__ */ __name(function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            }, "requestHostCallback");
            requestHostTimeout = /* @__PURE__ */ __name(function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            }, "requestHostTimeout");
            cancelHostTimeout = /* @__PURE__ */ __name(function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            }, "cancelHostTimeout");
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          __name(push, "push");
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          __name(peek, "peek");
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          __name(pop, "pop");
          function siftUp(heap, node, i12) {
            var index = i12;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare2(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          __name(siftUp, "siftUp");
          function siftDown(heap, node, i12) {
            var index = i12;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left3 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right3 = heap[rightIndex];
              if (left3 !== void 0 && compare2(left3, node) < 0) {
                if (right3 !== void 0 && compare2(right3, left3) < 0) {
                  heap[index] = right3;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left3;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right3 !== void 0 && compare2(right3, node) < 0) {
                heap[index] = right3;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          __name(siftDown, "siftDown");
          function compare2(a21, b6) {
            var diff = a21.sortIndex - b6.sortIndex;
            return diff !== 0 ? diff : a21.id - b6.id;
          }
          __name(compare2, "compare");
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          __name(markTaskErrored, "markTaskErrored");
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          __name(advanceTimers, "advanceTimers");
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          __name(handleTimeout, "handleTimeout");
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          __name(flushWork, "flushWork");
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          __name(workLoop, "workLoop");
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          __name(unstable_runWithPriority, "unstable_runWithPriority");
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          __name(unstable_next, "unstable_next");
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          __name(unstable_wrapCallback, "unstable_wrapCallback");
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          __name(unstable_scheduleCallback, "unstable_scheduleCallback");
          function unstable_pauseExecution() {
          }
          __name(unstable_pauseExecution, "unstable_pauseExecution");
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          __name(unstable_continueExecution, "unstable_continueExecution");
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          __name(unstable_getFirstCallbackNode, "unstable_getFirstCallbackNode");
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          __name(unstable_cancelCallback, "unstable_cancelCallback");
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          __name(unstable_getCurrentPriorityLevel, "unstable_getCurrentPriorityLevel");
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../../contrib/hdbt/node_modules/scheduler/index.js"(exports, module) {
      
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "../../contrib/hdbt/node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      
      if (true) {
        (function() {
          
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          __name(unstable_clear, "unstable_clear");
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          __name(unstable_getCurrent, "unstable_getCurrent");
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          __name(unstable_getThreadID, "unstable_getThreadID");
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          __name(unstable_trace, "unstable_trace");
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            __name(wrapped, "wrapped");
            wrapped.cancel = /* @__PURE__ */ __name(function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }, "cancel");
            return wrapped;
          }
          __name(unstable_wrap, "unstable_wrap");
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          __name(unstable_subscribe, "unstable_subscribe");
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          __name(unstable_unsubscribe, "unstable_unsubscribe");
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          __name(onInteractionTraced, "onInteractionTraced");
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          __name(onInteractionScheduledWorkCompleted, "onInteractionScheduledWorkCompleted");
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          __name(onWorkScheduled, "onWorkScheduled");
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          __name(onWorkStarted, "onWorkStarted");
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          __name(onWorkStopped, "onWorkStopped");
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error2) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error2;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          __name(onWorkCanceled, "onWorkCanceled");
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "../../contrib/hdbt/node_modules/scheduler/tracing.js"(exports, module) {
      
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../../contrib/hdbt/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      
      if (true) {
        (function() {
          
          var React19 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React19.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn2(format4) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format4, args);
            }
          }
          __name(warn2, "warn");
          function error2(format4) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format4, args);
            }
          }
          __name(error2, "error");
          function printWarning(level3, format4, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format4 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format4);
              Function.prototype.apply.call(console[level3], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          if (!React19) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment9 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          __name(registerTwoPhaseEvent, "registerTwoPhaseEvent");
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i12 = 0; i12 < dependencies.length; i12++) {
              allNativeEvents.add(dependencies[i12]);
            }
          }
          __name(registerDirectEvent, "registerDirectEvent");
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          __name(isAttributeNameSafe, "isAttributeNameSafe");
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          __name(shouldIgnoreAttribute, "shouldIgnoreAttribute");
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix4 = name.toLowerCase().slice(0, 5);
                  return prefix4 !== "data-" && prefix4 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          __name(shouldRemoveAttributeWithWarning, "shouldRemoveAttributeWithWarning");
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          __name(shouldRemoveAttribute, "shouldRemoveAttribute");
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          __name(getPropertyInfo, "getPropertyInfo");
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          __name(PropertyInfoRecord, "PropertyInfoRecord");
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = /* @__PURE__ */ __name(function(token) {
            return token[1].toUpperCase();
          }, "capitalize");
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          __name(sanitizeURL, "sanitizeURL");
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          __name(getValueForProperty, "getValueForProperty");
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          __name(getValueForAttribute, "getValueForAttribute");
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          __name(setValueForProperty, "setValueForProperty");
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match4 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match4 && match4[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn3, construct) {
            if (!fn3 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn3);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: /* @__PURE__ */ __name(function() {
                    throw Error();
                  }, "set")
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn3, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn3.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn3();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s21 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s21 >= 1 && c6 >= 0 && sampleLines[s21] !== controlLines[c6]) {
                  c6--;
                }
                for (; s21 >= 1 && c6 >= 0; s21--, c6--) {
                  if (sampleLines[s21] !== controlLines[c6]) {
                    if (s21 !== 1 || c6 !== 1) {
                      do {
                        s21--;
                        c6--;
                        if (c6 < 0 || sampleLines[s21] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s21].replace(" at new ", " at ");
                          {
                            if (typeof fn3 === "function") {
                              componentFrameCache.set(fn3, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s21 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn3 ? fn3.displayName || fn3.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn3 === "function") {
                componentFrameCache.set(fn3, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          __name(describeClassComponentFrame, "describeClassComponentFrame");
          function describeFunctionComponentFrame(fn3, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn3, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          __name(describeFiber, "describeFiber");
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info2 = "";
              var node = workInProgress2;
              do {
                info2 += describeFiber(node);
                node = node.return;
              } while (node);
              return info2;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          __name(getStackByFiberInDevAndProd, "getStackByFiberInDevAndProd");
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentName, "getComponentName");
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          __name(getCurrentFiberOwnerNameInDevOrNull, "getCurrentFiberOwnerNameInDevOrNull");
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          __name(getCurrentFiberStackInDev, "getCurrentFiberStackInDev");
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          __name(resetCurrentFiber, "resetCurrentFiber");
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          __name(setCurrentFiber, "setCurrentFiber");
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          __name(setIsRendering, "setIsRendering");
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          __name(getIsRendering, "getIsRendering");
          function toString(value) {
            return "" + value;
          }
          __name(toString, "toString");
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          __name(getToStringValue, "getToStringValue");
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          __name(checkControlledValueProps, "checkControlledValueProps");
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          __name(isCheckable, "isCheckable");
          function getTracker(node) {
            return node._valueTracker;
          }
          __name(getTracker, "getTracker");
          function detachTracker(node) {
            node._valueTracker = null;
          }
          __name(detachTracker, "detachTracker");
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          __name(getValueFromNode, "getValueFromNode");
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: /* @__PURE__ */ __name(function() {
                return get2.call(this);
              }, "get"),
              set: /* @__PURE__ */ __name(function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }, "set")
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: /* @__PURE__ */ __name(function() {
                return currentValue;
              }, "getValue"),
              setValue: /* @__PURE__ */ __name(function(value) {
                currentValue = "" + value;
              }, "setValue"),
              stopTracking: /* @__PURE__ */ __name(function() {
                detachTracker(node);
                delete node[valueField];
              }, "stopTracking")
            };
            return tracker;
          }
          __name(trackValueOnNode, "trackValueOnNode");
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          __name(track, "track");
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          __name(updateValueIfChanged, "updateValueIfChanged");
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e18) {
              return doc.body;
            }
          }
          __name(getActiveElement, "getActiveElement");
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          __name(isControlled, "isControlled");
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          __name(getHostProps, "getHostProps");
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          __name(initWrapperState, "initWrapperState");
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          __name(updateChecked, "updateChecked");
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          __name(updateWrapper, "updateWrapper");
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          __name(postMountWrapper, "postMountWrapper");
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          __name(restoreControlledState, "restoreControlledState");
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i12 = 0; i12 < group.length; i12++) {
                var otherNode = group[i12];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          __name(updateNamedCousins, "updateNamedCousins");
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          __name(setDefaultValue, "setDefaultValue");
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React19.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          __name(flattenChildren, "flattenChildren");
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React19.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error2("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          __name(validateProps, "validateProps");
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          __name(postMountWrapper$1, "postMountWrapper$1");
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          __name(getHostProps$1, "getHostProps$1");
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i12 = 0; i12 < valuePropNames.length; i12++) {
                var propName = valuePropNames[i12];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          __name(checkSelectPropTypes, "checkSelectPropTypes");
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i12 = 0; i12 < selectedValues.length; i12++) {
                selectedValue["$" + selectedValues[i12]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          __name(updateOptions, "updateOptions");
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          __name(getHostProps$2, "getHostProps$2");
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          __name(initWrapperState$1, "initWrapperState$1");
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          __name(postMountWrapper$2, "postMountWrapper$2");
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          __name(postUpdateWrapper, "postUpdateWrapper");
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          __name(restoreControlledState$1, "restoreControlledState$1");
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          __name(getHostProps$3, "getHostProps$3");
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          __name(initWrapperState$2, "initWrapperState$2");
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          __name(updateWrapper$1, "updateWrapper$1");
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          __name(postMountWrapper$3, "postMountWrapper$3");
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          __name(restoreControlledState$2, "restoreControlledState$2");
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          __name(getIntrinsicNamespace, "getIntrinsicNamespace");
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          __name(getChildNamespace, "getChildNamespace");
          var createMicrosoftUnsafeLocalFunction = /* @__PURE__ */ __name(function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          }, "createMicrosoftUnsafeLocalFunction");
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = /* @__PURE__ */ __name(function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          }, "setTextContent");
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber3 = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey3(prefix4, key) {
            return prefix4 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          __name(prefixKey3, "prefixKey");
          var prefixes3 = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber3).forEach(function(prop) {
            prefixes3.forEach(function(prefix4) {
              isUnitlessNumber3[prefixKey3(prefix4, prop)] = isUnitlessNumber3[prop];
            });
          });
          function dangerousStyleValue3(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber3.hasOwnProperty(name) && isUnitlessNumber3[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          __name(dangerousStyleValue3, "dangerousStyleValue");
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          __name(hyphenateStyleName, "hyphenateStyleName");
          var warnValidStyle = /* @__PURE__ */ __name(function() {
          }, "warnValidStyle");
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = /* @__PURE__ */ __name(function(string) {
              return string.replace(hyphenPattern, function(_7, character) {
                return character.toUpperCase();
              });
            }, "camelize");
            var warnHyphenatedStyleName = /* @__PURE__ */ __name(function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            }, "warnHyphenatedStyleName");
            var warnBadVendoredStyleName = /* @__PURE__ */ __name(function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            }, "warnBadVendoredStyleName");
            var warnStyleValueWithSemicolon = /* @__PURE__ */ __name(function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            }, "warnStyleValueWithSemicolon");
            var warnStyleValueIsNaN = /* @__PURE__ */ __name(function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            }, "warnStyleValueIsNaN");
            var warnStyleValueIsInfinity = /* @__PURE__ */ __name(function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            }, "warnStyleValueIsInfinity");
            warnValidStyle = /* @__PURE__ */ __name(function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            }, "warnValidStyle");
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue3(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          __name(createDangerousStringForStyles, "createDangerousStringForStyles");
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue3(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          __name(setValueForStyles, "setValueForStyles");
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          __name(isValueEmpty, "isValueEmpty");
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i12 = 0; i12 < longhands.length; i12++) {
                expanded[longhands[i12]] = key;
              }
            }
            return expanded;
          }
          __name(expandShorthandMap, "expandShorthandMap");
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          __name(validateShorthandPropertyCollisionInDev, "validateShorthandPropertyCollisionInDev");
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          __name(assertValidProps, "assertValidProps");
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          __name(isCustomComponent, "isCustomComponent");
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          __name(validateProperty, "validateProperty");
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          __name(warnInvalidARIAProps, "warnInvalidARIAProps");
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          __name(validateProperties, "validateProperties");
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          __name(validateProperties$1, "validateProperties$1");
          var validateProperty$1 = /* @__PURE__ */ __name(function() {
          }, "validateProperty$1");
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = /* @__PURE__ */ __name(function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            }, "validateProperty$1");
          }
          var warnUnknownProperties = /* @__PURE__ */ __name(function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          }, "warnUnknownProperties");
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          __name(validateProperties$2, "validateProperties$2");
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          __name(getEventTarget, "getEventTarget");
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          __name(restoreStateOfTarget, "restoreStateOfTarget");
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          __name(setRestoreImplementation, "setRestoreImplementation");
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          __name(enqueueStateRestore, "enqueueStateRestore");
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          __name(needsStateRestore, "needsStateRestore");
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i12 = 0; i12 < queuedTargets.length; i12++) {
                restoreStateOfTarget(queuedTargets[i12]);
              }
            }
          }
          __name(restoreStateIfNeeded, "restoreStateIfNeeded");
          var batchedUpdatesImpl = /* @__PURE__ */ __name(function(fn3, bookkeeping) {
            return fn3(bookkeeping);
          }, "batchedUpdatesImpl");
          var discreteUpdatesImpl = /* @__PURE__ */ __name(function(fn3, a21, b6, c6, d16) {
            return fn3(a21, b6, c6, d16);
          }, "discreteUpdatesImpl");
          var flushDiscreteUpdatesImpl = /* @__PURE__ */ __name(function() {
          }, "flushDiscreteUpdatesImpl");
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          __name(finishEventHandler, "finishEventHandler");
          function batchedUpdates(fn3, bookkeeping) {
            if (isInsideEventHandler) {
              return fn3(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn3, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          __name(batchedUpdates, "batchedUpdates");
          function batchedEventUpdates(fn3, a21, b6) {
            if (isBatchingEventUpdates) {
              return fn3(a21, b6);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn3, a21, b6);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          __name(batchedEventUpdates, "batchedEventUpdates");
          function discreteUpdates(fn3, a21, b6, c6, d16) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn3, a21, b6, c6, d16);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          __name(discreteUpdates, "discreteUpdates");
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          __name(flushDiscreteUpdatesIfNeeded, "flushDiscreteUpdatesIfNeeded");
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          __name(setBatchingImplementation, "setBatchingImplementation");
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          __name(isInteractive, "isInteractive");
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          __name(shouldPreventMouseEvent, "shouldPreventMouseEvent");
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          __name(getListener, "getListener");
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: /* @__PURE__ */ __name(function() {
                  passiveBrowserEventsSupported = true;
                }, "get")
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e18) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a21, b6, c6, d16, e18, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          __name(invokeGuardedCallbackProd, "invokeGuardedCallbackProd");
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = /* @__PURE__ */ __name(function invokeGuardedCallbackDev(name, func, context, a21, b6, c6, d16, e18, f2) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                __name(restoreAfterDispatch, "restoreAfterDispatch");
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                __name(callCallback2, "callCallback");
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                __name(handleWindowError, "handleWindowError");
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              }, "invokeGuardedCallbackDev");
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: /* @__PURE__ */ __name(function(error3) {
              hasError = true;
              caughtError = error3;
            }, "onError")
          };
          function invokeGuardedCallback(name, func, context, a21, b6, c6, d16, e18, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          __name(invokeGuardedCallback, "invokeGuardedCallback");
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a21, b6, c6, d16, e18, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          __name(invokeGuardedCallbackAndCatchFirstError, "invokeGuardedCallbackAndCatchFirstError");
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          __name(rethrowCaughtError, "rethrowCaughtError");
          function hasCaughtError() {
            return hasError;
          }
          __name(hasCaughtError, "hasCaughtError");
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          __name(clearCaughtError, "clearCaughtError");
          function get(key) {
            return key._reactInternals;
          }
          __name(get, "get");
          function has(key) {
            return key._reactInternals !== void 0;
          }
          __name(has, "has");
          function set(key, value) {
            key._reactInternals = value;
          }
          __name(set, "set");
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var PlacementAndUpdate = (
            /*           */
            6
          );
          var Deletion = (
            /*                     */
            8
          );
          var ContentReset = (
            /*                 */
            16
          );
          var Callback = (
            /*                     */
            32
          );
          var DidCapture = (
            /*                   */
            64
          );
          var Ref = (
            /*                          */
            128
          );
          var Snapshot = (
            /*                     */
            256
          );
          var Passive = (
            /*                      */
            512
          );
          var PassiveUnmountPendingDev = (
            /*     */
            8192
          );
          var Hydrating = (
            /*                    */
            1024
          );
          var HydratingAndUpdate = (
            /*           */
            1028
          );
          var LifecycleEffectMask = (
            /*          */
            932
          );
          var HostEffectMask = (
            /*               */
            2047
          );
          var Incomplete = (
            /*                   */
            2048
          );
          var ShouldCapture = (
            /*                */
            4096
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            16384
          );
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          __name(getNearestMountedFiber, "getNearestMountedFiber");
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          __name(getSuspenseInstanceFromFiber, "getSuspenseInstanceFromFiber");
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          __name(getContainerFromFiber, "getContainerFromFiber");
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          __name(isFiberMounted, "isFiberMounted");
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          __name(isMounted, "isMounted");
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          __name(assertIsMounted, "assertIsMounted");
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a21 = fiber;
            var b6 = alternate;
            while (true) {
              var parentA = a21.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a21 = b6 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a21) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b6) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a21.return !== b6.return) {
                a21 = parentA;
                b6 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a21) {
                    didFindChild = true;
                    a21 = parentA;
                    b6 = parentB;
                    break;
                  }
                  if (_child === b6) {
                    didFindChild = true;
                    b6 = parentA;
                    a21 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a21) {
                      didFindChild = true;
                      a21 = parentB;
                      b6 = parentA;
                      break;
                    }
                    if (_child === b6) {
                      didFindChild = true;
                      b6 = parentB;
                      a21 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a21.alternate === b6)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a21.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a21.stateNode.current === a21) {
              return fiber;
            }
            return alternate;
          }
          __name(findCurrentFiberUsingSlowPath, "findCurrentFiberUsingSlowPath");
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          __name(findCurrentHostFiber, "findCurrentHostFiber");
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          __name(findCurrentHostFiberWithNoPortals, "findCurrentHostFiberWithNoPortals");
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          __name(doesFiberContain, "doesFiberContain");
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn3) {
            attemptUserBlockingHydration = fn3;
          }
          __name(setAttemptUserBlockingHydration, "setAttemptUserBlockingHydration");
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn3) {
            attemptContinuousHydration = fn3;
          }
          __name(setAttemptContinuousHydration, "setAttemptContinuousHydration");
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn3) {
            attemptHydrationAtCurrentPriority = fn3;
          }
          __name(setAttemptHydrationAtCurrentPriority, "setAttemptHydrationAtCurrentPriority");
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn3) {
            attemptHydrationAtPriority = fn3;
          }
          __name(setAttemptHydrationAtPriority, "setAttemptHydrationAtPriority");
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          __name(hasQueuedDiscreteEvents, "hasQueuedDiscreteEvents");
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          __name(isReplayableDiscreteEvent, "isReplayableDiscreteEvent");
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          __name(createQueuedReplayableEvent, "createQueuedReplayableEvent");
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          __name(queueDiscreteEvent, "queueDiscreteEvent");
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          __name(clearIfContinuousEvent, "clearIfContinuousEvent");
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          __name(accumulateOrCreateContinuousQueuedReplayableEvent, "accumulateOrCreateContinuousQueuedReplayableEvent");
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          __name(queueIfContinuousEvent, "queueIfContinuousEvent");
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (root4.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          __name(attemptExplicitHydrationTarget, "attemptExplicitHydrationTarget");
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          __name(attemptReplayContinuousQueuedEvent, "attemptReplayContinuousQueuedEvent");
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          __name(attemptReplayContinuousQueuedEventInMap, "attemptReplayContinuousQueuedEventInMap");
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          __name(replayUnblockedEvents, "replayUnblockedEvents");
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          __name(scheduleCallbackIfUnblocked, "scheduleCallbackIfUnblocked");
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i12 = 1; i12 < queuedDiscreteEvents.length; i12++) {
                var queuedEvent = queuedDiscreteEvents[i12];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = /* @__PURE__ */ __name(function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            }, "unblock");
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          __name(retryIfBlockedOn, "retryIfBlockedOn");
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes4 = {};
            prefixes4[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes4["Webkit" + styleProp] = "webkit" + eventName;
            prefixes4["Moz" + styleProp] = "moz" + eventName;
            return prefixes4;
          }
          __name(makePrefixMap, "makePrefixMap");
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          __name(getVendorPrefixedEventName, "getVendorPrefixedEventName");
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            // Careful!
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            // Careful!
            "focusout",
            "blur",
            // Careful!
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority3) {
            for (var i12 = 0; i12 < eventTypes.length; i12 += 2) {
              var topEvent = eventTypes[i12];
              var event = eventTypes[i12 + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority3);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          __name(registerSimplePluginEventsAndSetTheirPriorities, "registerSimplePluginEventsAndSetTheirPriorities");
          function setEventPriorities(eventTypes, priority3) {
            for (var i12 = 0; i12 < eventTypes.length; i12++) {
              eventPriorities.set(eventTypes[i12], priority3);
            }
          }
          __name(setEventPriorities, "setEventPriorities");
          function getEventPriorityForPluginSystem(domEventName) {
            var priority3 = eventPriorities.get(domEventName);
            return priority3 === void 0 ? ContinuousEvent : priority3;
          }
          __name(getEventPriorityForPluginSystem, "getEventPriorityForPluginSystem");
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          __name(registerSimpleEvents, "registerSimpleEvents");
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var SyncBatchedLane = (
            /*                 */
            2
          );
          var InputDiscreteHydrationLane = (
            /*      */
            4
          );
          var InputDiscreteLanes = (
            /*                    */
            24
          );
          var InputContinuousHydrationLane = (
            /*           */
            32
          );
          var InputContinuousLanes = (
            /*                  */
            192
          );
          var DefaultHydrationLane = (
            /*            */
            256
          );
          var DefaultLanes = (
            /*                   */
            3584
          );
          var TransitionHydrationLane = (
            /*                */
            4096
          );
          var TransitionLanes = (
            /*                       */
            4186112
          );
          var RetryLanes = (
            /*                            */
            62914560
          );
          var SomeRetryLane = (
            /*                  */
            33554432
          );
          var SelectiveHydrationLane = (
            /*          */
            67108864
          );
          var NonIdleLanes = (
            /*                                 */
            134217727
          );
          var IdleHydrationLane = (
            /*               */
            134217728
          );
          var IdleLanes = (
            /*                             */
            805306368
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          __name(setCurrentUpdateLanePriority, "setCurrentUpdateLanePriority");
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error2("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          __name(getHighestPriorityLanes, "getHighestPriorityLanes");
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          __name(schedulerPriorityToLanePriority, "schedulerPriorityToLanePriority");
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          __name(lanePriorityToSchedulerPriority, "lanePriorityToSchedulerPriority");
          function getNextLanes(root4, wipLanes) {
            var pendingLanes = root4.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root4.expiredLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root4.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root4.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          __name(getNextLanes, "getNextLanes");
          function getMostRecentEventTime(root4, lanes) {
            var eventTimes = root4.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          __name(getMostRecentEventTime, "getMostRecentEventTime");
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority3 = return_highestLanePriority;
            if (priority3 >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority3 >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          __name(computeExpirationTime, "computeExpirationTime");
          function markStarvedLanesAsExpired(root4, currentTime) {
            var pendingLanes = root4.pendingLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root4.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          __name(markStarvedLanesAsExpired, "markStarvedLanesAsExpired");
          function getLanesToRetrySynchronouslyOnError(root4) {
            var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          __name(getLanesToRetrySynchronouslyOnError, "getLanesToRetrySynchronouslyOnError");
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          __name(returnNextLanesPriority, "returnNextLanesPriority");
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          __name(includesNonIdleWork, "includesNonIdleWork");
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          __name(includesOnlyRetries, "includesOnlyRetries");
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          __name(includesOnlyTransitions, "includesOnlyTransitions");
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              // Should be handled by findTransitionLane instead
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          __name(findUpdateLane, "findUpdateLane");
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          __name(findTransitionLane, "findTransitionLane");
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          __name(findRetryLane, "findRetryLane");
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          __name(getHighestPriorityLane, "getHighestPriorityLane");
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          __name(getLowestPriorityLane, "getLowestPriorityLane");
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          __name(getEqualOrHigherPriorityLanes, "getEqualOrHigherPriorityLanes");
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          __name(pickArbitraryLane, "pickArbitraryLane");
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          __name(pickArbitraryLaneIndex, "pickArbitraryLaneIndex");
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          __name(laneToIndex, "laneToIndex");
          function includesSomeLane(a21, b6) {
            return (a21 & b6) !== NoLanes;
          }
          __name(includesSomeLane, "includesSomeLane");
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          __name(isSubsetOfLanes, "isSubsetOfLanes");
          function mergeLanes(a21, b6) {
            return a21 | b6;
          }
          __name(mergeLanes, "mergeLanes");
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          __name(removeLanes, "removeLanes");
          function laneToLanes(lane) {
            return lane;
          }
          __name(laneToLanes, "laneToLanes");
          function higherPriorityLane(a21, b6) {
            return a21 !== NoLane && a21 < b6 ? a21 : b6;
          }
          __name(higherPriorityLane, "higherPriorityLane");
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i12 = 0; i12 < TotalLanes; i12++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          __name(createLaneMap, "createLaneMap");
          function markRootUpdated(root4, updateLane, eventTime) {
            root4.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root4.suspendedLanes &= higherPriorityLanes;
            root4.pingedLanes &= higherPriorityLanes;
            var eventTimes = root4.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          __name(markRootUpdated, "markRootUpdated");
          function markRootSuspended(root4, suspendedLanes) {
            root4.suspendedLanes |= suspendedLanes;
            root4.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          __name(markRootSuspended, "markRootSuspended");
          function markRootPinged(root4, pingedLanes, eventTime) {
            root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
          }
          __name(markRootPinged, "markRootPinged");
          function markDiscreteUpdatesExpired(root4) {
            root4.expiredLanes |= InputDiscreteLanes & root4.pendingLanes;
          }
          __name(markDiscreteUpdatesExpired, "markDiscreteUpdatesExpired");
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          __name(hasDiscreteLanes, "hasDiscreteLanes");
          function markRootMutableRead(root4, updateLane) {
            root4.mutableReadLanes |= updateLane & root4.pendingLanes;
          }
          __name(markRootMutableRead, "markRootMutableRead");
          function markRootFinished(root4, remainingLanes) {
            var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
            root4.pendingLanes = remainingLanes;
            root4.suspendedLanes = 0;
            root4.pingedLanes = 0;
            root4.expiredLanes &= remainingLanes;
            root4.mutableReadLanes &= remainingLanes;
            root4.entangledLanes &= remainingLanes;
            var entanglements = root4.entanglements;
            var eventTimes = root4.eventTimes;
            var expirationTimes = root4.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          __name(markRootFinished, "markRootFinished");
          function markRootEntangled(root4, entangledLanes) {
            root4.entangledLanes |= entangledLanes;
            var entanglements = root4.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          __name(markRootEntangled, "markRootEntangled");
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log2 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log2(lanes) / LN2 | 0) | 0;
          }
          __name(clz32Fallback, "clz32Fallback");
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          __name(setEnabled, "setEnabled");
          function isEnabled3() {
            return _enabled;
          }
          __name(isEnabled3, "isEnabled");
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          __name(createEventListenerWrapperWithPriority, "createEventListenerWrapperWithPriority");
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          __name(dispatchDiscreteEvent, "dispatchDiscreteEvent");
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          __name(dispatchUserBlockingUpdate, "dispatchUserBlockingUpdate");
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(
                null,
                // Flags that we're not actually blocked on anything as far as we know.
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              );
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          __name(dispatchEvent, "dispatchEvent");
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (root4.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          __name(attemptToDispatchEvent, "attemptToDispatchEvent");
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          __name(addEventBubbleListener, "addEventBubbleListener");
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          __name(addEventCaptureListener, "addEventCaptureListener");
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive3) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive3
            });
            return listener;
          }
          __name(addEventCaptureListenerWithPassiveFlag, "addEventCaptureListenerWithPassiveFlag");
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive3) {
            target.addEventListener(eventType, listener, {
              passive: passive3
            });
            return listener;
          }
          __name(addEventBubbleListenerWithPassiveFlag, "addEventBubbleListenerWithPassiveFlag");
          var root3 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root3 = nativeEventTarget;
            startText = getText();
            return true;
          }
          __name(initialize, "initialize");
          function reset() {
            root3 = null;
            startText = null;
            fallbackText = null;
          }
          __name(reset, "reset");
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start5;
            var startValue = startText;
            var startLength = startValue.length;
            var end3;
            var endValue = getText();
            var endLength = endValue.length;
            for (start5 = 0; start5 < startLength; start5++) {
              if (startValue[start5] !== endValue[start5]) {
                break;
              }
            }
            var minEnd = startLength - start5;
            for (end3 = 1; end3 <= minEnd; end3++) {
              if (startValue[startLength - end3] !== endValue[endLength - end3]) {
                break;
              }
            }
            var sliceTail = end3 > 1 ? 1 - end3 : void 0;
            fallbackText = endValue.slice(start5, sliceTail);
            return fallbackText;
          }
          __name(getData, "getData");
          function getText() {
            if ("value" in root3) {
              return root3.value;
            }
            return root3.textContent;
          }
          __name(getText, "getText");
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          __name(getEventCharCode, "getEventCharCode");
          function functionThatReturnsTrue() {
            return true;
          }
          __name(functionThatReturnsTrue, "functionThatReturnsTrue");
          function functionThatReturnsFalse() {
            return false;
          }
          __name(functionThatReturnsFalse, "functionThatReturnsFalse");
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            __name(SyntheticBaseEvent, "SyntheticBaseEvent");
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: /* @__PURE__ */ __name(function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              }, "preventDefault"),
              stopPropagation: /* @__PURE__ */ __name(function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              }, "stopPropagation"),
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: /* @__PURE__ */ __name(function() {
              }, "persist"),
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          __name(createSyntheticEvent, "createSyntheticEvent");
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: /* @__PURE__ */ __name(function(event) {
              return event.timeStamp || Date.now();
            }, "timeStamp"),
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent2 = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          __name(updateMouseMovementPolyfillState, "updateMouseMovementPolyfillState");
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: /* @__PURE__ */ __name(function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            }, "relatedTarget"),
            movementX: /* @__PURE__ */ __name(function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            }, "movementX"),
            movementY: /* @__PURE__ */ __name(function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }, "movementY")
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: /* @__PURE__ */ __name(function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }, "clipboardData")
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          __name(getEventKey, "getEventKey");
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          __name(modifierStateGetter, "modifierStateGetter");
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          __name(getEventModifierState, "getEventModifierState");
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: /* @__PURE__ */ __name(function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            }, "charCode"),
            keyCode: /* @__PURE__ */ __name(function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }, "keyCode"),
            which: /* @__PURE__ */ __name(function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }, "which")
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: /* @__PURE__ */ __name(function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            }, "deltaX"),
            deltaY: /* @__PURE__ */ __name(function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            }, "deltaY"),
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          __name(registerEvents, "registerEvents");
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          __name(isKeypressCommand, "isKeypressCommand");
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          __name(getCompositionEventType, "getCompositionEventType");
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          __name(isFallbackCompositionStart, "isFallbackCompositionStart");
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          __name(isFallbackCompositionEnd, "isFallbackCompositionEnd");
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          __name(getDataFromCustomEvent, "getDataFromCustomEvent");
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          __name(isUsingKoreanIME, "isUsingKoreanIME");
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          __name(extractCompositionEvent, "extractCompositionEvent");
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          __name(getNativeBeforeInputChars, "getNativeBeforeInputChars");
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          __name(getFallbackBeforeInputChars, "getFallbackBeforeInputChars");
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          __name(extractBeforeInputEvent, "extractBeforeInputEvent");
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          __name(extractEvents, "extractEvents");
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          __name(isTextInputElement, "isTextInputElement");
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          __name(isEventSupported, "isEventSupported");
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          __name(registerEvents$1, "registerEvents$1");
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent2("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          __name(createAndAccumulateChangeEvent, "createAndAccumulateChangeEvent");
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          __name(shouldUseChangeEvent, "shouldUseChangeEvent");
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          __name(manualDispatchChangeEvent, "manualDispatchChangeEvent");
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          __name(runEventInBatch, "runEventInBatch");
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          __name(getInstIfValueChanged, "getInstIfValueChanged");
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          __name(getTargetInstForChangeEvent, "getTargetInstForChangeEvent");
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          __name(startWatchingForValueChange, "startWatchingForValueChange");
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          __name(stopWatchingForValueChange, "stopWatchingForValueChange");
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          __name(handlePropertyChange, "handlePropertyChange");
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          __name(handleEventsForInputEventPolyfill, "handleEventsForInputEventPolyfill");
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          __name(getTargetInstForInputEventPolyfill, "getTargetInstForInputEventPolyfill");
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          __name(shouldUseClickEvent, "shouldUseClickEvent");
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          __name(getTargetInstForClickEvent, "getTargetInstForClickEvent");
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          __name(getTargetInstForInputOrChangeEvent, "getTargetInstForInputOrChangeEvent");
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          __name(handleControlledInputBlur, "handleControlledInputBlur");
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          __name(extractEvents$1, "extractEvents$1");
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          __name(registerEvents$2, "registerEvents$2");
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to5;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to5 = _related ? getClosestInstanceFromNode(_related) : null;
              if (to5 !== null) {
                var nearestMounted = getNearestMountedFiber(to5);
                if (to5 !== nearestMounted || to5.tag !== HostComponent && to5.tag !== HostText) {
                  to5 = null;
                }
              }
            } else {
              from = null;
              to5 = targetInst;
            }
            if (from === to5) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to5 == null ? win : getNodeFromInstance(to5);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to5, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to5);
          }
          __name(extractEvents$2, "extractEvents$2");
          function is3(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          __name(is3, "is");
          var objectIs = typeof Object.is === "function" ? Object.is : is3;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i12 = 0; i12 < keysA.length; i12++) {
              if (!hasOwnProperty$2.call(objB, keysA[i12]) || !objectIs(objA[keysA[i12]], objB[keysA[i12]])) {
                return false;
              }
            }
            return true;
          }
          __name(shallowEqual, "shallowEqual");
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          __name(getLeafNode, "getLeafNode");
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          __name(getSiblingNode, "getSiblingNode");
          function getNodeForCharacterOffset(root4, offset5) {
            var node = getLeafNode(root4);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset5 && nodeEnd >= offset5) {
                  return {
                    node,
                    offset: offset5 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          __name(getNodeForCharacterOffset, "getNodeForCharacterOffset");
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e18) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          __name(getOffsets, "getOffsets");
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start5 = -1;
            var end3 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start5 = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end3 = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start5 = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end3 = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
            if (start5 === -1 || end3 === -1) {
              return null;
            }
            return {
              start: start5,
              end: end3
            };
          }
          __name(getModernOffsetsFromPoints, "getModernOffsetsFromPoints");
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start5 = Math.min(offsets.start, length);
            var end3 = offsets.end === void 0 ? start5 : Math.min(offsets.end, length);
            if (!selection.extend && start5 > end3) {
              var temp = end3;
              end3 = start5;
              start5 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start5);
            var endMarker = getNodeForCharacterOffset(node, end3);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start5 > end3) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          __name(setOffsets, "setOffsets");
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          __name(isTextNode, "isTextNode");
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          __name(containsNode, "containsNode");
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          __name(isInDocument, "isInDocument");
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          __name(isSameOriginFrame, "isSameOriginFrame");
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          __name(getActiveElementDeep, "getActiveElementDeep");
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          __name(hasSelectionCapabilities, "hasSelectionCapabilities");
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          __name(getSelectionInformation, "getSelectionInformation");
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i12 = 0; i12 < ancestors.length; i12++) {
                var info2 = ancestors[i12];
                info2.element.scrollLeft = info2.left;
                info2.element.scrollTop = info2.top;
              }
            }
          }
          __name(restoreSelection, "restoreSelection");
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          __name(getSelection, "getSelection");
          function setSelection(input, offsets) {
            var start5 = offsets.start;
            var end3 = offsets.end;
            if (end3 === void 0) {
              end3 = start5;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start5;
              input.selectionEnd = Math.min(end3, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          __name(setSelection, "setSelection");
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          __name(registerEvents$3, "registerEvents$3");
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          __name(getSelection$1, "getSelection$1");
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          __name(getEventTargetDocument, "getEventTargetDocument");
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent2("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          __name(constructSelectEvent, "constructSelectEvent");
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          __name(extractEvents$3, "extractEvents$3");
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent2;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          __name(extractEvents$4, "extractEvents$4");
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          __name(extractEvents$5, "extractEvents$5");
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          __name(executeDispatch, "executeDispatch");
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i12 = dispatchListeners.length - 1; i12 >= 0; i12--) {
                var _dispatchListeners$i = dispatchListeners[i12], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          __name(processDispatchQueueItemsInOrder, "processDispatchQueueItemsInOrder");
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i12 = 0; i12 < dispatchQueue.length; i12++) {
              var _dispatchQueue$i = dispatchQueue[i12], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          __name(processDispatchQueue, "processDispatchQueue");
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          __name(dispatchEventsForPlugins, "dispatchEventsForPlugins");
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          __name(listenToNonDelegatedEvent, "listenToNonDelegatedEvent");
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          __name(listenToAllSupportedEvents, "listenToAllSupportedEvents");
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          __name(listenToNativeEvent, "listenToNativeEvent");
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          __name(addTrappedEventListener, "addTrappedEventListener");
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          __name(isMatchingRootContainer, "isMatchingRootContainer");
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          __name(dispatchEventForPluginEventSystem, "dispatchEventForPluginEventSystem");
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          __name(createDispatchListener, "createDispatchListener");
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          __name(accumulateSinglePhaseListeners, "accumulateSinglePhaseListeners");
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          __name(accumulateTwoPhaseListeners, "accumulateTwoPhaseListeners");
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          __name(getParent, "getParent");
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          __name(getLowestCommonAncestor, "getLowestCommonAncestor");
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          __name(accumulateEnterLeaveListenersForEvent, "accumulateEnterLeaveListenersForEvent");
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to5) {
            var common = from && to5 ? getLowestCommonAncestor(from, to5) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to5 !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to5, common, true);
            }
          }
          __name(accumulateEnterLeaveTwoPhaseListeners, "accumulateEnterLeaveTwoPhaseListeners");
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          __name(getListenerSetKey, "getListenerSetKey");
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = /* @__PURE__ */ __name(function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            }, "validatePropertiesInDevelopment");
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = /* @__PURE__ */ __name(function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            }, "normalizeMarkupForTextOrAttribute");
            warnForTextDifference = /* @__PURE__ */ __name(function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }, "warnForTextDifference");
            warnForPropDifference = /* @__PURE__ */ __name(function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            }, "warnForPropDifference");
            warnForExtraAttributes = /* @__PURE__ */ __name(function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error2("Extra attributes from the server: %s", names);
            }, "warnForExtraAttributes");
            warnForInvalidEventListener = /* @__PURE__ */ __name(function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            }, "warnForInvalidEventListener");
            normalizeHTML = /* @__PURE__ */ __name(function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            }, "normalizeHTML");
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          __name(getOwnerDocumentFromRootContainer, "getOwnerDocumentFromRootContainer");
          function noop4() {
          }
          __name(noop4, "noop");
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop4;
          }
          __name(trapClickOnNonInteractiveElement, "trapClickOnNonInteractiveElement");
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          __name(setInitialDOMProperties, "setInitialDOMProperties");
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i12 = 0; i12 < updatePayload.length; i12 += 2) {
              var propKey = updatePayload[i12];
              var propValue = updatePayload[i12 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          __name(updateDOMProperties, "updateDOMProperties");
          function createElement8(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          __name(createElement8, "createElement");
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          __name(createTextNode, "createTextNode");
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i12 = 0; i12 < mediaEventTypes.length; i12++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i12], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          __name(setInitialProperties, "setInitialProperties");
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          __name(diffProperties, "diffProperties");
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          __name(updateProperties, "updateProperties");
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          __name(getPossibleStandardName, "getPossibleStandardName");
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i12 = 0; i12 < mediaEventTypes.length; i12++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i12], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Built-in SSR attribute is allowed
                  case "data-reactroot":
                    break;
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (
                // Convince Flow we've calculated it (it's DEV-only in this method.)
                typeof isCustomComponentTag === "boolean"
              ) {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          __name(diffHydratedProperties, "diffHydratedProperties");
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          __name(diffHydratedText, "diffHydratedText");
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          __name(warnForUnmatchedText, "warnForUnmatchedText");
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForDeletedHydratableElement, "warnForDeletedHydratableElement");
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForDeletedHydratableText, "warnForDeletedHydratableText");
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForInsertedHydratedElement, "warnForInsertedHydratedElement");
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          __name(warnForInsertedHydratedText, "warnForInsertedHydratedText");
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          __name(restoreControlledState$3, "restoreControlledState$3");
          var validateDOMNesting = /* @__PURE__ */ __name(function() {
          }, "validateDOMNesting");
          var updatedAncestorInfo = /* @__PURE__ */ __name(function() {
          }, "updatedAncestorInfo");
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = /* @__PURE__ */ __name(function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info2 = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info2;
              if (tag === "form") {
                ancestorInfo.formTag = info2;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info2;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info2;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info2;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info2;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info2;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info2;
              }
              return ancestorInfo;
            }, "updatedAncestorInfo");
            var isTagValidWithParent = /* @__PURE__ */ __name(function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            }, "isTagValidWithParent");
            var findInvalidAncestorForTag = /* @__PURE__ */ __name(function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            }, "findInvalidAncestorForTag");
            var didWarn$1 = {};
            validateDOMNesting = /* @__PURE__ */ __name(function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info2 = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            }, "validateDOMNesting");
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          __name(shouldAutoFocusHostComponent, "shouldAutoFocusHostComponent");
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root4 = rootContainerInstance.documentElement;
                namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          __name(getRootHostContext, "getRootHostContext");
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          __name(getChildHostContext, "getChildHostContext");
          function getPublicInstance(instance) {
            return instance;
          }
          __name(getPublicInstance, "getPublicInstance");
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled3();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          __name(prepareForCommit, "prepareForCommit");
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          __name(resetAfterCommit, "resetAfterCommit");
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement8(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          __name(createInstance, "createInstance");
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          __name(appendInitialChild, "appendInitialChild");
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          __name(finalizeInitialChildren, "finalizeInitialChildren");
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          __name(prepareUpdate, "prepareUpdate");
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          __name(shouldSetTextContent, "shouldSetTextContent");
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          __name(createTextInstance, "createTextInstance");
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          __name(commitMount, "commitMount");
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          __name(commitUpdate, "commitUpdate");
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          __name(resetTextContent, "resetTextContent");
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          __name(commitTextUpdate, "commitTextUpdate");
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          __name(appendChild, "appendChild");
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          __name(appendChildToContainer, "appendChildToContainer");
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          __name(insertBefore, "insertBefore");
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          __name(insertInContainerBefore, "insertInContainerBefore");
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          __name(removeChild, "removeChild");
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          __name(removeChildFromContainer, "removeChildFromContainer");
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          __name(hideInstance, "hideInstance");
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          __name(hideTextInstance, "hideTextInstance");
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue3("display", display);
          }
          __name(unhideInstance, "unhideInstance");
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          __name(unhideTextInstance, "unhideTextInstance");
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          __name(clearContainer, "clearContainer");
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          __name(canHydrateInstance, "canHydrateInstance");
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          __name(canHydrateTextInstance, "canHydrateTextInstance");
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          __name(isSuspenseInstancePending, "isSuspenseInstancePending");
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          __name(isSuspenseInstanceFallback, "isSuspenseInstanceFallback");
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          __name(getNextHydratable, "getNextHydratable");
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          __name(getNextHydratableSibling, "getNextHydratableSibling");
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          __name(getFirstHydratableChild, "getFirstHydratableChild");
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          __name(hydrateInstance, "hydrateInstance");
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          __name(hydrateTextInstance, "hydrateTextInstance");
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          __name(getNextHydratableInstanceAfterSuspenseInstance, "getNextHydratableInstanceAfterSuspenseInstance");
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          __name(getParentSuspenseInstance, "getParentSuspenseInstance");
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          __name(commitHydratedContainer, "commitHydratedContainer");
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          __name(commitHydratedSuspenseInstance, "commitHydratedSuspenseInstance");
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          __name(didNotMatchHydratedContainerTextInstance, "didNotMatchHydratedContainerTextInstance");
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          __name(didNotMatchHydratedTextInstance, "didNotMatchHydratedTextInstance");
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          __name(didNotHydrateContainerInstance, "didNotHydrateContainerInstance");
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          __name(didNotHydrateInstance, "didNotHydrateInstance");
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          __name(didNotFindHydratableContainerInstance, "didNotFindHydratableContainerInstance");
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          __name(didNotFindHydratableContainerTextInstance, "didNotFindHydratableContainerTextInstance");
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          __name(didNotFindHydratableInstance, "didNotFindHydratableInstance");
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          __name(didNotFindHydratableTextInstance, "didNotFindHydratableTextInstance");
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
          }
          __name(didNotFindHydratableSuspenseInstance, "didNotFindHydratableSuspenseInstance");
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: /* @__PURE__ */ __name(function() {
                warnOnAccessInDEV();
                return id;
              }, "toString"),
              valueOf: /* @__PURE__ */ __name(function() {
                warnOnAccessInDEV();
                return id;
              }, "valueOf")
            };
          }
          __name(makeClientIdInDEV, "makeClientIdInDEV");
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          __name(isOpaqueHydratingObject, "isOpaqueHydratingObject");
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          __name(makeOpaqueHydratingObject, "makeOpaqueHydratingObject");
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          __name(preparePortalMount, "preparePortalMount");
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          __name(precacheFiberNode, "precacheFiberNode");
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          __name(markContainerAsRoot, "markContainerAsRoot");
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          __name(unmarkContainerAsRoot, "unmarkContainerAsRoot");
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          __name(isContainerMarkedAsRoot, "isContainerMarkedAsRoot");
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          __name(getClosestInstanceFromNode, "getClosestInstanceFromNode");
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          __name(getInstanceFromNode, "getInstanceFromNode");
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          __name(getNodeFromInstance, "getNodeFromInstance");
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          __name(getFiberCurrentPropsFromNode, "getFiberCurrentPropsFromNode");
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          __name(updateFiberProps, "updateFiberProps");
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          __name(getEventListenerSet, "getEventListenerSet");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          __name(createCursor, "createCursor");
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          __name(pop, "pop");
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          __name(push, "push");
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          __name(getUnmaskedContext, "getUnmaskedContext");
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          __name(cacheContext, "cacheContext");
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          __name(getMaskedContext, "getMaskedContext");
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          __name(hasContextChanged, "hasContextChanged");
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          __name(isContextProvider, "isContextProvider");
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          __name(popContext, "popContext");
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          __name(popTopLevelContextObject, "popTopLevelContextObject");
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          __name(pushTopLevelContextObject, "pushTopLevelContextObject");
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          __name(processChildContext, "processChildContext");
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          __name(pushContextProvider, "pushContextProvider");
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          __name(invalidateContextProvider, "invalidateContextProvider");
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node.type;
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          __name(findCurrentUnmaskedContext, "findCurrentUnmaskedContext");
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          __name(injectInternals, "injectInternals");
          function onScheduleRoot(root4, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root4, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onScheduleRoot, "onScheduleRoot");
          function onCommitRoot(root4, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root4.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root4, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onCommitRoot, "onCommitRoot");
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          __name(onCommitUnmount, "onCommitUnmount");
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = (
            // Fall back gracefully if we're running an older version of Scheduler.
            Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
            }
          );
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now3 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          __name(getCurrentPriorityLevel, "getCurrentPriorityLevel");
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          __name(reactPriorityToSchedulerPriority, "reactPriorityToSchedulerPriority");
          function runWithPriority$1(reactPriorityLevel, fn3) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn3);
          }
          __name(runWithPriority$1, "runWithPriority$1");
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          __name(scheduleCallback, "scheduleCallback");
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          __name(scheduleSyncCallback, "scheduleSyncCallback");
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          __name(cancelCallback, "cancelCallback");
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          __name(flushSyncCallbackQueue, "flushSyncCallbackQueue");
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i12 = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i12 < _queue.length; i12++) {
                      var callback = _queue[i12];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error3) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i12 + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error3;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          __name(flushSyncCallbackQueueImpl, "flushSyncCallbackQueueImpl");
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          __name(requestCurrentTransition, "requestCurrentTransition");
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: /* @__PURE__ */ __name(function(fiber, instance) {
            }, "recordUnsafeLifecycleWarnings"),
            flushPendingUnsafeLifecycleWarnings: /* @__PURE__ */ __name(function() {
            }, "flushPendingUnsafeLifecycleWarnings"),
            recordLegacyContextWarning: /* @__PURE__ */ __name(function(fiber, instance) {
            }, "recordLegacyContextWarning"),
            flushLegacyContextWarning: /* @__PURE__ */ __name(function() {
            }, "flushLegacyContextWarning"),
            discardPendingWarnings: /* @__PURE__ */ __name(function() {
            }, "discardPendingWarnings")
          };
          {
            var findStrictRoot = /* @__PURE__ */ __name(function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            }, "findStrictRoot");
            var setToSortedString = /* @__PURE__ */ __name(function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            }, "setToSortedString");
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component2.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          __name(resolveDefaultProps, "resolveDefaultProps");
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          __name(resetContextDependencies, "resetContextDependencies");
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          __name(enterDisallowedContextReadInDEV, "enterDisallowedContextReadInDEV");
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          __name(exitDisallowedContextReadInDEV, "exitDisallowedContextReadInDEV");
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          __name(pushProvider, "pushProvider");
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          __name(popProvider, "popProvider");
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error2("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          __name(calculateChangedBits, "calculateChangedBits");
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          __name(scheduleWorkOnParentPath, "scheduleWorkOnParentPath");
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list3 = fiber.dependencies;
              if (list3 !== null) {
                nextFiber = fiber.child;
                var dependency = list3.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update5 = createUpdate2(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update5.tag = ForceUpdate;
                      enqueueUpdate(fiber, update5);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list3.lanes = mergeLanes(list3.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          __name(propagateContextChange, "propagateContextChange");
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          __name(prepareToReadContext, "prepareToReadContext");
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context) ;
            else if (observedBits === false || observedBits === 0) ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          __name(readContext, "readContext");
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          __name(initializeUpdateQueue, "initializeUpdateQueue");
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone5 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone5;
            }
          }
          __name(cloneUpdateQueue, "cloneUpdateQueue");
          function createUpdate2(eventTime, lane) {
            var update5 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update5;
          }
          __name(createUpdate2, "createUpdate");
          function enqueueUpdate(fiber, update5) {
            var updateQueue3 = fiber.updateQueue;
            if (updateQueue3 === null) {
              return;
            }
            var sharedQueue = updateQueue3.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update5.next = update5;
            } else {
              update5.next = pending.next;
              pending.next = update5;
            }
            sharedQueue.pending = update5;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          __name(enqueueUpdate, "enqueueUpdate");
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update5 = firstBaseUpdate;
                  do {
                    var clone5 = {
                      eventTime: update5.eventTime,
                      lane: update5.lane,
                      tag: update5.tag,
                      payload: update5.payload,
                      callback: update5.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone5;
                    } else {
                      newLast.next = clone5;
                      newLast = clone5;
                    }
                    update5 = update5.next;
                  } while (update5 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          __name(enqueueCapturedUpdate, "enqueueCapturedUpdate");
          function getStateFromUpdate(workInProgress2, queue, update5, prevState, nextProps, instance) {
            switch (update5.tag) {
              case ReplaceState: {
                var payload = update5.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update5.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          __name(getStateFromUpdate, "getStateFromUpdate");
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update5 = firstBaseUpdate;
              do {
                var updateLane = update5.lane;
                var updateEventTime = update5.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone5 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update5.tag,
                    payload: update5.payload,
                    callback: update5.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone5;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone5;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update5.tag,
                      payload: update5.payload,
                      callback: update5.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update5, newState, props, instance);
                  var callback = update5.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update5];
                    } else {
                      effects.push(update5);
                    }
                  }
                }
                update5 = update5.next;
                if (update5 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update5 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          __name(processUpdateQueue, "processUpdateQueue");
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          __name(callCallback, "callCallback");
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          __name(resetHasForceUpdateBeforeProcessing, "resetHasForceUpdateBeforeProcessing");
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          __name(checkHasForceUpdateAfterProcessing, "checkHasForceUpdateAfterProcessing");
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i12 = 0; i12 < effects.length; i12++) {
                var effect7 = effects[i12];
                var callback = effect7.callback;
                if (callback !== null) {
                  effect7.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          __name(commitUpdateQueue, "commitUpdateQueue");
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React19.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = /* @__PURE__ */ __name(function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }, "warnOnInvalidCallback");
            warnOnUndefinedDerivedState = /* @__PURE__ */ __name(function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            }, "warnOnUndefinedDerivedState");
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: /* @__PURE__ */ __name(function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }, "value")
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue3 = workInProgress2.updateQueue;
              updateQueue3.baseState = memoizedState;
            }
          }
          __name(applyDerivedStateFromProps, "applyDerivedStateFromProps");
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: /* @__PURE__ */ __name(function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update5 = createUpdate2(eventTime, lane);
              update5.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update5.callback = callback;
              }
              enqueueUpdate(fiber, update5);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }, "enqueueSetState"),
            enqueueReplaceState: /* @__PURE__ */ __name(function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update5 = createUpdate2(eventTime, lane);
              update5.tag = ReplaceState;
              update5.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update5.callback = callback;
              }
              enqueueUpdate(fiber, update5);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }, "enqueueReplaceState"),
            enqueueForceUpdate: /* @__PURE__ */ __name(function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update5 = createUpdate2(eventTime, lane);
              update5.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update5.callback = callback;
              }
              enqueueUpdate(fiber, update5);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }, "enqueueForceUpdate")
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          __name(checkShouldComponentUpdate, "checkShouldComponentUpdate");
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          __name(checkClassInstance, "checkClassInstance");
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          __name(adoptClassInstance, "adoptClassInstance");
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          __name(constructClassInstance, "constructClassInstance");
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          __name(callComponentWillMount, "callComponentWillMount");
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          __name(callComponentWillReceiveProps, "callComponentWillReceiveProps");
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          __name(mountClassInstance, "mountClassInstance");
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          __name(resumeMountClassInstance, "resumeMountClassInstance");
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          __name(updateClassInstance, "updateClassInstance");
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = /* @__PURE__ */ __name(function(child, returnFiber) {
          }, "warnForMissingKey");
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = /* @__PURE__ */ __name(function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            }, "warnForMissingKey");
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = /* @__PURE__ */ __name(function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                }, "ref");
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          __name(coerceRef, "coerceRef");
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          __name(throwOnInvalidObjectType, "throwOnInvalidObjectType");
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          __name(warnOnFunctionType, "warnOnFunctionType");
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            __name(deleteChild, "deleteChild");
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            __name(deleteRemainingChildren, "deleteRemainingChildren");
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            __name(mapRemainingChildren, "mapRemainingChildren");
            function useFiber(fiber, pendingProps) {
              var clone5 = createWorkInProgress(fiber, pendingProps);
              clone5.index = 0;
              clone5.sibling = null;
              return clone5;
            }
            __name(useFiber, "useFiber");
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            __name(placeChild, "placeChild");
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            __name(placeSingleChild, "placeSingleChild");
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            __name(updateTextNode, "updateTextNode");
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            __name(updateElement, "updateElement");
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            __name(updatePortal, "updatePortal");
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment9) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            __name(updateFragment2, "updateFragment");
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            __name(createChild, "createChild");
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            __name(updateSlot, "updateSlot");
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            __name(updateFromMap, "updateFromMap");
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            __name(warnOnInvalidKey, "warnOnInvalidKey");
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i12 = 0; i12 < newChildren.length; i12++) {
                  var child = newChildren[i12];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            __name(reconcileChildrenArray, "reconcileChildrenArray");
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            __name(reconcileChildrenIterator, "reconcileChildrenIterator");
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            __name(reconcileSingleTextNode, "reconcileSingleTextNode");
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment9: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    // We intentionally fallthrough here if enableBlocksAPI is not on.
                    // eslint-disable-next-lined no-fallthrough
                    default: {
                      if (child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                      isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            __name(reconcileSingleElement, "reconcileSingleElement");
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            __name(reconcileSinglePortal, "reconcileSinglePortal");
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  // Intentionally fall through to the next case, which handles both
                  // functions and classes
                  // eslint-disable-next-lined no-fallthrough
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            __name(reconcileChildFibers2, "reconcileChildFibers");
            return reconcileChildFibers2;
          }
          __name(ChildReconciler, "ChildReconciler");
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          __name(cloneChildFibers, "cloneChildFibers");
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          __name(resetChildFibers, "resetChildFibers");
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c6) {
            if (!(c6 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c6;
          }
          __name(requiredContext, "requiredContext");
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          __name(getRootHostContainer, "getRootHostContainer");
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          __name(pushHostContainer, "pushHostContainer");
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          __name(popHostContainer, "popHostContainer");
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          __name(getHostContext, "getHostContext");
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          __name(pushHostContext, "pushHostContext");
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          __name(popHostContext, "popHostContext");
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          __name(hasSuspenseContext, "hasSuspenseContext");
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          __name(setDefaultShallowSuspenseContext, "setDefaultShallowSuspenseContext");
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          __name(setShallowSuspenseContext, "setShallowSuspenseContext");
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          __name(addSubtreeSuspenseContext, "addSubtreeSuspenseContext");
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          __name(pushSuspenseContext, "pushSuspenseContext");
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          __name(popSuspenseContext, "popSuspenseContext");
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          __name(shouldCaptureSuspense, "shouldCaptureSuspense");
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          __name(findFirstSuspended, "findFirstSuspended");
          var NoFlags$1 = (
            /*  */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Layout = (
            /*    */
            2
          );
          var Passive$1 = (
            /*   */
            4
          );
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          __name(enterHydrationState, "enterHydrationState");
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          __name(deleteHydratableInstance, "deleteHydratableInstance");
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          __name(insertNonHydratedInstance, "insertNonHydratedInstance");
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          __name(tryHydrate, "tryHydrate");
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          __name(tryToClaimNextHydratableInstance, "tryToClaimNextHydratableInstance");
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          __name(prepareToHydrateHostInstance, "prepareToHydrateHostInstance");
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          __name(prepareToHydrateHostTextInstance, "prepareToHydrateHostTextInstance");
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          __name(skipPastDehydratedSuspenseInstance, "skipPastDehydratedSuspenseInstance");
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          __name(popToNextHostParent, "popToNextHostParent");
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          __name(popHydrationState, "popHydrationState");
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          __name(resetHydrationState, "resetHydrationState");
          function getIsHydrating() {
            return isHydrating;
          }
          __name(getIsHydrating, "getIsHydrating");
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          __name(markSourceAsDirty, "markSourceAsDirty");
          function resetWorkInProgressVersions() {
            for (var i12 = 0; i12 < workInProgressSources.length; i12++) {
              var mutableSource = workInProgressSources[i12];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          __name(resetWorkInProgressVersions, "resetWorkInProgressVersions");
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          __name(getWorkInProgressVersion, "getWorkInProgressVersion");
          function setWorkInProgressVersion(mutableSource, version2) {
            {
              mutableSource._workInProgressVersionPrimary = version2;
            }
            workInProgressSources.push(mutableSource);
          }
          __name(setWorkInProgressVersion, "setWorkInProgressVersion");
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error2("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          __name(warnAboutMultipleRenderersDEV, "warnAboutMultipleRenderersDEV");
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          __name(mountHookTypesDev, "mountHookTypesDev");
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          __name(updateHookTypesDev, "updateHookTypesDev");
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          __name(checkDepsAreArrayDev, "checkDepsAreArrayDev");
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i12 = 0; i12 <= hookTypesUpdateIndexDev; i12++) {
                    var oldHookName = hookTypesDev[i12];
                    var newHookName = i12 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i12 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table2 += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          __name(warnOnHookMismatchInDev, "warnOnHookMismatchInDev");
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          __name(throwInvalidHookError, "throwInvalidHookError");
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i12 = 0; i12 < prevDeps.length && i12 < nextDeps.length; i12++) {
              if (objectIs(nextDeps[i12], prevDeps[i12])) {
                continue;
              }
              return false;
            }
            return true;
          }
          __name(areHookInputsEqual, "areHookInputsEqual");
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          __name(renderWithHooks, "renderWithHooks");
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          __name(bailoutHooks, "bailoutHooks");
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          __name(resetHooksAfterThrow, "resetHooksAfterThrow");
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          __name(mountWorkInProgressHook, "mountWorkInProgressHook");
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          __name(updateWorkInProgressHook, "updateWorkInProgressHook");
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          __name(createFunctionComponentUpdateQueue, "createFunctionComponentUpdateQueue");
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          __name(basicStateReducer, "basicStateReducer");
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          __name(mountReducer, "mountReducer");
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update5 = first;
              do {
                var updateLane = update5.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone5 = {
                    lane: updateLane,
                    action: update5.action,
                    eagerReducer: update5.eagerReducer,
                    eagerState: update5.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone5;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone5;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update5.action,
                      eagerReducer: update5.eagerReducer,
                      eagerState: update5.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update5.eagerReducer === reducer) {
                    newState = update5.eagerState;
                  } else {
                    var action = update5.action;
                    newState = reducer(newState, action);
                  }
                }
                update5 = update5.next;
              } while (update5 !== null && update5 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          __name(updateReducer, "updateReducer");
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update5 = firstRenderPhaseUpdate;
              do {
                var action = update5.action;
                newState = reducer(newState, action);
                update5 = update5.next;
              } while (update5 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          __name(rerenderReducer, "rerenderReducer");
          function readFromUnsubcribedMutableSource(root4, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version2 = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version2;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root4.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version2);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          __name(readFromUnsubcribedMutableSource, "readFromUnsubcribedMutableSource");
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root4 = getWorkInProgressRoot();
            if (!(root4 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version2 = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root4, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version2, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root4, lane);
                }
                markRootEntangled(root4, root4.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = /* @__PURE__ */ __name(function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root4, lane);
                } catch (error3) {
                  latestSetSnapshot(function() {
                    throw error3;
                  });
                }
              }, "handleChange");
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error2("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root4, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          __name(useMutableSource, "useMutableSource");
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          __name(mountMutableSource, "mountMutableSource");
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          __name(updateMutableSource, "updateMutableSource");
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          __name(mountState, "mountState");
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          __name(updateState, "updateState");
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          __name(rerenderState, "rerenderState");
          function pushEffect(tag, create, destroy, deps) {
            var effect7 = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect7.next = effect7;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect7.next = effect7;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect7;
                effect7.next = firstEffect;
                componentUpdateQueue.lastEffect = effect7;
              }
            }
            return effect7;
          }
          __name(pushEffect, "pushEffect");
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          __name(mountRef, "mountRef");
          function updateRef3(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          __name(updateRef3, "updateRef");
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          __name(mountEffectImpl, "mountEffectImpl");
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          __name(updateEffectImpl, "updateEffectImpl");
          function mountEffect(create, deps) {
            {
              if ("undefined" !== typeof jest) {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          __name(mountEffect, "mountEffect");
          function updateEffect(create, deps) {
            {
              if ("undefined" !== typeof jest) {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          __name(updateEffect, "updateEffect");
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          __name(mountLayoutEffect, "mountLayoutEffect");
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          __name(updateLayoutEffect, "updateLayoutEffect");
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          __name(imperativeHandleEffect, "imperativeHandleEffect");
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          __name(mountImperativeHandle, "mountImperativeHandle");
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          __name(updateImperativeHandle, "updateImperativeHandle");
          function mountDebugValue(value, formatterFn) {
          }
          __name(mountDebugValue, "mountDebugValue");
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          __name(mountCallback, "mountCallback");
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          __name(updateCallback, "updateCallback");
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          __name(mountMemo, "mountMemo");
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          __name(updateMemo, "updateMemo");
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          __name(mountDeferredValue, "mountDeferredValue");
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          __name(updateDeferredValue, "updateDeferredValue");
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          __name(rerenderDeferredValue, "rerenderDeferredValue");
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          __name(startTransition, "startTransition");
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start5 = startTransition.bind(null, setPending);
            mountRef(start5);
            return [start5, isPending];
          }
          __name(mountTransition, "mountTransition");
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef3();
            var start5 = startRef.current;
            return [start5, isPending];
          }
          __name(updateTransition, "updateTransition");
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef3();
            var start5 = startRef.current;
            return [start5, isPending];
          }
          __name(rerenderTransition, "rerenderTransition");
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          __name(getIsUpdatingOpaqueValueInRenderPhaseInDEV, "getIsUpdatingOpaqueValueInRenderPhaseInDEV");
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error2("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          __name(warnOnOpaqueIdentifierAccessInDEV, "warnOnOpaqueIdentifierAccessInDEV");
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = /* @__PURE__ */ __name(function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              }, "readValue");
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          __name(mountOpaqueIdentifier, "mountOpaqueIdentifier");
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          __name(updateOpaqueIdentifier, "updateOpaqueIdentifier");
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          __name(rerenderOpaqueIdentifier, "rerenderOpaqueIdentifier");
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update5 = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update5.next = update5;
            } else {
              update5.next = pending.next;
              pending.next = update5;
            }
            queue.pending = update5;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update5.eagerReducer = lastRenderedReducer;
                    update5.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if ("undefined" !== typeof jest) {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          __name(dispatchAction, "dispatchAction");
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = /* @__PURE__ */ __name(function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }, "warnInvalidContextAccess");
            var warnInvalidHookAccess = /* @__PURE__ */ __name(function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }, "warnInvalidHookAccess");
            HooksDispatcherOnMountInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef3();
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef3();
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef3();
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: /* @__PURE__ */ __name(function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              }, "readContext"),
              useCallback: /* @__PURE__ */ __name(function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              }, "useCallback"),
              useContext: /* @__PURE__ */ __name(function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              }, "useContext"),
              useEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              }, "useEffect"),
              useImperativeHandle: /* @__PURE__ */ __name(function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              }, "useImperativeHandle"),
              useLayoutEffect: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              }, "useLayoutEffect"),
              useMemo: /* @__PURE__ */ __name(function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useMemo"),
              useReducer: /* @__PURE__ */ __name(function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useReducer"),
              useRef: /* @__PURE__ */ __name(function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef3();
              }, "useRef"),
              useState: /* @__PURE__ */ __name(function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }, "useState"),
              useDebugValue: /* @__PURE__ */ __name(function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              }, "useDebugValue"),
              useDeferredValue: /* @__PURE__ */ __name(function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              }, "useDeferredValue"),
              useTransition: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              }, "useTransition"),
              useMutableSource: /* @__PURE__ */ __name(function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              }, "useMutableSource"),
              useOpaqueIdentifier: /* @__PURE__ */ __name(function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              }, "useOpaqueIdentifier"),
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          __name(getCommitTime, "getCommitTime");
          function recordCommitTime() {
            commitTime = now$1();
          }
          __name(recordCommitTime, "recordCommitTime");
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          __name(startProfilerTimer, "startProfilerTimer");
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          __name(stopProfilerTimerIfRunning, "stopProfilerTimerIfRunning");
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          __name(stopProfilerTimerIfRunningAndRecordDelta, "stopProfilerTimerIfRunningAndRecordDelta");
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          __name(transferActualDuration, "transferActualDuration");
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          __name(reconcileChildren, "reconcileChildren");
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          __name(forceUnmountCurrentAndReconcile, "forceUnmountCurrentAndReconcile");
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateForwardRef, "updateForwardRef");
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentName(_type)
                );
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare2 = Component2.compare;
              compare2 = compare2 !== null ? compare2 : shallowEqual;
              if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          __name(updateMemoComponent, "updateMemoComponent");
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentName(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          __name(updateSimpleMemoComponent, "updateSimpleMemoComponent");
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateOffscreenComponent, "updateOffscreenComponent");
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateFragment, "updateFragment");
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateMode, "updateMode");
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateProfiler, "updateProfiler");
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          __name(markRef, "markRef");
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateFunctionComponent, "updateFunctionComponent");
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentName(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          __name(updateClassComponent, "updateClassComponent");
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          __name(finishClassComponent, "finishClassComponent");
          function pushHostRootContext(workInProgress2) {
            var root4 = workInProgress2.stateNode;
            if (root4.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
            } else if (root4.context) {
              pushTopLevelContextObject(workInProgress2, root4.context, false);
            }
            pushHostContainer(workInProgress2, root4.containerInfo);
          }
          __name(pushHostRootContext, "pushHostRootContext");
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue3 = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue3 !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root4 = workInProgress2.stateNode;
            if (root4.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root4.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i12 = 0; i12 < mutableSourceEagerHydrationData.length; i12 += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i12];
                    var version2 = mutableSourceEagerHydrationData[i12 + 1];
                    setWorkInProgressVersion(mutableSource, version2);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          __name(updateHostRoot, "updateHostRoot");
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateHostComponent, "updateHostComponent");
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          __name(updateHostText, "updateHostText");
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentName(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  updateLanes,
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          __name(mountLazyComponent, "mountLazyComponent");
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          __name(mountIncompleteClassComponent, "mountIncompleteClassComponent");
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component2.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component2, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          __name(mountIndeterminateComponent, "mountIndeterminateComponent");
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info2 = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentName(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          __name(validateFunctionComponentInDev, "validateFunctionComponentInDev");
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          __name(mountSuspenseOffscreenState, "mountSuspenseOffscreenState");
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          __name(updateSuspenseOffscreenState, "updateSuspenseOffscreenState");
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          __name(shouldRemainOnFallback, "shouldRemainOnFallback");
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          __name(getRemainingWorkInPrimaryTree, "getRemainingWorkInPrimaryTree");
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          __name(updateSuspenseComponent, "updateSuspenseComponent");
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          __name(mountSuspensePrimaryChildren, "mountSuspensePrimaryChildren");
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          __name(mountSuspenseFallbackChildren, "mountSuspenseFallbackChildren");
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          __name(createWorkInProgressOffscreenFiber, "createWorkInProgressOffscreenFiber");
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          __name(updateSuspensePrimaryChildren, "updateSuspensePrimaryChildren");
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          __name(updateSuspenseFallbackChildren, "updateSuspenseFallbackChildren");
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          __name(scheduleWorkOnFiber, "scheduleWorkOnFiber");
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          __name(propagateSuspenseContextChange, "propagateSuspenseContextChange");
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          __name(findLastContentRow, "findLastContentRow");
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          __name(validateRevealOrder, "validateRevealOrder");
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          __name(validateTailOptions, "validateTailOptions");
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          __name(validateSuspenseListNestedChild, "validateSuspenseListNestedChild");
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i12 = 0; i12 < children.length; i12++) {
                    if (!validateSuspenseListNestedChild(children[i12], i12)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          __name(validateSuspenseListChildren, "validateSuspenseListChildren");
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          __name(initSuspenseListRenderState, "initSuspenseListRenderState");
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0,
                    workInProgress2.lastEffect
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          __name(updateSuspenseListComponent, "updateSuspenseListComponent");
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          __name(updatePortalComponent, "updatePortalComponent");
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateContextProvider, "updateContextProvider");
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          __name(updateContextConsumer, "updateContextConsumer");
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          __name(markWorkInProgressReceivedUpdate, "markWorkInProgressReceivedUpdate");
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          __name(bailoutOnAlreadyFinishedWork, "bailoutOnAlreadyFinishedWork");
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          __name(remountFiber, "remountFiber");
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component2 = workInProgress2.type;
                    if (isContextProvider(Component2)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment9:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentName(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(beginWork, "beginWork");
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          __name(markUpdate, "markUpdate");
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          __name(markRef$1, "markRef$1");
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = /* @__PURE__ */ __name(function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }, "appendAllChildren");
            updateHostContainer = /* @__PURE__ */ __name(function(workInProgress2) {
            }, "updateHostContainer");
            updateHostComponent$1 = /* @__PURE__ */ __name(function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            }, "updateHostComponent$1");
            updateHostText$1 = /* @__PURE__ */ __name(function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            }, "updateHostText$1");
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          __name(cutOffTailIfNeeded, "cutOffTailIfNeeded");
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment9:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now3() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now3();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(completeWork, "completeWork");
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          __name(unwindWork, "unwindWork");
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          __name(unwindInterruptedWork, "unwindInterruptedWork");
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          __name(createCapturedValue, "createCapturedValue");
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          __name(showErrorDialog, "showErrorDialog");
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e18) {
              setTimeout(function() {
                throw e18;
              });
            }
          }
          __name(logCapturedError, "logCapturedError");
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update5 = createUpdate2(NoTimestamp, lane);
            update5.tag = CaptureUpdate;
            update5.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update5.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update5;
          }
          __name(createRootErrorUpdate, "createRootErrorUpdate");
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update5 = createUpdate2(NoTimestamp, lane);
            update5.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update5.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update5.callback = /* @__PURE__ */ __name(function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              }, "callback");
            } else {
              update5.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update5;
          }
          __name(createClassErrorUpdate, "createClassErrorUpdate");
          function attachPingListener(root4, wakeable, lanes) {
            var pingCache = root4.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root4.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          __name(attachPingListener, "attachPingListener");
          function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue3 = /* @__PURE__ */ new Set();
                    updateQueue3.add(wakeable);
                    _workInProgress.updateQueue = updateQueue3;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update5 = createUpdate2(NoTimestamp, SyncLane);
                        update5.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update5);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root4, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          __name(throwException, "throwException");
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = /* @__PURE__ */ __name(function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          }, "callComponentWillUnmountWithTimer");
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          __name(safelyCallComponentWillUnmount, "safelyCallComponentWillUnmount");
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          __name(safelyDetachRef, "safelyDetachRef");
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error3 = clearCaughtError();
                captureCommitPhaseError(current2, error3);
              }
            }
          }
          __name(safelyCallDestroy, "safelyCallDestroy");
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root4 = finishedWork.stateNode;
                    clearContainer(root4.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(commitBeforeMutationLifeCycles, "commitBeforeMutationLifeCycles");
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue3 = finishedWork.updateQueue;
            var lastEffect = updateQueue3 !== null ? updateQueue3.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect7 = firstEffect;
              do {
                if ((effect7.tag & tag) === tag) {
                  var destroy = effect7.destroy;
                  effect7.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect7 = effect7.next;
              } while (effect7 !== firstEffect);
            }
          }
          __name(commitHookEffectListUnmount, "commitHookEffectListUnmount");
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue3 = finishedWork.updateQueue;
            var lastEffect = updateQueue3 !== null ? updateQueue3.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect7 = firstEffect;
              do {
                if ((effect7.tag & tag) === tag) {
                  var create = effect7.create;
                  effect7.destroy = create();
                  {
                    var destroy = effect7.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect7 = effect7.next;
              } while (effect7 !== firstEffect);
            }
          }
          __name(commitHookEffectListMount, "commitHookEffectListMount");
          function schedulePassiveEffects(finishedWork) {
            var updateQueue3 = finishedWork.updateQueue;
            var lastEffect = updateQueue3 !== null ? updateQueue3.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect7 = firstEffect;
              do {
                var _effect = effect7, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect7);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect7);
                }
                effect7 = next;
              } while (effect7 !== firstEffect);
            }
          }
          __name(schedulePassiveEffects, "schedulePassiveEffects");
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue3 = finishedWork.updateQueue;
                if (updateQueue3 !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue3, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(commitLifeCycles, "commitLifeCycles");
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          __name(hideOrUnhideAllChildren, "hideOrUnhideAllChildren");
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          __name(commitAttachRef, "commitAttachRef");
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          __name(commitDetachRef, "commitDetachRef");
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue3 = current2.updateQueue;
                if (updateQueue3 !== null) {
                  var lastEffect = updateQueue3.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect7 = firstEffect;
                    do {
                      var _effect2 = effect7, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect7);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect7 = effect7.next;
                    } while (effect7 !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          __name(commitUnmount, "commitUnmount");
          function commitNestedUnmounts(finishedRoot, root4, renderPriorityLevel) {
            var node = root4;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
              // If we don't use mutation we drill down into portals here instead.
              node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root4) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root4) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          __name(commitNestedUnmounts, "commitNestedUnmounts");
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          __name(detachFiberMutation, "detachFiberMutation");
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(getHostParentFiber, "getHostParentFiber");
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          __name(isHostParent, "isHostParent");
          function getHostSibling(fiber) {
            var node = fiber;
            siblings: while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
          }
          __name(getHostSibling, "getHostSibling");
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              // eslint-disable-next-line-no-fallthrough
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          __name(commitPlacement, "commitPlacement");
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          __name(insertOrAppendPlacementNodeIntoContainer, "insertOrAppendPlacementNodeIntoContainer");
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          __name(insertOrAppendPlacementNode, "insertOrAppendPlacementNode");
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          __name(unmountHostComponents, "unmountHostComponents");
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          __name(commitDeletion, "commitDeletion");
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          __name(commitWork, "commitWork");
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          __name(commitSuspenseComponent, "commitSuspenseComponent");
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          __name(commitSuspenseHydrationCallbacks, "commitSuspenseHydrationCallbacks");
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          __name(attachSuspenseRetryListeners, "attachSuspenseRetryListeners");
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          __name(isSuspenseBoundaryBeingHidden, "isSuspenseBoundaryBeingHidden");
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          __name(commitResetTextContent, "commitResetTextContent");
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          __name(onCommitRoot$1, "onCommitRoot$1");
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var EventContext = (
            /*                 */
            2
          );
          var DiscreteEventContext = (
            /*         */
            4
          );
          var LegacyUnbatchedContext = (
            /*       */
            8
          );
          var RenderContext = (
            /*                */
            16
          );
          var CommitContext = (
            /*                */
            32
          );
          var RetryAfterError = (
            /*       */
            64
          );
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
          }
          __name(resetRenderTimer, "resetRenderTimer");
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          __name(getRenderTargetTime, "getRenderTargetTime");
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          __name(getWorkInProgressRoot, "getWorkInProgressRoot");
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now3();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now3();
            return currentEventTime;
          }
          __name(requestEventTime, "requestEventTime");
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if (
              // TODO: Temporary. We're removing the concept of discrete updates.
              (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2
            ) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          __name(requestUpdateLane, "requestUpdateLane");
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          __name(requestRetryLane, "requestRetryLane");
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root4 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root4 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root4, lane, eventTime);
            if (root4 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root4, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if (
                // Check if we're inside unbatchedUpdates
                (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
                (executionContext & (RenderContext | CommitContext)) === NoContext
              ) {
                schedulePendingInteractions(root4, lane);
                performSyncWorkOnRoot(root4);
              } else {
                ensureRootIsScheduled(root4, eventTime);
                schedulePendingInteractions(root4, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && // Only updates at user-blocking priority or greater are considered
              // discrete, even inside a discrete event.
              (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root4]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root4);
                }
              }
              ensureRootIsScheduled(root4, eventTime);
              schedulePendingInteractions(root4, lane);
            }
            mostRecentlyUpdatedRoot = root4;
          }
          __name(scheduleUpdateOnFiber, "scheduleUpdateOnFiber");
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root4 = node.stateNode;
              return root4;
            } else {
              return null;
            }
          }
          __name(markUpdateLaneFromFiberToRoot, "markUpdateLaneFromFiberToRoot");
          function ensureRootIsScheduled(root4, currentTime) {
            var existingCallbackNode = root4.callbackNode;
            markStarvedLanesAsExpired(root4, currentTime);
            var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root4.callbackNode = null;
                root4.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root4.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root4));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
            }
            root4.callbackPriority = newCallbackPriority;
            root4.callbackNode = newCallbackNode;
          }
          __name(ensureRootIsScheduled, "ensureRootIsScheduled");
          function performConcurrentWorkOnRoot(root4) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root4.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root4.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root4, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root4, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root4.hydrate) {
                  root4.hydrate = false;
                  clearContainer(root4.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root4);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root4, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root4, NoLanes);
                markRootSuspended$1(root4, lanes);
                ensureRootIsScheduled(root4, now3());
                throw fatalError;
              }
              var finishedWork = root4.current.alternate;
              root4.finishedWork = finishedWork;
              root4.finishedLanes = lanes;
              finishConcurrentRender(root4, exitStatus, lanes);
            }
            ensureRootIsScheduled(root4, now3());
            if (root4.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root4);
            }
            return null;
          }
          __name(performConcurrentWorkOnRoot, "performConcurrentWorkOnRoot");
          function finishConcurrentRender(root4, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root4);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root4, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root4.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root4, suspendedLanes);
                      break;
                    }
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now3() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4);
                break;
              }
              case RootCompleted: {
                commitRoot(root4);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          __name(finishConcurrentRender, "finishConcurrentRender");
          function markRootSuspended$1(root4, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root4, suspendedLanes);
          }
          __name(markRootSuspended$1, "markRootSuspended$1");
          function performSyncWorkOnRoot(root4) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root4 === workInProgressRoot && includesSomeLane(root4.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root4, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root4, lanes);
                exitStatus = renderRootSync(root4, lanes);
              }
            } else {
              lanes = getNextLanes(root4, NoLanes);
              exitStatus = renderRootSync(root4, lanes);
            }
            if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root4.hydrate) {
                root4.hydrate = false;
                clearContainer(root4.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root4);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root4, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now3());
              throw fatalError;
            }
            var finishedWork = root4.current.alternate;
            root4.finishedWork = finishedWork;
            root4.finishedLanes = lanes;
            commitRoot(root4);
            ensureRootIsScheduled(root4, now3());
            return null;
          }
          __name(performSyncWorkOnRoot, "performSyncWorkOnRoot");
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error2("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          __name(flushDiscreteUpdates, "flushDiscreteUpdates");
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root4) {
                markDiscreteUpdatesExpired(root4);
                ensureRootIsScheduled(root4, now3());
              });
            }
            flushSyncCallbackQueue();
          }
          __name(flushPendingDiscreteUpdates, "flushPendingDiscreteUpdates");
          function batchedUpdates$1(fn3, a21) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn3(a21);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          __name(batchedUpdates$1, "batchedUpdates$1");
          function batchedEventUpdates$1(fn3, a21) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn3(a21);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          __name(batchedEventUpdates$1, "batchedEventUpdates$1");
          function discreteUpdates$1(fn3, a21, b6, c6, d16) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn3.bind(null, a21, b6, c6, d16));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          __name(discreteUpdates$1, "discreteUpdates$1");
          function unbatchedUpdates(fn3, a21) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn3(a21);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          __name(unbatchedUpdates, "unbatchedUpdates");
          function flushSync(fn3, a21) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn3(a21);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn3) {
                  return runWithPriority$1(ImmediatePriority$1, fn3.bind(null, a21));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          __name(flushSync, "flushSync");
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          __name(pushRenderLanes, "pushRenderLanes");
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          __name(popRenderLanes, "popRenderLanes");
          function prepareFreshStack(root4, lanes) {
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            var timeoutHandle = root4.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root4.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root4;
            workInProgress = createWorkInProgress(root4.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          __name(prepareFreshStack, "prepareFreshStack");
          function handleError(root4, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          __name(handleError, "handleError");
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          __name(pushDispatcher, "pushDispatcher");
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          __name(popDispatcher, "popDispatcher");
          function pushInteractions(root4) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root4.memoizedInteractions;
              return prevInteractions;
            }
          }
          __name(pushInteractions, "pushInteractions");
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          __name(popInteractions, "popInteractions");
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now3();
          }
          __name(markCommitTimeOfFallback, "markCommitTimeOfFallback");
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          __name(markSkippedUpdateLanes, "markSkippedUpdateLanes");
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          __name(renderDidSuspend, "renderDidSuspend");
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          __name(renderDidSuspendDelayIfPossible, "renderDidSuspendDelayIfPossible");
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          __name(renderDidError, "renderDidError");
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          __name(renderHasNotSuspendedYet, "renderHasNotSuspendedYet");
          function renderRootSync(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root4, lanes);
              startWorkOnPendingInteractions(root4, lanes);
            }
            var prevInteractions = pushInteractions(root4);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          __name(renderRootSync, "renderRootSync");
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          __name(workLoopSync, "workLoopSync");
          function renderRootConcurrent(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root4, lanes);
              startWorkOnPendingInteractions(root4, lanes);
            }
            var prevInteractions = pushInteractions(root4);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          __name(renderRootConcurrent, "renderRootConcurrent");
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          __name(workLoopConcurrent, "workLoopConcurrent");
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          __name(performUnitOfWork, "performUnitOfWork");
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
                (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          __name(completeUnitOfWork, "completeUnitOfWork");
          function resetChildLanes(completedWork) {
            if (
              // TODO: Move this check out of the hot path by moving `resetChildLanes`
              // to switch statement in `completeWork`.
              (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes
            ) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          __name(resetChildLanes, "resetChildLanes");
          function commitRoot(root4) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root4, renderPriorityLevel));
            return null;
          }
          __name(commitRoot, "commitRoot");
          function commitRootImpl(root4, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root4.finishedWork;
            var lanes = root4.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            if (!(finishedWork !== root4.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root4.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root4, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root4)) {
                rootsWithPendingDiscreteUpdates.delete(root4);
              }
            }
            if (root4 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root4);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root4.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error3 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error3);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root4, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root4.containerInfo);
              root4.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root4, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root4.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root4;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root4.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i12 = 0; i12 < expirationTimes.length; i12++) {
                    scheduleInteractions(root4, expirationTimes[i12], root4.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root4, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root4, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root4 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root4;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root4, now3());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          __name(commitRootImpl, "commitRootImpl");
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          __name(commitBeforeMutationEffects, "commitBeforeMutationEffects");
          function commitMutationEffects(root4, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root4, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          __name(commitMutationEffects, "commitMutationEffects");
          function commitLayoutEffects(root4, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root4, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          __name(commitLayoutEffects, "commitLayoutEffects");
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          __name(flushPassiveEffects, "flushPassiveEffects");
          function enqueuePendingPassiveHookEffectMount(fiber, effect7) {
            pendingPassiveHookEffectsMount.push(effect7, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          __name(enqueuePendingPassiveHookEffectMount, "enqueuePendingPassiveHookEffectMount");
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect7) {
            pendingPassiveHookEffectsUnmount.push(effect7, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          __name(enqueuePendingPassiveHookEffectUnmount, "enqueuePendingPassiveHookEffectUnmount");
          function invokePassiveEffectCreate(effect7) {
            var create = effect7.create;
            effect7.destroy = create();
          }
          __name(invokePassiveEffectCreate, "invokePassiveEffectCreate");
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root4 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root4);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i12 = 0; i12 < unmountEffects.length; i12 += 2) {
              var _effect = unmountEffects[i12];
              var fiber = unmountEffects[i12 + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error3 = clearCaughtError();
                    captureCommitPhaseError(fiber, error3);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect7 = root4.current.firstEffect;
            while (effect7 !== null) {
              var nextNextEffect = effect7.nextEffect;
              effect7.nextEffect = null;
              if (effect7.flags & Deletion) {
                detachFiberAfterEffects(effect7);
              }
              effect7 = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root4, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          __name(flushPassiveEffectsImpl, "flushPassiveEffectsImpl");
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          __name(isAlreadyFailedLegacyErrorBoundary, "isAlreadyFailedLegacyErrorBoundary");
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          __name(markLegacyErrorBoundaryAsFailed, "markLegacyErrorBoundaryAsFailed");
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          __name(prepareToThrowUncaughtError, "prepareToThrowUncaughtError");
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValue(error3, sourceFiber);
            var update5 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update5);
            var eventTime = requestEventTime();
            var root4 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root4 !== null) {
              markRootUpdated(root4, SyncLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
              schedulePendingInteractions(root4, SyncLane);
            }
          }
          __name(captureCommitPhaseErrorOnRoot, "captureCommitPhaseErrorOnRoot");
          function captureCommitPhaseError(sourceFiber, error3) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error3);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error3);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error3, sourceFiber);
                  var update5 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update5);
                  var eventTime = requestEventTime();
                  var root4 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root4 !== null) {
                    markRootUpdated(root4, SyncLane, eventTime);
                    ensureRootIsScheduled(root4, eventTime);
                    schedulePendingInteractions(root4, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error3, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          __name(captureCommitPhaseError, "captureCommitPhaseError");
          function pingSuspendedRoot(root4, wakeable, pingedLanes) {
            var pingCache = root4.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root4, pingedLanes);
            if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root4, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, pingedLanes);
          }
          __name(pingSuspendedRoot, "pingSuspendedRoot");
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root4 !== null) {
              markRootUpdated(root4, retryLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
              schedulePendingInteractions(root4, retryLane);
            }
          }
          __name(retryTimedOutBoundary, "retryTimedOutBoundary");
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          __name(resolveRetryWakeable, "resolveRetryWakeable");
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          __name(jnd, "jnd");
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          __name(checkForNestedUpdates, "checkForNestedUpdates");
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          __name(flushRenderPhaseStrictModeWarningsInDEV, "flushRenderPhaseStrictModeWarningsInDEV");
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          __name(warnAboutUpdateOnNotYetMountedFiberInDEV, "warnAboutUpdateOnNotYetMountedFiberInDEV");
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects) ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          __name(warnAboutUpdateOnUnmountedFiberInDEV, "warnAboutUpdateOnUnmountedFiberInDEV");
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = /* @__PURE__ */ __name(function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            }, "beginWork$1");
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          __name(warnAboutRenderPhaseUpdatesInDEV, "warnAboutRenderPhaseUpdatesInDEV");
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          __name(warnIfNotScopedWithMatchingAct, "warnIfNotScopedWithMatchingAct");
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error2("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          __name(warnIfNotCurrentlyActingEffectsInDEV, "warnIfNotCurrentlyActingEffectsInDEV");
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          __name(warnIfNotCurrentlyActingUpdatesInDEV, "warnIfNotCurrentlyActingUpdatesInDEV");
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error2(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          __name(warnIfUnmockedScheduler, "warnIfUnmockedScheduler");
          function computeThreadID(root4, lane) {
            return lane * 1e3 + root4.interactionThreadID;
          }
          __name(computeThreadID, "computeThreadID");
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          __name(markSpawnedWork, "markSpawnedWork");
          function scheduleInteractions(root4, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root4.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          __name(scheduleInteractions, "scheduleInteractions");
          function schedulePendingInteractions(root4, lane) {
            scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
          }
          __name(schedulePendingInteractions, "schedulePendingInteractions");
          function startWorkOnPendingInteractions(root4, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root4.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error3) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error3;
                  });
                }
              }
            }
          }
          __name(startWorkOnPendingInteractions, "startWorkOnPendingInteractions");
          function finishPendingInteractions(root4, committedLanes) {
            var remainingLanesAfterCommit = root4.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
              }
            } catch (error3) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error3;
              });
            } finally {
              var pendingInteractionMap = root4.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error3) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error3;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          __name(finishPendingInteractions, "finishPendingInteractions");
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          __name(shouldForceFlushFallbacksInDEV, "shouldForceFlushFallbacksInDEV");
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          __name(detachFiberAfterEffects, "detachFiberAfterEffects");
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = /* @__PURE__ */ __name(function(handler) {
            {
              resolveFamily = handler;
            }
          }, "setRefreshHandler");
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          __name(resolveFunctionForHotReloading, "resolveFunctionForHotReloading");
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          __name(resolveClassForHotReloading, "resolveClassForHotReloading");
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          __name(resolveForwardRefForHotReloading, "resolveForwardRefForHotReloading");
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          __name(isCompatibleFamilyForHotReloading, "isCompatibleFamilyForHotReloading");
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          __name(markFailedErrorBoundaryForHotReloading, "markFailedErrorBoundaryForHotReloading");
          var scheduleRefresh = /* @__PURE__ */ __name(function(root4, update5) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update5.staleFamilies, updatedFamilies = update5.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
              });
            }
          }, "scheduleRefresh");
          var scheduleRoot = /* @__PURE__ */ __name(function(root4, element) {
            {
              if (root4.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root4, null, null);
              });
            }
          }, "scheduleRoot");
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          __name(scheduleFibersWithFamiliesRecursively, "scheduleFibersWithFamiliesRecursively");
          var findHostInstancesForRefresh = /* @__PURE__ */ __name(function(root4, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
              return hostInstances;
            }
          }, "findHostInstancesForRefresh");
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          __name(findHostInstancesForMatchingFibersRecursively, "findHostInstancesForMatchingFibersRecursively");
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          __name(findHostInstancesForFiberShallowly, "findHostInstancesForFiberShallowly");
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          __name(findChildHostInstancesForFiberShallowly, "findChildHostInstancesForFiberShallowly");
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e18) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          __name(FiberNode, "FiberNode");
          var createFiber = /* @__PURE__ */ __name(function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          }, "createFiber");
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct$1, "shouldConstruct$1");
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          __name(isSimpleFunctionComponent, "isSimpleFunctionComponent");
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          __name(resolveLazyComponentTag, "resolveLazyComponentTag");
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          __name(createWorkInProgress, "createWorkInProgress");
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          __name(resetWorkInProgress, "resetWorkInProgress");
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          __name(createHostRootFiber, "createHostRootFiber");
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info2 = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info2);
                    }
                  }
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          __name(createFiberFromTypeAndProps, "createFiberFromTypeAndProps");
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          __name(createFiberFromElement, "createFiberFromElement");
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment9, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromFragment, "createFiberFromFragment");
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          __name(createFiberFromProfiler, "createFiberFromProfiler");
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromSuspense, "createFiberFromSuspense");
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromSuspenseList, "createFiberFromSuspenseList");
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromOffscreen, "createFiberFromOffscreen");
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromLegacyHidden, "createFiberFromLegacyHidden");
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          __name(createFiberFromText, "createFiberFromText");
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          __name(createFiberFromHostInstanceForDeletion, "createFiberFromHostInstanceForDeletion");
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          __name(createFiberFromPortal, "createFiberFromPortal");
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          __name(assignFiberPropertiesInDEV, "assignFiberPropertiesInDEV");
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          __name(FiberRootNode, "FiberRootNode");
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root4 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root4.current = uninitializedFiber;
            uninitializedFiber.stateNode = root4;
            initializeUpdateQueue(uninitializedFiber);
            return root4;
          }
          __name(createFiberRoot, "createFiberRoot");
          function registerMutableSourceForHydration(root4, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root4.mutableSourceEagerHydrationData == null) {
              root4.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root4.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          __name(registerMutableSourceForHydration, "registerMutableSourceForHydration");
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          __name(createPortal, "createPortal");
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          __name(getContextForSubtree, "getContextForSubtree");
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          __name(findHostInstanceWithWarning, "findHostInstanceWithWarning");
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          __name(createContainer, "createContainer");
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if ("undefined" !== typeof jest) {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update5 = createUpdate2(eventTime, lane);
            update5.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update5.callback = callback;
            }
            enqueueUpdate(current$1, update5);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          __name(updateContainer, "updateContainer");
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          __name(getPublicRootInstance, "getPublicRootInstance");
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          __name(markRetryLaneImpl, "markRetryLaneImpl");
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          __name(markRetryLaneIfNotHydrated, "markRetryLaneIfNotHydrated");
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          __name(attemptUserBlockingHydration$1, "attemptUserBlockingHydration$1");
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          __name(attemptContinuousHydration$1, "attemptContinuousHydration$1");
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          __name(attemptHydrationAtCurrentPriority$1, "attemptHydrationAtCurrentPriority$1");
          function runWithPriority$2(priority3, fn3) {
            try {
              setCurrentUpdateLanePriority(priority3);
              return fn3();
            } finally {
            }
          }
          __name(runWithPriority$2, "runWithPriority$2");
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          __name(findHostInstanceWithNoPortals, "findHostInstanceWithNoPortals");
          var shouldSuspendImpl = /* @__PURE__ */ __name(function(fiber) {
            return false;
          }, "shouldSuspendImpl");
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          __name(shouldSuspend, "shouldSuspend");
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = /* @__PURE__ */ __name(function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            }, "copyWithDeleteImpl");
            var copyWithDelete = /* @__PURE__ */ __name(function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            }, "copyWithDelete");
            var copyWithRenameImpl = /* @__PURE__ */ __name(function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            }, "copyWithRenameImpl");
            var copyWithRename = /* @__PURE__ */ __name(function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i12 = 0; i12 < newPath.length - 1; i12++) {
                  if (oldPath[i12] !== newPath[i12]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            }, "copyWithRename");
            var copyWithSetImpl = /* @__PURE__ */ __name(function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            }, "copyWithSetImpl");
            var copyWithSet = /* @__PURE__ */ __name(function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            }, "copyWithSet");
            var findHook = /* @__PURE__ */ __name(function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            }, "findHook");
            overrideHookState = /* @__PURE__ */ __name(function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            }, "overrideHookState");
            overrideHookStateDeletePath = /* @__PURE__ */ __name(function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            }, "overrideHookStateDeletePath");
            overrideHookStateRenamePath = /* @__PURE__ */ __name(function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            }, "overrideHookStateRenamePath");
            overrideProps = /* @__PURE__ */ __name(function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }, "overrideProps");
            overridePropsDeletePath = /* @__PURE__ */ __name(function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }, "overridePropsDeletePath");
            overridePropsRenamePath = /* @__PURE__ */ __name(function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }, "overridePropsRenamePath");
            scheduleUpdate = /* @__PURE__ */ __name(function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }, "scheduleUpdate");
            setSuspenseHandler = /* @__PURE__ */ __name(function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            }, "setSuspenseHandler");
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          __name(findHostInstanceByFiber, "findHostInstanceByFiber");
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          __name(emptyFindFiberByHostInstance, "emptyFindFiberByHostInstance");
          function getCurrentFiberForDevTools() {
            return current;
          }
          __name(getCurrentFiberForDevTools, "getCurrentFiberForDevTools");
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          __name(injectIntoDevTools, "injectIntoDevTools");
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          __name(ReactDOMRoot, "ReactDOMRoot");
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          __name(ReactDOMBlockingRoot, "ReactDOMBlockingRoot");
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root4 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root4.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root4.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root4, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root4 = this._internalRoot;
            var container = root4.containerInfo;
            updateContainer(null, root4, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root4 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root4.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i12 = 0; i12 < mutableSources.length; i12++) {
                var mutableSource = mutableSources[i12];
                registerMutableSourceForHydration(root4, mutableSource);
              }
            }
            return root4;
          }
          __name(createRootImpl, "createRootImpl");
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          __name(createLegacyRoot, "createLegacyRoot");
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          __name(isValidContainer, "isValidContainer");
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = /* @__PURE__ */ __name(function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            }, "topLevelUpdateWarnings");
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          __name(getReactRootElementInContainer, "getReactRootElementInContainer");
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement2 = getReactRootElementInContainer(container);
            return !!(rootElement2 && rootElement2.nodeType === ELEMENT_NODE && rootElement2.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          __name(shouldHydrateDueToLegacyHeuristic, "shouldHydrateDueToLegacyHeuristic");
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error2("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn2("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          __name(legacyCreateRootFromDOMContainer, "legacyCreateRootFromDOMContainer");
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          __name(warnOnInvalidCallback$1, "warnOnInvalidCallback$1");
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root4 = container._reactRootContainer;
            var fiberRoot;
            if (!root4) {
              root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root4._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = /* @__PURE__ */ __name(function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                }, "callback");
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root4._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = /* @__PURE__ */ __name(function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                }, "callback");
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          __name(legacyRenderSubtreeIntoContainer, "legacyRenderSubtreeIntoContainer");
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          __name(findDOMNode, "findDOMNode");
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          __name(hydrate, "hydrate");
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          __name(render, "render");
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          __name(unstable_renderSubtreeIntoContainer, "unstable_renderSubtreeIntoContainer");
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          __name(unmountComponentAtNode, "unmountComponentAtNode");
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          __name(createPortal$1, "createPortal$1");
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          __name(renderSubtreeIntoContainer, "renderSubtreeIntoContainer");
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn2('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          __name(unstable_createPortal, "unstable_createPortal");
          var Internals = {
            // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
            // This is an array for better minification.
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              // TODO: This is related to `act`, not events. Move to separate key?
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../../contrib/hdbt/node_modules/react-dom/index.js"(exports, module) {
      
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
      
      (function() {
        function is3(x, y2) {
          return x === y2 && (0 !== x || 1 / x === 1 / y2) || x !== x && y2 !== y2;
        }
        __name(is3, "is");
        function useSyncExternalStore$2(subscribe, getSnapshot) {
          didWarnOld18Alpha || void 0 === React19.startTransition || (didWarnOld18Alpha = true, console.error(
            "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
          ));
          var value = getSnapshot();
          if (!didWarnUncachedGetSnapshot) {
            var cachedValue = getSnapshot();
            objectIs(value, cachedValue) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          }
          cachedValue = useState10({
            inst: { value, getSnapshot }
          });
          var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
          useLayoutEffect8(
            function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            },
            [subscribe, value, getSnapshot]
          );
          useEffect14(
            function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
              return subscribe(function() {
                checkIfSnapshotChanged(inst) && forceUpdate({ inst });
              });
            },
            [subscribe]
          );
          useDebugValue3(value);
          return value;
        }
        __name(useSyncExternalStore$2, "useSyncExternalStore$2");
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          inst = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
          } catch (error2) {
            return true;
          }
        }
        __name(checkIfSnapshotChanged, "checkIfSnapshotChanged");
        function useSyncExternalStore$1(subscribe, getSnapshot) {
          return getSnapshot();
        }
        __name(useSyncExternalStore$1, "useSyncExternalStore$1");
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React19 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is3, useState10 = React19.useState, useEffect14 = React19.useEffect, useLayoutEffect8 = React19.useLayoutEffect, useDebugValue3 = React19.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
        exports.useSyncExternalStore = void 0 !== React19.useSyncExternalStore ? React19.useSyncExternalStore : shim;
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // node_modules/picocolors/picocolors.browser.js
  var require_picocolors_browser = __commonJS({
    "node_modules/picocolors/picocolors.browser.js"(exports, module) {
      
      var x = String;
      var create = /* @__PURE__ */ __name(function() {
        return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x, blackBright: x, redBright: x, greenBright: x, yellowBright: x, blueBright: x, magentaBright: x, cyanBright: x, whiteBright: x, bgBlackBright: x, bgRedBright: x, bgGreenBright: x, bgYellowBright: x, bgBlueBright: x, bgMagentaBright: x, bgCyanBright: x, bgWhiteBright: x };
      }, "create");
      module.exports = create();
      module.exports.createColors = create;
    }
  });

  // (disabled):node_modules/postcss/lib/terminal-highlight
  var require_terminal_highlight = __commonJS({
    "(disabled):node_modules/postcss/lib/terminal-highlight"() {
      
    }
  });

  // node_modules/postcss/lib/css-syntax-error.js
  var require_css_syntax_error = __commonJS({
    "node_modules/postcss/lib/css-syntax-error.js"(exports, module) {
      
      var pico = require_picocolors_browser();
      var terminalHighlight = require_terminal_highlight();
      var _CssSyntaxError = class _CssSyntaxError extends Error {
        constructor(message, line, column, source, file, plugin3) {
          super(message);
          this.name = "CssSyntaxError";
          this.reason = message;
          if (file) {
            this.file = file;
          }
          if (source) {
            this.source = source;
          }
          if (plugin3) {
            this.plugin = plugin3;
          }
          if (typeof line !== "undefined" && typeof column !== "undefined") {
            if (typeof line === "number") {
              this.line = line;
              this.column = column;
            } else {
              this.line = line.line;
              this.column = line.column;
              this.endLine = column.line;
              this.endColumn = column.column;
            }
          }
          this.setMessage();
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, _CssSyntaxError);
          }
        }
        setMessage() {
          this.message = this.plugin ? this.plugin + ": " : "";
          this.message += this.file ? this.file : "<css input>";
          if (typeof this.line !== "undefined") {
            this.message += ":" + this.line + ":" + this.column;
          }
          this.message += ": " + this.reason;
        }
        showSourceCode(color) {
          if (!this.source) return "";
          let css = this.source;
          if (color == null) color = pico.isColorSupported;
          let aside = /* @__PURE__ */ __name((text) => text, "aside");
          let mark = /* @__PURE__ */ __name((text) => text, "mark");
          let highlight = /* @__PURE__ */ __name((text) => text, "highlight");
          if (color) {
            let { bold, gray, red } = pico.createColors(true);
            mark = /* @__PURE__ */ __name((text) => bold(red(text)), "mark");
            aside = /* @__PURE__ */ __name((text) => gray(text), "aside");
            if (terminalHighlight) {
              highlight = /* @__PURE__ */ __name((text) => terminalHighlight(text), "highlight");
            }
          }
          let lines = css.split(/\r?\n/);
          let start5 = Math.max(this.line - 3, 0);
          let end3 = Math.min(this.line + 2, lines.length);
          let maxWidth = String(end3).length;
          return lines.slice(start5, end3).map((line, index) => {
            let number = start5 + 1 + index;
            let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
            if (number === this.line) {
              if (line.length > 160) {
                let padding = 20;
                let subLineStart = Math.max(0, this.column - padding);
                let subLineEnd = Math.max(
                  this.column + padding,
                  this.endColumn + padding
                );
                let subLine = line.slice(subLineStart, subLineEnd);
                let spacing2 = aside(gutter.replace(/\d/g, " ")) + line.slice(0, Math.min(this.column - 1, padding - 1)).replace(/[^\t]/g, " ");
                return mark(">") + aside(gutter) + highlight(subLine) + "\n " + spacing2 + mark("^");
              }
              let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
              return mark(">") + aside(gutter) + highlight(line) + "\n " + spacing + mark("^");
            }
            return " " + aside(gutter) + highlight(line);
          }).join("\n");
        }
        toString() {
          let code = this.showSourceCode();
          if (code) {
            code = "\n\n" + code + "\n";
          }
          return this.name + ": " + this.message + code;
        }
      };
      __name(_CssSyntaxError, "CssSyntaxError");
      var CssSyntaxError3 = _CssSyntaxError;
      module.exports = CssSyntaxError3;
      CssSyntaxError3.default = CssSyntaxError3;
    }
  });

  // node_modules/postcss/lib/stringifier.js
  var require_stringifier = __commonJS({
    "node_modules/postcss/lib/stringifier.js"(exports, module) {
      
      var DEFAULT_RAW = {
        after: "\n",
        beforeClose: "\n",
        beforeComment: "\n",
        beforeDecl: "\n",
        beforeOpen: " ",
        beforeRule: "\n",
        colon: ": ",
        commentLeft: " ",
        commentRight: " ",
        emptyBody: "",
        indent: "    ",
        semicolon: false
      };
      function capitalize(str) {
        return str[0].toUpperCase() + str.slice(1);
      }
      __name(capitalize, "capitalize");
      var _Stringifier = class _Stringifier {
        constructor(builder) {
          this.builder = builder;
        }
        atrule(node, semicolon) {
          let name = "@" + node.name;
          let params = node.params ? this.rawValue(node, "params") : "";
          if (typeof node.raws.afterName !== "undefined") {
            name += node.raws.afterName;
          } else if (params) {
            name += " ";
          }
          if (node.nodes) {
            this.block(node, name + params);
          } else {
            let end3 = (node.raws.between || "") + (semicolon ? ";" : "");
            this.builder(name + params + end3, node);
          }
        }
        beforeAfter(node, detect) {
          let value;
          if (node.type === "decl") {
            value = this.raw(node, null, "beforeDecl");
          } else if (node.type === "comment") {
            value = this.raw(node, null, "beforeComment");
          } else if (detect === "before") {
            value = this.raw(node, null, "beforeRule");
          } else {
            value = this.raw(node, null, "beforeClose");
          }
          let buf = node.parent;
          let depth = 0;
          while (buf && buf.type !== "root") {
            depth += 1;
            buf = buf.parent;
          }
          if (value.includes("\n")) {
            let indent = this.raw(node, null, "indent");
            if (indent.length) {
              for (let step = 0; step < depth; step++) value += indent;
            }
          }
          return value;
        }
        block(node, start5) {
          let between = this.raw(node, "between", "beforeOpen");
          this.builder(start5 + between + "{", node, "start");
          let after;
          if (node.nodes && node.nodes.length) {
            this.body(node);
            after = this.raw(node, "after");
          } else {
            after = this.raw(node, "after", "emptyBody");
          }
          if (after) this.builder(after);
          this.builder("}", node, "end");
        }
        body(node) {
          let last = node.nodes.length - 1;
          while (last > 0) {
            if (node.nodes[last].type !== "comment") break;
            last -= 1;
          }
          let semicolon = this.raw(node, "semicolon");
          for (let i12 = 0; i12 < node.nodes.length; i12++) {
            let child = node.nodes[i12];
            let before = this.raw(child, "before");
            if (before) this.builder(before);
            this.stringify(child, last !== i12 || semicolon);
          }
        }
        comment(node) {
          let left3 = this.raw(node, "left", "commentLeft");
          let right3 = this.raw(node, "right", "commentRight");
          this.builder("/*" + left3 + node.text + right3 + "*/", node);
        }
        decl(node, semicolon) {
          let between = this.raw(node, "between", "colon");
          let string = node.prop + between + this.rawValue(node, "value");
          if (node.important) {
            string += node.raws.important || " !important";
          }
          if (semicolon) string += ";";
          this.builder(string, node);
        }
        document(node) {
          this.body(node);
        }
        raw(node, own, detect) {
          let value;
          if (!detect) detect = own;
          if (own) {
            value = node.raws[own];
            if (typeof value !== "undefined") return value;
          }
          let parent = node.parent;
          if (detect === "before") {
            if (!parent || parent.type === "root" && parent.first === node) {
              return "";
            }
            if (parent && parent.type === "document") {
              return "";
            }
          }
          if (!parent) return DEFAULT_RAW[detect];
          let root3 = node.root();
          if (!root3.rawCache) root3.rawCache = {};
          if (typeof root3.rawCache[detect] !== "undefined") {
            return root3.rawCache[detect];
          }
          if (detect === "before" || detect === "after") {
            return this.beforeAfter(node, detect);
          } else {
            let method = "raw" + capitalize(detect);
            if (this[method]) {
              value = this[method](root3, node);
            } else {
              root3.walk((i12) => {
                value = i12.raws[own];
                if (typeof value !== "undefined") return false;
              });
            }
          }
          if (typeof value === "undefined") value = DEFAULT_RAW[detect];
          root3.rawCache[detect] = value;
          return value;
        }
        rawBeforeClose(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && i12.nodes.length > 0) {
              if (typeof i12.raws.after !== "undefined") {
                value = i12.raws.after;
                if (value.includes("\n")) {
                  value = value.replace(/[^\n]+$/, "");
                }
                return false;
              }
            }
          });
          if (value) value = value.replace(/\S/g, "");
          return value;
        }
        rawBeforeComment(root3, node) {
          let value;
          root3.walkComments((i12) => {
            if (typeof i12.raws.before !== "undefined") {
              value = i12.raws.before;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          });
          if (typeof value === "undefined") {
            value = this.raw(node, null, "beforeDecl");
          } else if (value) {
            value = value.replace(/\S/g, "");
          }
          return value;
        }
        rawBeforeDecl(root3, node) {
          let value;
          root3.walkDecls((i12) => {
            if (typeof i12.raws.before !== "undefined") {
              value = i12.raws.before;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          });
          if (typeof value === "undefined") {
            value = this.raw(node, null, "beforeRule");
          } else if (value) {
            value = value.replace(/\S/g, "");
          }
          return value;
        }
        rawBeforeOpen(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.type !== "decl") {
              value = i12.raws.between;
              if (typeof value !== "undefined") return false;
            }
          });
          return value;
        }
        rawBeforeRule(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && (i12.parent !== root3 || root3.first !== i12)) {
              if (typeof i12.raws.before !== "undefined") {
                value = i12.raws.before;
                if (value.includes("\n")) {
                  value = value.replace(/[^\n]+$/, "");
                }
                return false;
              }
            }
          });
          if (value) value = value.replace(/\S/g, "");
          return value;
        }
        rawColon(root3) {
          let value;
          root3.walkDecls((i12) => {
            if (typeof i12.raws.between !== "undefined") {
              value = i12.raws.between.replace(/[^\s:]/g, "");
              return false;
            }
          });
          return value;
        }
        rawEmptyBody(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && i12.nodes.length === 0) {
              value = i12.raws.after;
              if (typeof value !== "undefined") return false;
            }
          });
          return value;
        }
        rawIndent(root3) {
          if (root3.raws.indent) return root3.raws.indent;
          let value;
          root3.walk((i12) => {
            let p5 = i12.parent;
            if (p5 && p5 !== root3 && p5.parent && p5.parent === root3) {
              if (typeof i12.raws.before !== "undefined") {
                let parts = i12.raws.before.split("\n");
                value = parts[parts.length - 1];
                value = value.replace(/\S/g, "");
                return false;
              }
            }
          });
          return value;
        }
        rawSemicolon(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && i12.nodes.length && i12.last.type === "decl") {
              value = i12.raws.semicolon;
              if (typeof value !== "undefined") return false;
            }
          });
          return value;
        }
        rawValue(node, prop) {
          let value = node[prop];
          let raw = node.raws[prop];
          if (raw && raw.value === value) {
            return raw.raw;
          }
          return value;
        }
        root(node) {
          this.body(node);
          if (node.raws.after) this.builder(node.raws.after);
        }
        rule(node) {
          this.block(node, this.rawValue(node, "selector"));
          if (node.raws.ownSemicolon) {
            this.builder(node.raws.ownSemicolon, node, "end");
          }
        }
        stringify(node, semicolon) {
          if (!this[node.type]) {
            throw new Error(
              "Unknown AST node type " + node.type + ". Maybe you need to change PostCSS stringifier."
            );
          }
          this[node.type](node, semicolon);
        }
      };
      __name(_Stringifier, "Stringifier");
      var Stringifier = _Stringifier;
      module.exports = Stringifier;
      Stringifier.default = Stringifier;
    }
  });

  // node_modules/postcss/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/postcss/lib/stringify.js"(exports, module) {
      
      var Stringifier = require_stringifier();
      function stringify3(node, builder) {
        let str = new Stringifier(builder);
        str.stringify(node);
      }
      __name(stringify3, "stringify");
      module.exports = stringify3;
      stringify3.default = stringify3;
    }
  });

  // node_modules/postcss/lib/symbols.js
  var require_symbols = __commonJS({
    "node_modules/postcss/lib/symbols.js"(exports, module) {
      
      module.exports.isClean = Symbol("isClean");
      module.exports.my = Symbol("my");
    }
  });

  // node_modules/postcss/lib/node.js
  var require_node = __commonJS({
    "node_modules/postcss/lib/node.js"(exports, module) {
      
      var CssSyntaxError3 = require_css_syntax_error();
      var Stringifier = require_stringifier();
      var stringify3 = require_stringify();
      var { isClean, my } = require_symbols();
      function cloneNode(obj, parent) {
        let cloned = new obj.constructor();
        for (let i12 in obj) {
          if (!Object.prototype.hasOwnProperty.call(obj, i12)) {
            continue;
          }
          if (i12 === "proxyCache") continue;
          let value = obj[i12];
          let type = typeof value;
          if (i12 === "parent" && type === "object") {
            if (parent) cloned[i12] = parent;
          } else if (i12 === "source") {
            cloned[i12] = value;
          } else if (Array.isArray(value)) {
            cloned[i12] = value.map((j2) => cloneNode(j2, cloned));
          } else {
            if (type === "object" && value !== null) value = cloneNode(value);
            cloned[i12] = value;
          }
        }
        return cloned;
      }
      __name(cloneNode, "cloneNode");
      function sourceOffset(inputCSS, position) {
        if (position && typeof position.offset !== "undefined") {
          return position.offset;
        }
        let column = 1;
        let line = 1;
        let offset5 = 0;
        for (let i12 = 0; i12 < inputCSS.length; i12++) {
          if (line === position.line && column === position.column) {
            offset5 = i12;
            break;
          }
          if (inputCSS[i12] === "\n") {
            column = 1;
            line += 1;
          } else {
            column += 1;
          }
        }
        return offset5;
      }
      __name(sourceOffset, "sourceOffset");
      var _Node = class _Node {
        get proxyOf() {
          return this;
        }
        constructor(defaults3 = {}) {
          this.raws = {};
          this[isClean] = false;
          this[my] = true;
          for (let name in defaults3) {
            if (name === "nodes") {
              this.nodes = [];
              for (let node of defaults3[name]) {
                if (typeof node.clone === "function") {
                  this.append(node.clone());
                } else {
                  this.append(node);
                }
              }
            } else {
              this[name] = defaults3[name];
            }
          }
        }
        addToError(error2) {
          error2.postcssNode = this;
          if (error2.stack && this.source && /\n\s{4}at /.test(error2.stack)) {
            let s21 = this.source;
            error2.stack = error2.stack.replace(
              /\n\s{4}at /,
              `$&${s21.input.from}:${s21.start.line}:${s21.start.column}$&`
            );
          }
          return error2;
        }
        after(add) {
          this.parent.insertAfter(this, add);
          return this;
        }
        assign(overrides = {}) {
          for (let name in overrides) {
            this[name] = overrides[name];
          }
          return this;
        }
        before(add) {
          this.parent.insertBefore(this, add);
          return this;
        }
        cleanRaws(keepBetween) {
          delete this.raws.before;
          delete this.raws.after;
          if (!keepBetween) delete this.raws.between;
        }
        clone(overrides = {}) {
          let cloned = cloneNode(this);
          for (let name in overrides) {
            cloned[name] = overrides[name];
          }
          return cloned;
        }
        cloneAfter(overrides = {}) {
          let cloned = this.clone(overrides);
          this.parent.insertAfter(this, cloned);
          return cloned;
        }
        cloneBefore(overrides = {}) {
          let cloned = this.clone(overrides);
          this.parent.insertBefore(this, cloned);
          return cloned;
        }
        error(message, opts = {}) {
          if (this.source) {
            let { end: end3, start: start5 } = this.rangeBy(opts);
            return this.source.input.error(
              message,
              { column: start5.column, line: start5.line },
              { column: end3.column, line: end3.line },
              opts
            );
          }
          return new CssSyntaxError3(message);
        }
        getProxyProcessor() {
          return {
            get(node, prop) {
              if (prop === "proxyOf") {
                return node;
              } else if (prop === "root") {
                return () => node.root().toProxy();
              } else {
                return node[prop];
              }
            },
            set(node, prop, value) {
              if (node[prop] === value) return true;
              node[prop] = value;
              if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || /* c8 ignore next */
              prop === "text") {
                node.markDirty();
              }
              return true;
            }
          };
        }
        /* c8 ignore next 3 */
        markClean() {
          this[isClean] = true;
        }
        markDirty() {
          if (this[isClean]) {
            this[isClean] = false;
            let next = this;
            while (next = next.parent) {
              next[isClean] = false;
            }
          }
        }
        next() {
          if (!this.parent) return void 0;
          let index = this.parent.index(this);
          return this.parent.nodes[index + 1];
        }
        positionBy(opts = {}) {
          let pos = this.source.start;
          if (opts.index) {
            pos = this.positionInside(opts.index);
          } else if (opts.word) {
            let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
            let stringRepresentation = inputString.slice(
              sourceOffset(inputString, this.source.start),
              sourceOffset(inputString, this.source.end)
            );
            let index = stringRepresentation.indexOf(opts.word);
            if (index !== -1) pos = this.positionInside(index);
          }
          return pos;
        }
        positionInside(index) {
          let column = this.source.start.column;
          let line = this.source.start.line;
          let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
          let offset5 = sourceOffset(inputString, this.source.start);
          let end3 = offset5 + index;
          for (let i12 = offset5; i12 < end3; i12++) {
            if (inputString[i12] === "\n") {
              column = 1;
              line += 1;
            } else {
              column += 1;
            }
          }
          return { column, line, offset: end3 };
        }
        prev() {
          if (!this.parent) return void 0;
          let index = this.parent.index(this);
          return this.parent.nodes[index - 1];
        }
        rangeBy(opts = {}) {
          let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
          let start5 = {
            column: this.source.start.column,
            line: this.source.start.line,
            offset: sourceOffset(inputString, this.source.start)
          };
          let end3 = this.source.end ? {
            column: this.source.end.column + 1,
            line: this.source.end.line,
            offset: typeof this.source.end.offset === "number" ? (
              // `source.end.offset` is exclusive, so we don't need to add 1
              this.source.end.offset
            ) : (
              // Since line/column in this.source.end is inclusive,
              // the `sourceOffset(... , this.source.end)` returns an inclusive offset.
              // So, we add 1 to convert it to exclusive.
              sourceOffset(inputString, this.source.end) + 1
            )
          } : {
            column: start5.column + 1,
            line: start5.line,
            offset: start5.offset + 1
          };
          if (opts.word) {
            let stringRepresentation = inputString.slice(
              sourceOffset(inputString, this.source.start),
              sourceOffset(inputString, this.source.end)
            );
            let index = stringRepresentation.indexOf(opts.word);
            if (index !== -1) {
              start5 = this.positionInside(index);
              end3 = this.positionInside(index + opts.word.length);
            }
          } else {
            if (opts.start) {
              start5 = {
                column: opts.start.column,
                line: opts.start.line,
                offset: sourceOffset(inputString, opts.start)
              };
            } else if (opts.index) {
              start5 = this.positionInside(opts.index);
            }
            if (opts.end) {
              end3 = {
                column: opts.end.column,
                line: opts.end.line,
                offset: sourceOffset(inputString, opts.end)
              };
            } else if (typeof opts.endIndex === "number") {
              end3 = this.positionInside(opts.endIndex);
            } else if (opts.index) {
              end3 = this.positionInside(opts.index + 1);
            }
          }
          if (end3.line < start5.line || end3.line === start5.line && end3.column <= start5.column) {
            end3 = {
              column: start5.column + 1,
              line: start5.line,
              offset: start5.offset + 1
            };
          }
          return { end: end3, start: start5 };
        }
        raw(prop, defaultType) {
          let str = new Stringifier();
          return str.raw(this, prop, defaultType);
        }
        remove() {
          if (this.parent) {
            this.parent.removeChild(this);
          }
          this.parent = void 0;
          return this;
        }
        replaceWith(...nodes) {
          if (this.parent) {
            let bookmark = this;
            let foundSelf = false;
            for (let node of nodes) {
              if (node === this) {
                foundSelf = true;
              } else if (foundSelf) {
                this.parent.insertAfter(bookmark, node);
                bookmark = node;
              } else {
                this.parent.insertBefore(bookmark, node);
              }
            }
            if (!foundSelf) {
              this.remove();
            }
          }
          return this;
        }
        root() {
          let result = this;
          while (result.parent && result.parent.type !== "document") {
            result = result.parent;
          }
          return result;
        }
        toJSON(_7, inputs) {
          let fixed = {};
          let emitInputs = inputs == null;
          inputs = inputs || /* @__PURE__ */ new Map();
          let inputsNextIndex = 0;
          for (let name in this) {
            if (!Object.prototype.hasOwnProperty.call(this, name)) {
              continue;
            }
            if (name === "parent" || name === "proxyCache") continue;
            let value = this[name];
            if (Array.isArray(value)) {
              fixed[name] = value.map((i12) => {
                if (typeof i12 === "object" && i12.toJSON) {
                  return i12.toJSON(null, inputs);
                } else {
                  return i12;
                }
              });
            } else if (typeof value === "object" && value.toJSON) {
              fixed[name] = value.toJSON(null, inputs);
            } else if (name === "source") {
              if (value == null) continue;
              let inputId = inputs.get(value.input);
              if (inputId == null) {
                inputId = inputsNextIndex;
                inputs.set(value.input, inputsNextIndex);
                inputsNextIndex++;
              }
              fixed[name] = {
                end: value.end,
                inputId,
                start: value.start
              };
            } else {
              fixed[name] = value;
            }
          }
          if (emitInputs) {
            fixed.inputs = [...inputs.keys()].map((input) => input.toJSON());
          }
          return fixed;
        }
        toProxy() {
          if (!this.proxyCache) {
            this.proxyCache = new Proxy(this, this.getProxyProcessor());
          }
          return this.proxyCache;
        }
        toString(stringifier = stringify3) {
          if (stringifier.stringify) stringifier = stringifier.stringify;
          let result = "";
          stringifier(this, (i12) => {
            result += i12;
          });
          return result;
        }
        warn(result, text, opts = {}) {
          let data = { node: this };
          for (let i12 in opts) data[i12] = opts[i12];
          return result.warn(text, data);
        }
      };
      __name(_Node, "Node");
      var Node3 = _Node;
      module.exports = Node3;
      Node3.default = Node3;
    }
  });

  // node_modules/postcss/lib/comment.js
  var require_comment = __commonJS({
    "node_modules/postcss/lib/comment.js"(exports, module) {
      
      var Node3 = require_node();
      var _Comment = class _Comment extends Node3 {
        constructor(defaults3) {
          super(defaults3);
          this.type = "comment";
        }
      };
      __name(_Comment, "Comment");
      var Comment4 = _Comment;
      module.exports = Comment4;
      Comment4.default = Comment4;
    }
  });

  // node_modules/postcss/lib/declaration.js
  var require_declaration = __commonJS({
    "node_modules/postcss/lib/declaration.js"(exports, module) {
      
      var Node3 = require_node();
      var _Declaration = class _Declaration extends Node3 {
        get variable() {
          return this.prop.startsWith("--") || this.prop[0] === "$";
        }
        constructor(defaults3) {
          if (defaults3 && typeof defaults3.value !== "undefined" && typeof defaults3.value !== "string") {
            defaults3 = { ...defaults3, value: String(defaults3.value) };
          }
          super(defaults3);
          this.type = "decl";
        }
      };
      __name(_Declaration, "Declaration");
      var Declaration3 = _Declaration;
      module.exports = Declaration3;
      Declaration3.default = Declaration3;
    }
  });

  // node_modules/postcss/lib/container.js
  var require_container = __commonJS({
    "node_modules/postcss/lib/container.js"(exports, module) {
      
      var Comment4 = require_comment();
      var Declaration3 = require_declaration();
      var Node3 = require_node();
      var { isClean, my } = require_symbols();
      var AtRule3;
      var parse6;
      var Root3;
      var Rule3;
      function cleanSource(nodes) {
        return nodes.map((i12) => {
          if (i12.nodes) i12.nodes = cleanSource(i12.nodes);
          delete i12.source;
          return i12;
        });
      }
      __name(cleanSource, "cleanSource");
      function markTreeDirty(node) {
        node[isClean] = false;
        if (node.proxyOf.nodes) {
          for (let i12 of node.proxyOf.nodes) {
            markTreeDirty(i12);
          }
        }
      }
      __name(markTreeDirty, "markTreeDirty");
      var _Container = class _Container extends Node3 {
        get first() {
          if (!this.proxyOf.nodes) return void 0;
          return this.proxyOf.nodes[0];
        }
        get last() {
          if (!this.proxyOf.nodes) return void 0;
          return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
        }
        append(...children) {
          for (let child of children) {
            let nodes = this.normalize(child, this.last);
            for (let node of nodes) this.proxyOf.nodes.push(node);
          }
          this.markDirty();
          return this;
        }
        cleanRaws(keepBetween) {
          super.cleanRaws(keepBetween);
          if (this.nodes) {
            for (let node of this.nodes) node.cleanRaws(keepBetween);
          }
        }
        each(callback) {
          if (!this.proxyOf.nodes) return void 0;
          let iterator = this.getIterator();
          let index, result;
          while (this.indexes[iterator] < this.proxyOf.nodes.length) {
            index = this.indexes[iterator];
            result = callback(this.proxyOf.nodes[index], index);
            if (result === false) break;
            this.indexes[iterator] += 1;
          }
          delete this.indexes[iterator];
          return result;
        }
        every(condition) {
          return this.nodes.every(condition);
        }
        getIterator() {
          if (!this.lastEach) this.lastEach = 0;
          if (!this.indexes) this.indexes = {};
          this.lastEach += 1;
          let iterator = this.lastEach;
          this.indexes[iterator] = 0;
          return iterator;
        }
        getProxyProcessor() {
          return {
            get(node, prop) {
              if (prop === "proxyOf") {
                return node;
              } else if (!node[prop]) {
                return node[prop];
              } else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) {
                return (...args) => {
                  return node[prop](
                    ...args.map((i12) => {
                      if (typeof i12 === "function") {
                        return (child, index) => i12(child.toProxy(), index);
                      } else {
                        return i12;
                      }
                    })
                  );
                };
              } else if (prop === "every" || prop === "some") {
                return (cb) => {
                  return node[prop](
                    (child, ...other) => cb(child.toProxy(), ...other)
                  );
                };
              } else if (prop === "root") {
                return () => node.root().toProxy();
              } else if (prop === "nodes") {
                return node.nodes.map((i12) => i12.toProxy());
              } else if (prop === "first" || prop === "last") {
                return node[prop].toProxy();
              } else {
                return node[prop];
              }
            },
            set(node, prop, value) {
              if (node[prop] === value) return true;
              node[prop] = value;
              if (prop === "name" || prop === "params" || prop === "selector") {
                node.markDirty();
              }
              return true;
            }
          };
        }
        index(child) {
          if (typeof child === "number") return child;
          if (child.proxyOf) child = child.proxyOf;
          return this.proxyOf.nodes.indexOf(child);
        }
        insertAfter(exist, add) {
          let existIndex = this.index(exist);
          let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
          existIndex = this.index(exist);
          for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node);
          let index;
          for (let id in this.indexes) {
            index = this.indexes[id];
            if (existIndex < index) {
              this.indexes[id] = index + nodes.length;
            }
          }
          this.markDirty();
          return this;
        }
        insertBefore(exist, add) {
          let existIndex = this.index(exist);
          let type = existIndex === 0 ? "prepend" : false;
          let nodes = this.normalize(
            add,
            this.proxyOf.nodes[existIndex],
            type
          ).reverse();
          existIndex = this.index(exist);
          for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node);
          let index;
          for (let id in this.indexes) {
            index = this.indexes[id];
            if (existIndex <= index) {
              this.indexes[id] = index + nodes.length;
            }
          }
          this.markDirty();
          return this;
        }
        normalize(nodes, sample) {
          if (typeof nodes === "string") {
            nodes = cleanSource(parse6(nodes).nodes);
          } else if (typeof nodes === "undefined") {
            nodes = [];
          } else if (Array.isArray(nodes)) {
            nodes = nodes.slice(0);
            for (let i12 of nodes) {
              if (i12.parent) i12.parent.removeChild(i12, "ignore");
            }
          } else if (nodes.type === "root" && this.type !== "document") {
            nodes = nodes.nodes.slice(0);
            for (let i12 of nodes) {
              if (i12.parent) i12.parent.removeChild(i12, "ignore");
            }
          } else if (nodes.type) {
            nodes = [nodes];
          } else if (nodes.prop) {
            if (typeof nodes.value === "undefined") {
              throw new Error("Value field is missed in node creation");
            } else if (typeof nodes.value !== "string") {
              nodes.value = String(nodes.value);
            }
            nodes = [new Declaration3(nodes)];
          } else if (nodes.selector || nodes.selectors) {
            nodes = [new Rule3(nodes)];
          } else if (nodes.name) {
            nodes = [new AtRule3(nodes)];
          } else if (nodes.text) {
            nodes = [new Comment4(nodes)];
          } else {
            throw new Error("Unknown node type in node creation");
          }
          let processed = nodes.map((i12) => {
            if (!i12[my]) _Container.rebuild(i12);
            i12 = i12.proxyOf;
            if (i12.parent) i12.parent.removeChild(i12);
            if (i12[isClean]) markTreeDirty(i12);
            if (!i12.raws) i12.raws = {};
            if (typeof i12.raws.before === "undefined") {
              if (sample && typeof sample.raws.before !== "undefined") {
                i12.raws.before = sample.raws.before.replace(/\S/g, "");
              }
            }
            i12.parent = this.proxyOf;
            return i12;
          });
          return processed;
        }
        prepend(...children) {
          children = children.reverse();
          for (let child of children) {
            let nodes = this.normalize(child, this.first, "prepend").reverse();
            for (let node of nodes) this.proxyOf.nodes.unshift(node);
            for (let id in this.indexes) {
              this.indexes[id] = this.indexes[id] + nodes.length;
            }
          }
          this.markDirty();
          return this;
        }
        push(child) {
          child.parent = this;
          this.proxyOf.nodes.push(child);
          return this;
        }
        removeAll() {
          for (let node of this.proxyOf.nodes) node.parent = void 0;
          this.proxyOf.nodes = [];
          this.markDirty();
          return this;
        }
        removeChild(child) {
          child = this.index(child);
          this.proxyOf.nodes[child].parent = void 0;
          this.proxyOf.nodes.splice(child, 1);
          let index;
          for (let id in this.indexes) {
            index = this.indexes[id];
            if (index >= child) {
              this.indexes[id] = index - 1;
            }
          }
          this.markDirty();
          return this;
        }
        replaceValues(pattern, opts, callback) {
          if (!callback) {
            callback = opts;
            opts = {};
          }
          this.walkDecls((decl3) => {
            if (opts.props && !opts.props.includes(decl3.prop)) return;
            if (opts.fast && !decl3.value.includes(opts.fast)) return;
            decl3.value = decl3.value.replace(pattern, callback);
          });
          this.markDirty();
          return this;
        }
        some(condition) {
          return this.nodes.some(condition);
        }
        walk(callback) {
          return this.each((child, i12) => {
            let result;
            try {
              result = callback(child, i12);
            } catch (e18) {
              throw child.addToError(e18);
            }
            if (result !== false && child.walk) {
              result = child.walk(callback);
            }
            return result;
          });
        }
        walkAtRules(name, callback) {
          if (!callback) {
            callback = name;
            return this.walk((child, i12) => {
              if (child.type === "atrule") {
                return callback(child, i12);
              }
            });
          }
          if (name instanceof RegExp) {
            return this.walk((child, i12) => {
              if (child.type === "atrule" && name.test(child.name)) {
                return callback(child, i12);
              }
            });
          }
          return this.walk((child, i12) => {
            if (child.type === "atrule" && child.name === name) {
              return callback(child, i12);
            }
          });
        }
        walkComments(callback) {
          return this.walk((child, i12) => {
            if (child.type === "comment") {
              return callback(child, i12);
            }
          });
        }
        walkDecls(prop, callback) {
          if (!callback) {
            callback = prop;
            return this.walk((child, i12) => {
              if (child.type === "decl") {
                return callback(child, i12);
              }
            });
          }
          if (prop instanceof RegExp) {
            return this.walk((child, i12) => {
              if (child.type === "decl" && prop.test(child.prop)) {
                return callback(child, i12);
              }
            });
          }
          return this.walk((child, i12) => {
            if (child.type === "decl" && child.prop === prop) {
              return callback(child, i12);
            }
          });
        }
        walkRules(selector, callback) {
          if (!callback) {
            callback = selector;
            return this.walk((child, i12) => {
              if (child.type === "rule") {
                return callback(child, i12);
              }
            });
          }
          if (selector instanceof RegExp) {
            return this.walk((child, i12) => {
              if (child.type === "rule" && selector.test(child.selector)) {
                return callback(child, i12);
              }
            });
          }
          return this.walk((child, i12) => {
            if (child.type === "rule" && child.selector === selector) {
              return callback(child, i12);
            }
          });
        }
      };
      __name(_Container, "Container");
      var Container3 = _Container;
      Container3.registerParse = (dependant) => {
        parse6 = dependant;
      };
      Container3.registerRule = (dependant) => {
        Rule3 = dependant;
      };
      Container3.registerAtRule = (dependant) => {
        AtRule3 = dependant;
      };
      Container3.registerRoot = (dependant) => {
        Root3 = dependant;
      };
      module.exports = Container3;
      Container3.default = Container3;
      Container3.rebuild = (node) => {
        if (node.type === "atrule") {
          Object.setPrototypeOf(node, AtRule3.prototype);
        } else if (node.type === "rule") {
          Object.setPrototypeOf(node, Rule3.prototype);
        } else if (node.type === "decl") {
          Object.setPrototypeOf(node, Declaration3.prototype);
        } else if (node.type === "comment") {
          Object.setPrototypeOf(node, Comment4.prototype);
        } else if (node.type === "root") {
          Object.setPrototypeOf(node, Root3.prototype);
        }
        node[my] = true;
        if (node.nodes) {
          node.nodes.forEach((child) => {
            Container3.rebuild(child);
          });
        }
      };
    }
  });

  // node_modules/postcss/lib/at-rule.js
  var require_at_rule = __commonJS({
    "node_modules/postcss/lib/at-rule.js"(exports, module) {
      
      var Container3 = require_container();
      var _AtRule = class _AtRule extends Container3 {
        constructor(defaults3) {
          super(defaults3);
          this.type = "atrule";
        }
        append(...children) {
          if (!this.proxyOf.nodes) this.nodes = [];
          return super.append(...children);
        }
        prepend(...children) {
          if (!this.proxyOf.nodes) this.nodes = [];
          return super.prepend(...children);
        }
      };
      __name(_AtRule, "AtRule");
      var AtRule3 = _AtRule;
      module.exports = AtRule3;
      AtRule3.default = AtRule3;
      Container3.registerAtRule(AtRule3);
    }
  });

  // node_modules/postcss/lib/document.js
  var require_document = __commonJS({
    "node_modules/postcss/lib/document.js"(exports, module) {
      
      var Container3 = require_container();
      var LazyResult;
      var Processor3;
      var _Document = class _Document extends Container3 {
        constructor(defaults3) {
          super({ type: "document", ...defaults3 });
          if (!this.nodes) {
            this.nodes = [];
          }
        }
        toResult(opts = {}) {
          let lazy = new LazyResult(new Processor3(), this, opts);
          return lazy.stringify();
        }
      };
      __name(_Document, "Document");
      var Document3 = _Document;
      Document3.registerLazyResult = (dependant) => {
        LazyResult = dependant;
      };
      Document3.registerProcessor = (dependant) => {
        Processor3 = dependant;
      };
      module.exports = Document3;
      Document3.default = Document3;
    }
  });

  // node_modules/nanoid/non-secure/index.cjs
  var require_non_secure = __commonJS({
    "node_modules/nanoid/non-secure/index.cjs"(exports, module) {
      
      var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
      var customAlphabet = /* @__PURE__ */ __name((alphabet, defaultSize = 21) => {
        return (size = defaultSize) => {
          let id = "";
          let i12 = size | 0;
          while (i12--) {
            id += alphabet[Math.random() * alphabet.length | 0];
          }
          return id;
        };
      }, "customAlphabet");
      var nanoid = /* @__PURE__ */ __name((size = 21) => {
        let id = "";
        let i12 = size | 0;
        while (i12--) {
          id += urlAlphabet[Math.random() * 64 | 0];
        }
        return id;
      }, "nanoid");
      module.exports = { nanoid, customAlphabet };
    }
  });

  // (disabled):path
  var require_path = __commonJS({
    "(disabled):path"() {
      
    }
  });

  // (disabled):node_modules/source-map-js/source-map.js
  var require_source_map = __commonJS({
    "(disabled):node_modules/source-map-js/source-map.js"() {
      
    }
  });

  // (disabled):url
  var require_url = __commonJS({
    "(disabled):url"() {
      
    }
  });

  // (disabled):fs
  var require_fs = __commonJS({
    "(disabled):fs"() {
      
    }
  });

  // node_modules/postcss/lib/previous-map.js
  var require_previous_map = __commonJS({
    "node_modules/postcss/lib/previous-map.js"(exports, module) {
      
      var { existsSync, readFileSync } = require_fs();
      var { dirname, join } = require_path();
      var { SourceMapConsumer, SourceMapGenerator } = require_source_map();
      function fromBase64(str) {
        if (Buffer) {
          return Buffer.from(str, "base64").toString();
        } else {
          return window.atob(str);
        }
      }
      __name(fromBase64, "fromBase64");
      var _PreviousMap = class _PreviousMap {
        constructor(css, opts) {
          if (opts.map === false) return;
          this.loadAnnotation(css);
          this.inline = this.startWith(this.annotation, "data:");
          let prev = opts.map ? opts.map.prev : void 0;
          let text = this.loadMap(opts.from, prev);
          if (!this.mapFile && opts.from) {
            this.mapFile = opts.from;
          }
          if (this.mapFile) this.root = dirname(this.mapFile);
          if (text) this.text = text;
        }
        consumer() {
          if (!this.consumerCache) {
            this.consumerCache = new SourceMapConsumer(this.text);
          }
          return this.consumerCache;
        }
        decodeInline(text) {
          let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
          let baseUri = /^data:application\/json;base64,/;
          let charsetUri = /^data:application\/json;charset=utf-?8,/;
          let uri = /^data:application\/json,/;
          let uriMatch = text.match(charsetUri) || text.match(uri);
          if (uriMatch) {
            return decodeURIComponent(text.substr(uriMatch[0].length));
          }
          let baseUriMatch = text.match(baseCharsetUri) || text.match(baseUri);
          if (baseUriMatch) {
            return fromBase64(text.substr(baseUriMatch[0].length));
          }
          let encoding = text.match(/data:application\/json;([^,]+),/)[1];
          throw new Error("Unsupported source map encoding " + encoding);
        }
        getAnnotationURL(sourceMapString) {
          return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
        }
        isMap(map) {
          if (typeof map !== "object") return false;
          return typeof map.mappings === "string" || typeof map._mappings === "string" || Array.isArray(map.sections);
        }
        loadAnnotation(css) {
          let comments = css.match(/\/\*\s*# sourceMappingURL=/g);
          if (!comments) return;
          let start5 = css.lastIndexOf(comments.pop());
          let end3 = css.indexOf("*/", start5);
          if (start5 > -1 && end3 > -1) {
            this.annotation = this.getAnnotationURL(css.substring(start5, end3));
          }
        }
        loadFile(path) {
          this.root = dirname(path);
          if (existsSync(path)) {
            this.mapFile = path;
            return readFileSync(path, "utf-8").toString().trim();
          }
        }
        loadMap(file, prev) {
          if (prev === false) return false;
          if (prev) {
            if (typeof prev === "string") {
              return prev;
            } else if (typeof prev === "function") {
              let prevPath = prev(file);
              if (prevPath) {
                let map = this.loadFile(prevPath);
                if (!map) {
                  throw new Error(
                    "Unable to load previous source map: " + prevPath.toString()
                  );
                }
                return map;
              }
            } else if (prev instanceof SourceMapConsumer) {
              return SourceMapGenerator.fromSourceMap(prev).toString();
            } else if (prev instanceof SourceMapGenerator) {
              return prev.toString();
            } else if (this.isMap(prev)) {
              return JSON.stringify(prev);
            } else {
              throw new Error(
                "Unsupported previous source map format: " + prev.toString()
              );
            }
          } else if (this.inline) {
            return this.decodeInline(this.annotation);
          } else if (this.annotation) {
            let map = this.annotation;
            if (file) map = join(dirname(file), map);
            return this.loadFile(map);
          }
        }
        startWith(string, start5) {
          if (!string) return false;
          return string.substr(0, start5.length) === start5;
        }
        withContent() {
          return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
        }
      };
      __name(_PreviousMap, "PreviousMap");
      var PreviousMap = _PreviousMap;
      module.exports = PreviousMap;
      PreviousMap.default = PreviousMap;
    }
  });

  // node_modules/postcss/lib/input.js
  var require_input = __commonJS({
    "node_modules/postcss/lib/input.js"(exports, module) {
      
      var { nanoid } = require_non_secure();
      var { isAbsolute, resolve } = require_path();
      var { SourceMapConsumer, SourceMapGenerator } = require_source_map();
      var { fileURLToPath, pathToFileURL } = require_url();
      var CssSyntaxError3 = require_css_syntax_error();
      var PreviousMap = require_previous_map();
      var terminalHighlight = require_terminal_highlight();
      var lineToIndexCache = Symbol("lineToIndexCache");
      var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
      var pathAvailable = Boolean(resolve && isAbsolute);
      function getLineToIndex(input) {
        if (input[lineToIndexCache]) return input[lineToIndexCache];
        let lines = input.css.split("\n");
        let lineToIndex = new Array(lines.length);
        let prevIndex = 0;
        for (let i12 = 0, l19 = lines.length; i12 < l19; i12++) {
          lineToIndex[i12] = prevIndex;
          prevIndex += lines[i12].length + 1;
        }
        input[lineToIndexCache] = lineToIndex;
        return lineToIndex;
      }
      __name(getLineToIndex, "getLineToIndex");
      var _Input = class _Input {
        get from() {
          return this.file || this.id;
        }
        constructor(css, opts = {}) {
          if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) {
            throw new Error(`PostCSS received ${css} instead of CSS string`);
          }
          this.css = css.toString();
          if (this.css[0] === "\uFEFF" || this.css[0] === "￾") {
            this.hasBOM = true;
            this.css = this.css.slice(1);
          } else {
            this.hasBOM = false;
          }
          this.document = this.css;
          if (opts.document) this.document = opts.document.toString();
          if (opts.from) {
            if (!pathAvailable || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
              this.file = opts.from;
            } else {
              this.file = resolve(opts.from);
            }
          }
          if (pathAvailable && sourceMapAvailable) {
            let map = new PreviousMap(this.css, opts);
            if (map.text) {
              this.map = map;
              let file = map.consumer().file;
              if (!this.file && file) this.file = this.mapResolve(file);
            }
          }
          if (!this.file) {
            this.id = "<input css " + nanoid(6) + ">";
          }
          if (this.map) this.map.file = this.from;
        }
        error(message, line, column, opts = {}) {
          let endColumn, endLine, endOffset, offset5, result;
          if (line && typeof line === "object") {
            let start5 = line;
            let end3 = column;
            if (typeof start5.offset === "number") {
              offset5 = start5.offset;
              let pos = this.fromOffset(offset5);
              line = pos.line;
              column = pos.col;
            } else {
              line = start5.line;
              column = start5.column;
              offset5 = this.fromLineAndColumn(line, column);
            }
            if (typeof end3.offset === "number") {
              endOffset = end3.offset;
              let pos = this.fromOffset(endOffset);
              endLine = pos.line;
              endColumn = pos.col;
            } else {
              endLine = end3.line;
              endColumn = end3.column;
              endOffset = this.fromLineAndColumn(end3.line, end3.column);
            }
          } else if (!column) {
            offset5 = line;
            let pos = this.fromOffset(offset5);
            line = pos.line;
            column = pos.col;
          } else {
            offset5 = this.fromLineAndColumn(line, column);
          }
          let origin = this.origin(line, column, endLine, endColumn);
          if (origin) {
            result = new CssSyntaxError3(
              message,
              origin.endLine === void 0 ? origin.line : { column: origin.column, line: origin.line },
              origin.endLine === void 0 ? origin.column : { column: origin.endColumn, line: origin.endLine },
              origin.source,
              origin.file,
              opts.plugin
            );
          } else {
            result = new CssSyntaxError3(
              message,
              endLine === void 0 ? line : { column, line },
              endLine === void 0 ? column : { column: endColumn, line: endLine },
              this.css,
              this.file,
              opts.plugin
            );
          }
          result.input = { column, endColumn, endLine, endOffset, line, offset: offset5, source: this.css };
          if (this.file) {
            if (pathToFileURL) {
              result.input.url = pathToFileURL(this.file).toString();
            }
            result.input.file = this.file;
          }
          return result;
        }
        fromLineAndColumn(line, column) {
          let lineToIndex = getLineToIndex(this);
          let index = lineToIndex[line - 1];
          return index + column - 1;
        }
        fromOffset(offset5) {
          let lineToIndex = getLineToIndex(this);
          let lastLine = lineToIndex[lineToIndex.length - 1];
          let min3 = 0;
          if (offset5 >= lastLine) {
            min3 = lineToIndex.length - 1;
          } else {
            let max3 = lineToIndex.length - 2;
            let mid;
            while (min3 < max3) {
              mid = min3 + (max3 - min3 >> 1);
              if (offset5 < lineToIndex[mid]) {
                max3 = mid - 1;
              } else if (offset5 >= lineToIndex[mid + 1]) {
                min3 = mid + 1;
              } else {
                min3 = mid;
                break;
              }
            }
          }
          return {
            col: offset5 - lineToIndex[min3] + 1,
            line: min3 + 1
          };
        }
        mapResolve(file) {
          if (/^\w+:\/\//.test(file)) {
            return file;
          }
          return resolve(this.map.consumer().sourceRoot || this.map.root || ".", file);
        }
        origin(line, column, endLine, endColumn) {
          if (!this.map) return false;
          let consumer = this.map.consumer();
          let from = consumer.originalPositionFor({ column, line });
          if (!from.source) return false;
          let to5;
          if (typeof endLine === "number") {
            to5 = consumer.originalPositionFor({ column: endColumn, line: endLine });
          }
          let fromUrl;
          if (isAbsolute(from.source)) {
            fromUrl = pathToFileURL(from.source);
          } else {
            fromUrl = new URL(
              from.source,
              this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)
            );
          }
          let result = {
            column: from.column,
            endColumn: to5 && to5.column,
            endLine: to5 && to5.line,
            line: from.line,
            url: fromUrl.toString()
          };
          if (fromUrl.protocol === "file:") {
            if (fileURLToPath) {
              result.file = fileURLToPath(fromUrl);
            } else {
              throw new Error(`file: protocol is not available in this PostCSS build`);
            }
          }
          let source = consumer.sourceContentFor(from.source);
          if (source) result.source = source;
          return result;
        }
        toJSON() {
          let json = {};
          for (let name of ["hasBOM", "css", "file", "id"]) {
            if (this[name] != null) {
              json[name] = this[name];
            }
          }
          if (this.map) {
            json.map = { ...this.map };
            if (json.map.consumerCache) {
              json.map.consumerCache = void 0;
            }
          }
          return json;
        }
      };
      __name(_Input, "Input");
      var Input3 = _Input;
      module.exports = Input3;
      Input3.default = Input3;
      if (terminalHighlight && terminalHighlight.registerInput) {
        terminalHighlight.registerInput(Input3);
      }
    }
  });

  // node_modules/postcss/lib/root.js
  var require_root = __commonJS({
    "node_modules/postcss/lib/root.js"(exports, module) {
      
      var Container3 = require_container();
      var LazyResult;
      var Processor3;
      var _Root = class _Root extends Container3 {
        constructor(defaults3) {
          super(defaults3);
          this.type = "root";
          if (!this.nodes) this.nodes = [];
        }
        normalize(child, sample, type) {
          let nodes = super.normalize(child);
          if (sample) {
            if (type === "prepend") {
              if (this.nodes.length > 1) {
                sample.raws.before = this.nodes[1].raws.before;
              } else {
                delete sample.raws.before;
              }
            } else if (this.first !== sample) {
              for (let node of nodes) {
                node.raws.before = sample.raws.before;
              }
            }
          }
          return nodes;
        }
        removeChild(child, ignore) {
          let index = this.index(child);
          if (!ignore && index === 0 && this.nodes.length > 1) {
            this.nodes[1].raws.before = this.nodes[index].raws.before;
          }
          return super.removeChild(child);
        }
        toResult(opts = {}) {
          let lazy = new LazyResult(new Processor3(), this, opts);
          return lazy.stringify();
        }
      };
      __name(_Root, "Root");
      var Root3 = _Root;
      Root3.registerLazyResult = (dependant) => {
        LazyResult = dependant;
      };
      Root3.registerProcessor = (dependant) => {
        Processor3 = dependant;
      };
      module.exports = Root3;
      Root3.default = Root3;
      Container3.registerRoot(Root3);
    }
  });

  // node_modules/postcss/lib/list.js
  var require_list = __commonJS({
    "node_modules/postcss/lib/list.js"(exports, module) {
      
      var list3 = {
        comma(string) {
          return list3.split(string, [","], true);
        },
        space(string) {
          let spaces = [" ", "\n", "	"];
          return list3.split(string, spaces);
        },
        split(string, separators, last) {
          let array = [];
          let current = "";
          let split = false;
          let func = 0;
          let inQuote = false;
          let prevQuote = "";
          let escape2 = false;
          for (let letter of string) {
            if (escape2) {
              escape2 = false;
            } else if (letter === "\\") {
              escape2 = true;
            } else if (inQuote) {
              if (letter === prevQuote) {
                inQuote = false;
              }
            } else if (letter === '"' || letter === "'") {
              inQuote = true;
              prevQuote = letter;
            } else if (letter === "(") {
              func += 1;
            } else if (letter === ")") {
              if (func > 0) func -= 1;
            } else if (func === 0) {
              if (separators.includes(letter)) split = true;
            }
            if (split) {
              if (current !== "") array.push(current.trim());
              current = "";
              split = false;
            } else {
              current += letter;
            }
          }
          if (last || current !== "") array.push(current.trim());
          return array;
        }
      };
      module.exports = list3;
      list3.default = list3;
    }
  });

  // node_modules/postcss/lib/rule.js
  var require_rule = __commonJS({
    "node_modules/postcss/lib/rule.js"(exports, module) {
      
      var Container3 = require_container();
      var list3 = require_list();
      var _Rule = class _Rule extends Container3 {
        get selectors() {
          return list3.comma(this.selector);
        }
        set selectors(values) {
          let match4 = this.selector ? this.selector.match(/,\s*/) : null;
          let sep = match4 ? match4[0] : "," + this.raw("between", "beforeOpen");
          this.selector = values.join(sep);
        }
        constructor(defaults3) {
          super(defaults3);
          this.type = "rule";
          if (!this.nodes) this.nodes = [];
        }
      };
      __name(_Rule, "Rule");
      var Rule3 = _Rule;
      module.exports = Rule3;
      Rule3.default = Rule3;
      Container3.registerRule(Rule3);
    }
  });

  // node_modules/postcss/lib/fromJSON.js
  var require_fromJSON = __commonJS({
    "node_modules/postcss/lib/fromJSON.js"(exports, module) {
      
      var AtRule3 = require_at_rule();
      var Comment4 = require_comment();
      var Declaration3 = require_declaration();
      var Input3 = require_input();
      var PreviousMap = require_previous_map();
      var Root3 = require_root();
      var Rule3 = require_rule();
      function fromJSON3(json, inputs) {
        if (Array.isArray(json)) return json.map((n21) => fromJSON3(n21));
        let { inputs: ownInputs, ...defaults3 } = json;
        if (ownInputs) {
          inputs = [];
          for (let input of ownInputs) {
            let inputHydrated = { ...input, __proto__: Input3.prototype };
            if (inputHydrated.map) {
              inputHydrated.map = {
                ...inputHydrated.map,
                __proto__: PreviousMap.prototype
              };
            }
            inputs.push(inputHydrated);
          }
        }
        if (defaults3.nodes) {
          defaults3.nodes = json.nodes.map((n21) => fromJSON3(n21, inputs));
        }
        if (defaults3.source) {
          let { inputId, ...source } = defaults3.source;
          defaults3.source = source;
          if (inputId != null) {
            defaults3.source.input = inputs[inputId];
          }
        }
        if (defaults3.type === "root") {
          return new Root3(defaults3);
        } else if (defaults3.type === "decl") {
          return new Declaration3(defaults3);
        } else if (defaults3.type === "rule") {
          return new Rule3(defaults3);
        } else if (defaults3.type === "comment") {
          return new Comment4(defaults3);
        } else if (defaults3.type === "atrule") {
          return new AtRule3(defaults3);
        } else {
          throw new Error("Unknown node type: " + json.type);
        }
      }
      __name(fromJSON3, "fromJSON");
      module.exports = fromJSON3;
      fromJSON3.default = fromJSON3;
    }
  });

  // node_modules/postcss/lib/map-generator.js
  var require_map_generator = __commonJS({
    "node_modules/postcss/lib/map-generator.js"(exports, module) {
      
      var { dirname, relative, resolve, sep } = require_path();
      var { SourceMapConsumer, SourceMapGenerator } = require_source_map();
      var { pathToFileURL } = require_url();
      var Input3 = require_input();
      var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
      var pathAvailable = Boolean(dirname && resolve && relative && sep);
      var _MapGenerator = class _MapGenerator {
        constructor(stringify3, root3, opts, cssString) {
          this.stringify = stringify3;
          this.mapOpts = opts.map || {};
          this.root = root3;
          this.opts = opts;
          this.css = cssString;
          this.originalCSS = cssString;
          this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
          this.memoizedFileURLs = /* @__PURE__ */ new Map();
          this.memoizedPaths = /* @__PURE__ */ new Map();
          this.memoizedURLs = /* @__PURE__ */ new Map();
        }
        addAnnotation() {
          let content;
          if (this.isInline()) {
            content = "data:application/json;base64," + this.toBase64(this.map.toString());
          } else if (typeof this.mapOpts.annotation === "string") {
            content = this.mapOpts.annotation;
          } else if (typeof this.mapOpts.annotation === "function") {
            content = this.mapOpts.annotation(this.opts.to, this.root);
          } else {
            content = this.outputFile() + ".map";
          }
          let eol = "\n";
          if (this.css.includes("\r\n")) eol = "\r\n";
          this.css += eol + "/*# sourceMappingURL=" + content + " */";
        }
        applyPrevMaps() {
          for (let prev of this.previous()) {
            let from = this.toUrl(this.path(prev.file));
            let root3 = prev.root || dirname(prev.file);
            let map;
            if (this.mapOpts.sourcesContent === false) {
              map = new SourceMapConsumer(prev.text);
              if (map.sourcesContent) {
                map.sourcesContent = null;
              }
            } else {
              map = prev.consumer();
            }
            this.map.applySourceMap(map, from, this.toUrl(this.path(root3)));
          }
        }
        clearAnnotation() {
          if (this.mapOpts.annotation === false) return;
          if (this.root) {
            let node;
            for (let i12 = this.root.nodes.length - 1; i12 >= 0; i12--) {
              node = this.root.nodes[i12];
              if (node.type !== "comment") continue;
              if (node.text.startsWith("# sourceMappingURL=")) {
                this.root.removeChild(i12);
              }
            }
          } else if (this.css) {
            this.css = this.css.replace(/\n*\/\*#[\S\s]*?\*\/$/gm, "");
          }
        }
        generate() {
          this.clearAnnotation();
          if (pathAvailable && sourceMapAvailable && this.isMap()) {
            return this.generateMap();
          } else {
            let result = "";
            this.stringify(this.root, (i12) => {
              result += i12;
            });
            return [result];
          }
        }
        generateMap() {
          if (this.root) {
            this.generateString();
          } else if (this.previous().length === 1) {
            let prev = this.previous()[0].consumer();
            prev.file = this.outputFile();
            this.map = SourceMapGenerator.fromSourceMap(prev, {
              ignoreInvalidMapping: true
            });
          } else {
            this.map = new SourceMapGenerator({
              file: this.outputFile(),
              ignoreInvalidMapping: true
            });
            this.map.addMapping({
              generated: { column: 0, line: 1 },
              original: { column: 0, line: 1 },
              source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>"
            });
          }
          if (this.isSourcesContent()) this.setSourcesContent();
          if (this.root && this.previous().length > 0) this.applyPrevMaps();
          if (this.isAnnotation()) this.addAnnotation();
          if (this.isInline()) {
            return [this.css];
          } else {
            return [this.css, this.map];
          }
        }
        generateString() {
          this.css = "";
          this.map = new SourceMapGenerator({
            file: this.outputFile(),
            ignoreInvalidMapping: true
          });
          let line = 1;
          let column = 1;
          let noSource = "<no source>";
          let mapping = {
            generated: { column: 0, line: 0 },
            original: { column: 0, line: 0 },
            source: ""
          };
          let last, lines;
          this.stringify(this.root, (str, node, type) => {
            this.css += str;
            if (node && type !== "end") {
              mapping.generated.line = line;
              mapping.generated.column = column - 1;
              if (node.source && node.source.start) {
                mapping.source = this.sourcePath(node);
                mapping.original.line = node.source.start.line;
                mapping.original.column = node.source.start.column - 1;
                this.map.addMapping(mapping);
              } else {
                mapping.source = noSource;
                mapping.original.line = 1;
                mapping.original.column = 0;
                this.map.addMapping(mapping);
              }
            }
            lines = str.match(/\n/g);
            if (lines) {
              line += lines.length;
              last = str.lastIndexOf("\n");
              column = str.length - last;
            } else {
              column += str.length;
            }
            if (node && type !== "start") {
              let p5 = node.parent || { raws: {} };
              let childless = node.type === "decl" || node.type === "atrule" && !node.nodes;
              if (!childless || node !== p5.last || p5.raws.semicolon) {
                if (node.source && node.source.end) {
                  mapping.source = this.sourcePath(node);
                  mapping.original.line = node.source.end.line;
                  mapping.original.column = node.source.end.column - 1;
                  mapping.generated.line = line;
                  mapping.generated.column = column - 2;
                  this.map.addMapping(mapping);
                } else {
                  mapping.source = noSource;
                  mapping.original.line = 1;
                  mapping.original.column = 0;
                  mapping.generated.line = line;
                  mapping.generated.column = column - 1;
                  this.map.addMapping(mapping);
                }
              }
            }
          });
        }
        isAnnotation() {
          if (this.isInline()) {
            return true;
          }
          if (typeof this.mapOpts.annotation !== "undefined") {
            return this.mapOpts.annotation;
          }
          if (this.previous().length) {
            return this.previous().some((i12) => i12.annotation);
          }
          return true;
        }
        isInline() {
          if (typeof this.mapOpts.inline !== "undefined") {
            return this.mapOpts.inline;
          }
          let annotation = this.mapOpts.annotation;
          if (typeof annotation !== "undefined" && annotation !== true) {
            return false;
          }
          if (this.previous().length) {
            return this.previous().some((i12) => i12.inline);
          }
          return true;
        }
        isMap() {
          if (typeof this.opts.map !== "undefined") {
            return !!this.opts.map;
          }
          return this.previous().length > 0;
        }
        isSourcesContent() {
          if (typeof this.mapOpts.sourcesContent !== "undefined") {
            return this.mapOpts.sourcesContent;
          }
          if (this.previous().length) {
            return this.previous().some((i12) => i12.withContent());
          }
          return true;
        }
        outputFile() {
          if (this.opts.to) {
            return this.path(this.opts.to);
          } else if (this.opts.from) {
            return this.path(this.opts.from);
          } else {
            return "to.css";
          }
        }
        path(file) {
          if (this.mapOpts.absolute) return file;
          if (file.charCodeAt(0) === 60) return file;
          if (/^\w+:\/\//.test(file)) return file;
          let cached = this.memoizedPaths.get(file);
          if (cached) return cached;
          let from = this.opts.to ? dirname(this.opts.to) : ".";
          if (typeof this.mapOpts.annotation === "string") {
            from = dirname(resolve(from, this.mapOpts.annotation));
          }
          let path = relative(from, file);
          this.memoizedPaths.set(file, path);
          return path;
        }
        previous() {
          if (!this.previousMaps) {
            this.previousMaps = [];
            if (this.root) {
              this.root.walk((node) => {
                if (node.source && node.source.input.map) {
                  let map = node.source.input.map;
                  if (!this.previousMaps.includes(map)) {
                    this.previousMaps.push(map);
                  }
                }
              });
            } else {
              let input = new Input3(this.originalCSS, this.opts);
              if (input.map) this.previousMaps.push(input.map);
            }
          }
          return this.previousMaps;
        }
        setSourcesContent() {
          let already = {};
          if (this.root) {
            this.root.walk((node) => {
              if (node.source) {
                let from = node.source.input.from;
                if (from && !already[from]) {
                  already[from] = true;
                  let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));
                  this.map.setSourceContent(fromUrl, node.source.input.css);
                }
              }
            });
          } else if (this.css) {
            let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
            this.map.setSourceContent(from, this.css);
          }
        }
        sourcePath(node) {
          if (this.mapOpts.from) {
            return this.toUrl(this.mapOpts.from);
          } else if (this.usesFileUrls) {
            return this.toFileUrl(node.source.input.from);
          } else {
            return this.toUrl(this.path(node.source.input.from));
          }
        }
        toBase64(str) {
          if (Buffer) {
            return Buffer.from(str).toString("base64");
          } else {
            return window.btoa(unescape(encodeURIComponent(str)));
          }
        }
        toFileUrl(path) {
          let cached = this.memoizedFileURLs.get(path);
          if (cached) return cached;
          if (pathToFileURL) {
            let fileURL = pathToFileURL(path).toString();
            this.memoizedFileURLs.set(path, fileURL);
            return fileURL;
          } else {
            throw new Error(
              "`map.absolute` option is not available in this PostCSS build"
            );
          }
        }
        toUrl(path) {
          let cached = this.memoizedURLs.get(path);
          if (cached) return cached;
          if (sep === "\\") {
            path = path.replace(/\\/g, "/");
          }
          let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);
          this.memoizedURLs.set(path, url);
          return url;
        }
      };
      __name(_MapGenerator, "MapGenerator");
      var MapGenerator = _MapGenerator;
      module.exports = MapGenerator;
    }
  });

  // node_modules/postcss/lib/tokenize.js
  var require_tokenize = __commonJS({
    "node_modules/postcss/lib/tokenize.js"(exports, module) {
      
      var SINGLE_QUOTE = "'".charCodeAt(0);
      var DOUBLE_QUOTE = '"'.charCodeAt(0);
      var BACKSLASH = "\\".charCodeAt(0);
      var SLASH = "/".charCodeAt(0);
      var NEWLINE = "\n".charCodeAt(0);
      var SPACE = " ".charCodeAt(0);
      var FEED = "\f".charCodeAt(0);
      var TAB = "	".charCodeAt(0);
      var CR = "\r".charCodeAt(0);
      var OPEN_SQUARE = "[".charCodeAt(0);
      var CLOSE_SQUARE = "]".charCodeAt(0);
      var OPEN_PARENTHESES = "(".charCodeAt(0);
      var CLOSE_PARENTHESES = ")".charCodeAt(0);
      var OPEN_CURLY = "{".charCodeAt(0);
      var CLOSE_CURLY = "}".charCodeAt(0);
      var SEMICOLON = ";".charCodeAt(0);
      var ASTERISK = "*".charCodeAt(0);
      var COLON = ":".charCodeAt(0);
      var AT = "@".charCodeAt(0);
      var RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
      var RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
      var RE_BAD_BRACKET = /.[\r\n"'(/\\]/;
      var RE_HEX_ESCAPE = /[\da-f]/i;
      module.exports = /* @__PURE__ */ __name(function tokenizer(input, options = {}) {
        let css = input.css.valueOf();
        let ignore = options.ignoreErrors;
        let code, content, escape2, next, quote;
        let currentToken, escaped, escapePos, n21, prev;
        let length = css.length;
        let pos = 0;
        let buffer = [];
        let returned = [];
        function position() {
          return pos;
        }
        __name(position, "position");
        function unclosed(what) {
          throw input.error("Unclosed " + what, pos);
        }
        __name(unclosed, "unclosed");
        function endOfFile() {
          return returned.length === 0 && pos >= length;
        }
        __name(endOfFile, "endOfFile");
        function nextToken(opts) {
          if (returned.length) return returned.pop();
          if (pos >= length) return;
          let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
          code = css.charCodeAt(pos);
          switch (code) {
            case NEWLINE:
            case SPACE:
            case TAB:
            case CR:
            case FEED: {
              next = pos;
              do {
                next += 1;
                code = css.charCodeAt(next);
              } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
              currentToken = ["space", css.slice(pos, next)];
              pos = next - 1;
              break;
            }
            case OPEN_SQUARE:
            case CLOSE_SQUARE:
            case OPEN_CURLY:
            case CLOSE_CURLY:
            case COLON:
            case SEMICOLON:
            case CLOSE_PARENTHESES: {
              let controlChar = String.fromCharCode(code);
              currentToken = [controlChar, controlChar, pos];
              break;
            }
            case OPEN_PARENTHESES: {
              prev = buffer.length ? buffer.pop()[1] : "";
              n21 = css.charCodeAt(pos + 1);
              if (prev === "url" && n21 !== SINGLE_QUOTE && n21 !== DOUBLE_QUOTE && n21 !== SPACE && n21 !== NEWLINE && n21 !== TAB && n21 !== FEED && n21 !== CR) {
                next = pos;
                do {
                  escaped = false;
                  next = css.indexOf(")", next + 1);
                  if (next === -1) {
                    if (ignore || ignoreUnclosed) {
                      next = pos;
                      break;
                    } else {
                      unclosed("bracket");
                    }
                  }
                  escapePos = next;
                  while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                    escapePos -= 1;
                    escaped = !escaped;
                  }
                } while (escaped);
                currentToken = ["brackets", css.slice(pos, next + 1), pos, next];
                pos = next;
              } else {
                next = css.indexOf(")", pos + 1);
                content = css.slice(pos, next + 1);
                if (next === -1 || RE_BAD_BRACKET.test(content)) {
                  currentToken = ["(", "(", pos];
                } else {
                  currentToken = ["brackets", content, pos, next];
                  pos = next;
                }
              }
              break;
            }
            case SINGLE_QUOTE:
            case DOUBLE_QUOTE: {
              quote = code === SINGLE_QUOTE ? "'" : '"';
              next = pos;
              do {
                escaped = false;
                next = css.indexOf(quote, next + 1);
                if (next === -1) {
                  if (ignore || ignoreUnclosed) {
                    next = pos + 1;
                    break;
                  } else {
                    unclosed("string");
                  }
                }
                escapePos = next;
                while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                  escapePos -= 1;
                  escaped = !escaped;
                }
              } while (escaped);
              currentToken = ["string", css.slice(pos, next + 1), pos, next];
              pos = next;
              break;
            }
            case AT: {
              RE_AT_END.lastIndex = pos + 1;
              RE_AT_END.test(css);
              if (RE_AT_END.lastIndex === 0) {
                next = css.length - 1;
              } else {
                next = RE_AT_END.lastIndex - 2;
              }
              currentToken = ["at-word", css.slice(pos, next + 1), pos, next];
              pos = next;
              break;
            }
            case BACKSLASH: {
              next = pos;
              escape2 = true;
              while (css.charCodeAt(next + 1) === BACKSLASH) {
                next += 1;
                escape2 = !escape2;
              }
              code = css.charCodeAt(next + 1);
              if (escape2 && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
                next += 1;
                if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                  while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                    next += 1;
                  }
                  if (css.charCodeAt(next + 1) === SPACE) {
                    next += 1;
                  }
                }
              }
              currentToken = ["word", css.slice(pos, next + 1), pos, next];
              pos = next;
              break;
            }
            default: {
              if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
                next = css.indexOf("*/", pos + 2) + 1;
                if (next === 0) {
                  if (ignore || ignoreUnclosed) {
                    next = css.length;
                  } else {
                    unclosed("comment");
                  }
                }
                currentToken = ["comment", css.slice(pos, next + 1), pos, next];
                pos = next;
              } else {
                RE_WORD_END.lastIndex = pos + 1;
                RE_WORD_END.test(css);
                if (RE_WORD_END.lastIndex === 0) {
                  next = css.length - 1;
                } else {
                  next = RE_WORD_END.lastIndex - 2;
                }
                currentToken = ["word", css.slice(pos, next + 1), pos, next];
                buffer.push(currentToken);
                pos = next;
              }
              break;
            }
          }
          pos++;
          return currentToken;
        }
        __name(nextToken, "nextToken");
        function back(token) {
          returned.push(token);
        }
        __name(back, "back");
        return {
          back,
          endOfFile,
          nextToken,
          position
        };
      }, "tokenizer");
    }
  });

  // node_modules/postcss/lib/parser.js
  var require_parser = __commonJS({
    "node_modules/postcss/lib/parser.js"(exports, module) {
      
      var AtRule3 = require_at_rule();
      var Comment4 = require_comment();
      var Declaration3 = require_declaration();
      var Root3 = require_root();
      var Rule3 = require_rule();
      var tokenizer = require_tokenize();
      var SAFE_COMMENT_NEIGHBOR = {
        empty: true,
        space: true
      };
      function findLastWithPosition(tokens) {
        for (let i12 = tokens.length - 1; i12 >= 0; i12--) {
          let token = tokens[i12];
          let pos = token[3] || token[2];
          if (pos) return pos;
        }
      }
      __name(findLastWithPosition, "findLastWithPosition");
      var _Parser = class _Parser {
        constructor(input) {
          this.input = input;
          this.root = new Root3();
          this.current = this.root;
          this.spaces = "";
          this.semicolon = false;
          this.createTokenizer();
          this.root.source = { input, start: { column: 1, line: 1, offset: 0 } };
        }
        atrule(token) {
          let node = new AtRule3();
          node.name = token[1].slice(1);
          if (node.name === "") {
            this.unnamedAtrule(node, token);
          }
          this.init(node, token[2]);
          let type;
          let prev;
          let shift;
          let last = false;
          let open = false;
          let params = [];
          let brackets = [];
          while (!this.tokenizer.endOfFile()) {
            token = this.tokenizer.nextToken();
            type = token[0];
            if (type === "(" || type === "[") {
              brackets.push(type === "(" ? ")" : "]");
            } else if (type === "{" && brackets.length > 0) {
              brackets.push("}");
            } else if (type === brackets[brackets.length - 1]) {
              brackets.pop();
            }
            if (brackets.length === 0) {
              if (type === ";") {
                node.source.end = this.getPosition(token[2]);
                node.source.end.offset++;
                this.semicolon = true;
                break;
              } else if (type === "{") {
                open = true;
                break;
              } else if (type === "}") {
                if (params.length > 0) {
                  shift = params.length - 1;
                  prev = params[shift];
                  while (prev && prev[0] === "space") {
                    prev = params[--shift];
                  }
                  if (prev) {
                    node.source.end = this.getPosition(prev[3] || prev[2]);
                    node.source.end.offset++;
                  }
                }
                this.end(token);
                break;
              } else {
                params.push(token);
              }
            } else {
              params.push(token);
            }
            if (this.tokenizer.endOfFile()) {
              last = true;
              break;
            }
          }
          node.raws.between = this.spacesAndCommentsFromEnd(params);
          if (params.length) {
            node.raws.afterName = this.spacesAndCommentsFromStart(params);
            this.raw(node, "params", params);
            if (last) {
              token = params[params.length - 1];
              node.source.end = this.getPosition(token[3] || token[2]);
              node.source.end.offset++;
              this.spaces = node.raws.between;
              node.raws.between = "";
            }
          } else {
            node.raws.afterName = "";
            node.params = "";
          }
          if (open) {
            node.nodes = [];
            this.current = node;
          }
        }
        checkMissedSemicolon(tokens) {
          let colon = this.colon(tokens);
          if (colon === false) return;
          let founded = 0;
          let token;
          for (let j2 = colon - 1; j2 >= 0; j2--) {
            token = tokens[j2];
            if (token[0] !== "space") {
              founded += 1;
              if (founded === 2) break;
            }
          }
          throw this.input.error(
            "Missed semicolon",
            token[0] === "word" ? token[3] + 1 : token[2]
          );
        }
        colon(tokens) {
          let brackets = 0;
          let prev, token, type;
          for (let [i12, element] of tokens.entries()) {
            token = element;
            type = token[0];
            if (type === "(") {
              brackets += 1;
            }
            if (type === ")") {
              brackets -= 1;
            }
            if (brackets === 0 && type === ":") {
              if (!prev) {
                this.doubleColon(token);
              } else if (prev[0] === "word" && prev[1] === "progid") {
                continue;
              } else {
                return i12;
              }
            }
            prev = token;
          }
          return false;
        }
        comment(token) {
          let node = new Comment4();
          this.init(node, token[2]);
          node.source.end = this.getPosition(token[3] || token[2]);
          node.source.end.offset++;
          let text = token[1].slice(2, -2);
          if (/^\s*$/.test(text)) {
            node.text = "";
            node.raws.left = text;
            node.raws.right = "";
          } else {
            let match4 = text.match(/^(\s*)([^]*\S)(\s*)$/);
            node.text = match4[2];
            node.raws.left = match4[1];
            node.raws.right = match4[3];
          }
        }
        createTokenizer() {
          this.tokenizer = tokenizer(this.input);
        }
        decl(tokens, customProperty) {
          let node = new Declaration3();
          this.init(node, tokens[0][2]);
          let last = tokens[tokens.length - 1];
          if (last[0] === ";") {
            this.semicolon = true;
            tokens.pop();
          }
          node.source.end = this.getPosition(
            last[3] || last[2] || findLastWithPosition(tokens)
          );
          node.source.end.offset++;
          while (tokens[0][0] !== "word") {
            if (tokens.length === 1) this.unknownWord(tokens);
            node.raws.before += tokens.shift()[1];
          }
          node.source.start = this.getPosition(tokens[0][2]);
          node.prop = "";
          while (tokens.length) {
            let type = tokens[0][0];
            if (type === ":" || type === "space" || type === "comment") {
              break;
            }
            node.prop += tokens.shift()[1];
          }
          node.raws.between = "";
          let token;
          while (tokens.length) {
            token = tokens.shift();
            if (token[0] === ":") {
              node.raws.between += token[1];
              break;
            } else {
              if (token[0] === "word" && /\w/.test(token[1])) {
                this.unknownWord([token]);
              }
              node.raws.between += token[1];
            }
          }
          if (node.prop[0] === "_" || node.prop[0] === "*") {
            node.raws.before += node.prop[0];
            node.prop = node.prop.slice(1);
          }
          let firstSpaces = [];
          let next;
          while (tokens.length) {
            next = tokens[0][0];
            if (next !== "space" && next !== "comment") break;
            firstSpaces.push(tokens.shift());
          }
          this.precheckMissedSemicolon(tokens);
          for (let i12 = tokens.length - 1; i12 >= 0; i12--) {
            token = tokens[i12];
            if (token[1].toLowerCase() === "!important") {
              node.important = true;
              let string = this.stringFrom(tokens, i12);
              string = this.spacesFromEnd(tokens) + string;
              if (string !== " !important") node.raws.important = string;
              break;
            } else if (token[1].toLowerCase() === "important") {
              let cache2 = tokens.slice(0);
              let str = "";
              for (let j2 = i12; j2 > 0; j2--) {
                let type = cache2[j2][0];
                if (str.trim().startsWith("!") && type !== "space") {
                  break;
                }
                str = cache2.pop()[1] + str;
              }
              if (str.trim().startsWith("!")) {
                node.important = true;
                node.raws.important = str;
                tokens = cache2;
              }
            }
            if (token[0] !== "space" && token[0] !== "comment") {
              break;
            }
          }
          let hasWord = tokens.some((i12) => i12[0] !== "space" && i12[0] !== "comment");
          if (hasWord) {
            node.raws.between += firstSpaces.map((i12) => i12[1]).join("");
            firstSpaces = [];
          }
          this.raw(node, "value", firstSpaces.concat(tokens), customProperty);
          if (node.value.includes(":") && !customProperty) {
            this.checkMissedSemicolon(tokens);
          }
        }
        doubleColon(token) {
          throw this.input.error(
            "Double colon",
            { offset: token[2] },
            { offset: token[2] + token[1].length }
          );
        }
        emptyRule(token) {
          let node = new Rule3();
          this.init(node, token[2]);
          node.selector = "";
          node.raws.between = "";
          this.current = node;
        }
        end(token) {
          if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
          }
          this.semicolon = false;
          this.current.raws.after = (this.current.raws.after || "") + this.spaces;
          this.spaces = "";
          if (this.current.parent) {
            this.current.source.end = this.getPosition(token[2]);
            this.current.source.end.offset++;
            this.current = this.current.parent;
          } else {
            this.unexpectedClose(token);
          }
        }
        endFile() {
          if (this.current.parent) this.unclosedBlock();
          if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
          }
          this.current.raws.after = (this.current.raws.after || "") + this.spaces;
          this.root.source.end = this.getPosition(this.tokenizer.position());
        }
        freeSemicolon(token) {
          this.spaces += token[1];
          if (this.current.nodes) {
            let prev = this.current.nodes[this.current.nodes.length - 1];
            if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
              prev.raws.ownSemicolon = this.spaces;
              this.spaces = "";
              prev.source.end = this.getPosition(token[2]);
              prev.source.end.offset += prev.raws.ownSemicolon.length;
            }
          }
        }
        // Helpers
        getPosition(offset5) {
          let pos = this.input.fromOffset(offset5);
          return {
            column: pos.col,
            line: pos.line,
            offset: offset5
          };
        }
        init(node, offset5) {
          this.current.push(node);
          node.source = {
            input: this.input,
            start: this.getPosition(offset5)
          };
          node.raws.before = this.spaces;
          this.spaces = "";
          if (node.type !== "comment") this.semicolon = false;
        }
        other(start5) {
          let end3 = false;
          let type = null;
          let colon = false;
          let bracket = null;
          let brackets = [];
          let customProperty = start5[1].startsWith("--");
          let tokens = [];
          let token = start5;
          while (token) {
            type = token[0];
            tokens.push(token);
            if (type === "(" || type === "[") {
              if (!bracket) bracket = token;
              brackets.push(type === "(" ? ")" : "]");
            } else if (customProperty && colon && type === "{") {
              if (!bracket) bracket = token;
              brackets.push("}");
            } else if (brackets.length === 0) {
              if (type === ";") {
                if (colon) {
                  this.decl(tokens, customProperty);
                  return;
                } else {
                  break;
                }
              } else if (type === "{") {
                this.rule(tokens);
                return;
              } else if (type === "}") {
                this.tokenizer.back(tokens.pop());
                end3 = true;
                break;
              } else if (type === ":") {
                colon = true;
              }
            } else if (type === brackets[brackets.length - 1]) {
              brackets.pop();
              if (brackets.length === 0) bracket = null;
            }
            token = this.tokenizer.nextToken();
          }
          if (this.tokenizer.endOfFile()) end3 = true;
          if (brackets.length > 0) this.unclosedBracket(bracket);
          if (end3 && colon) {
            if (!customProperty) {
              while (tokens.length) {
                token = tokens[tokens.length - 1][0];
                if (token !== "space" && token !== "comment") break;
                this.tokenizer.back(tokens.pop());
              }
            }
            this.decl(tokens, customProperty);
          } else {
            this.unknownWord(tokens);
          }
        }
        parse() {
          let token;
          while (!this.tokenizer.endOfFile()) {
            token = this.tokenizer.nextToken();
            switch (token[0]) {
              case "space":
                this.spaces += token[1];
                break;
              case ";":
                this.freeSemicolon(token);
                break;
              case "}":
                this.end(token);
                break;
              case "comment":
                this.comment(token);
                break;
              case "at-word":
                this.atrule(token);
                break;
              case "{":
                this.emptyRule(token);
                break;
              default:
                this.other(token);
                break;
            }
          }
          this.endFile();
        }
        precheckMissedSemicolon() {
        }
        raw(node, prop, tokens, customProperty) {
          let token, type;
          let length = tokens.length;
          let value = "";
          let clean = true;
          let next, prev;
          for (let i12 = 0; i12 < length; i12 += 1) {
            token = tokens[i12];
            type = token[0];
            if (type === "space" && i12 === length - 1 && !customProperty) {
              clean = false;
            } else if (type === "comment") {
              prev = tokens[i12 - 1] ? tokens[i12 - 1][0] : "empty";
              next = tokens[i12 + 1] ? tokens[i12 + 1][0] : "empty";
              if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {
                if (value.slice(-1) === ",") {
                  clean = false;
                } else {
                  value += token[1];
                }
              } else {
                clean = false;
              }
            } else {
              value += token[1];
            }
          }
          if (!clean) {
            let raw = tokens.reduce((all, i12) => all + i12[1], "");
            node.raws[prop] = { raw, value };
          }
          node[prop] = value;
        }
        rule(tokens) {
          tokens.pop();
          let node = new Rule3();
          this.init(node, tokens[0][2]);
          node.raws.between = this.spacesAndCommentsFromEnd(tokens);
          this.raw(node, "selector", tokens);
          this.current = node;
        }
        spacesAndCommentsFromEnd(tokens) {
          let lastTokenType;
          let spaces = "";
          while (tokens.length) {
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== "space" && lastTokenType !== "comment") break;
            spaces = tokens.pop()[1] + spaces;
          }
          return spaces;
        }
        // Errors
        spacesAndCommentsFromStart(tokens) {
          let next;
          let spaces = "";
          while (tokens.length) {
            next = tokens[0][0];
            if (next !== "space" && next !== "comment") break;
            spaces += tokens.shift()[1];
          }
          return spaces;
        }
        spacesFromEnd(tokens) {
          let lastTokenType;
          let spaces = "";
          while (tokens.length) {
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== "space") break;
            spaces = tokens.pop()[1] + spaces;
          }
          return spaces;
        }
        stringFrom(tokens, from) {
          let result = "";
          for (let i12 = from; i12 < tokens.length; i12++) {
            result += tokens[i12][1];
          }
          tokens.splice(from, tokens.length - from);
          return result;
        }
        unclosedBlock() {
          let pos = this.current.source.start;
          throw this.input.error("Unclosed block", pos.line, pos.column);
        }
        unclosedBracket(bracket) {
          throw this.input.error(
            "Unclosed bracket",
            { offset: bracket[2] },
            { offset: bracket[2] + 1 }
          );
        }
        unexpectedClose(token) {
          throw this.input.error(
            "Unexpected }",
            { offset: token[2] },
            { offset: token[2] + 1 }
          );
        }
        unknownWord(tokens) {
          throw this.input.error(
            "Unknown word " + tokens[0][1],
            { offset: tokens[0][2] },
            { offset: tokens[0][2] + tokens[0][1].length }
          );
        }
        unnamedAtrule(node, token) {
          throw this.input.error(
            "At-rule without name",
            { offset: token[2] },
            { offset: token[2] + token[1].length }
          );
        }
      };
      __name(_Parser, "Parser");
      var Parser = _Parser;
      module.exports = Parser;
    }
  });

  // node_modules/postcss/lib/parse.js
  var require_parse = __commonJS({
    "node_modules/postcss/lib/parse.js"(exports, module) {
      
      var Container3 = require_container();
      var Input3 = require_input();
      var Parser = require_parser();
      function parse6(css, opts) {
        let input = new Input3(css, opts);
        let parser = new Parser(input);
        try {
          parser.parse();
        } catch (e18) {
          if (true) {
            if (e18.name === "CssSyntaxError" && opts && opts.from) {
              if (/\.scss$/i.test(opts.from)) {
                e18.message += "\nYou tried to parse SCSS with the standard CSS parser; try again with the postcss-scss parser";
              } else if (/\.sass/i.test(opts.from)) {
                e18.message += "\nYou tried to parse Sass with the standard CSS parser; try again with the postcss-sass parser";
              } else if (/\.less$/i.test(opts.from)) {
                e18.message += "\nYou tried to parse Less with the standard CSS parser; try again with the postcss-less parser";
              }
            }
          }
          throw e18;
        }
        return parser.root;
      }
      __name(parse6, "parse");
      module.exports = parse6;
      parse6.default = parse6;
      Container3.registerParse(parse6);
    }
  });

  // node_modules/postcss/lib/warning.js
  var require_warning = __commonJS({
    "node_modules/postcss/lib/warning.js"(exports, module) {
      
      var _Warning = class _Warning {
        constructor(text, opts = {}) {
          this.type = "warning";
          this.text = text;
          if (opts.node && opts.node.source) {
            let range = opts.node.rangeBy(opts);
            this.line = range.start.line;
            this.column = range.start.column;
            this.endLine = range.end.line;
            this.endColumn = range.end.column;
          }
          for (let opt in opts) this[opt] = opts[opt];
        }
        toString() {
          if (this.node) {
            return this.node.error(this.text, {
              index: this.index,
              plugin: this.plugin,
              word: this.word
            }).message;
          }
          if (this.plugin) {
            return this.plugin + ": " + this.text;
          }
          return this.text;
        }
      };
      __name(_Warning, "Warning");
      var Warning3 = _Warning;
      module.exports = Warning3;
      Warning3.default = Warning3;
    }
  });

  // node_modules/postcss/lib/result.js
  var require_result = __commonJS({
    "node_modules/postcss/lib/result.js"(exports, module) {
      
      var Warning3 = require_warning();
      var _Result = class _Result {
        get content() {
          return this.css;
        }
        constructor(processor, root3, opts) {
          this.processor = processor;
          this.messages = [];
          this.root = root3;
          this.opts = opts;
          this.css = "";
          this.map = void 0;
        }
        toString() {
          return this.css;
        }
        warn(text, opts = {}) {
          if (!opts.plugin) {
            if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
              opts.plugin = this.lastPlugin.postcssPlugin;
            }
          }
          let warning = new Warning3(text, opts);
          this.messages.push(warning);
          return warning;
        }
        warnings() {
          return this.messages.filter((i12) => i12.type === "warning");
        }
      };
      __name(_Result, "Result");
      var Result3 = _Result;
      module.exports = Result3;
      Result3.default = Result3;
    }
  });

  // node_modules/postcss/lib/warn-once.js
  var require_warn_once = __commonJS({
    "node_modules/postcss/lib/warn-once.js"(exports, module) {
      
      var printed = {};
      module.exports = /* @__PURE__ */ __name(function warnOnce(message) {
        if (printed[message]) return;
        printed[message] = true;
        if (typeof console !== "undefined" && console.warn) {
          console.warn(message);
        }
      }, "warnOnce");
    }
  });

  // node_modules/postcss/lib/lazy-result.js
  var require_lazy_result = __commonJS({
    "node_modules/postcss/lib/lazy-result.js"(exports, module) {
      
      var Container3 = require_container();
      var Document3 = require_document();
      var MapGenerator = require_map_generator();
      var parse6 = require_parse();
      var Result3 = require_result();
      var Root3 = require_root();
      var stringify3 = require_stringify();
      var { isClean, my } = require_symbols();
      var warnOnce = require_warn_once();
      var TYPE_TO_CLASS_NAME = {
        atrule: "AtRule",
        comment: "Comment",
        decl: "Declaration",
        document: "Document",
        root: "Root",
        rule: "Rule"
      };
      var PLUGIN_PROPS = {
        AtRule: true,
        AtRuleExit: true,
        Comment: true,
        CommentExit: true,
        Declaration: true,
        DeclarationExit: true,
        Document: true,
        DocumentExit: true,
        Once: true,
        OnceExit: true,
        postcssPlugin: true,
        prepare: true,
        Root: true,
        RootExit: true,
        Rule: true,
        RuleExit: true
      };
      var NOT_VISITORS = {
        Once: true,
        postcssPlugin: true,
        prepare: true
      };
      var CHILDREN = 0;
      function isPromise(obj) {
        return typeof obj === "object" && typeof obj.then === "function";
      }
      __name(isPromise, "isPromise");
      function getEvents(node) {
        let key = false;
        let type = TYPE_TO_CLASS_NAME[node.type];
        if (node.type === "decl") {
          key = node.prop.toLowerCase();
        } else if (node.type === "atrule") {
          key = node.name.toLowerCase();
        }
        if (key && node.append) {
          return [
            type,
            type + "-" + key,
            CHILDREN,
            type + "Exit",
            type + "Exit-" + key
          ];
        } else if (key) {
          return [type, type + "-" + key, type + "Exit", type + "Exit-" + key];
        } else if (node.append) {
          return [type, CHILDREN, type + "Exit"];
        } else {
          return [type, type + "Exit"];
        }
      }
      __name(getEvents, "getEvents");
      function toStack(node) {
        let events2;
        if (node.type === "document") {
          events2 = ["Document", CHILDREN, "DocumentExit"];
        } else if (node.type === "root") {
          events2 = ["Root", CHILDREN, "RootExit"];
        } else {
          events2 = getEvents(node);
        }
        return {
          eventIndex: 0,
          events: events2,
          iterator: 0,
          node,
          visitorIndex: 0,
          visitors: []
        };
      }
      __name(toStack, "toStack");
      function cleanMarks(node) {
        node[isClean] = false;
        if (node.nodes) node.nodes.forEach((i12) => cleanMarks(i12));
        return node;
      }
      __name(cleanMarks, "cleanMarks");
      var postcss3 = {};
      var _LazyResult = class _LazyResult {
        get content() {
          return this.stringify().content;
        }
        get css() {
          return this.stringify().css;
        }
        get map() {
          return this.stringify().map;
        }
        get messages() {
          return this.sync().messages;
        }
        get opts() {
          return this.result.opts;
        }
        get processor() {
          return this.result.processor;
        }
        get root() {
          return this.sync().root;
        }
        get [Symbol.toStringTag]() {
          return "LazyResult";
        }
        constructor(processor, css, opts) {
          this.stringified = false;
          this.processed = false;
          let root3;
          if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) {
            root3 = cleanMarks(css);
          } else if (css instanceof _LazyResult || css instanceof Result3) {
            root3 = cleanMarks(css.root);
            if (css.map) {
              if (typeof opts.map === "undefined") opts.map = {};
              if (!opts.map.inline) opts.map.inline = false;
              opts.map.prev = css.map;
            }
          } else {
            let parser = parse6;
            if (opts.syntax) parser = opts.syntax.parse;
            if (opts.parser) parser = opts.parser;
            if (parser.parse) parser = parser.parse;
            try {
              root3 = parser(css, opts);
            } catch (error2) {
              this.processed = true;
              this.error = error2;
            }
            if (root3 && !root3[my]) {
              Container3.rebuild(root3);
            }
          }
          this.result = new Result3(processor, root3, opts);
          this.helpers = { ...postcss3, postcss: postcss3, result: this.result };
          this.plugins = this.processor.plugins.map((plugin3) => {
            if (typeof plugin3 === "object" && plugin3.prepare) {
              return { ...plugin3, ...plugin3.prepare(this.result) };
            } else {
              return plugin3;
            }
          });
        }
        async() {
          if (this.error) return Promise.reject(this.error);
          if (this.processed) return Promise.resolve(this.result);
          if (!this.processing) {
            this.processing = this.runAsync();
          }
          return this.processing;
        }
        catch(onRejected) {
          return this.async().catch(onRejected);
        }
        finally(onFinally) {
          return this.async().then(onFinally, onFinally);
        }
        getAsyncError() {
          throw new Error("Use process(css).then(cb) to work with async plugins");
        }
        handleError(error2, node) {
          let plugin3 = this.result.lastPlugin;
          try {
            if (node) node.addToError(error2);
            this.error = error2;
            if (error2.name === "CssSyntaxError" && !error2.plugin) {
              error2.plugin = plugin3.postcssPlugin;
              error2.setMessage();
            } else if (plugin3.postcssVersion) {
              if (true) {
                let pluginName = plugin3.postcssPlugin;
                let pluginVer = plugin3.postcssVersion;
                let runtimeVer = this.result.processor.version;
                let a21 = pluginVer.split(".");
                let b6 = runtimeVer.split(".");
                if (a21[0] !== b6[0] || parseInt(a21[1]) > parseInt(b6[1])) {
                  console.error(
                    "Unknown error from PostCSS plugin. Your current PostCSS version is " + runtimeVer + ", but " + pluginName + " uses " + pluginVer + ". Perhaps this is the source of the error below."
                  );
                }
              }
            }
          } catch (err) {
            if (console && console.error) console.error(err);
          }
          return error2;
        }
        prepareVisitors() {
          this.listeners = {};
          let add = /* @__PURE__ */ __name((plugin3, type, cb) => {
            if (!this.listeners[type]) this.listeners[type] = [];
            this.listeners[type].push([plugin3, cb]);
          }, "add");
          for (let plugin3 of this.plugins) {
            if (typeof plugin3 === "object") {
              for (let event in plugin3) {
                if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
                  throw new Error(
                    `Unknown event ${event} in ${plugin3.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`
                  );
                }
                if (!NOT_VISITORS[event]) {
                  if (typeof plugin3[event] === "object") {
                    for (let filter in plugin3[event]) {
                      if (filter === "*") {
                        add(plugin3, event, plugin3[event][filter]);
                      } else {
                        add(
                          plugin3,
                          event + "-" + filter.toLowerCase(),
                          plugin3[event][filter]
                        );
                      }
                    }
                  } else if (typeof plugin3[event] === "function") {
                    add(plugin3, event, plugin3[event]);
                  }
                }
              }
            }
          }
          this.hasListener = Object.keys(this.listeners).length > 0;
        }
        async runAsync() {
          this.plugin = 0;
          for (let i12 = 0; i12 < this.plugins.length; i12++) {
            let plugin3 = this.plugins[i12];
            let promise = this.runOnRoot(plugin3);
            if (isPromise(promise)) {
              try {
                await promise;
              } catch (error2) {
                throw this.handleError(error2);
              }
            }
          }
          this.prepareVisitors();
          if (this.hasListener) {
            let root3 = this.result.root;
            while (!root3[isClean]) {
              root3[isClean] = true;
              let stack = [toStack(root3)];
              while (stack.length > 0) {
                let promise = this.visitTick(stack);
                if (isPromise(promise)) {
                  try {
                    await promise;
                  } catch (e18) {
                    let node = stack[stack.length - 1].node;
                    throw this.handleError(e18, node);
                  }
                }
              }
            }
            if (this.listeners.OnceExit) {
              for (let [plugin3, visitor] of this.listeners.OnceExit) {
                this.result.lastPlugin = plugin3;
                try {
                  if (root3.type === "document") {
                    let roots = root3.nodes.map(
                      (subRoot) => visitor(subRoot, this.helpers)
                    );
                    await Promise.all(roots);
                  } else {
                    await visitor(root3, this.helpers);
                  }
                } catch (e18) {
                  throw this.handleError(e18);
                }
              }
            }
          }
          this.processed = true;
          return this.stringify();
        }
        runOnRoot(plugin3) {
          this.result.lastPlugin = plugin3;
          try {
            if (typeof plugin3 === "object" && plugin3.Once) {
              if (this.result.root.type === "document") {
                let roots = this.result.root.nodes.map(
                  (root3) => plugin3.Once(root3, this.helpers)
                );
                if (isPromise(roots[0])) {
                  return Promise.all(roots);
                }
                return roots;
              }
              return plugin3.Once(this.result.root, this.helpers);
            } else if (typeof plugin3 === "function") {
              return plugin3(this.result.root, this.result);
            }
          } catch (error2) {
            throw this.handleError(error2);
          }
        }
        stringify() {
          if (this.error) throw this.error;
          if (this.stringified) return this.result;
          this.stringified = true;
          this.sync();
          let opts = this.result.opts;
          let str = stringify3;
          if (opts.syntax) str = opts.syntax.stringify;
          if (opts.stringifier) str = opts.stringifier;
          if (str.stringify) str = str.stringify;
          let map = new MapGenerator(str, this.result.root, this.result.opts);
          let data = map.generate();
          this.result.css = data[0];
          this.result.map = data[1];
          return this.result;
        }
        sync() {
          if (this.error) throw this.error;
          if (this.processed) return this.result;
          this.processed = true;
          if (this.processing) {
            throw this.getAsyncError();
          }
          for (let plugin3 of this.plugins) {
            let promise = this.runOnRoot(plugin3);
            if (isPromise(promise)) {
              throw this.getAsyncError();
            }
          }
          this.prepareVisitors();
          if (this.hasListener) {
            let root3 = this.result.root;
            while (!root3[isClean]) {
              root3[isClean] = true;
              this.walkSync(root3);
            }
            if (this.listeners.OnceExit) {
              if (root3.type === "document") {
                for (let subRoot of root3.nodes) {
                  this.visitSync(this.listeners.OnceExit, subRoot);
                }
              } else {
                this.visitSync(this.listeners.OnceExit, root3);
              }
            }
          }
          return this.result;
        }
        then(onFulfilled, onRejected) {
          if (true) {
            if (!("from" in this.opts)) {
              warnOnce(
                "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
              );
            }
          }
          return this.async().then(onFulfilled, onRejected);
        }
        toString() {
          return this.css;
        }
        visitSync(visitors, node) {
          for (let [plugin3, visitor] of visitors) {
            this.result.lastPlugin = plugin3;
            let promise;
            try {
              promise = visitor(node, this.helpers);
            } catch (e18) {
              throw this.handleError(e18, node.proxyOf);
            }
            if (node.type !== "root" && node.type !== "document" && !node.parent) {
              return true;
            }
            if (isPromise(promise)) {
              throw this.getAsyncError();
            }
          }
        }
        visitTick(stack) {
          let visit = stack[stack.length - 1];
          let { node, visitors } = visit;
          if (node.type !== "root" && node.type !== "document" && !node.parent) {
            stack.pop();
            return;
          }
          if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
            let [plugin3, visitor] = visitors[visit.visitorIndex];
            visit.visitorIndex += 1;
            if (visit.visitorIndex === visitors.length) {
              visit.visitors = [];
              visit.visitorIndex = 0;
            }
            this.result.lastPlugin = plugin3;
            try {
              return visitor(node.toProxy(), this.helpers);
            } catch (e18) {
              throw this.handleError(e18, node);
            }
          }
          if (visit.iterator !== 0) {
            let iterator = visit.iterator;
            let child;
            while (child = node.nodes[node.indexes[iterator]]) {
              node.indexes[iterator] += 1;
              if (!child[isClean]) {
                child[isClean] = true;
                stack.push(toStack(child));
                return;
              }
            }
            visit.iterator = 0;
            delete node.indexes[iterator];
          }
          let events2 = visit.events;
          while (visit.eventIndex < events2.length) {
            let event = events2[visit.eventIndex];
            visit.eventIndex += 1;
            if (event === CHILDREN) {
              if (node.nodes && node.nodes.length) {
                node[isClean] = true;
                visit.iterator = node.getIterator();
              }
              return;
            } else if (this.listeners[event]) {
              visit.visitors = this.listeners[event];
              return;
            }
          }
          stack.pop();
        }
        walkSync(node) {
          node[isClean] = true;
          let events2 = getEvents(node);
          for (let event of events2) {
            if (event === CHILDREN) {
              if (node.nodes) {
                node.each((child) => {
                  if (!child[isClean]) this.walkSync(child);
                });
              }
            } else {
              let visitors = this.listeners[event];
              if (visitors) {
                if (this.visitSync(visitors, node.toProxy())) return;
              }
            }
          }
        }
        warnings() {
          return this.sync().warnings();
        }
      };
      __name(_LazyResult, "LazyResult");
      var LazyResult = _LazyResult;
      LazyResult.registerPostcss = (dependant) => {
        postcss3 = dependant;
      };
      module.exports = LazyResult;
      LazyResult.default = LazyResult;
      Root3.registerLazyResult(LazyResult);
      Document3.registerLazyResult(LazyResult);
    }
  });

  // node_modules/postcss/lib/no-work-result.js
  var require_no_work_result = __commonJS({
    "node_modules/postcss/lib/no-work-result.js"(exports, module) {
      
      var MapGenerator = require_map_generator();
      var parse6 = require_parse();
      var Result3 = require_result();
      var stringify3 = require_stringify();
      var warnOnce = require_warn_once();
      var _NoWorkResult = class _NoWorkResult {
        get content() {
          return this.result.css;
        }
        get css() {
          return this.result.css;
        }
        get map() {
          return this.result.map;
        }
        get messages() {
          return [];
        }
        get opts() {
          return this.result.opts;
        }
        get processor() {
          return this.result.processor;
        }
        get root() {
          if (this._root) {
            return this._root;
          }
          let root3;
          let parser = parse6;
          try {
            root3 = parser(this._css, this._opts);
          } catch (error2) {
            this.error = error2;
          }
          if (this.error) {
            throw this.error;
          } else {
            this._root = root3;
            return root3;
          }
        }
        get [Symbol.toStringTag]() {
          return "NoWorkResult";
        }
        constructor(processor, css, opts) {
          css = css.toString();
          this.stringified = false;
          this._processor = processor;
          this._css = css;
          this._opts = opts;
          this._map = void 0;
          let root3;
          let str = stringify3;
          this.result = new Result3(this._processor, root3, this._opts);
          this.result.css = css;
          let self2 = this;
          Object.defineProperty(this.result, "root", {
            get() {
              return self2.root;
            }
          });
          let map = new MapGenerator(str, root3, this._opts, css);
          if (map.isMap()) {
            let [generatedCSS, generatedMap] = map.generate();
            if (generatedCSS) {
              this.result.css = generatedCSS;
            }
            if (generatedMap) {
              this.result.map = generatedMap;
            }
          } else {
            map.clearAnnotation();
            this.result.css = map.css;
          }
        }
        async() {
          if (this.error) return Promise.reject(this.error);
          return Promise.resolve(this.result);
        }
        catch(onRejected) {
          return this.async().catch(onRejected);
        }
        finally(onFinally) {
          return this.async().then(onFinally, onFinally);
        }
        sync() {
          if (this.error) throw this.error;
          return this.result;
        }
        then(onFulfilled, onRejected) {
          if (true) {
            if (!("from" in this._opts)) {
              warnOnce(
                "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
              );
            }
          }
          return this.async().then(onFulfilled, onRejected);
        }
        toString() {
          return this._css;
        }
        warnings() {
          return [];
        }
      };
      __name(_NoWorkResult, "NoWorkResult");
      var NoWorkResult = _NoWorkResult;
      module.exports = NoWorkResult;
      NoWorkResult.default = NoWorkResult;
    }
  });

  // node_modules/postcss/lib/processor.js
  var require_processor = __commonJS({
    "node_modules/postcss/lib/processor.js"(exports, module) {
      
      var Document3 = require_document();
      var LazyResult = require_lazy_result();
      var NoWorkResult = require_no_work_result();
      var Root3 = require_root();
      var _Processor = class _Processor {
        constructor(plugins = []) {
          this.version = "8.5.6";
          this.plugins = this.normalize(plugins);
        }
        normalize(plugins) {
          let normalized = [];
          for (let i12 of plugins) {
            if (i12.postcss === true) {
              i12 = i12();
            } else if (i12.postcss) {
              i12 = i12.postcss;
            }
            if (typeof i12 === "object" && Array.isArray(i12.plugins)) {
              normalized = normalized.concat(i12.plugins);
            } else if (typeof i12 === "object" && i12.postcssPlugin) {
              normalized.push(i12);
            } else if (typeof i12 === "function") {
              normalized.push(i12);
            } else if (typeof i12 === "object" && (i12.parse || i12.stringify)) {
              if (true) {
                throw new Error(
                  "PostCSS syntaxes cannot be used as plugins. Instead, please use one of the syntax/parser/stringifier options as outlined in your PostCSS runner documentation."
                );
              }
            } else {
              throw new Error(i12 + " is not a PostCSS plugin");
            }
          }
          return normalized;
        }
        process(css, opts = {}) {
          if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) {
            return new NoWorkResult(this, css, opts);
          } else {
            return new LazyResult(this, css, opts);
          }
        }
        use(plugin3) {
          this.plugins = this.plugins.concat(this.normalize([plugin3]));
          return this;
        }
      };
      __name(_Processor, "Processor");
      var Processor3 = _Processor;
      module.exports = Processor3;
      Processor3.default = Processor3;
      Root3.registerProcessor(Processor3);
      Document3.registerProcessor(Processor3);
    }
  });

  // node_modules/postcss/lib/postcss.js
  var require_postcss = __commonJS({
    "node_modules/postcss/lib/postcss.js"(exports, module) {
      
      var AtRule3 = require_at_rule();
      var Comment4 = require_comment();
      var Container3 = require_container();
      var CssSyntaxError3 = require_css_syntax_error();
      var Declaration3 = require_declaration();
      var Document3 = require_document();
      var fromJSON3 = require_fromJSON();
      var Input3 = require_input();
      var LazyResult = require_lazy_result();
      var list3 = require_list();
      var Node3 = require_node();
      var parse6 = require_parse();
      var Processor3 = require_processor();
      var Result3 = require_result();
      var Root3 = require_root();
      var Rule3 = require_rule();
      var stringify3 = require_stringify();
      var Warning3 = require_warning();
      function postcss3(...plugins) {
        if (plugins.length === 1 && Array.isArray(plugins[0])) {
          plugins = plugins[0];
        }
        return new Processor3(plugins);
      }
      __name(postcss3, "postcss");
      postcss3.plugin = /* @__PURE__ */ __name(function plugin3(name, initializer) {
        let warningPrinted = false;
        function creator(...args) {
          if (console && console.warn && !warningPrinted) {
            warningPrinted = true;
            console.warn(
              name + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"
            );
            if (process.env.LANG && process.env.LANG.startsWith("cn")) {
              console.warn(
                name + ": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226"
              );
            }
          }
          let transformer = initializer(...args);
          transformer.postcssPlugin = name;
          transformer.postcssVersion = new Processor3().version;
          return transformer;
        }
        __name(creator, "creator");
        let cache2;
        Object.defineProperty(creator, "postcss", {
          get() {
            if (!cache2) cache2 = creator();
            return cache2;
          }
        });
        creator.process = function(css, processOpts, pluginOpts) {
          return postcss3([creator(pluginOpts)]).process(css, processOpts);
        };
        return creator;
      }, "plugin");
      postcss3.stringify = stringify3;
      postcss3.parse = parse6;
      postcss3.fromJSON = fromJSON3;
      postcss3.list = list3;
      postcss3.comment = (defaults3) => new Comment4(defaults3);
      postcss3.atRule = (defaults3) => new AtRule3(defaults3);
      postcss3.decl = (defaults3) => new Declaration3(defaults3);
      postcss3.rule = (defaults3) => new Rule3(defaults3);
      postcss3.root = (defaults3) => new Root3(defaults3);
      postcss3.document = (defaults3) => new Document3(defaults3);
      postcss3.CssSyntaxError = CssSyntaxError3;
      postcss3.Declaration = Declaration3;
      postcss3.Container = Container3;
      postcss3.Processor = Processor3;
      postcss3.Document = Document3;
      postcss3.Comment = Comment4;
      postcss3.Warning = Warning3;
      postcss3.AtRule = AtRule3;
      postcss3.Result = Result3;
      postcss3.Input = Input3;
      postcss3.Rule = Rule3;
      postcss3.Root = Root3;
      postcss3.Node = Node3;
      LazyResult.registerPostcss(postcss3);
      module.exports = postcss3;
      postcss3.default = postcss3;
    }
  });

  // node_modules/crc-32/crc32.js
  var require_crc32 = __commonJS({
    "node_modules/crc-32/crc32.js"(exports) {
      
      var CRC32;
      (function(factory) {
        if (typeof DO_NOT_EXPORT_CRC === "undefined") {
          if ("object" === typeof exports) {
            factory(exports);
          } else if ("function" === typeof define && define.amd) {
            define(function() {
              var module2 = {};
              factory(module2);
              return module2;
            });
          } else {
            factory(CRC32 = {});
          }
        } else {
          factory(CRC32 = {});
        }
      })(function(CRC322) {
        CRC322.version = "1.2.0";
        function signed_crc_table() {
          var c6 = 0, table2 = new Array(256);
          for (var n21 = 0; n21 != 256; ++n21) {
            c6 = n21;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            table2[n21] = c6;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table2) : table2;
        }
        __name(signed_crc_table, "signed_crc_table");
        var T = signed_crc_table();
        function crc32_bstr(bstr, seed) {
          var C2 = seed ^ -1, L2 = bstr.length - 1;
          for (var i12 = 0; i12 < L2; ) {
            C2 = C2 >>> 8 ^ T[(C2 ^ bstr.charCodeAt(i12++)) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ bstr.charCodeAt(i12++)) & 255];
          }
          if (i12 === L2) C2 = C2 >>> 8 ^ T[(C2 ^ bstr.charCodeAt(i12)) & 255];
          return C2 ^ -1;
        }
        __name(crc32_bstr, "crc32_bstr");
        function crc32_buf(buf, seed) {
          if (buf.length > 1e4) return crc32_buf_8(buf, seed);
          var C2 = seed ^ -1, L2 = buf.length - 3;
          for (var i12 = 0; i12 < L2; ) {
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          }
          while (i12 < L2 + 3) C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          return C2 ^ -1;
        }
        __name(crc32_buf, "crc32_buf");
        function crc32_buf_8(buf, seed) {
          var C2 = seed ^ -1, L2 = buf.length - 7;
          for (var i12 = 0; i12 < L2; ) {
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          }
          while (i12 < L2 + 7) C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          return C2 ^ -1;
        }
        __name(crc32_buf_8, "crc32_buf_8");
        function crc32_str(str, seed) {
          var C2 = seed ^ -1;
          for (var i12 = 0, L2 = str.length, c6, d16; i12 < L2; ) {
            c6 = str.charCodeAt(i12++);
            if (c6 < 128) {
              C2 = C2 >>> 8 ^ T[(C2 ^ c6) & 255];
            } else if (c6 < 2048) {
              C2 = C2 >>> 8 ^ T[(C2 ^ (192 | c6 >> 6 & 31)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 & 63)) & 255];
            } else if (c6 >= 55296 && c6 < 57344) {
              c6 = (c6 & 1023) + 64;
              d16 = str.charCodeAt(i12++) & 1023;
              C2 = C2 >>> 8 ^ T[(C2 ^ (240 | c6 >> 8 & 7)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 >> 2 & 63)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | d16 >> 6 & 15 | (c6 & 3) << 4)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | d16 & 63)) & 255];
            } else {
              C2 = C2 >>> 8 ^ T[(C2 ^ (224 | c6 >> 12 & 15)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 >> 6 & 63)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 & 63)) & 255];
            }
          }
          return C2 ^ -1;
        }
        __name(crc32_str, "crc32_str");
        CRC322.table = T;
        CRC322.bstr = crc32_bstr;
        CRC322.buf = crc32_buf;
        CRC322.str = crc32_str;
      });
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag2 = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag2] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag2] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          // Latin-1 Supplement block.
          "À": "A",
          "Á": "A",
          "Â": "A",
          "Ã": "A",
          "Ä": "A",
          "Å": "A",
          "à": "a",
          "á": "a",
          "â": "a",
          "ã": "a",
          "ä": "a",
          "å": "a",
          "Ç": "C",
          "ç": "c",
          "Ð": "D",
          "ð": "d",
          "È": "E",
          "É": "E",
          "Ê": "E",
          "Ë": "E",
          "è": "e",
          "é": "e",
          "ê": "e",
          "ë": "e",
          "Ì": "I",
          "Í": "I",
          "Î": "I",
          "Ï": "I",
          "ì": "i",
          "í": "i",
          "î": "i",
          "ï": "i",
          "Ñ": "N",
          "ñ": "n",
          "Ò": "O",
          "Ó": "O",
          "Ô": "O",
          "Õ": "O",
          "Ö": "O",
          "Ø": "O",
          "ò": "o",
          "ó": "o",
          "ô": "o",
          "õ": "o",
          "ö": "o",
          "ø": "o",
          "Ù": "U",
          "Ú": "U",
          "Û": "U",
          "Ü": "U",
          "ù": "u",
          "ú": "u",
          "û": "u",
          "ü": "u",
          "Ý": "Y",
          "ý": "y",
          "ÿ": "y",
          "Æ": "Ae",
          "æ": "ae",
          "Þ": "Th",
          "þ": "th",
          "ß": "ss",
          // Latin Extended-A block.
          "Ā": "A",
          "Ă": "A",
          "Ą": "A",
          "ā": "a",
          "ă": "a",
          "ą": "a",
          "Ć": "C",
          "Ĉ": "C",
          "Ċ": "C",
          "Č": "C",
          "ć": "c",
          "ĉ": "c",
          "ċ": "c",
          "č": "c",
          "Ď": "D",
          "Đ": "D",
          "ď": "d",
          "đ": "d",
          "Ē": "E",
          "Ĕ": "E",
          "Ė": "E",
          "Ę": "E",
          "Ě": "E",
          "ē": "e",
          "ĕ": "e",
          "ė": "e",
          "ę": "e",
          "ě": "e",
          "Ĝ": "G",
          "Ğ": "G",
          "Ġ": "G",
          "Ģ": "G",
          "ĝ": "g",
          "ğ": "g",
          "ġ": "g",
          "ģ": "g",
          "Ĥ": "H",
          "Ħ": "H",
          "ĥ": "h",
          "ħ": "h",
          "Ĩ": "I",
          "Ī": "I",
          "Ĭ": "I",
          "Į": "I",
          "İ": "I",
          "ĩ": "i",
          "ī": "i",
          "ĭ": "i",
          "į": "i",
          "ı": "i",
          "Ĵ": "J",
          "ĵ": "j",
          "Ķ": "K",
          "ķ": "k",
          "ĸ": "k",
          "Ĺ": "L",
          "Ļ": "L",
          "Ľ": "L",
          "Ŀ": "L",
          "Ł": "L",
          "ĺ": "l",
          "ļ": "l",
          "ľ": "l",
          "ŀ": "l",
          "ł": "l",
          "Ń": "N",
          "Ņ": "N",
          "Ň": "N",
          "Ŋ": "N",
          "ń": "n",
          "ņ": "n",
          "ň": "n",
          "ŋ": "n",
          "Ō": "O",
          "Ŏ": "O",
          "Ő": "O",
          "ō": "o",
          "ŏ": "o",
          "ő": "o",
          "Ŕ": "R",
          "Ŗ": "R",
          "Ř": "R",
          "ŕ": "r",
          "ŗ": "r",
          "ř": "r",
          "Ś": "S",
          "Ŝ": "S",
          "Ş": "S",
          "Š": "S",
          "ś": "s",
          "ŝ": "s",
          "ş": "s",
          "š": "s",
          "Ţ": "T",
          "Ť": "T",
          "Ŧ": "T",
          "ţ": "t",
          "ť": "t",
          "ŧ": "t",
          "Ũ": "U",
          "Ū": "U",
          "Ŭ": "U",
          "Ů": "U",
          "Ű": "U",
          "Ų": "U",
          "ũ": "u",
          "ū": "u",
          "ŭ": "u",
          "ů": "u",
          "ű": "u",
          "ų": "u",
          "Ŵ": "W",
          "ŵ": "w",
          "Ŷ": "Y",
          "ŷ": "y",
          "Ÿ": "Y",
          "Ź": "Z",
          "Ż": "Z",
          "Ž": "Z",
          "ź": "z",
          "ż": "z",
          "ž": "z",
          "Ĳ": "IJ",
          "ĳ": "ij",
          "Œ": "Oe",
          "œ": "oe",
          "ŉ": "'n",
          "ſ": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root3 = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e18) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        __name(apply, "apply");
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        __name(arrayAggregator, "arrayAggregator");
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        __name(arrayEach, "arrayEach");
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        __name(arrayEachRight, "arrayEachRight");
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        __name(arrayEvery, "arrayEvery");
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        __name(arrayFilter, "arrayFilter");
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        __name(arrayIncludes, "arrayIncludes");
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        __name(arrayIncludesWith, "arrayIncludesWith");
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        __name(arrayMap, "arrayMap");
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset5 = array.length;
          while (++index < length) {
            array[offset5 + index] = values[index];
          }
          return array;
        }
        __name(arrayPush, "arrayPush");
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        __name(arrayReduce, "arrayReduce");
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        __name(arrayReduceRight, "arrayReduceRight");
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        __name(arraySome, "arraySome");
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        __name(asciiToArray, "asciiToArray");
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        __name(asciiWords, "asciiWords");
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        __name(baseFindKey, "baseFindKey");
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        __name(baseFindIndex, "baseFindIndex");
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        __name(baseIndexOf, "baseIndexOf");
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        __name(baseIndexOfWith, "baseIndexOfWith");
        function baseIsNaN(value) {
          return value !== value;
        }
        __name(baseIsNaN, "baseIsNaN");
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        __name(baseMean, "baseMean");
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        __name(baseProperty, "baseProperty");
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        __name(basePropertyOf, "basePropertyOf");
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        __name(baseReduce, "baseReduce");
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        __name(baseSortBy, "baseSortBy");
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        __name(baseSum, "baseSum");
        function baseTimes(n21, iteratee) {
          var index = -1, result = Array(n21);
          while (++index < n21) {
            result[index] = iteratee(index);
          }
          return result;
        }
        __name(baseTimes, "baseTimes");
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        __name(baseToPairs, "baseToPairs");
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        __name(baseTrim, "baseTrim");
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        __name(baseUnary, "baseUnary");
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        __name(baseValues, "baseValues");
        function cacheHas(cache2, key) {
          return cache2.has(key);
        }
        __name(cacheHas, "cacheHas");
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        __name(charsStartIndex, "charsStartIndex");
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        __name(charsEndIndex, "charsEndIndex");
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        __name(countHolders, "countHolders");
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        __name(escapeStringChar, "escapeStringChar");
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        __name(getValue, "getValue");
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        __name(hasUnicode, "hasUnicode");
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        __name(hasUnicodeWord, "hasUnicodeWord");
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        __name(iteratorToArray, "iteratorToArray");
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        __name(mapToArray, "mapToArray");
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        __name(overArg, "overArg");
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        __name(replaceHolders, "replaceHolders");
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        __name(setToArray, "setToArray");
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        __name(setToPairs, "setToPairs");
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        __name(strictIndexOf, "strictIndexOf");
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        __name(strictLastIndexOf, "strictLastIndexOf");
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        __name(stringSize, "stringSize");
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        __name(stringToArray, "stringToArray");
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        __name(trimmedEndIndex, "trimmedEndIndex");
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        __name(unicodeSize, "unicodeSize");
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        __name(unicodeToArray, "unicodeToArray");
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        __name(unicodeWords, "unicodeWords");
        var runInContext = /* @__PURE__ */ __name(function runInContext2(context) {
          context = context == null ? root3 : _7.defaults(root3.Object(), context, _7.pick(root3, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty3 = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root3._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e18) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root3.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root3.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root3.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty3.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          __name(lodash, "lodash");
          var baseCreate = /* @__PURE__ */ function() {
            function object() {
            }
            __name(object, "object");
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          __name(baseLodash, "baseLodash");
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          __name(LodashWrapper, "LodashWrapper");
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "escape": reEscape,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "evaluate": reEvaluate,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          __name(LazyWrapper, "LazyWrapper");
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          __name(lazyClone, "lazyClone");
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          __name(lazyReverse, "lazyReverse");
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start5 = view.start, end3 = view.end, length = end3 - start5, index = isRight ? end3 : start5 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          __name(lazyValue, "lazyValue");
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          __name(Hash, "Hash");
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          __name(hashClear, "hashClear");
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          __name(hashDelete, "hashDelete");
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty3.call(data, key) ? data[key] : undefined2;
          }
          __name(hashGet, "hashGet");
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty3.call(data, key);
          }
          __name(hashHas, "hashHas");
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          __name(hashSet, "hashSet");
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          __name(ListCache, "ListCache");
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          __name(listCacheClear, "listCacheClear");
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          __name(listCacheDelete, "listCacheDelete");
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          __name(listCacheGet, "listCacheGet");
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          __name(listCacheHas, "listCacheHas");
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          __name(listCacheSet, "listCacheSet");
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          __name(MapCache, "MapCache");
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          __name(mapCacheClear, "mapCacheClear");
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          __name(mapCacheDelete, "mapCacheDelete");
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          __name(mapCacheGet, "mapCacheGet");
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          __name(mapCacheHas, "mapCacheHas");
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          __name(mapCacheSet, "mapCacheSet");
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          __name(SetCache, "SetCache");
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          __name(setCacheAdd, "setCacheAdd");
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          __name(setCacheHas, "setCacheHas");
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          __name(Stack, "Stack");
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          __name(stackClear, "stackClear");
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          __name(stackDelete, "stackDelete");
          function stackGet(key) {
            return this.__data__.get(key);
          }
          __name(stackGet, "stackGet");
          function stackHas(key) {
            return this.__data__.has(key);
          }
          __name(stackHas, "stackHas");
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          __name(stackSet, "stackSet");
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
              isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
              isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
              isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(arrayLikeKeys, "arrayLikeKeys");
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          __name(arraySample, "arraySample");
          function arraySampleSize(array, n21) {
            return shuffleSelf(copyArray(array), baseClamp(n21, 0, array.length));
          }
          __name(arraySampleSize, "arraySampleSize");
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          __name(arrayShuffle, "arrayShuffle");
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          __name(assignMergeValue, "assignMergeValue");
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty3.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          __name(assignValue, "assignValue");
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          __name(assocIndexOf, "assocIndexOf");
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          __name(baseAggregator, "baseAggregator");
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          __name(baseAssign, "baseAssign");
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          __name(baseAssignIn, "baseAssignIn");
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          __name(baseAssignValue, "baseAssignValue");
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get(object, paths[index]);
            }
            return result2;
          }
          __name(baseAt, "baseAt");
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          __name(baseClamp, "baseClamp");
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          __name(baseClone, "baseClone");
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          __name(baseConforms, "baseConforms");
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          __name(baseConformsTo, "baseConformsTo");
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          __name(baseDelay, "baseDelay");
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          __name(baseDifference, "baseDifference");
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          __name(baseEvery, "baseEvery");
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          __name(baseExtremum, "baseExtremum");
          function baseFill(array, value, start5, end3) {
            var length = array.length;
            start5 = toInteger2(start5);
            if (start5 < 0) {
              start5 = -start5 > length ? 0 : length + start5;
            }
            end3 = end3 === undefined2 || end3 > length ? length : toInteger2(end3);
            if (end3 < 0) {
              end3 += length;
            }
            end3 = start5 > end3 ? 0 : toLength(end3);
            while (start5 < end3) {
              array[start5++] = value;
            }
            return array;
          }
          __name(baseFill, "baseFill");
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          __name(baseFilter, "baseFilter");
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          __name(baseFlatten, "baseFlatten");
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          __name(baseForOwn, "baseForOwn");
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          __name(baseForOwnRight, "baseForOwnRight");
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction2(object[key]);
            });
          }
          __name(baseFunctions, "baseFunctions");
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          __name(baseGet, "baseGet");
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          __name(baseGetAllKeys, "baseGetAllKeys");
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString2(value);
          }
          __name(baseGetTag, "baseGetTag");
          function baseGt(value, other) {
            return value > other;
          }
          __name(baseGt, "baseGt");
          function baseHas(object, key) {
            return object != null && hasOwnProperty3.call(object, key);
          }
          __name(baseHas, "baseHas");
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          __name(baseHasIn, "baseHasIn");
          function baseInRange(number, start5, end3) {
            return number >= nativeMin(start5, end3) && number < nativeMax(start5, end3);
          }
          __name(baseInRange, "baseInRange");
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache2 = caches[othIndex];
                    if (!(cache2 ? cacheHas(cache2, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          __name(baseIntersection, "baseIntersection");
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          __name(baseInverter, "baseInverter");
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          __name(baseInvoke, "baseInvoke");
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          __name(baseIsArguments, "baseIsArguments");
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          __name(baseIsArrayBuffer, "baseIsArrayBuffer");
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          __name(baseIsDate, "baseIsDate");
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          __name(baseIsEqual, "baseIsEqual");
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty3.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          __name(baseIsEqualDeep, "baseIsEqualDeep");
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          __name(baseIsMap, "baseIsMap");
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          __name(baseIsMatch, "baseIsMatch");
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          __name(baseIsNative, "baseIsNative");
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          __name(baseIsRegExp, "baseIsRegExp");
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag2;
          }
          __name(baseIsSet, "baseIsSet");
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          __name(baseIsTypedArray, "baseIsTypedArray");
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          __name(baseIteratee, "baseIteratee");
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty3.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(baseKeys, "baseKeys");
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty3.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(baseKeysIn, "baseKeysIn");
          function baseLt(value, other) {
            return value < other;
          }
          __name(baseLt, "baseLt");
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          __name(baseMap, "baseMap");
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          __name(baseMatches, "baseMatches");
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          __name(baseMatchesProperty, "baseMatchesProperty");
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          __name(baseMerge, "baseMerge");
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction2(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          __name(baseMergeDeep, "baseMergeDeep");
          function baseNth(array, n21) {
            var length = array.length;
            if (!length) {
              return;
            }
            n21 += n21 < 0 ? length : 0;
            return isIndex(n21, length) ? array[n21] : undefined2;
          }
          __name(baseNth, "baseNth");
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          __name(baseOrderBy, "baseOrderBy");
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          __name(basePick, "basePick");
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          __name(basePickBy, "basePickBy");
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          __name(basePropertyDeep, "basePropertyDeep");
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          __name(basePullAll, "basePullAll");
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          __name(basePullAt, "basePullAt");
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          __name(baseRandom, "baseRandom");
          function baseRange(start5, end3, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end3 - start5) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start5;
              start5 += step;
            }
            return result2;
          }
          __name(baseRange, "baseRange");
          function baseRepeat(string, n21) {
            var result2 = "";
            if (!string || n21 < 1 || n21 > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n21 % 2) {
                result2 += string;
              }
              n21 = nativeFloor(n21 / 2);
              if (n21) {
                string += string;
              }
            } while (n21);
            return result2;
          }
          __name(baseRepeat, "baseRepeat");
          function baseRest(func, start5) {
            return setToString(overRest(func, start5, identity), func + "");
          }
          __name(baseRest, "baseRest");
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          __name(baseSample, "baseSample");
          function baseSampleSize(collection, n21) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n21, 0, array.length));
          }
          __name(baseSampleSize, "baseSampleSize");
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          __name(baseSet, "baseSet");
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          __name(baseShuffle, "baseShuffle");
          function baseSlice(array, start5, end3) {
            var index = -1, length = array.length;
            if (start5 < 0) {
              start5 = -start5 > length ? 0 : length + start5;
            }
            end3 = end3 > length ? length : end3;
            if (end3 < 0) {
              end3 += length;
            }
            length = start5 > end3 ? 0 : end3 - start5 >>> 0;
            start5 >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start5];
            }
            return result2;
          }
          __name(baseSlice, "baseSlice");
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          __name(baseSome, "baseSome");
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          __name(baseSortedIndex, "baseSortedIndex");
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          __name(baseSortedIndexBy, "baseSortedIndexBy");
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          __name(baseSortedUniq, "baseSortedUniq");
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          __name(baseToNumber, "baseToNumber");
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          __name(baseToString, "baseToString");
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          __name(baseUniq, "baseUniq");
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          __name(baseUnset, "baseUnset");
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          __name(baseUpdate, "baseUpdate");
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          __name(baseWhile, "baseWhile");
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          __name(baseWrapperValue, "baseWrapperValue");
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          __name(baseXor, "baseXor");
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          __name(baseZipObject, "baseZipObject");
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          __name(castArrayLikeObject, "castArrayLikeObject");
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          __name(castFunction, "castFunction");
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          __name(castPath, "castPath");
          var castRest = baseRest;
          function castSlice(array, start5, end3) {
            var length = array.length;
            end3 = end3 === undefined2 ? length : end3;
            return !start5 && end3 >= length ? array : baseSlice(array, start5, end3);
          }
          __name(castSlice, "castSlice");
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root3.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          __name(cloneBuffer, "cloneBuffer");
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          __name(cloneArrayBuffer, "cloneArrayBuffer");
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          __name(cloneDataView, "cloneDataView");
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          __name(cloneRegExp, "cloneRegExp");
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          __name(cloneSymbol, "cloneSymbol");
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          __name(cloneTypedArray, "cloneTypedArray");
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          __name(compareAscending, "compareAscending");
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order3 = orders[index];
                return result2 * (order3 == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          __name(compareMultiple, "compareMultiple");
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          __name(composeArgs, "composeArgs");
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset5 = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset5 + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset5 + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          __name(composeArgsRight, "composeArgsRight");
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          __name(copyArray, "copyArray");
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          __name(copyObject, "copyObject");
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          __name(copySymbols, "copySymbols");
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          __name(copySymbolsIn, "copySymbolsIn");
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          __name(createAggregator, "createAggregator");
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          __name(createAssigner, "createAssigner");
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          __name(createBaseEach, "createBaseEach");
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          __name(createBaseFor, "createBaseFor");
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn3 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
              return fn3.apply(isBind ? thisArg : this, arguments);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createBind, "createBind");
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          __name(createCaseFirst, "createCaseFirst");
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          __name(createCompounder, "createCompounder");
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          __name(createCtor, "createCtor");
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn3 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
              return apply(fn3, this, args);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createCurry, "createCurry");
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = /* @__PURE__ */ __name(function(key) {
                  return iteratee2(iterable[key], key, iterable);
                }, "predicate");
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          __name(createFind, "createFind");
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          __name(createFlow, "createFlow");
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn3 = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root3 && this instanceof wrapper) {
                fn3 = Ctor || createCtor(fn3);
              }
              return fn3.apply(thisBinding, args);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createHybrid, "createHybrid");
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          __name(createInverter, "createInverter");
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          __name(createMathOperation, "createMathOperation");
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          __name(createOver, "createOver");
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          __name(createPadding, "createPadding");
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn3 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn3, isBind ? thisArg : this, args);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createPartial, "createPartial");
          function createRange(fromRight) {
            return function(start5, end3, step) {
              if (step && typeof step != "number" && isIterateeCall(start5, end3, step)) {
                end3 = step = undefined2;
              }
              start5 = toFinite(start5);
              if (end3 === undefined2) {
                end3 = start5;
                start5 = 0;
              } else {
                end3 = toFinite(end3);
              }
              step = step === undefined2 ? start5 < end3 ? 1 : -1 : toFinite(step);
              return baseRange(start5, end3, step, fromRight);
            };
          }
          __name(createRange, "createRange");
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          __name(createRelationalOperation, "createRelationalOperation");
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          __name(createRecurry, "createRecurry");
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger2(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          __name(createRound, "createRound");
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag2) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          __name(createToPairs, "createToPairs");
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger2(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger2(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          __name(createWrap, "createWrap");
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty3.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          __name(customDefaultsAssignIn, "customDefaultsAssignIn");
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          __name(customDefaultsMerge, "customDefaultsMerge");
          function customOmitClone(value) {
            return isPlainObject2(value) ? undefined2 : value;
          }
          __name(customOmitClone, "customOmitClone");
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          __name(equalArrays, "equalArrays");
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert2 = mapToArray;
              case setTag2:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert2 || (convert2 = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          __name(equalByTag, "equalByTag");
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty3.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          __name(equalObjects, "equalObjects");
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          __name(flatRest, "flatRest");
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          __name(getAllKeys, "getAllKeys");
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          __name(getAllKeysIn, "getAllKeysIn");
          var getData = !metaMap ? noop4 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty3.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          __name(getFuncName, "getFuncName");
          function getHolder(func) {
            var object = hasOwnProperty3.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          __name(getHolder, "getHolder");
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          __name(getIteratee, "getIteratee");
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          __name(getMapData, "getMapData");
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          __name(getMatchData, "getMatchData");
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          __name(getNative, "getNative");
          function getRawTag(value) {
            var isOwn = hasOwnProperty3.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e18) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          __name(getRawTag, "getRawTag");
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag2 || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = /* @__PURE__ */ __name(function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag2;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            }, "getTag");
          }
          function getView(start5, end3, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start5 += size2;
                  break;
                case "dropRight":
                  end3 -= size2;
                  break;
                case "take":
                  end3 = nativeMin(end3, start5 + size2);
                  break;
                case "takeRight":
                  start5 = nativeMax(start5, end3 - size2);
                  break;
              }
            }
            return { "start": start5, "end": end3 };
          }
          __name(getView, "getView");
          function getWrapDetails(source) {
            var match4 = source.match(reWrapDetails);
            return match4 ? match4[1].split(reSplitDetails) : [];
          }
          __name(getWrapDetails, "getWrapDetails");
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          __name(hasPath, "hasPath");
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty3.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          __name(initCloneArray, "initCloneArray");
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          __name(initCloneObject, "initCloneObject");
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag2:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          __name(initCloneByTag, "initCloneByTag");
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          __name(insertWrapDetails, "insertWrapDetails");
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          __name(isFlattenable, "isFlattenable");
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          __name(isIndex, "isIndex");
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          __name(isIterateeCall, "isIterateeCall");
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          __name(isKey, "isKey");
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          __name(isKeyable, "isKeyable");
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          __name(isLaziable, "isLaziable");
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          __name(isMasked, "isMasked");
          var isMaskable = coreJsData ? isFunction2 : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          __name(isPrototype, "isPrototype");
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          __name(isStrictComparable, "isStrictComparable");
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          __name(matchesStrictComparable, "matchesStrictComparable");
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache2.size === MAX_MEMOIZE_SIZE) {
                cache2.clear();
              }
              return key;
            });
            var cache2 = result2.cache;
            return result2;
          }
          __name(memoizeCapped, "memoizeCapped");
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          __name(mergeData, "mergeData");
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(nativeKeysIn, "nativeKeysIn");
          function objectToString2(value) {
            return nativeObjectToString.call(value);
          }
          __name(objectToString2, "objectToString");
          function overRest(func, start5, transform2) {
            start5 = nativeMax(start5 === undefined2 ? func.length - 1 : start5, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start5, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start5 + index];
              }
              index = -1;
              var otherArgs = Array2(start5 + 1);
              while (++index < start5) {
                otherArgs[index] = args[index];
              }
              otherArgs[start5] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          __name(overRest, "overRest");
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          __name(parent, "parent");
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          __name(reorder, "reorder");
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          __name(safeGet, "safeGet");
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root3.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference3, bitmask) {
            var source = reference3 + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          __name(setWrapToString, "setWrapToString");
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          __name(shortOut, "shortOut");
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          __name(shuffleSelf, "shuffleSelf");
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match4, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match4);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          __name(toKey, "toKey");
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e18) {
              }
              try {
                return func + "";
              } catch (e18) {
              }
            }
            return "";
          }
          __name(toSource, "toSource");
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          __name(updateWrapDetails, "updateWrapDetails");
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          __name(wrapperClone, "wrapperClone");
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger2(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          __name(chunk, "chunk");
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          __name(compact, "compact");
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          __name(concat, "concat");
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n21, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            return baseSlice(array, n21 < 0 ? 0 : n21, length);
          }
          __name(drop, "drop");
          function dropRight(array, n21, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            n21 = length - n21;
            return baseSlice(array, 0, n21 < 0 ? 0 : n21);
          }
          __name(dropRight, "dropRight");
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          __name(dropRightWhile, "dropRightWhile");
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          __name(dropWhile, "dropWhile");
          function fill(array, value, start5, end3) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start5 && typeof start5 != "number" && isIterateeCall(array, value, start5)) {
              start5 = 0;
              end3 = length;
            }
            return baseFill(array, value, start5, end3);
          }
          __name(fill, "fill");
          function findIndex4(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger2(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          __name(findIndex4, "findIndex");
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger2(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          __name(findLastIndex, "findLastIndex");
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          __name(flatten, "flatten");
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          __name(flattenDeep, "flattenDeep");
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger2(depth);
            return baseFlatten(array, depth);
          }
          __name(flattenDepth, "flattenDepth");
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          __name(fromPairs, "fromPairs");
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          __name(head, "head");
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger2(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          __name(indexOf, "indexOf");
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          __name(initial, "initial");
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          __name(join, "join");
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          __name(last, "last");
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger2(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          __name(lastIndexOf, "lastIndexOf");
          function nth(array, n21) {
            return array && array.length ? baseNth(array, toInteger2(n21)) : undefined2;
          }
          __name(nth, "nth");
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          __name(pullAll, "pullAll");
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          __name(pullAllBy, "pullAllBy");
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          __name(pullAllWith, "pullAllWith");
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          __name(remove, "remove");
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          __name(reverse, "reverse");
          function slice(array, start5, end3) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end3 && typeof end3 != "number" && isIterateeCall(array, start5, end3)) {
              start5 = 0;
              end3 = length;
            } else {
              start5 = start5 == null ? 0 : toInteger2(start5);
              end3 = end3 === undefined2 ? length : toInteger2(end3);
            }
            return baseSlice(array, start5, end3);
          }
          __name(slice, "slice");
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          __name(sortedIndex, "sortedIndex");
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          __name(sortedIndexBy, "sortedIndexBy");
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          __name(sortedIndexOf, "sortedIndexOf");
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          __name(sortedLastIndex, "sortedLastIndex");
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          __name(sortedLastIndexBy, "sortedLastIndexBy");
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          __name(sortedLastIndexOf, "sortedLastIndexOf");
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          __name(sortedUniq, "sortedUniq");
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          __name(sortedUniqBy, "sortedUniqBy");
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          __name(tail, "tail");
          function take(array, n21, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            return baseSlice(array, 0, n21 < 0 ? 0 : n21);
          }
          __name(take, "take");
          function takeRight(array, n21, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            n21 = length - n21;
            return baseSlice(array, n21 < 0 ? 0 : n21, length);
          }
          __name(takeRight, "takeRight");
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          __name(takeRightWhile, "takeRightWhile");
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          __name(takeWhile, "takeWhile");
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          __name(uniq, "uniq");
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          __name(uniqBy, "uniqBy");
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          __name(uniqWith, "uniqWith");
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          __name(unzip, "unzip");
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          __name(unzipWith, "unzipWith");
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          __name(zipObject, "zipObject");
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          __name(zipObjectDeep, "zipObjectDeep");
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          __name(chain, "chain");
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          __name(tap, "tap");
          function thru(value, interceptor) {
            return interceptor(value);
          }
          __name(thru, "thru");
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start5 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = /* @__PURE__ */ __name(function(object) {
              return baseAt(object, paths);
            }, "interceptor");
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start5)) {
              return this.thru(interceptor);
            }
            value = value.slice(start5, +start5 + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          __name(wrapperChain, "wrapperChain");
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          __name(wrapperCommit, "wrapperCommit");
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray3(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          __name(wrapperNext, "wrapperNext");
          function wrapperToIterator() {
            return this;
          }
          __name(wrapperToIterator, "wrapperToIterator");
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone6 = wrapperClone(parent2);
              clone6.__index__ = 0;
              clone6.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone6;
              } else {
                result2 = clone6;
              }
              var previous = clone6;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          __name(wrapperPlant, "wrapperPlant");
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          __name(wrapperReverse, "wrapperReverse");
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          __name(wrapperValue, "wrapperValue");
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty3.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          __name(every, "every");
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          __name(filter, "filter");
          var find = createFind(findIndex4);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          __name(flatMap, "flatMap");
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          __name(flatMapDeep, "flatMapDeep");
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger2(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          __name(flatMapDepth, "flatMapDepth");
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          __name(forEach, "forEach");
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          __name(forEachRight, "forEachRight");
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty3.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString4(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          __name(includes, "includes");
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          __name(map, "map");
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          __name(orderBy, "orderBy");
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          __name(reduce, "reduce");
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          __name(reduceRight, "reduceRight");
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          __name(reject, "reject");
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          __name(sample, "sample");
          function sampleSize(collection, n21, guard) {
            if (guard ? isIterateeCall(collection, n21, guard) : n21 === undefined2) {
              n21 = 1;
            } else {
              n21 = toInteger2(n21);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n21);
          }
          __name(sampleSize, "sampleSize");
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          __name(shuffle, "shuffle");
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString4(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag2) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          __name(size, "size");
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          __name(some, "some");
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now3 = ctxNow || function() {
            return root3.Date.now();
          };
          function after(n21, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n21 = toInteger2(n21);
            return function() {
              if (--n21 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          __name(after, "after");
          function ary(func, n21, guard) {
            n21 = guard ? undefined2 : n21;
            n21 = func && n21 == null ? func.length : n21;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n21);
          }
          __name(ary, "ary");
          function before(n21, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n21 = toInteger2(n21);
            return function() {
              if (--n21 > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n21 <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          __name(before, "before");
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          __name(curry, "curry");
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          __name(curryRight, "curryRight");
          function debounce3(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            __name(invokeFunc, "invokeFunc");
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            __name(leadingEdge, "leadingEdge");
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            __name(remainingWait, "remainingWait");
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            __name(shouldInvoke, "shouldInvoke");
            function timerExpired() {
              var time = now3();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            __name(timerExpired, "timerExpired");
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            __name(trailingEdge, "trailingEdge");
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            __name(cancel, "cancel");
            function flush4() {
              return timerId === undefined2 ? result2 : trailingEdge(now3());
            }
            __name(flush4, "flush");
            function debounced() {
              var time = now3(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            __name(debounced, "debounced");
            debounced.cancel = cancel;
            debounced.flush = flush4;
            return debounced;
          }
          __name(debounce3, "debounce");
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip3(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          __name(flip3, "flip");
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = /* @__PURE__ */ __name(function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
              if (cache2.has(key)) {
                return cache2.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache2.set(key, result2) || cache2;
              return result2;
            }, "memoized");
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          __name(memoize, "memoize");
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          __name(negate, "negate");
          function once3(func) {
            return before(2, func);
          }
          __name(once3, "once");
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start5) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start5 = start5 === undefined2 ? start5 : toInteger2(start5);
            return baseRest(func, start5);
          }
          __name(rest, "rest");
          function spread(func, start5) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start5 = start5 == null ? 0 : nativeMax(toInteger2(start5), 0);
            return baseRest(function(args) {
              var array = args[start5], otherArgs = castSlice(args, 0, start5);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          __name(spread, "spread");
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce3(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          __name(throttle, "throttle");
          function unary(func) {
            return ary(func, 1);
          }
          __name(unary, "unary");
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          __name(wrap, "wrap");
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          __name(castArray, "castArray");
          function clone5(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          __name(clone5, "clone");
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          __name(cloneWith, "cloneWith");
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          __name(cloneDeep, "cloneDeep");
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          __name(cloneDeepWith, "cloneDeepWith");
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          __name(conformsTo, "conformsTo");
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          __name(eq, "eq");
          var gt3 = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(/* @__PURE__ */ function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty3.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction2(value);
          }
          __name(isArrayLike, "isArrayLike");
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          __name(isArrayLikeObject, "isArrayLikeObject");
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          __name(isBoolean, "isBoolean");
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate3 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement4(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
          }
          __name(isElement4, "isElement");
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag2) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty3.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          __name(isEmpty, "isEmpty");
          function isEqual5(value, other) {
            return baseIsEqual(value, other);
          }
          __name(isEqual5, "isEqual");
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          __name(isEqualWith, "isEqualWith");
          function isError2(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
          }
          __name(isError2, "isError");
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          __name(isFinite2, "isFinite");
          function isFunction2(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          __name(isFunction2, "isFunction");
          function isInteger3(value) {
            return typeof value == "number" && value == toInteger2(value);
          }
          __name(isInteger3, "isInteger");
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          __name(isLength, "isLength");
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          __name(isObject, "isObject");
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          __name(isObjectLike, "isObjectLike");
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          __name(isMatch, "isMatch");
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          __name(isMatchWith, "isMatchWith");
          function isNaN2(value) {
            return isNumber3(value) && value != +value;
          }
          __name(isNaN2, "isNaN");
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          __name(isNative, "isNative");
          function isNull(value) {
            return value === null;
          }
          __name(isNull, "isNull");
          function isNil(value) {
            return value == null;
          }
          __name(isNil, "isNil");
          function isNumber3(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          __name(isNumber3, "isNumber");
          function isPlainObject2(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty3.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          __name(isPlainObject2, "isPlainObject");
          var isRegExp2 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger3(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          __name(isSafeInteger, "isSafeInteger");
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString4(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          __name(isString4, "isString");
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          __name(isSymbol, "isSymbol");
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined4(value) {
            return value === undefined2;
          }
          __name(isUndefined4, "isUndefined");
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          __name(isWeakMap, "isWeakMap");
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          __name(isWeakSet, "isWeakSet");
          var lt3 = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray3(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString4(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag2 ? setToArray : values;
            return func(value);
          }
          __name(toArray3, "toArray");
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          __name(toFinite, "toFinite");
          function toInteger2(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          __name(toInteger2, "toInteger");
          function toLength(value) {
            return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          __name(toLength, "toLength");
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          __name(toNumber, "toNumber");
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          __name(toPlainObject, "toPlainObject");
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger2(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          __name(toSafeInteger, "toSafeInteger");
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          __name(toString, "toString");
          var assign4 = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty3.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at3 = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          __name(create, "create");
          var defaults3 = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty3.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey2(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          __name(findKey2, "findKey");
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          __name(findLastKey, "findLastKey");
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          __name(forIn, "forIn");
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          __name(forInRight, "forInRight");
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          __name(forOwn, "forOwn");
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          __name(forOwnRight, "forOwnRight");
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          __name(functions, "functions");
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          __name(functionsIn, "functionsIn");
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          __name(get, "get");
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          __name(has, "has");
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          __name(hasIn, "hasIn");
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty3.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          __name(keys, "keys");
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          __name(keysIn, "keysIn");
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          __name(mapKeys, "mapKeys");
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          __name(mapValues, "mapValues");
          var merge2 = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          __name(omitBy, "omitBy");
          var pick3 = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          __name(pickBy, "pickBy");
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction2(value) ? value.call(object) : value;
            }
            return object;
          }
          __name(result, "result");
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          __name(set, "set");
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          __name(setWith, "setWith");
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          __name(transform, "transform");
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          __name(unset, "unset");
          function update5(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          __name(update5, "update");
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          __name(updateWith, "updateWith");
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          __name(values, "values");
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          __name(valuesIn, "valuesIn");
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          __name(clamp, "clamp");
          function inRange(number, start5, end3) {
            start5 = toFinite(start5);
            if (end3 === undefined2) {
              end3 = start5;
              start5 = 0;
            } else {
              end3 = toFinite(end3);
            }
            number = toNumber(number);
            return baseInRange(number, start5, end3);
          }
          __name(inRange, "inRange");
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          __name(random, "random");
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          __name(capitalize, "capitalize");
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          __name(deburr, "deburr");
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger2(position), 0, length);
            var end3 = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end3) == target;
          }
          __name(endsWith, "endsWith");
          function escape2(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          __name(escape2, "escape");
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          __name(escapeRegExp, "escapeRegExp");
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger2(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          __name(pad, "pad");
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger2(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          __name(padEnd, "padEnd");
          function padStart3(string, length, chars) {
            string = toString(string);
            length = toInteger2(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          __name(padStart3, "padStart");
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          __name(parseInt2, "parseInt");
          function repeat(string, n21, guard) {
            if (guard ? isIterateeCall(string, n21, guard) : n21 === undefined2) {
              n21 = 1;
            } else {
              n21 = toInteger2(n21);
            }
            return baseRepeat(toString(string), n21);
          }
          __name(repeat, "repeat");
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          __name(replace, "replace");
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp2(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          __name(split, "split");
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger2(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          __name(startsWith, "startsWith");
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate3 = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate3.source + "|" + (interpolate3 === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty3.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match4, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset5) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset5).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset5 + match4.length;
              return match4;
            });
            source += "';\n";
            var variable = hasOwnProperty3.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError2(result2)) {
              throw result2;
            }
            return result2;
          }
          __name(template, "template");
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          __name(toLower, "toLower");
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          __name(toUpper, "toUpper");
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start5 = charsStartIndex(strSymbols, chrSymbols), end3 = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start5, end3).join("");
          }
          __name(trim, "trim");
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end3 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end3).join("");
          }
          __name(trimEnd, "trimEnd");
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start5 = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start5).join("");
          }
          __name(trimStart, "trimStart");
          function truncate2(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger2(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end3 = length - stringSize(omission);
            if (end3 < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end3).join("") : string.slice(0, end3);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end3 += result2.length - end3;
            }
            if (isRegExp2(separator)) {
              if (string.slice(end3).search(separator)) {
                var match4, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match4 = separator.exec(substring)) {
                  var newEnd = match4.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end3 : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end3) != end3) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          __name(truncate2, "truncate");
          function unescape2(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          __name(unescape2, "unescape");
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          __name(words, "words");
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e18) {
              return isError2(e18) ? e18 : new Error2(e18);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          __name(cond, "cond");
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          __name(conforms, "conforms");
          function constant(value) {
            return function() {
              return value;
            };
          }
          __name(constant, "constant");
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          __name(defaultTo, "defaultTo");
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          __name(identity, "identity");
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          __name(iteratee, "iteratee");
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          __name(matches, "matches");
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          __name(matchesProperty, "matchesProperty");
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          __name(mixin, "mixin");
          function noConflict() {
            if (root3._ === this) {
              root3._ = oldDash;
            }
            return this;
          }
          __name(noConflict, "noConflict");
          function noop4() {
          }
          __name(noop4, "noop");
          function nthArg(n21) {
            n21 = toInteger2(n21);
            return baseRest(function(args) {
              return baseNth(args, n21);
            });
          }
          __name(nthArg, "nthArg");
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          __name(property, "property");
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          __name(propertyOf, "propertyOf");
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          __name(stubArray, "stubArray");
          function stubFalse() {
            return false;
          }
          __name(stubFalse, "stubFalse");
          function stubObject() {
            return {};
          }
          __name(stubObject, "stubObject");
          function stubString() {
            return "";
          }
          __name(stubString, "stubString");
          function stubTrue() {
            return true;
          }
          __name(stubTrue, "stubTrue");
          function times(n21, iteratee2) {
            n21 = toInteger2(n21);
            if (n21 < 1 || n21 > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n21, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n21 -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n21) {
              iteratee2(index);
            }
            return result2;
          }
          __name(times, "times");
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          __name(toPath, "toPath");
          function uniqueId(prefix3) {
            var id = ++idCounter;
            return toString(prefix3) + id;
          }
          __name(uniqueId, "uniqueId");
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max3(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          __name(max3, "max");
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          __name(maxBy, "maxBy");
          function mean(array) {
            return baseMean(array, identity);
          }
          __name(mean, "mean");
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          __name(meanBy, "meanBy");
          function min3(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          __name(min3, "min");
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          __name(minBy, "minBy");
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round3 = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          __name(sum, "sum");
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          __name(sumBy, "sumBy");
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign4;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at3;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce3;
          lodash.defaults = defaults3;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip3;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge2;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once3;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick3;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray3;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update5;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone5;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape2;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex4;
          lodash.findKey = findKey2;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt3;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate3;
          lodash.isElement = isElement4;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual5;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError2;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction2;
          lodash.isInteger = isInteger3;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber3;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject2;
          lodash.isRegExp = isRegExp2;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString4;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined4;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt3;
          lodash.lte = lte;
          lodash.max = max3;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min3;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop4;
          lodash.now = now3;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart3;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round3;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger2;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate2;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty3.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n21) {
              n21 = n21 === undefined2 ? 1 : nativeMax(toInteger2(n21), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n21, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n21, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n21) {
              return this.reverse()[methodName](n21).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start5, end3) {
            start5 = toInteger2(start5);
            var result2 = this;
            if (result2.__filtered__ && (start5 > 0 || end3 < 0)) {
              return new LazyWrapper(result2);
            }
            if (start5 < 0) {
              result2 = result2.takeRight(-start5);
            } else if (start5) {
              result2 = result2.drop(start5);
            }
            if (end3 !== undefined2) {
              end3 = toInteger2(end3);
              result2 = end3 < 0 ? result2.dropRight(-end3) : result2.take(end3 - start5);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = /* @__PURE__ */ __name(function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              }, "interceptor");
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty3.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        }, "runInContext");
        var _7 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root3._ = _7;
          define(function() {
            return _7;
          });
        } else if (freeModule) {
          (freeModule.exports = _7)._ = _7;
          freeExports._ = _7;
        } else {
          root3._ = _7;
        }
      }).call(exports);
    }
  });

  // node_modules/react-fast-compare/index.js
  var require_react_fast_compare = __commonJS({
    "node_modules/react-fast-compare/index.js"(exports, module) {
      
      var hasElementType = typeof Element !== "undefined";
      var hasMap = typeof Map === "function";
      var hasSet = typeof Set === "function";
      var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
      function equal(a21, b6) {
        if (a21 === b6) return true;
        if (a21 && b6 && typeof a21 == "object" && typeof b6 == "object") {
          if (a21.constructor !== b6.constructor) return false;
          var length, i12, keys;
          if (Array.isArray(a21)) {
            length = a21.length;
            if (length != b6.length) return false;
            for (i12 = length; i12-- !== 0; )
              if (!equal(a21[i12], b6[i12])) return false;
            return true;
          }
          var it3;
          if (hasMap && a21 instanceof Map && b6 instanceof Map) {
            if (a21.size !== b6.size) return false;
            it3 = a21.entries();
            while (!(i12 = it3.next()).done)
              if (!b6.has(i12.value[0])) return false;
            it3 = a21.entries();
            while (!(i12 = it3.next()).done)
              if (!equal(i12.value[1], b6.get(i12.value[0]))) return false;
            return true;
          }
          if (hasSet && a21 instanceof Set && b6 instanceof Set) {
            if (a21.size !== b6.size) return false;
            it3 = a21.entries();
            while (!(i12 = it3.next()).done)
              if (!b6.has(i12.value[0])) return false;
            return true;
          }
          if (hasArrayBuffer && ArrayBuffer.isView(a21) && ArrayBuffer.isView(b6)) {
            length = a21.length;
            if (length != b6.length) return false;
            for (i12 = length; i12-- !== 0; )
              if (a21[i12] !== b6[i12]) return false;
            return true;
          }
          if (a21.constructor === RegExp) return a21.source === b6.source && a21.flags === b6.flags;
          if (a21.valueOf !== Object.prototype.valueOf && typeof a21.valueOf === "function" && typeof b6.valueOf === "function") return a21.valueOf() === b6.valueOf();
          if (a21.toString !== Object.prototype.toString && typeof a21.toString === "function" && typeof b6.toString === "function") return a21.toString() === b6.toString();
          keys = Object.keys(a21);
          length = keys.length;
          if (length !== Object.keys(b6).length) return false;
          for (i12 = length; i12-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b6, keys[i12])) return false;
          if (hasElementType && a21 instanceof Element) return false;
          for (i12 = length; i12-- !== 0; ) {
            if ((keys[i12] === "_owner" || keys[i12] === "__v" || keys[i12] === "__o") && a21.$$typeof) {
              continue;
            }
            if (!equal(a21[keys[i12]], b6[keys[i12]])) return false;
          }
          return true;
        }
        return a21 !== a21 && b6 !== b6;
      }
      __name(equal, "equal");
      module.exports = /* @__PURE__ */ __name(function isEqual5(a21, b6) {
        try {
          return equal(a21, b6);
        } catch (error2) {
          if ((error2.message || "").match(/stack|recursion/i)) {
            console.warn("react-fast-compare cannot handle circular refs");
            return false;
          }
          throw error2;
        }
      }, "isEqual");
    }
  });

  // node_modules/cookie/index.js
  var require_cookie = __commonJS({
    "node_modules/cookie/index.js"(exports) {
      
      exports.parse = parse6;
      exports.serialize = serialize2;
      var decode = decodeURIComponent;
      var encode = encodeURIComponent;
      var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
      function parse6(str, options) {
        if (typeof str !== "string") {
          throw new TypeError("argument str must be a string");
        }
        var obj = {};
        var opt = options || {};
        var pairs = str.split(";");
        var dec = opt.decode || decode;
        for (var i12 = 0; i12 < pairs.length; i12++) {
          var pair = pairs[i12];
          var index = pair.indexOf("=");
          if (index < 0) {
            continue;
          }
          var key = pair.substring(0, index).trim();
          if (void 0 == obj[key]) {
            var val = pair.substring(index + 1, pair.length).trim();
            if (val[0] === '"') {
              val = val.slice(1, -1);
            }
            obj[key] = tryDecode(val, dec);
          }
        }
        return obj;
      }
      __name(parse6, "parse");
      function serialize2(name, val, options) {
        var opt = options || {};
        var enc = opt.encode || encode;
        if (typeof enc !== "function") {
          throw new TypeError("option encode is invalid");
        }
        if (!fieldContentRegExp.test(name)) {
          throw new TypeError("argument name is invalid");
        }
        var value = enc(val);
        if (value && !fieldContentRegExp.test(value)) {
          throw new TypeError("argument val is invalid");
        }
        var str = name + "=" + value;
        if (null != opt.maxAge) {
          var maxAge = opt.maxAge - 0;
          if (isNaN(maxAge) || !isFinite(maxAge)) {
            throw new TypeError("option maxAge is invalid");
          }
          str += "; Max-Age=" + Math.floor(maxAge);
        }
        if (opt.domain) {
          if (!fieldContentRegExp.test(opt.domain)) {
            throw new TypeError("option domain is invalid");
          }
          str += "; Domain=" + opt.domain;
        }
        if (opt.path) {
          if (!fieldContentRegExp.test(opt.path)) {
            throw new TypeError("option path is invalid");
          }
          str += "; Path=" + opt.path;
        }
        if (opt.expires) {
          if (typeof opt.expires.toUTCString !== "function") {
            throw new TypeError("option expires is invalid");
          }
          str += "; Expires=" + opt.expires.toUTCString();
        }
        if (opt.httpOnly) {
          str += "; HttpOnly";
        }
        if (opt.secure) {
          str += "; Secure";
        }
        if (opt.sameSite) {
          var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
          switch (sameSite) {
            case true:
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError("option sameSite is invalid");
          }
        }
        return str;
      }
      __name(serialize2, "serialize");
      function tryDecode(str, decode2) {
        try {
          return decode2(str);
        } catch (e18) {
          return str;
        }
      }
      __name(tryDecode, "tryDecode");
    }
  });

  // (disabled):crypto
  var require_crypto = __commonJS({
    "(disabled):crypto"() {
      
    }
  });

  // node_modules/crypto-js/core.js
  var require_core = __commonJS({
    "node_modules/crypto-js/core.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define([], factory);
        } else {
          root3.CryptoJS = factory();
        }
      })(exports, function() {
        var CryptoJS3 = CryptoJS3 || function(Math2, undefined2) {
          var crypto;
          if (typeof window !== "undefined" && window.crypto) {
            crypto = window.crypto;
          }
          if (typeof self !== "undefined" && self.crypto) {
            crypto = self.crypto;
          }
          if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto = globalThis.crypto;
          }
          if (!crypto && typeof window !== "undefined" && window.msCrypto) {
            crypto = window.msCrypto;
          }
          if (!crypto && typeof global !== "undefined" && global.crypto) {
            crypto = global.crypto;
          }
          if (!crypto && typeof __require === "function") {
            try {
              crypto = require_crypto();
            } catch (err) {
            }
          }
          var cryptoSecureRandomInt = /* @__PURE__ */ __name(function() {
            if (crypto) {
              if (typeof crypto.getRandomValues === "function") {
                try {
                  return crypto.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {
                }
              }
              if (typeof crypto.randomBytes === "function") {
                try {
                  return crypto.randomBytes(4).readInt32LE();
                } catch (err) {
                }
              }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          }, "cryptoSecureRandomInt");
          var create = Object.create || /* @__PURE__ */ function() {
            function F3() {
            }
            __name(F3, "F");
            return function(obj) {
              var subtype;
              F3.prototype = obj;
              subtype = new F3();
              F3.prototype = null;
              return subtype;
            };
          }();
          var C2 = {};
          var C_lib = C2.lib = {};
          var Base = C_lib.Base = /* @__PURE__ */ function() {
            return {
              /**
               * Creates a new object that inherits from this object.
               *
               * @param {Object} overrides Properties to copy into the new object.
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         field: 'value',
               *
               *         method: function () {
               *         }
               *     });
               */
              extend: /* @__PURE__ */ __name(function(overrides) {
                var subtype = create(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              }, "extend"),
              /**
               * Extends this object and runs the init method.
               * Arguments to create() will be passed to init().
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var instance = MyType.create();
               */
              create: /* @__PURE__ */ __name(function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              }, "create"),
              /**
               * Initializes a newly created object.
               * Override this method to add some logic when your objects are created.
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         init: function () {
               *             // ...
               *         }
               *     });
               */
              init: /* @__PURE__ */ __name(function() {
              }, "init"),
              /**
               * Copies properties into this object.
               *
               * @param {Object} properties The properties to mix in.
               *
               * @example
               *
               *     MyType.mixIn({
               *         field: 'value'
               *     });
               */
              mixIn: /* @__PURE__ */ __name(function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              }, "mixIn"),
              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = instance.clone();
               */
              clone: /* @__PURE__ */ __name(function() {
                return this.init.prototype.extend(this);
              }, "clone")
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: /* @__PURE__ */ __name(function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined2) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            }, "init"),
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: /* @__PURE__ */ __name(function(encoder) {
              return (encoder || Hex).stringify(this);
            }, "toString"),
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: /* @__PURE__ */ __name(function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i12 = 0; i12 < thatSigBytes; i12++) {
                  var thatByte = thatWords[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                  thisWords[thisSigBytes + i12 >>> 2] |= thatByte << 24 - (thisSigBytes + i12) % 4 * 8;
                }
              } else {
                for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
                  thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            }, "concat"),
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: /* @__PURE__ */ __name(function() {
              var words = this.words;
              var sigBytes = this.sigBytes;
              words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words.length = Math2.ceil(sigBytes / 4);
            }, "clamp"),
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: /* @__PURE__ */ __name(function() {
              var clone5 = Base.clone.call(this);
              clone5.words = this.words.slice(0);
              return clone5;
            }, "clone"),
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: /* @__PURE__ */ __name(function(nBytes) {
              var words = [];
              for (var i12 = 0; i12 < nBytes; i12 += 4) {
                words.push(cryptoSecureRandomInt());
              }
              return new WordArray.init(words, nBytes);
            }, "random")
          });
          var C_enc = C2.enc = {};
          var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i12 = 0; i12 < sigBytes; i12++) {
                var bite = words[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            }, "stringify"),
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: /* @__PURE__ */ __name(function(hexStr) {
              var hexStrLength = hexStr.length;
              var words = [];
              for (var i12 = 0; i12 < hexStrLength; i12 += 2) {
                words[i12 >>> 3] |= parseInt(hexStr.substr(i12, 2), 16) << 24 - i12 % 8 * 4;
              }
              return new WordArray.init(words, hexStrLength / 2);
            }, "parse")
          };
          var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i12 = 0; i12 < sigBytes; i12++) {
                var bite = words[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            }, "stringify"),
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: /* @__PURE__ */ __name(function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words = [];
              for (var i12 = 0; i12 < latin1StrLength; i12++) {
                words[i12 >>> 2] |= (latin1Str.charCodeAt(i12) & 255) << 24 - i12 % 4 * 8;
              }
              return new WordArray.init(words, latin1StrLength);
            }, "parse")
          };
          var Utf83 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e18) {
                throw new Error("Malformed UTF-8 data");
              }
            }, "stringify"),
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: /* @__PURE__ */ __name(function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }, "parse")
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: /* @__PURE__ */ __name(function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            }, "reset"),
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: /* @__PURE__ */ __name(function(data) {
              if (typeof data == "string") {
                data = Utf83.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            }, "_append"),
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: /* @__PURE__ */ __name(function(doFlush) {
              var processedWords;
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset5 = 0; offset5 < nWordsReady; offset5 += blockSize) {
                  this._doProcessBlock(dataWords, offset5);
                }
                processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            }, "_process"),
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: /* @__PURE__ */ __name(function() {
              var clone5 = Base.clone.call(this);
              clone5._data = this._data.clone();
              return clone5;
            }, "clone"),
            _minBufferSize: 0
          });
          var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: /* @__PURE__ */ __name(function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            }, "init"),
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: /* @__PURE__ */ __name(function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            }, "reset"),
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: /* @__PURE__ */ __name(function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            }, "update"),
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: /* @__PURE__ */ __name(function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash5 = this._doFinalize();
              return hash5;
            }, "finalize"),
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: /* @__PURE__ */ __name(function(hasher) {
              return function(message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            }, "_createHelper"),
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: /* @__PURE__ */ __name(function(hasher) {
              return function(message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
              };
            }, "_createHmacHelper")
          });
          var C_algo = C2.algo = {};
          return C2;
        }(Math);
        return CryptoJS3;
      });
    }
  });

  // node_modules/crypto-js/sha256.js
  var require_sha256 = __commonJS({
    "node_modules/crypto-js/sha256.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root3.CryptoJS);
        }
      })(exports, function(CryptoJS3) {
        (function(Math2) {
          var C2 = CryptoJS3;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var H3 = [];
          var K3 = [];
          (function() {
            function isPrime(n22) {
              var sqrtN = Math2.sqrt(n22);
              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n22 % factor)) {
                  return false;
                }
              }
              return true;
            }
            __name(isPrime, "isPrime");
            function getFractionalBits(n22) {
              return (n22 - (n22 | 0)) * 4294967296 | 0;
            }
            __name(getFractionalBits, "getFractionalBits");
            var n21 = 2;
            var nPrime = 0;
            while (nPrime < 64) {
              if (isPrime(n21)) {
                if (nPrime < 8) {
                  H3[nPrime] = getFractionalBits(Math2.pow(n21, 1 / 2));
                }
                K3[nPrime] = getFractionalBits(Math2.pow(n21, 1 / 3));
                nPrime++;
              }
              n21++;
            }
          })();
          var W3 = [];
          var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: /* @__PURE__ */ __name(function() {
              this._hash = new WordArray.init(H3.slice(0));
            }, "_doReset"),
            _doProcessBlock: /* @__PURE__ */ __name(function(M, offset5) {
              var H4 = this._hash.words;
              var a21 = H4[0];
              var b6 = H4[1];
              var c6 = H4[2];
              var d16 = H4[3];
              var e18 = H4[4];
              var f2 = H4[5];
              var g4 = H4[6];
              var h5 = H4[7];
              for (var i12 = 0; i12 < 64; i12++) {
                if (i12 < 16) {
                  W3[i12] = M[offset5 + i12] | 0;
                } else {
                  var gamma0x = W3[i12 - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W3[i12 - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W3[i12] = gamma0 + W3[i12 - 7] + gamma1 + W3[i12 - 16];
                }
                var ch = e18 & f2 ^ ~e18 & g4;
                var maj = a21 & b6 ^ a21 & c6 ^ b6 & c6;
                var sigma0 = (a21 << 30 | a21 >>> 2) ^ (a21 << 19 | a21 >>> 13) ^ (a21 << 10 | a21 >>> 22);
                var sigma1 = (e18 << 26 | e18 >>> 6) ^ (e18 << 21 | e18 >>> 11) ^ (e18 << 7 | e18 >>> 25);
                var t1 = h5 + sigma1 + ch + K3[i12] + W3[i12];
                var t22 = sigma0 + maj;
                h5 = g4;
                g4 = f2;
                f2 = e18;
                e18 = d16 + t1 | 0;
                d16 = c6;
                c6 = b6;
                b6 = a21;
                a21 = t1 + t22 | 0;
              }
              H4[0] = H4[0] + a21 | 0;
              H4[1] = H4[1] + b6 | 0;
              H4[2] = H4[2] + c6 | 0;
              H4[3] = H4[3] + d16 | 0;
              H4[4] = H4[4] + e18 | 0;
              H4[5] = H4[5] + f2 | 0;
              H4[6] = H4[6] + g4 | 0;
              H4[7] = H4[7] + h5 | 0;
            }, "_doProcessBlock"),
            _doFinalize: /* @__PURE__ */ __name(function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            }, "_doFinalize"),
            clone: /* @__PURE__ */ __name(function() {
              var clone5 = Hasher.clone.call(this);
              clone5._hash = this._hash.clone();
              return clone5;
            }, "clone")
          });
          C2.SHA256 = Hasher._createHelper(SHA256);
          C2.HmacSHA256 = Hasher._createHmacHelper(SHA256);
        })(Math);
        return CryptoJS3.SHA256;
      });
    }
  });

  // node_modules/crypto-js/enc-base64.js
  var require_enc_base64 = __commonJS({
    "node_modules/crypto-js/enc-base64.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root3.CryptoJS);
        }
      })(exports, function(CryptoJS3) {
        (function() {
          var C2 = CryptoJS3;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C2.enc;
          var Base643 = C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = this._map;
              wordArray.clamp();
              var base64Chars = [];
              for (var i12 = 0; i12 < sigBytes; i12 += 3) {
                var byte1 = words[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                var byte2 = words[i12 + 1 >>> 2] >>> 24 - (i12 + 1) % 4 * 8 & 255;
                var byte3 = words[i12 + 2 >>> 2] >>> 24 - (i12 + 2) % 4 * 8 & 255;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                for (var j2 = 0; j2 < 4 && i12 + j2 * 0.75 < sigBytes; j2++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }
              return base64Chars.join("");
            }, "stringify"),
            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: /* @__PURE__ */ __name(function(base64Str) {
              var base64StrLength = base64Str.length;
              var map = this._map;
              var reverseMap = this._reverseMap;
              if (!reverseMap) {
                reverseMap = this._reverseMap = [];
                for (var j2 = 0; j2 < map.length; j2++) {
                  reverseMap[map.charCodeAt(j2)] = j2;
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              }
              return parseLoop(base64Str, base64StrLength, reverseMap);
            }, "parse"),
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
          };
          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for (var i12 = 0; i12 < base64StrLength; i12++) {
              if (i12 % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i12 - 1)] << i12 % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i12)] >>> 6 - i12 % 4 * 2;
                var bitsCombined = bits1 | bits2;
                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }
            return WordArray.create(words, nBytes);
          }
          __name(parseLoop, "parseLoop");
        })();
        return CryptoJS3.enc.Base64;
      });
    }
  });

  // node_modules/crypto-js/enc-utf8.js
  var require_enc_utf8 = __commonJS({
    "node_modules/crypto-js/enc-utf8.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root3.CryptoJS);
        }
      })(exports, function(CryptoJS3) {
        return CryptoJS3.enc.Utf8;
      });
    }
  });

  // ../../contrib/hdbt/node_modules/picocolors/picocolors.browser.js
  var require_picocolors_browser2 = __commonJS({
    "../../contrib/hdbt/node_modules/picocolors/picocolors.browser.js"(exports, module) {
      
      var x = String;
      var create = /* @__PURE__ */ __name(function() {
        return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x, blackBright: x, redBright: x, greenBright: x, yellowBright: x, blueBright: x, magentaBright: x, cyanBright: x, whiteBright: x, bgBlackBright: x, bgRedBright: x, bgGreenBright: x, bgYellowBright: x, bgBlueBright: x, bgMagentaBright: x, bgCyanBright: x, bgWhiteBright: x };
      }, "create");
      module.exports = create();
      module.exports.createColors = create;
    }
  });

  // (disabled):../../contrib/hdbt/node_modules/postcss/lib/terminal-highlight
  var require_terminal_highlight2 = __commonJS({
    "(disabled):../../contrib/hdbt/node_modules/postcss/lib/terminal-highlight"() {
      
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/css-syntax-error.js
  var require_css_syntax_error2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/css-syntax-error.js"(exports, module) {
      
      var pico = require_picocolors_browser2();
      var terminalHighlight = require_terminal_highlight2();
      var _CssSyntaxError = class _CssSyntaxError extends Error {
        constructor(message, line, column, source, file, plugin3) {
          super(message);
          this.name = "CssSyntaxError";
          this.reason = message;
          if (file) {
            this.file = file;
          }
          if (source) {
            this.source = source;
          }
          if (plugin3) {
            this.plugin = plugin3;
          }
          if (typeof line !== "undefined" && typeof column !== "undefined") {
            if (typeof line === "number") {
              this.line = line;
              this.column = column;
            } else {
              this.line = line.line;
              this.column = line.column;
              this.endLine = column.line;
              this.endColumn = column.column;
            }
          }
          this.setMessage();
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, _CssSyntaxError);
          }
        }
        setMessage() {
          this.message = this.plugin ? this.plugin + ": " : "";
          this.message += this.file ? this.file : "<css input>";
          if (typeof this.line !== "undefined") {
            this.message += ":" + this.line + ":" + this.column;
          }
          this.message += ": " + this.reason;
        }
        showSourceCode(color) {
          if (!this.source) return "";
          let css = this.source;
          if (color == null) color = pico.isColorSupported;
          let aside = /* @__PURE__ */ __name((text) => text, "aside");
          let mark = /* @__PURE__ */ __name((text) => text, "mark");
          let highlight = /* @__PURE__ */ __name((text) => text, "highlight");
          if (color) {
            let { bold, gray, red } = pico.createColors(true);
            mark = /* @__PURE__ */ __name((text) => bold(red(text)), "mark");
            aside = /* @__PURE__ */ __name((text) => gray(text), "aside");
            if (terminalHighlight) {
              highlight = /* @__PURE__ */ __name((text) => terminalHighlight(text), "highlight");
            }
          }
          let lines = css.split(/\r?\n/);
          let start5 = Math.max(this.line - 3, 0);
          let end3 = Math.min(this.line + 2, lines.length);
          let maxWidth = String(end3).length;
          return lines.slice(start5, end3).map((line, index) => {
            let number = start5 + 1 + index;
            let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
            if (number === this.line) {
              if (line.length > 160) {
                let padding = 20;
                let subLineStart = Math.max(0, this.column - padding);
                let subLineEnd = Math.max(
                  this.column + padding,
                  this.endColumn + padding
                );
                let subLine = line.slice(subLineStart, subLineEnd);
                let spacing2 = aside(gutter.replace(/\d/g, " ")) + line.slice(0, Math.min(this.column - 1, padding - 1)).replace(/[^\t]/g, " ");
                return mark(">") + aside(gutter) + highlight(subLine) + "\n " + spacing2 + mark("^");
              }
              let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
              return mark(">") + aside(gutter) + highlight(line) + "\n " + spacing + mark("^");
            }
            return " " + aside(gutter) + highlight(line);
          }).join("\n");
        }
        toString() {
          let code = this.showSourceCode();
          if (code) {
            code = "\n\n" + code + "\n";
          }
          return this.name + ": " + this.message + code;
        }
      };
      __name(_CssSyntaxError, "CssSyntaxError");
      var CssSyntaxError3 = _CssSyntaxError;
      module.exports = CssSyntaxError3;
      CssSyntaxError3.default = CssSyntaxError3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/stringifier.js
  var require_stringifier2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/stringifier.js"(exports, module) {
      
      var DEFAULT_RAW = {
        after: "\n",
        beforeClose: "\n",
        beforeComment: "\n",
        beforeDecl: "\n",
        beforeOpen: " ",
        beforeRule: "\n",
        colon: ": ",
        commentLeft: " ",
        commentRight: " ",
        emptyBody: "",
        indent: "    ",
        semicolon: false
      };
      function capitalize(str) {
        return str[0].toUpperCase() + str.slice(1);
      }
      __name(capitalize, "capitalize");
      var _Stringifier = class _Stringifier {
        constructor(builder) {
          this.builder = builder;
        }
        atrule(node, semicolon) {
          let name = "@" + node.name;
          let params = node.params ? this.rawValue(node, "params") : "";
          if (typeof node.raws.afterName !== "undefined") {
            name += node.raws.afterName;
          } else if (params) {
            name += " ";
          }
          if (node.nodes) {
            this.block(node, name + params);
          } else {
            let end3 = (node.raws.between || "") + (semicolon ? ";" : "");
            this.builder(name + params + end3, node);
          }
        }
        beforeAfter(node, detect) {
          let value;
          if (node.type === "decl") {
            value = this.raw(node, null, "beforeDecl");
          } else if (node.type === "comment") {
            value = this.raw(node, null, "beforeComment");
          } else if (detect === "before") {
            value = this.raw(node, null, "beforeRule");
          } else {
            value = this.raw(node, null, "beforeClose");
          }
          let buf = node.parent;
          let depth = 0;
          while (buf && buf.type !== "root") {
            depth += 1;
            buf = buf.parent;
          }
          if (value.includes("\n")) {
            let indent = this.raw(node, null, "indent");
            if (indent.length) {
              for (let step = 0; step < depth; step++) value += indent;
            }
          }
          return value;
        }
        block(node, start5) {
          let between = this.raw(node, "between", "beforeOpen");
          this.builder(start5 + between + "{", node, "start");
          let after;
          if (node.nodes && node.nodes.length) {
            this.body(node);
            after = this.raw(node, "after");
          } else {
            after = this.raw(node, "after", "emptyBody");
          }
          if (after) this.builder(after);
          this.builder("}", node, "end");
        }
        body(node) {
          let last = node.nodes.length - 1;
          while (last > 0) {
            if (node.nodes[last].type !== "comment") break;
            last -= 1;
          }
          let semicolon = this.raw(node, "semicolon");
          for (let i12 = 0; i12 < node.nodes.length; i12++) {
            let child = node.nodes[i12];
            let before = this.raw(child, "before");
            if (before) this.builder(before);
            this.stringify(child, last !== i12 || semicolon);
          }
        }
        comment(node) {
          let left3 = this.raw(node, "left", "commentLeft");
          let right3 = this.raw(node, "right", "commentRight");
          this.builder("/*" + left3 + node.text + right3 + "*/", node);
        }
        decl(node, semicolon) {
          let between = this.raw(node, "between", "colon");
          let string = node.prop + between + this.rawValue(node, "value");
          if (node.important) {
            string += node.raws.important || " !important";
          }
          if (semicolon) string += ";";
          this.builder(string, node);
        }
        document(node) {
          this.body(node);
        }
        raw(node, own, detect) {
          let value;
          if (!detect) detect = own;
          if (own) {
            value = node.raws[own];
            if (typeof value !== "undefined") return value;
          }
          let parent = node.parent;
          if (detect === "before") {
            if (!parent || parent.type === "root" && parent.first === node) {
              return "";
            }
            if (parent && parent.type === "document") {
              return "";
            }
          }
          if (!parent) return DEFAULT_RAW[detect];
          let root3 = node.root();
          if (!root3.rawCache) root3.rawCache = {};
          if (typeof root3.rawCache[detect] !== "undefined") {
            return root3.rawCache[detect];
          }
          if (detect === "before" || detect === "after") {
            return this.beforeAfter(node, detect);
          } else {
            let method = "raw" + capitalize(detect);
            if (this[method]) {
              value = this[method](root3, node);
            } else {
              root3.walk((i12) => {
                value = i12.raws[own];
                if (typeof value !== "undefined") return false;
              });
            }
          }
          if (typeof value === "undefined") value = DEFAULT_RAW[detect];
          root3.rawCache[detect] = value;
          return value;
        }
        rawBeforeClose(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && i12.nodes.length > 0) {
              if (typeof i12.raws.after !== "undefined") {
                value = i12.raws.after;
                if (value.includes("\n")) {
                  value = value.replace(/[^\n]+$/, "");
                }
                return false;
              }
            }
          });
          if (value) value = value.replace(/\S/g, "");
          return value;
        }
        rawBeforeComment(root3, node) {
          let value;
          root3.walkComments((i12) => {
            if (typeof i12.raws.before !== "undefined") {
              value = i12.raws.before;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          });
          if (typeof value === "undefined") {
            value = this.raw(node, null, "beforeDecl");
          } else if (value) {
            value = value.replace(/\S/g, "");
          }
          return value;
        }
        rawBeforeDecl(root3, node) {
          let value;
          root3.walkDecls((i12) => {
            if (typeof i12.raws.before !== "undefined") {
              value = i12.raws.before;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          });
          if (typeof value === "undefined") {
            value = this.raw(node, null, "beforeRule");
          } else if (value) {
            value = value.replace(/\S/g, "");
          }
          return value;
        }
        rawBeforeOpen(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.type !== "decl") {
              value = i12.raws.between;
              if (typeof value !== "undefined") return false;
            }
          });
          return value;
        }
        rawBeforeRule(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && (i12.parent !== root3 || root3.first !== i12)) {
              if (typeof i12.raws.before !== "undefined") {
                value = i12.raws.before;
                if (value.includes("\n")) {
                  value = value.replace(/[^\n]+$/, "");
                }
                return false;
              }
            }
          });
          if (value) value = value.replace(/\S/g, "");
          return value;
        }
        rawColon(root3) {
          let value;
          root3.walkDecls((i12) => {
            if (typeof i12.raws.between !== "undefined") {
              value = i12.raws.between.replace(/[^\s:]/g, "");
              return false;
            }
          });
          return value;
        }
        rawEmptyBody(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && i12.nodes.length === 0) {
              value = i12.raws.after;
              if (typeof value !== "undefined") return false;
            }
          });
          return value;
        }
        rawIndent(root3) {
          if (root3.raws.indent) return root3.raws.indent;
          let value;
          root3.walk((i12) => {
            let p5 = i12.parent;
            if (p5 && p5 !== root3 && p5.parent && p5.parent === root3) {
              if (typeof i12.raws.before !== "undefined") {
                let parts = i12.raws.before.split("\n");
                value = parts[parts.length - 1];
                value = value.replace(/\S/g, "");
                return false;
              }
            }
          });
          return value;
        }
        rawSemicolon(root3) {
          let value;
          root3.walk((i12) => {
            if (i12.nodes && i12.nodes.length && i12.last.type === "decl") {
              value = i12.raws.semicolon;
              if (typeof value !== "undefined") return false;
            }
          });
          return value;
        }
        rawValue(node, prop) {
          let value = node[prop];
          let raw = node.raws[prop];
          if (raw && raw.value === value) {
            return raw.raw;
          }
          return value;
        }
        root(node) {
          this.body(node);
          if (node.raws.after) this.builder(node.raws.after);
        }
        rule(node) {
          this.block(node, this.rawValue(node, "selector"));
          if (node.raws.ownSemicolon) {
            this.builder(node.raws.ownSemicolon, node, "end");
          }
        }
        stringify(node, semicolon) {
          if (!this[node.type]) {
            throw new Error(
              "Unknown AST node type " + node.type + ". Maybe you need to change PostCSS stringifier."
            );
          }
          this[node.type](node, semicolon);
        }
      };
      __name(_Stringifier, "Stringifier");
      var Stringifier = _Stringifier;
      module.exports = Stringifier;
      Stringifier.default = Stringifier;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/stringify.js
  var require_stringify2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/stringify.js"(exports, module) {
      
      var Stringifier = require_stringifier2();
      function stringify3(node, builder) {
        let str = new Stringifier(builder);
        str.stringify(node);
      }
      __name(stringify3, "stringify");
      module.exports = stringify3;
      stringify3.default = stringify3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/symbols.js
  var require_symbols2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/symbols.js"(exports, module) {
      
      module.exports.isClean = Symbol("isClean");
      module.exports.my = Symbol("my");
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/node.js
  var require_node2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/node.js"(exports, module) {
      
      var CssSyntaxError3 = require_css_syntax_error2();
      var Stringifier = require_stringifier2();
      var stringify3 = require_stringify2();
      var { isClean, my } = require_symbols2();
      function cloneNode(obj, parent) {
        let cloned = new obj.constructor();
        for (let i12 in obj) {
          if (!Object.prototype.hasOwnProperty.call(obj, i12)) {
            continue;
          }
          if (i12 === "proxyCache") continue;
          let value = obj[i12];
          let type = typeof value;
          if (i12 === "parent" && type === "object") {
            if (parent) cloned[i12] = parent;
          } else if (i12 === "source") {
            cloned[i12] = value;
          } else if (Array.isArray(value)) {
            cloned[i12] = value.map((j2) => cloneNode(j2, cloned));
          } else {
            if (type === "object" && value !== null) value = cloneNode(value);
            cloned[i12] = value;
          }
        }
        return cloned;
      }
      __name(cloneNode, "cloneNode");
      function sourceOffset(inputCSS, position) {
        if (position && typeof position.offset !== "undefined") {
          return position.offset;
        }
        let column = 1;
        let line = 1;
        let offset5 = 0;
        for (let i12 = 0; i12 < inputCSS.length; i12++) {
          if (line === position.line && column === position.column) {
            offset5 = i12;
            break;
          }
          if (inputCSS[i12] === "\n") {
            column = 1;
            line += 1;
          } else {
            column += 1;
          }
        }
        return offset5;
      }
      __name(sourceOffset, "sourceOffset");
      var _Node = class _Node {
        get proxyOf() {
          return this;
        }
        constructor(defaults3 = {}) {
          this.raws = {};
          this[isClean] = false;
          this[my] = true;
          for (let name in defaults3) {
            if (name === "nodes") {
              this.nodes = [];
              for (let node of defaults3[name]) {
                if (typeof node.clone === "function") {
                  this.append(node.clone());
                } else {
                  this.append(node);
                }
              }
            } else {
              this[name] = defaults3[name];
            }
          }
        }
        addToError(error2) {
          error2.postcssNode = this;
          if (error2.stack && this.source && /\n\s{4}at /.test(error2.stack)) {
            let s21 = this.source;
            error2.stack = error2.stack.replace(
              /\n\s{4}at /,
              `$&${s21.input.from}:${s21.start.line}:${s21.start.column}$&`
            );
          }
          return error2;
        }
        after(add) {
          this.parent.insertAfter(this, add);
          return this;
        }
        assign(overrides = {}) {
          for (let name in overrides) {
            this[name] = overrides[name];
          }
          return this;
        }
        before(add) {
          this.parent.insertBefore(this, add);
          return this;
        }
        cleanRaws(keepBetween) {
          delete this.raws.before;
          delete this.raws.after;
          if (!keepBetween) delete this.raws.between;
        }
        clone(overrides = {}) {
          let cloned = cloneNode(this);
          for (let name in overrides) {
            cloned[name] = overrides[name];
          }
          return cloned;
        }
        cloneAfter(overrides = {}) {
          let cloned = this.clone(overrides);
          this.parent.insertAfter(this, cloned);
          return cloned;
        }
        cloneBefore(overrides = {}) {
          let cloned = this.clone(overrides);
          this.parent.insertBefore(this, cloned);
          return cloned;
        }
        error(message, opts = {}) {
          if (this.source) {
            let { end: end3, start: start5 } = this.rangeBy(opts);
            return this.source.input.error(
              message,
              { column: start5.column, line: start5.line },
              { column: end3.column, line: end3.line },
              opts
            );
          }
          return new CssSyntaxError3(message);
        }
        getProxyProcessor() {
          return {
            get(node, prop) {
              if (prop === "proxyOf") {
                return node;
              } else if (prop === "root") {
                return () => node.root().toProxy();
              } else {
                return node[prop];
              }
            },
            set(node, prop, value) {
              if (node[prop] === value) return true;
              node[prop] = value;
              if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || /* c8 ignore next */
              prop === "text") {
                node.markDirty();
              }
              return true;
            }
          };
        }
        /* c8 ignore next 3 */
        markClean() {
          this[isClean] = true;
        }
        markDirty() {
          if (this[isClean]) {
            this[isClean] = false;
            let next = this;
            while (next = next.parent) {
              next[isClean] = false;
            }
          }
        }
        next() {
          if (!this.parent) return void 0;
          let index = this.parent.index(this);
          return this.parent.nodes[index + 1];
        }
        positionBy(opts = {}) {
          let pos = this.source.start;
          if (opts.index) {
            pos = this.positionInside(opts.index);
          } else if (opts.word) {
            let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
            let stringRepresentation = inputString.slice(
              sourceOffset(inputString, this.source.start),
              sourceOffset(inputString, this.source.end)
            );
            let index = stringRepresentation.indexOf(opts.word);
            if (index !== -1) pos = this.positionInside(index);
          }
          return pos;
        }
        positionInside(index) {
          let column = this.source.start.column;
          let line = this.source.start.line;
          let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
          let offset5 = sourceOffset(inputString, this.source.start);
          let end3 = offset5 + index;
          for (let i12 = offset5; i12 < end3; i12++) {
            if (inputString[i12] === "\n") {
              column = 1;
              line += 1;
            } else {
              column += 1;
            }
          }
          return { column, line, offset: end3 };
        }
        prev() {
          if (!this.parent) return void 0;
          let index = this.parent.index(this);
          return this.parent.nodes[index - 1];
        }
        rangeBy(opts = {}) {
          let inputString = "document" in this.source.input ? this.source.input.document : this.source.input.css;
          let start5 = {
            column: this.source.start.column,
            line: this.source.start.line,
            offset: sourceOffset(inputString, this.source.start)
          };
          let end3 = this.source.end ? {
            column: this.source.end.column + 1,
            line: this.source.end.line,
            offset: typeof this.source.end.offset === "number" ? (
              // `source.end.offset` is exclusive, so we don't need to add 1
              this.source.end.offset
            ) : (
              // Since line/column in this.source.end is inclusive,
              // the `sourceOffset(... , this.source.end)` returns an inclusive offset.
              // So, we add 1 to convert it to exclusive.
              sourceOffset(inputString, this.source.end) + 1
            )
          } : {
            column: start5.column + 1,
            line: start5.line,
            offset: start5.offset + 1
          };
          if (opts.word) {
            let stringRepresentation = inputString.slice(
              sourceOffset(inputString, this.source.start),
              sourceOffset(inputString, this.source.end)
            );
            let index = stringRepresentation.indexOf(opts.word);
            if (index !== -1) {
              start5 = this.positionInside(index);
              end3 = this.positionInside(index + opts.word.length);
            }
          } else {
            if (opts.start) {
              start5 = {
                column: opts.start.column,
                line: opts.start.line,
                offset: sourceOffset(inputString, opts.start)
              };
            } else if (opts.index) {
              start5 = this.positionInside(opts.index);
            }
            if (opts.end) {
              end3 = {
                column: opts.end.column,
                line: opts.end.line,
                offset: sourceOffset(inputString, opts.end)
              };
            } else if (typeof opts.endIndex === "number") {
              end3 = this.positionInside(opts.endIndex);
            } else if (opts.index) {
              end3 = this.positionInside(opts.index + 1);
            }
          }
          if (end3.line < start5.line || end3.line === start5.line && end3.column <= start5.column) {
            end3 = {
              column: start5.column + 1,
              line: start5.line,
              offset: start5.offset + 1
            };
          }
          return { end: end3, start: start5 };
        }
        raw(prop, defaultType) {
          let str = new Stringifier();
          return str.raw(this, prop, defaultType);
        }
        remove() {
          if (this.parent) {
            this.parent.removeChild(this);
          }
          this.parent = void 0;
          return this;
        }
        replaceWith(...nodes) {
          if (this.parent) {
            let bookmark = this;
            let foundSelf = false;
            for (let node of nodes) {
              if (node === this) {
                foundSelf = true;
              } else if (foundSelf) {
                this.parent.insertAfter(bookmark, node);
                bookmark = node;
              } else {
                this.parent.insertBefore(bookmark, node);
              }
            }
            if (!foundSelf) {
              this.remove();
            }
          }
          return this;
        }
        root() {
          let result = this;
          while (result.parent && result.parent.type !== "document") {
            result = result.parent;
          }
          return result;
        }
        toJSON(_7, inputs) {
          let fixed = {};
          let emitInputs = inputs == null;
          inputs = inputs || /* @__PURE__ */ new Map();
          let inputsNextIndex = 0;
          for (let name in this) {
            if (!Object.prototype.hasOwnProperty.call(this, name)) {
              continue;
            }
            if (name === "parent" || name === "proxyCache") continue;
            let value = this[name];
            if (Array.isArray(value)) {
              fixed[name] = value.map((i12) => {
                if (typeof i12 === "object" && i12.toJSON) {
                  return i12.toJSON(null, inputs);
                } else {
                  return i12;
                }
              });
            } else if (typeof value === "object" && value.toJSON) {
              fixed[name] = value.toJSON(null, inputs);
            } else if (name === "source") {
              if (value == null) continue;
              let inputId = inputs.get(value.input);
              if (inputId == null) {
                inputId = inputsNextIndex;
                inputs.set(value.input, inputsNextIndex);
                inputsNextIndex++;
              }
              fixed[name] = {
                end: value.end,
                inputId,
                start: value.start
              };
            } else {
              fixed[name] = value;
            }
          }
          if (emitInputs) {
            fixed.inputs = [...inputs.keys()].map((input) => input.toJSON());
          }
          return fixed;
        }
        toProxy() {
          if (!this.proxyCache) {
            this.proxyCache = new Proxy(this, this.getProxyProcessor());
          }
          return this.proxyCache;
        }
        toString(stringifier = stringify3) {
          if (stringifier.stringify) stringifier = stringifier.stringify;
          let result = "";
          stringifier(this, (i12) => {
            result += i12;
          });
          return result;
        }
        warn(result, text, opts = {}) {
          let data = { node: this };
          for (let i12 in opts) data[i12] = opts[i12];
          return result.warn(text, data);
        }
      };
      __name(_Node, "Node");
      var Node3 = _Node;
      module.exports = Node3;
      Node3.default = Node3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/comment.js
  var require_comment2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/comment.js"(exports, module) {
      
      var Node3 = require_node2();
      var _Comment = class _Comment extends Node3 {
        constructor(defaults3) {
          super(defaults3);
          this.type = "comment";
        }
      };
      __name(_Comment, "Comment");
      var Comment4 = _Comment;
      module.exports = Comment4;
      Comment4.default = Comment4;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/declaration.js
  var require_declaration2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/declaration.js"(exports, module) {
      
      var Node3 = require_node2();
      var _Declaration = class _Declaration extends Node3 {
        get variable() {
          return this.prop.startsWith("--") || this.prop[0] === "$";
        }
        constructor(defaults3) {
          if (defaults3 && typeof defaults3.value !== "undefined" && typeof defaults3.value !== "string") {
            defaults3 = { ...defaults3, value: String(defaults3.value) };
          }
          super(defaults3);
          this.type = "decl";
        }
      };
      __name(_Declaration, "Declaration");
      var Declaration3 = _Declaration;
      module.exports = Declaration3;
      Declaration3.default = Declaration3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/container.js
  var require_container2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/container.js"(exports, module) {
      
      var Comment4 = require_comment2();
      var Declaration3 = require_declaration2();
      var Node3 = require_node2();
      var { isClean, my } = require_symbols2();
      var AtRule3;
      var parse6;
      var Root3;
      var Rule3;
      function cleanSource(nodes) {
        return nodes.map((i12) => {
          if (i12.nodes) i12.nodes = cleanSource(i12.nodes);
          delete i12.source;
          return i12;
        });
      }
      __name(cleanSource, "cleanSource");
      function markTreeDirty(node) {
        node[isClean] = false;
        if (node.proxyOf.nodes) {
          for (let i12 of node.proxyOf.nodes) {
            markTreeDirty(i12);
          }
        }
      }
      __name(markTreeDirty, "markTreeDirty");
      var _Container = class _Container extends Node3 {
        get first() {
          if (!this.proxyOf.nodes) return void 0;
          return this.proxyOf.nodes[0];
        }
        get last() {
          if (!this.proxyOf.nodes) return void 0;
          return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
        }
        append(...children) {
          for (let child of children) {
            let nodes = this.normalize(child, this.last);
            for (let node of nodes) this.proxyOf.nodes.push(node);
          }
          this.markDirty();
          return this;
        }
        cleanRaws(keepBetween) {
          super.cleanRaws(keepBetween);
          if (this.nodes) {
            for (let node of this.nodes) node.cleanRaws(keepBetween);
          }
        }
        each(callback) {
          if (!this.proxyOf.nodes) return void 0;
          let iterator = this.getIterator();
          let index, result;
          while (this.indexes[iterator] < this.proxyOf.nodes.length) {
            index = this.indexes[iterator];
            result = callback(this.proxyOf.nodes[index], index);
            if (result === false) break;
            this.indexes[iterator] += 1;
          }
          delete this.indexes[iterator];
          return result;
        }
        every(condition) {
          return this.nodes.every(condition);
        }
        getIterator() {
          if (!this.lastEach) this.lastEach = 0;
          if (!this.indexes) this.indexes = {};
          this.lastEach += 1;
          let iterator = this.lastEach;
          this.indexes[iterator] = 0;
          return iterator;
        }
        getProxyProcessor() {
          return {
            get(node, prop) {
              if (prop === "proxyOf") {
                return node;
              } else if (!node[prop]) {
                return node[prop];
              } else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) {
                return (...args) => {
                  return node[prop](
                    ...args.map((i12) => {
                      if (typeof i12 === "function") {
                        return (child, index) => i12(child.toProxy(), index);
                      } else {
                        return i12;
                      }
                    })
                  );
                };
              } else if (prop === "every" || prop === "some") {
                return (cb) => {
                  return node[prop](
                    (child, ...other) => cb(child.toProxy(), ...other)
                  );
                };
              } else if (prop === "root") {
                return () => node.root().toProxy();
              } else if (prop === "nodes") {
                return node.nodes.map((i12) => i12.toProxy());
              } else if (prop === "first" || prop === "last") {
                return node[prop].toProxy();
              } else {
                return node[prop];
              }
            },
            set(node, prop, value) {
              if (node[prop] === value) return true;
              node[prop] = value;
              if (prop === "name" || prop === "params" || prop === "selector") {
                node.markDirty();
              }
              return true;
            }
          };
        }
        index(child) {
          if (typeof child === "number") return child;
          if (child.proxyOf) child = child.proxyOf;
          return this.proxyOf.nodes.indexOf(child);
        }
        insertAfter(exist, add) {
          let existIndex = this.index(exist);
          let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
          existIndex = this.index(exist);
          for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node);
          let index;
          for (let id in this.indexes) {
            index = this.indexes[id];
            if (existIndex < index) {
              this.indexes[id] = index + nodes.length;
            }
          }
          this.markDirty();
          return this;
        }
        insertBefore(exist, add) {
          let existIndex = this.index(exist);
          let type = existIndex === 0 ? "prepend" : false;
          let nodes = this.normalize(
            add,
            this.proxyOf.nodes[existIndex],
            type
          ).reverse();
          existIndex = this.index(exist);
          for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node);
          let index;
          for (let id in this.indexes) {
            index = this.indexes[id];
            if (existIndex <= index) {
              this.indexes[id] = index + nodes.length;
            }
          }
          this.markDirty();
          return this;
        }
        normalize(nodes, sample) {
          if (typeof nodes === "string") {
            nodes = cleanSource(parse6(nodes).nodes);
          } else if (typeof nodes === "undefined") {
            nodes = [];
          } else if (Array.isArray(nodes)) {
            nodes = nodes.slice(0);
            for (let i12 of nodes) {
              if (i12.parent) i12.parent.removeChild(i12, "ignore");
            }
          } else if (nodes.type === "root" && this.type !== "document") {
            nodes = nodes.nodes.slice(0);
            for (let i12 of nodes) {
              if (i12.parent) i12.parent.removeChild(i12, "ignore");
            }
          } else if (nodes.type) {
            nodes = [nodes];
          } else if (nodes.prop) {
            if (typeof nodes.value === "undefined") {
              throw new Error("Value field is missed in node creation");
            } else if (typeof nodes.value !== "string") {
              nodes.value = String(nodes.value);
            }
            nodes = [new Declaration3(nodes)];
          } else if (nodes.selector || nodes.selectors) {
            nodes = [new Rule3(nodes)];
          } else if (nodes.name) {
            nodes = [new AtRule3(nodes)];
          } else if (nodes.text) {
            nodes = [new Comment4(nodes)];
          } else {
            throw new Error("Unknown node type in node creation");
          }
          let processed = nodes.map((i12) => {
            if (!i12[my]) _Container.rebuild(i12);
            i12 = i12.proxyOf;
            if (i12.parent) i12.parent.removeChild(i12);
            if (i12[isClean]) markTreeDirty(i12);
            if (!i12.raws) i12.raws = {};
            if (typeof i12.raws.before === "undefined") {
              if (sample && typeof sample.raws.before !== "undefined") {
                i12.raws.before = sample.raws.before.replace(/\S/g, "");
              }
            }
            i12.parent = this.proxyOf;
            return i12;
          });
          return processed;
        }
        prepend(...children) {
          children = children.reverse();
          for (let child of children) {
            let nodes = this.normalize(child, this.first, "prepend").reverse();
            for (let node of nodes) this.proxyOf.nodes.unshift(node);
            for (let id in this.indexes) {
              this.indexes[id] = this.indexes[id] + nodes.length;
            }
          }
          this.markDirty();
          return this;
        }
        push(child) {
          child.parent = this;
          this.proxyOf.nodes.push(child);
          return this;
        }
        removeAll() {
          for (let node of this.proxyOf.nodes) node.parent = void 0;
          this.proxyOf.nodes = [];
          this.markDirty();
          return this;
        }
        removeChild(child) {
          child = this.index(child);
          this.proxyOf.nodes[child].parent = void 0;
          this.proxyOf.nodes.splice(child, 1);
          let index;
          for (let id in this.indexes) {
            index = this.indexes[id];
            if (index >= child) {
              this.indexes[id] = index - 1;
            }
          }
          this.markDirty();
          return this;
        }
        replaceValues(pattern, opts, callback) {
          if (!callback) {
            callback = opts;
            opts = {};
          }
          this.walkDecls((decl3) => {
            if (opts.props && !opts.props.includes(decl3.prop)) return;
            if (opts.fast && !decl3.value.includes(opts.fast)) return;
            decl3.value = decl3.value.replace(pattern, callback);
          });
          this.markDirty();
          return this;
        }
        some(condition) {
          return this.nodes.some(condition);
        }
        walk(callback) {
          return this.each((child, i12) => {
            let result;
            try {
              result = callback(child, i12);
            } catch (e18) {
              throw child.addToError(e18);
            }
            if (result !== false && child.walk) {
              result = child.walk(callback);
            }
            return result;
          });
        }
        walkAtRules(name, callback) {
          if (!callback) {
            callback = name;
            return this.walk((child, i12) => {
              if (child.type === "atrule") {
                return callback(child, i12);
              }
            });
          }
          if (name instanceof RegExp) {
            return this.walk((child, i12) => {
              if (child.type === "atrule" && name.test(child.name)) {
                return callback(child, i12);
              }
            });
          }
          return this.walk((child, i12) => {
            if (child.type === "atrule" && child.name === name) {
              return callback(child, i12);
            }
          });
        }
        walkComments(callback) {
          return this.walk((child, i12) => {
            if (child.type === "comment") {
              return callback(child, i12);
            }
          });
        }
        walkDecls(prop, callback) {
          if (!callback) {
            callback = prop;
            return this.walk((child, i12) => {
              if (child.type === "decl") {
                return callback(child, i12);
              }
            });
          }
          if (prop instanceof RegExp) {
            return this.walk((child, i12) => {
              if (child.type === "decl" && prop.test(child.prop)) {
                return callback(child, i12);
              }
            });
          }
          return this.walk((child, i12) => {
            if (child.type === "decl" && child.prop === prop) {
              return callback(child, i12);
            }
          });
        }
        walkRules(selector, callback) {
          if (!callback) {
            callback = selector;
            return this.walk((child, i12) => {
              if (child.type === "rule") {
                return callback(child, i12);
              }
            });
          }
          if (selector instanceof RegExp) {
            return this.walk((child, i12) => {
              if (child.type === "rule" && selector.test(child.selector)) {
                return callback(child, i12);
              }
            });
          }
          return this.walk((child, i12) => {
            if (child.type === "rule" && child.selector === selector) {
              return callback(child, i12);
            }
          });
        }
      };
      __name(_Container, "Container");
      var Container3 = _Container;
      Container3.registerParse = (dependant) => {
        parse6 = dependant;
      };
      Container3.registerRule = (dependant) => {
        Rule3 = dependant;
      };
      Container3.registerAtRule = (dependant) => {
        AtRule3 = dependant;
      };
      Container3.registerRoot = (dependant) => {
        Root3 = dependant;
      };
      module.exports = Container3;
      Container3.default = Container3;
      Container3.rebuild = (node) => {
        if (node.type === "atrule") {
          Object.setPrototypeOf(node, AtRule3.prototype);
        } else if (node.type === "rule") {
          Object.setPrototypeOf(node, Rule3.prototype);
        } else if (node.type === "decl") {
          Object.setPrototypeOf(node, Declaration3.prototype);
        } else if (node.type === "comment") {
          Object.setPrototypeOf(node, Comment4.prototype);
        } else if (node.type === "root") {
          Object.setPrototypeOf(node, Root3.prototype);
        }
        node[my] = true;
        if (node.nodes) {
          node.nodes.forEach((child) => {
            Container3.rebuild(child);
          });
        }
      };
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/at-rule.js
  var require_at_rule2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/at-rule.js"(exports, module) {
      
      var Container3 = require_container2();
      var _AtRule = class _AtRule extends Container3 {
        constructor(defaults3) {
          super(defaults3);
          this.type = "atrule";
        }
        append(...children) {
          if (!this.proxyOf.nodes) this.nodes = [];
          return super.append(...children);
        }
        prepend(...children) {
          if (!this.proxyOf.nodes) this.nodes = [];
          return super.prepend(...children);
        }
      };
      __name(_AtRule, "AtRule");
      var AtRule3 = _AtRule;
      module.exports = AtRule3;
      AtRule3.default = AtRule3;
      Container3.registerAtRule(AtRule3);
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/document.js
  var require_document2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/document.js"(exports, module) {
      
      var Container3 = require_container2();
      var LazyResult;
      var Processor3;
      var _Document = class _Document extends Container3 {
        constructor(defaults3) {
          super({ type: "document", ...defaults3 });
          if (!this.nodes) {
            this.nodes = [];
          }
        }
        toResult(opts = {}) {
          let lazy = new LazyResult(new Processor3(), this, opts);
          return lazy.stringify();
        }
      };
      __name(_Document, "Document");
      var Document3 = _Document;
      Document3.registerLazyResult = (dependant) => {
        LazyResult = dependant;
      };
      Document3.registerProcessor = (dependant) => {
        Processor3 = dependant;
      };
      module.exports = Document3;
      Document3.default = Document3;
    }
  });

  // ../../contrib/hdbt/node_modules/nanoid/non-secure/index.cjs
  var require_non_secure2 = __commonJS({
    "../../contrib/hdbt/node_modules/nanoid/non-secure/index.cjs"(exports, module) {
      
      var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
      var customAlphabet = /* @__PURE__ */ __name((alphabet, defaultSize = 21) => {
        return (size = defaultSize) => {
          let id = "";
          let i12 = size | 0;
          while (i12--) {
            id += alphabet[Math.random() * alphabet.length | 0];
          }
          return id;
        };
      }, "customAlphabet");
      var nanoid = /* @__PURE__ */ __name((size = 21) => {
        let id = "";
        let i12 = size | 0;
        while (i12--) {
          id += urlAlphabet[Math.random() * 64 | 0];
        }
        return id;
      }, "nanoid");
      module.exports = { nanoid, customAlphabet };
    }
  });

  // (disabled):../../contrib/hdbt/node_modules/path/path.js
  var require_path2 = __commonJS({
    "(disabled):../../contrib/hdbt/node_modules/path/path.js"() {
      
    }
  });

  // (disabled):../../contrib/hdbt/node_modules/source-map-js/source-map.js
  var require_source_map2 = __commonJS({
    "(disabled):../../contrib/hdbt/node_modules/source-map-js/source-map.js"() {
      
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/previous-map.js
  var require_previous_map2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/previous-map.js"(exports, module) {
      
      var { existsSync, readFileSync } = require_fs();
      var { dirname, join } = require_path2();
      var { SourceMapConsumer, SourceMapGenerator } = require_source_map2();
      function fromBase64(str) {
        if (Buffer) {
          return Buffer.from(str, "base64").toString();
        } else {
          return window.atob(str);
        }
      }
      __name(fromBase64, "fromBase64");
      var _PreviousMap = class _PreviousMap {
        constructor(css, opts) {
          if (opts.map === false) return;
          this.loadAnnotation(css);
          this.inline = this.startWith(this.annotation, "data:");
          let prev = opts.map ? opts.map.prev : void 0;
          let text = this.loadMap(opts.from, prev);
          if (!this.mapFile && opts.from) {
            this.mapFile = opts.from;
          }
          if (this.mapFile) this.root = dirname(this.mapFile);
          if (text) this.text = text;
        }
        consumer() {
          if (!this.consumerCache) {
            this.consumerCache = new SourceMapConsumer(this.text);
          }
          return this.consumerCache;
        }
        decodeInline(text) {
          let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
          let baseUri = /^data:application\/json;base64,/;
          let charsetUri = /^data:application\/json;charset=utf-?8,/;
          let uri = /^data:application\/json,/;
          let uriMatch = text.match(charsetUri) || text.match(uri);
          if (uriMatch) {
            return decodeURIComponent(text.substr(uriMatch[0].length));
          }
          let baseUriMatch = text.match(baseCharsetUri) || text.match(baseUri);
          if (baseUriMatch) {
            return fromBase64(text.substr(baseUriMatch[0].length));
          }
          let encoding = text.match(/data:application\/json;([^,]+),/)[1];
          throw new Error("Unsupported source map encoding " + encoding);
        }
        getAnnotationURL(sourceMapString) {
          return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
        }
        isMap(map) {
          if (typeof map !== "object") return false;
          return typeof map.mappings === "string" || typeof map._mappings === "string" || Array.isArray(map.sections);
        }
        loadAnnotation(css) {
          let comments = css.match(/\/\*\s*# sourceMappingURL=/g);
          if (!comments) return;
          let start5 = css.lastIndexOf(comments.pop());
          let end3 = css.indexOf("*/", start5);
          if (start5 > -1 && end3 > -1) {
            this.annotation = this.getAnnotationURL(css.substring(start5, end3));
          }
        }
        loadFile(path) {
          this.root = dirname(path);
          if (existsSync(path)) {
            this.mapFile = path;
            return readFileSync(path, "utf-8").toString().trim();
          }
        }
        loadMap(file, prev) {
          if (prev === false) return false;
          if (prev) {
            if (typeof prev === "string") {
              return prev;
            } else if (typeof prev === "function") {
              let prevPath = prev(file);
              if (prevPath) {
                let map = this.loadFile(prevPath);
                if (!map) {
                  throw new Error(
                    "Unable to load previous source map: " + prevPath.toString()
                  );
                }
                return map;
              }
            } else if (prev instanceof SourceMapConsumer) {
              return SourceMapGenerator.fromSourceMap(prev).toString();
            } else if (prev instanceof SourceMapGenerator) {
              return prev.toString();
            } else if (this.isMap(prev)) {
              return JSON.stringify(prev);
            } else {
              throw new Error(
                "Unsupported previous source map format: " + prev.toString()
              );
            }
          } else if (this.inline) {
            return this.decodeInline(this.annotation);
          } else if (this.annotation) {
            let map = this.annotation;
            if (file) map = join(dirname(file), map);
            return this.loadFile(map);
          }
        }
        startWith(string, start5) {
          if (!string) return false;
          return string.substr(0, start5.length) === start5;
        }
        withContent() {
          return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
        }
      };
      __name(_PreviousMap, "PreviousMap");
      var PreviousMap = _PreviousMap;
      module.exports = PreviousMap;
      PreviousMap.default = PreviousMap;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/input.js
  var require_input2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/input.js"(exports, module) {
      
      var { nanoid } = require_non_secure2();
      var { isAbsolute, resolve } = require_path2();
      var { SourceMapConsumer, SourceMapGenerator } = require_source_map2();
      var { fileURLToPath, pathToFileURL } = require_url();
      var CssSyntaxError3 = require_css_syntax_error2();
      var PreviousMap = require_previous_map2();
      var terminalHighlight = require_terminal_highlight2();
      var lineToIndexCache = Symbol("lineToIndexCache");
      var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
      var pathAvailable = Boolean(resolve && isAbsolute);
      function getLineToIndex(input) {
        if (input[lineToIndexCache]) return input[lineToIndexCache];
        let lines = input.css.split("\n");
        let lineToIndex = new Array(lines.length);
        let prevIndex = 0;
        for (let i12 = 0, l19 = lines.length; i12 < l19; i12++) {
          lineToIndex[i12] = prevIndex;
          prevIndex += lines[i12].length + 1;
        }
        input[lineToIndexCache] = lineToIndex;
        return lineToIndex;
      }
      __name(getLineToIndex, "getLineToIndex");
      var _Input = class _Input {
        get from() {
          return this.file || this.id;
        }
        constructor(css, opts = {}) {
          if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) {
            throw new Error(`PostCSS received ${css} instead of CSS string`);
          }
          this.css = css.toString();
          if (this.css[0] === "\uFEFF" || this.css[0] === "￾") {
            this.hasBOM = true;
            this.css = this.css.slice(1);
          } else {
            this.hasBOM = false;
          }
          this.document = this.css;
          if (opts.document) this.document = opts.document.toString();
          if (opts.from) {
            if (!pathAvailable || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
              this.file = opts.from;
            } else {
              this.file = resolve(opts.from);
            }
          }
          if (pathAvailable && sourceMapAvailable) {
            let map = new PreviousMap(this.css, opts);
            if (map.text) {
              this.map = map;
              let file = map.consumer().file;
              if (!this.file && file) this.file = this.mapResolve(file);
            }
          }
          if (!this.file) {
            this.id = "<input css " + nanoid(6) + ">";
          }
          if (this.map) this.map.file = this.from;
        }
        error(message, line, column, opts = {}) {
          let endColumn, endLine, endOffset, offset5, result;
          if (line && typeof line === "object") {
            let start5 = line;
            let end3 = column;
            if (typeof start5.offset === "number") {
              offset5 = start5.offset;
              let pos = this.fromOffset(offset5);
              line = pos.line;
              column = pos.col;
            } else {
              line = start5.line;
              column = start5.column;
              offset5 = this.fromLineAndColumn(line, column);
            }
            if (typeof end3.offset === "number") {
              endOffset = end3.offset;
              let pos = this.fromOffset(endOffset);
              endLine = pos.line;
              endColumn = pos.col;
            } else {
              endLine = end3.line;
              endColumn = end3.column;
              endOffset = this.fromLineAndColumn(end3.line, end3.column);
            }
          } else if (!column) {
            offset5 = line;
            let pos = this.fromOffset(offset5);
            line = pos.line;
            column = pos.col;
          } else {
            offset5 = this.fromLineAndColumn(line, column);
          }
          let origin = this.origin(line, column, endLine, endColumn);
          if (origin) {
            result = new CssSyntaxError3(
              message,
              origin.endLine === void 0 ? origin.line : { column: origin.column, line: origin.line },
              origin.endLine === void 0 ? origin.column : { column: origin.endColumn, line: origin.endLine },
              origin.source,
              origin.file,
              opts.plugin
            );
          } else {
            result = new CssSyntaxError3(
              message,
              endLine === void 0 ? line : { column, line },
              endLine === void 0 ? column : { column: endColumn, line: endLine },
              this.css,
              this.file,
              opts.plugin
            );
          }
          result.input = { column, endColumn, endLine, endOffset, line, offset: offset5, source: this.css };
          if (this.file) {
            if (pathToFileURL) {
              result.input.url = pathToFileURL(this.file).toString();
            }
            result.input.file = this.file;
          }
          return result;
        }
        fromLineAndColumn(line, column) {
          let lineToIndex = getLineToIndex(this);
          let index = lineToIndex[line - 1];
          return index + column - 1;
        }
        fromOffset(offset5) {
          let lineToIndex = getLineToIndex(this);
          let lastLine = lineToIndex[lineToIndex.length - 1];
          let min3 = 0;
          if (offset5 >= lastLine) {
            min3 = lineToIndex.length - 1;
          } else {
            let max3 = lineToIndex.length - 2;
            let mid;
            while (min3 < max3) {
              mid = min3 + (max3 - min3 >> 1);
              if (offset5 < lineToIndex[mid]) {
                max3 = mid - 1;
              } else if (offset5 >= lineToIndex[mid + 1]) {
                min3 = mid + 1;
              } else {
                min3 = mid;
                break;
              }
            }
          }
          return {
            col: offset5 - lineToIndex[min3] + 1,
            line: min3 + 1
          };
        }
        mapResolve(file) {
          if (/^\w+:\/\//.test(file)) {
            return file;
          }
          return resolve(this.map.consumer().sourceRoot || this.map.root || ".", file);
        }
        origin(line, column, endLine, endColumn) {
          if (!this.map) return false;
          let consumer = this.map.consumer();
          let from = consumer.originalPositionFor({ column, line });
          if (!from.source) return false;
          let to5;
          if (typeof endLine === "number") {
            to5 = consumer.originalPositionFor({ column: endColumn, line: endLine });
          }
          let fromUrl;
          if (isAbsolute(from.source)) {
            fromUrl = pathToFileURL(from.source);
          } else {
            fromUrl = new URL(
              from.source,
              this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)
            );
          }
          let result = {
            column: from.column,
            endColumn: to5 && to5.column,
            endLine: to5 && to5.line,
            line: from.line,
            url: fromUrl.toString()
          };
          if (fromUrl.protocol === "file:") {
            if (fileURLToPath) {
              result.file = fileURLToPath(fromUrl);
            } else {
              throw new Error(`file: protocol is not available in this PostCSS build`);
            }
          }
          let source = consumer.sourceContentFor(from.source);
          if (source) result.source = source;
          return result;
        }
        toJSON() {
          let json = {};
          for (let name of ["hasBOM", "css", "file", "id"]) {
            if (this[name] != null) {
              json[name] = this[name];
            }
          }
          if (this.map) {
            json.map = { ...this.map };
            if (json.map.consumerCache) {
              json.map.consumerCache = void 0;
            }
          }
          return json;
        }
      };
      __name(_Input, "Input");
      var Input3 = _Input;
      module.exports = Input3;
      Input3.default = Input3;
      if (terminalHighlight && terminalHighlight.registerInput) {
        terminalHighlight.registerInput(Input3);
      }
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/root.js
  var require_root2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/root.js"(exports, module) {
      
      var Container3 = require_container2();
      var LazyResult;
      var Processor3;
      var _Root = class _Root extends Container3 {
        constructor(defaults3) {
          super(defaults3);
          this.type = "root";
          if (!this.nodes) this.nodes = [];
        }
        normalize(child, sample, type) {
          let nodes = super.normalize(child);
          if (sample) {
            if (type === "prepend") {
              if (this.nodes.length > 1) {
                sample.raws.before = this.nodes[1].raws.before;
              } else {
                delete sample.raws.before;
              }
            } else if (this.first !== sample) {
              for (let node of nodes) {
                node.raws.before = sample.raws.before;
              }
            }
          }
          return nodes;
        }
        removeChild(child, ignore) {
          let index = this.index(child);
          if (!ignore && index === 0 && this.nodes.length > 1) {
            this.nodes[1].raws.before = this.nodes[index].raws.before;
          }
          return super.removeChild(child);
        }
        toResult(opts = {}) {
          let lazy = new LazyResult(new Processor3(), this, opts);
          return lazy.stringify();
        }
      };
      __name(_Root, "Root");
      var Root3 = _Root;
      Root3.registerLazyResult = (dependant) => {
        LazyResult = dependant;
      };
      Root3.registerProcessor = (dependant) => {
        Processor3 = dependant;
      };
      module.exports = Root3;
      Root3.default = Root3;
      Container3.registerRoot(Root3);
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/list.js
  var require_list2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/list.js"(exports, module) {
      
      var list3 = {
        comma(string) {
          return list3.split(string, [","], true);
        },
        space(string) {
          let spaces = [" ", "\n", "	"];
          return list3.split(string, spaces);
        },
        split(string, separators, last) {
          let array = [];
          let current = "";
          let split = false;
          let func = 0;
          let inQuote = false;
          let prevQuote = "";
          let escape2 = false;
          for (let letter of string) {
            if (escape2) {
              escape2 = false;
            } else if (letter === "\\") {
              escape2 = true;
            } else if (inQuote) {
              if (letter === prevQuote) {
                inQuote = false;
              }
            } else if (letter === '"' || letter === "'") {
              inQuote = true;
              prevQuote = letter;
            } else if (letter === "(") {
              func += 1;
            } else if (letter === ")") {
              if (func > 0) func -= 1;
            } else if (func === 0) {
              if (separators.includes(letter)) split = true;
            }
            if (split) {
              if (current !== "") array.push(current.trim());
              current = "";
              split = false;
            } else {
              current += letter;
            }
          }
          if (last || current !== "") array.push(current.trim());
          return array;
        }
      };
      module.exports = list3;
      list3.default = list3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/rule.js
  var require_rule2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/rule.js"(exports, module) {
      
      var Container3 = require_container2();
      var list3 = require_list2();
      var _Rule = class _Rule extends Container3 {
        get selectors() {
          return list3.comma(this.selector);
        }
        set selectors(values) {
          let match4 = this.selector ? this.selector.match(/,\s*/) : null;
          let sep = match4 ? match4[0] : "," + this.raw("between", "beforeOpen");
          this.selector = values.join(sep);
        }
        constructor(defaults3) {
          super(defaults3);
          this.type = "rule";
          if (!this.nodes) this.nodes = [];
        }
      };
      __name(_Rule, "Rule");
      var Rule3 = _Rule;
      module.exports = Rule3;
      Rule3.default = Rule3;
      Container3.registerRule(Rule3);
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/fromJSON.js
  var require_fromJSON2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/fromJSON.js"(exports, module) {
      
      var AtRule3 = require_at_rule2();
      var Comment4 = require_comment2();
      var Declaration3 = require_declaration2();
      var Input3 = require_input2();
      var PreviousMap = require_previous_map2();
      var Root3 = require_root2();
      var Rule3 = require_rule2();
      function fromJSON3(json, inputs) {
        if (Array.isArray(json)) return json.map((n21) => fromJSON3(n21));
        let { inputs: ownInputs, ...defaults3 } = json;
        if (ownInputs) {
          inputs = [];
          for (let input of ownInputs) {
            let inputHydrated = { ...input, __proto__: Input3.prototype };
            if (inputHydrated.map) {
              inputHydrated.map = {
                ...inputHydrated.map,
                __proto__: PreviousMap.prototype
              };
            }
            inputs.push(inputHydrated);
          }
        }
        if (defaults3.nodes) {
          defaults3.nodes = json.nodes.map((n21) => fromJSON3(n21, inputs));
        }
        if (defaults3.source) {
          let { inputId, ...source } = defaults3.source;
          defaults3.source = source;
          if (inputId != null) {
            defaults3.source.input = inputs[inputId];
          }
        }
        if (defaults3.type === "root") {
          return new Root3(defaults3);
        } else if (defaults3.type === "decl") {
          return new Declaration3(defaults3);
        } else if (defaults3.type === "rule") {
          return new Rule3(defaults3);
        } else if (defaults3.type === "comment") {
          return new Comment4(defaults3);
        } else if (defaults3.type === "atrule") {
          return new AtRule3(defaults3);
        } else {
          throw new Error("Unknown node type: " + json.type);
        }
      }
      __name(fromJSON3, "fromJSON");
      module.exports = fromJSON3;
      fromJSON3.default = fromJSON3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/map-generator.js
  var require_map_generator2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/map-generator.js"(exports, module) {
      
      var { dirname, relative, resolve, sep } = require_path2();
      var { SourceMapConsumer, SourceMapGenerator } = require_source_map2();
      var { pathToFileURL } = require_url();
      var Input3 = require_input2();
      var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
      var pathAvailable = Boolean(dirname && resolve && relative && sep);
      var _MapGenerator = class _MapGenerator {
        constructor(stringify3, root3, opts, cssString) {
          this.stringify = stringify3;
          this.mapOpts = opts.map || {};
          this.root = root3;
          this.opts = opts;
          this.css = cssString;
          this.originalCSS = cssString;
          this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
          this.memoizedFileURLs = /* @__PURE__ */ new Map();
          this.memoizedPaths = /* @__PURE__ */ new Map();
          this.memoizedURLs = /* @__PURE__ */ new Map();
        }
        addAnnotation() {
          let content;
          if (this.isInline()) {
            content = "data:application/json;base64," + this.toBase64(this.map.toString());
          } else if (typeof this.mapOpts.annotation === "string") {
            content = this.mapOpts.annotation;
          } else if (typeof this.mapOpts.annotation === "function") {
            content = this.mapOpts.annotation(this.opts.to, this.root);
          } else {
            content = this.outputFile() + ".map";
          }
          let eol = "\n";
          if (this.css.includes("\r\n")) eol = "\r\n";
          this.css += eol + "/*# sourceMappingURL=" + content + " */";
        }
        applyPrevMaps() {
          for (let prev of this.previous()) {
            let from = this.toUrl(this.path(prev.file));
            let root3 = prev.root || dirname(prev.file);
            let map;
            if (this.mapOpts.sourcesContent === false) {
              map = new SourceMapConsumer(prev.text);
              if (map.sourcesContent) {
                map.sourcesContent = null;
              }
            } else {
              map = prev.consumer();
            }
            this.map.applySourceMap(map, from, this.toUrl(this.path(root3)));
          }
        }
        clearAnnotation() {
          if (this.mapOpts.annotation === false) return;
          if (this.root) {
            let node;
            for (let i12 = this.root.nodes.length - 1; i12 >= 0; i12--) {
              node = this.root.nodes[i12];
              if (node.type !== "comment") continue;
              if (node.text.startsWith("# sourceMappingURL=")) {
                this.root.removeChild(i12);
              }
            }
          } else if (this.css) {
            this.css = this.css.replace(/\n*\/\*#[\S\s]*?\*\/$/gm, "");
          }
        }
        generate() {
          this.clearAnnotation();
          if (pathAvailable && sourceMapAvailable && this.isMap()) {
            return this.generateMap();
          } else {
            let result = "";
            this.stringify(this.root, (i12) => {
              result += i12;
            });
            return [result];
          }
        }
        generateMap() {
          if (this.root) {
            this.generateString();
          } else if (this.previous().length === 1) {
            let prev = this.previous()[0].consumer();
            prev.file = this.outputFile();
            this.map = SourceMapGenerator.fromSourceMap(prev, {
              ignoreInvalidMapping: true
            });
          } else {
            this.map = new SourceMapGenerator({
              file: this.outputFile(),
              ignoreInvalidMapping: true
            });
            this.map.addMapping({
              generated: { column: 0, line: 1 },
              original: { column: 0, line: 1 },
              source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>"
            });
          }
          if (this.isSourcesContent()) this.setSourcesContent();
          if (this.root && this.previous().length > 0) this.applyPrevMaps();
          if (this.isAnnotation()) this.addAnnotation();
          if (this.isInline()) {
            return [this.css];
          } else {
            return [this.css, this.map];
          }
        }
        generateString() {
          this.css = "";
          this.map = new SourceMapGenerator({
            file: this.outputFile(),
            ignoreInvalidMapping: true
          });
          let line = 1;
          let column = 1;
          let noSource = "<no source>";
          let mapping = {
            generated: { column: 0, line: 0 },
            original: { column: 0, line: 0 },
            source: ""
          };
          let last, lines;
          this.stringify(this.root, (str, node, type) => {
            this.css += str;
            if (node && type !== "end") {
              mapping.generated.line = line;
              mapping.generated.column = column - 1;
              if (node.source && node.source.start) {
                mapping.source = this.sourcePath(node);
                mapping.original.line = node.source.start.line;
                mapping.original.column = node.source.start.column - 1;
                this.map.addMapping(mapping);
              } else {
                mapping.source = noSource;
                mapping.original.line = 1;
                mapping.original.column = 0;
                this.map.addMapping(mapping);
              }
            }
            lines = str.match(/\n/g);
            if (lines) {
              line += lines.length;
              last = str.lastIndexOf("\n");
              column = str.length - last;
            } else {
              column += str.length;
            }
            if (node && type !== "start") {
              let p5 = node.parent || { raws: {} };
              let childless = node.type === "decl" || node.type === "atrule" && !node.nodes;
              if (!childless || node !== p5.last || p5.raws.semicolon) {
                if (node.source && node.source.end) {
                  mapping.source = this.sourcePath(node);
                  mapping.original.line = node.source.end.line;
                  mapping.original.column = node.source.end.column - 1;
                  mapping.generated.line = line;
                  mapping.generated.column = column - 2;
                  this.map.addMapping(mapping);
                } else {
                  mapping.source = noSource;
                  mapping.original.line = 1;
                  mapping.original.column = 0;
                  mapping.generated.line = line;
                  mapping.generated.column = column - 1;
                  this.map.addMapping(mapping);
                }
              }
            }
          });
        }
        isAnnotation() {
          if (this.isInline()) {
            return true;
          }
          if (typeof this.mapOpts.annotation !== "undefined") {
            return this.mapOpts.annotation;
          }
          if (this.previous().length) {
            return this.previous().some((i12) => i12.annotation);
          }
          return true;
        }
        isInline() {
          if (typeof this.mapOpts.inline !== "undefined") {
            return this.mapOpts.inline;
          }
          let annotation = this.mapOpts.annotation;
          if (typeof annotation !== "undefined" && annotation !== true) {
            return false;
          }
          if (this.previous().length) {
            return this.previous().some((i12) => i12.inline);
          }
          return true;
        }
        isMap() {
          if (typeof this.opts.map !== "undefined") {
            return !!this.opts.map;
          }
          return this.previous().length > 0;
        }
        isSourcesContent() {
          if (typeof this.mapOpts.sourcesContent !== "undefined") {
            return this.mapOpts.sourcesContent;
          }
          if (this.previous().length) {
            return this.previous().some((i12) => i12.withContent());
          }
          return true;
        }
        outputFile() {
          if (this.opts.to) {
            return this.path(this.opts.to);
          } else if (this.opts.from) {
            return this.path(this.opts.from);
          } else {
            return "to.css";
          }
        }
        path(file) {
          if (this.mapOpts.absolute) return file;
          if (file.charCodeAt(0) === 60) return file;
          if (/^\w+:\/\//.test(file)) return file;
          let cached = this.memoizedPaths.get(file);
          if (cached) return cached;
          let from = this.opts.to ? dirname(this.opts.to) : ".";
          if (typeof this.mapOpts.annotation === "string") {
            from = dirname(resolve(from, this.mapOpts.annotation));
          }
          let path = relative(from, file);
          this.memoizedPaths.set(file, path);
          return path;
        }
        previous() {
          if (!this.previousMaps) {
            this.previousMaps = [];
            if (this.root) {
              this.root.walk((node) => {
                if (node.source && node.source.input.map) {
                  let map = node.source.input.map;
                  if (!this.previousMaps.includes(map)) {
                    this.previousMaps.push(map);
                  }
                }
              });
            } else {
              let input = new Input3(this.originalCSS, this.opts);
              if (input.map) this.previousMaps.push(input.map);
            }
          }
          return this.previousMaps;
        }
        setSourcesContent() {
          let already = {};
          if (this.root) {
            this.root.walk((node) => {
              if (node.source) {
                let from = node.source.input.from;
                if (from && !already[from]) {
                  already[from] = true;
                  let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));
                  this.map.setSourceContent(fromUrl, node.source.input.css);
                }
              }
            });
          } else if (this.css) {
            let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
            this.map.setSourceContent(from, this.css);
          }
        }
        sourcePath(node) {
          if (this.mapOpts.from) {
            return this.toUrl(this.mapOpts.from);
          } else if (this.usesFileUrls) {
            return this.toFileUrl(node.source.input.from);
          } else {
            return this.toUrl(this.path(node.source.input.from));
          }
        }
        toBase64(str) {
          if (Buffer) {
            return Buffer.from(str).toString("base64");
          } else {
            return window.btoa(unescape(encodeURIComponent(str)));
          }
        }
        toFileUrl(path) {
          let cached = this.memoizedFileURLs.get(path);
          if (cached) return cached;
          if (pathToFileURL) {
            let fileURL = pathToFileURL(path).toString();
            this.memoizedFileURLs.set(path, fileURL);
            return fileURL;
          } else {
            throw new Error(
              "`map.absolute` option is not available in this PostCSS build"
            );
          }
        }
        toUrl(path) {
          let cached = this.memoizedURLs.get(path);
          if (cached) return cached;
          if (sep === "\\") {
            path = path.replace(/\\/g, "/");
          }
          let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);
          this.memoizedURLs.set(path, url);
          return url;
        }
      };
      __name(_MapGenerator, "MapGenerator");
      var MapGenerator = _MapGenerator;
      module.exports = MapGenerator;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/tokenize.js
  var require_tokenize2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/tokenize.js"(exports, module) {
      
      var SINGLE_QUOTE = "'".charCodeAt(0);
      var DOUBLE_QUOTE = '"'.charCodeAt(0);
      var BACKSLASH = "\\".charCodeAt(0);
      var SLASH = "/".charCodeAt(0);
      var NEWLINE = "\n".charCodeAt(0);
      var SPACE = " ".charCodeAt(0);
      var FEED = "\f".charCodeAt(0);
      var TAB = "	".charCodeAt(0);
      var CR = "\r".charCodeAt(0);
      var OPEN_SQUARE = "[".charCodeAt(0);
      var CLOSE_SQUARE = "]".charCodeAt(0);
      var OPEN_PARENTHESES = "(".charCodeAt(0);
      var CLOSE_PARENTHESES = ")".charCodeAt(0);
      var OPEN_CURLY = "{".charCodeAt(0);
      var CLOSE_CURLY = "}".charCodeAt(0);
      var SEMICOLON = ";".charCodeAt(0);
      var ASTERISK = "*".charCodeAt(0);
      var COLON = ":".charCodeAt(0);
      var AT = "@".charCodeAt(0);
      var RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
      var RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
      var RE_BAD_BRACKET = /.[\r\n"'(/\\]/;
      var RE_HEX_ESCAPE = /[\da-f]/i;
      module.exports = /* @__PURE__ */ __name(function tokenizer(input, options = {}) {
        let css = input.css.valueOf();
        let ignore = options.ignoreErrors;
        let code, content, escape2, next, quote;
        let currentToken, escaped, escapePos, n21, prev;
        let length = css.length;
        let pos = 0;
        let buffer = [];
        let returned = [];
        function position() {
          return pos;
        }
        __name(position, "position");
        function unclosed(what) {
          throw input.error("Unclosed " + what, pos);
        }
        __name(unclosed, "unclosed");
        function endOfFile() {
          return returned.length === 0 && pos >= length;
        }
        __name(endOfFile, "endOfFile");
        function nextToken(opts) {
          if (returned.length) return returned.pop();
          if (pos >= length) return;
          let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
          code = css.charCodeAt(pos);
          switch (code) {
            case NEWLINE:
            case SPACE:
            case TAB:
            case CR:
            case FEED: {
              next = pos;
              do {
                next += 1;
                code = css.charCodeAt(next);
              } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
              currentToken = ["space", css.slice(pos, next)];
              pos = next - 1;
              break;
            }
            case OPEN_SQUARE:
            case CLOSE_SQUARE:
            case OPEN_CURLY:
            case CLOSE_CURLY:
            case COLON:
            case SEMICOLON:
            case CLOSE_PARENTHESES: {
              let controlChar = String.fromCharCode(code);
              currentToken = [controlChar, controlChar, pos];
              break;
            }
            case OPEN_PARENTHESES: {
              prev = buffer.length ? buffer.pop()[1] : "";
              n21 = css.charCodeAt(pos + 1);
              if (prev === "url" && n21 !== SINGLE_QUOTE && n21 !== DOUBLE_QUOTE && n21 !== SPACE && n21 !== NEWLINE && n21 !== TAB && n21 !== FEED && n21 !== CR) {
                next = pos;
                do {
                  escaped = false;
                  next = css.indexOf(")", next + 1);
                  if (next === -1) {
                    if (ignore || ignoreUnclosed) {
                      next = pos;
                      break;
                    } else {
                      unclosed("bracket");
                    }
                  }
                  escapePos = next;
                  while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                    escapePos -= 1;
                    escaped = !escaped;
                  }
                } while (escaped);
                currentToken = ["brackets", css.slice(pos, next + 1), pos, next];
                pos = next;
              } else {
                next = css.indexOf(")", pos + 1);
                content = css.slice(pos, next + 1);
                if (next === -1 || RE_BAD_BRACKET.test(content)) {
                  currentToken = ["(", "(", pos];
                } else {
                  currentToken = ["brackets", content, pos, next];
                  pos = next;
                }
              }
              break;
            }
            case SINGLE_QUOTE:
            case DOUBLE_QUOTE: {
              quote = code === SINGLE_QUOTE ? "'" : '"';
              next = pos;
              do {
                escaped = false;
                next = css.indexOf(quote, next + 1);
                if (next === -1) {
                  if (ignore || ignoreUnclosed) {
                    next = pos + 1;
                    break;
                  } else {
                    unclosed("string");
                  }
                }
                escapePos = next;
                while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                  escapePos -= 1;
                  escaped = !escaped;
                }
              } while (escaped);
              currentToken = ["string", css.slice(pos, next + 1), pos, next];
              pos = next;
              break;
            }
            case AT: {
              RE_AT_END.lastIndex = pos + 1;
              RE_AT_END.test(css);
              if (RE_AT_END.lastIndex === 0) {
                next = css.length - 1;
              } else {
                next = RE_AT_END.lastIndex - 2;
              }
              currentToken = ["at-word", css.slice(pos, next + 1), pos, next];
              pos = next;
              break;
            }
            case BACKSLASH: {
              next = pos;
              escape2 = true;
              while (css.charCodeAt(next + 1) === BACKSLASH) {
                next += 1;
                escape2 = !escape2;
              }
              code = css.charCodeAt(next + 1);
              if (escape2 && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
                next += 1;
                if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                  while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                    next += 1;
                  }
                  if (css.charCodeAt(next + 1) === SPACE) {
                    next += 1;
                  }
                }
              }
              currentToken = ["word", css.slice(pos, next + 1), pos, next];
              pos = next;
              break;
            }
            default: {
              if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
                next = css.indexOf("*/", pos + 2) + 1;
                if (next === 0) {
                  if (ignore || ignoreUnclosed) {
                    next = css.length;
                  } else {
                    unclosed("comment");
                  }
                }
                currentToken = ["comment", css.slice(pos, next + 1), pos, next];
                pos = next;
              } else {
                RE_WORD_END.lastIndex = pos + 1;
                RE_WORD_END.test(css);
                if (RE_WORD_END.lastIndex === 0) {
                  next = css.length - 1;
                } else {
                  next = RE_WORD_END.lastIndex - 2;
                }
                currentToken = ["word", css.slice(pos, next + 1), pos, next];
                buffer.push(currentToken);
                pos = next;
              }
              break;
            }
          }
          pos++;
          return currentToken;
        }
        __name(nextToken, "nextToken");
        function back(token) {
          returned.push(token);
        }
        __name(back, "back");
        return {
          back,
          endOfFile,
          nextToken,
          position
        };
      }, "tokenizer");
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/parser.js
  var require_parser2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/parser.js"(exports, module) {
      
      var AtRule3 = require_at_rule2();
      var Comment4 = require_comment2();
      var Declaration3 = require_declaration2();
      var Root3 = require_root2();
      var Rule3 = require_rule2();
      var tokenizer = require_tokenize2();
      var SAFE_COMMENT_NEIGHBOR = {
        empty: true,
        space: true
      };
      function findLastWithPosition(tokens) {
        for (let i12 = tokens.length - 1; i12 >= 0; i12--) {
          let token = tokens[i12];
          let pos = token[3] || token[2];
          if (pos) return pos;
        }
      }
      __name(findLastWithPosition, "findLastWithPosition");
      var _Parser = class _Parser {
        constructor(input) {
          this.input = input;
          this.root = new Root3();
          this.current = this.root;
          this.spaces = "";
          this.semicolon = false;
          this.createTokenizer();
          this.root.source = { input, start: { column: 1, line: 1, offset: 0 } };
        }
        atrule(token) {
          let node = new AtRule3();
          node.name = token[1].slice(1);
          if (node.name === "") {
            this.unnamedAtrule(node, token);
          }
          this.init(node, token[2]);
          let type;
          let prev;
          let shift;
          let last = false;
          let open = false;
          let params = [];
          let brackets = [];
          while (!this.tokenizer.endOfFile()) {
            token = this.tokenizer.nextToken();
            type = token[0];
            if (type === "(" || type === "[") {
              brackets.push(type === "(" ? ")" : "]");
            } else if (type === "{" && brackets.length > 0) {
              brackets.push("}");
            } else if (type === brackets[brackets.length - 1]) {
              brackets.pop();
            }
            if (brackets.length === 0) {
              if (type === ";") {
                node.source.end = this.getPosition(token[2]);
                node.source.end.offset++;
                this.semicolon = true;
                break;
              } else if (type === "{") {
                open = true;
                break;
              } else if (type === "}") {
                if (params.length > 0) {
                  shift = params.length - 1;
                  prev = params[shift];
                  while (prev && prev[0] === "space") {
                    prev = params[--shift];
                  }
                  if (prev) {
                    node.source.end = this.getPosition(prev[3] || prev[2]);
                    node.source.end.offset++;
                  }
                }
                this.end(token);
                break;
              } else {
                params.push(token);
              }
            } else {
              params.push(token);
            }
            if (this.tokenizer.endOfFile()) {
              last = true;
              break;
            }
          }
          node.raws.between = this.spacesAndCommentsFromEnd(params);
          if (params.length) {
            node.raws.afterName = this.spacesAndCommentsFromStart(params);
            this.raw(node, "params", params);
            if (last) {
              token = params[params.length - 1];
              node.source.end = this.getPosition(token[3] || token[2]);
              node.source.end.offset++;
              this.spaces = node.raws.between;
              node.raws.between = "";
            }
          } else {
            node.raws.afterName = "";
            node.params = "";
          }
          if (open) {
            node.nodes = [];
            this.current = node;
          }
        }
        checkMissedSemicolon(tokens) {
          let colon = this.colon(tokens);
          if (colon === false) return;
          let founded = 0;
          let token;
          for (let j2 = colon - 1; j2 >= 0; j2--) {
            token = tokens[j2];
            if (token[0] !== "space") {
              founded += 1;
              if (founded === 2) break;
            }
          }
          throw this.input.error(
            "Missed semicolon",
            token[0] === "word" ? token[3] + 1 : token[2]
          );
        }
        colon(tokens) {
          let brackets = 0;
          let prev, token, type;
          for (let [i12, element] of tokens.entries()) {
            token = element;
            type = token[0];
            if (type === "(") {
              brackets += 1;
            }
            if (type === ")") {
              brackets -= 1;
            }
            if (brackets === 0 && type === ":") {
              if (!prev) {
                this.doubleColon(token);
              } else if (prev[0] === "word" && prev[1] === "progid") {
                continue;
              } else {
                return i12;
              }
            }
            prev = token;
          }
          return false;
        }
        comment(token) {
          let node = new Comment4();
          this.init(node, token[2]);
          node.source.end = this.getPosition(token[3] || token[2]);
          node.source.end.offset++;
          let text = token[1].slice(2, -2);
          if (/^\s*$/.test(text)) {
            node.text = "";
            node.raws.left = text;
            node.raws.right = "";
          } else {
            let match4 = text.match(/^(\s*)([^]*\S)(\s*)$/);
            node.text = match4[2];
            node.raws.left = match4[1];
            node.raws.right = match4[3];
          }
        }
        createTokenizer() {
          this.tokenizer = tokenizer(this.input);
        }
        decl(tokens, customProperty) {
          let node = new Declaration3();
          this.init(node, tokens[0][2]);
          let last = tokens[tokens.length - 1];
          if (last[0] === ";") {
            this.semicolon = true;
            tokens.pop();
          }
          node.source.end = this.getPosition(
            last[3] || last[2] || findLastWithPosition(tokens)
          );
          node.source.end.offset++;
          while (tokens[0][0] !== "word") {
            if (tokens.length === 1) this.unknownWord(tokens);
            node.raws.before += tokens.shift()[1];
          }
          node.source.start = this.getPosition(tokens[0][2]);
          node.prop = "";
          while (tokens.length) {
            let type = tokens[0][0];
            if (type === ":" || type === "space" || type === "comment") {
              break;
            }
            node.prop += tokens.shift()[1];
          }
          node.raws.between = "";
          let token;
          while (tokens.length) {
            token = tokens.shift();
            if (token[0] === ":") {
              node.raws.between += token[1];
              break;
            } else {
              if (token[0] === "word" && /\w/.test(token[1])) {
                this.unknownWord([token]);
              }
              node.raws.between += token[1];
            }
          }
          if (node.prop[0] === "_" || node.prop[0] === "*") {
            node.raws.before += node.prop[0];
            node.prop = node.prop.slice(1);
          }
          let firstSpaces = [];
          let next;
          while (tokens.length) {
            next = tokens[0][0];
            if (next !== "space" && next !== "comment") break;
            firstSpaces.push(tokens.shift());
          }
          this.precheckMissedSemicolon(tokens);
          for (let i12 = tokens.length - 1; i12 >= 0; i12--) {
            token = tokens[i12];
            if (token[1].toLowerCase() === "!important") {
              node.important = true;
              let string = this.stringFrom(tokens, i12);
              string = this.spacesFromEnd(tokens) + string;
              if (string !== " !important") node.raws.important = string;
              break;
            } else if (token[1].toLowerCase() === "important") {
              let cache2 = tokens.slice(0);
              let str = "";
              for (let j2 = i12; j2 > 0; j2--) {
                let type = cache2[j2][0];
                if (str.trim().startsWith("!") && type !== "space") {
                  break;
                }
                str = cache2.pop()[1] + str;
              }
              if (str.trim().startsWith("!")) {
                node.important = true;
                node.raws.important = str;
                tokens = cache2;
              }
            }
            if (token[0] !== "space" && token[0] !== "comment") {
              break;
            }
          }
          let hasWord = tokens.some((i12) => i12[0] !== "space" && i12[0] !== "comment");
          if (hasWord) {
            node.raws.between += firstSpaces.map((i12) => i12[1]).join("");
            firstSpaces = [];
          }
          this.raw(node, "value", firstSpaces.concat(tokens), customProperty);
          if (node.value.includes(":") && !customProperty) {
            this.checkMissedSemicolon(tokens);
          }
        }
        doubleColon(token) {
          throw this.input.error(
            "Double colon",
            { offset: token[2] },
            { offset: token[2] + token[1].length }
          );
        }
        emptyRule(token) {
          let node = new Rule3();
          this.init(node, token[2]);
          node.selector = "";
          node.raws.between = "";
          this.current = node;
        }
        end(token) {
          if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
          }
          this.semicolon = false;
          this.current.raws.after = (this.current.raws.after || "") + this.spaces;
          this.spaces = "";
          if (this.current.parent) {
            this.current.source.end = this.getPosition(token[2]);
            this.current.source.end.offset++;
            this.current = this.current.parent;
          } else {
            this.unexpectedClose(token);
          }
        }
        endFile() {
          if (this.current.parent) this.unclosedBlock();
          if (this.current.nodes && this.current.nodes.length) {
            this.current.raws.semicolon = this.semicolon;
          }
          this.current.raws.after = (this.current.raws.after || "") + this.spaces;
          this.root.source.end = this.getPosition(this.tokenizer.position());
        }
        freeSemicolon(token) {
          this.spaces += token[1];
          if (this.current.nodes) {
            let prev = this.current.nodes[this.current.nodes.length - 1];
            if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
              prev.raws.ownSemicolon = this.spaces;
              this.spaces = "";
              prev.source.end = this.getPosition(token[2]);
              prev.source.end.offset += prev.raws.ownSemicolon.length;
            }
          }
        }
        // Helpers
        getPosition(offset5) {
          let pos = this.input.fromOffset(offset5);
          return {
            column: pos.col,
            line: pos.line,
            offset: offset5
          };
        }
        init(node, offset5) {
          this.current.push(node);
          node.source = {
            input: this.input,
            start: this.getPosition(offset5)
          };
          node.raws.before = this.spaces;
          this.spaces = "";
          if (node.type !== "comment") this.semicolon = false;
        }
        other(start5) {
          let end3 = false;
          let type = null;
          let colon = false;
          let bracket = null;
          let brackets = [];
          let customProperty = start5[1].startsWith("--");
          let tokens = [];
          let token = start5;
          while (token) {
            type = token[0];
            tokens.push(token);
            if (type === "(" || type === "[") {
              if (!bracket) bracket = token;
              brackets.push(type === "(" ? ")" : "]");
            } else if (customProperty && colon && type === "{") {
              if (!bracket) bracket = token;
              brackets.push("}");
            } else if (brackets.length === 0) {
              if (type === ";") {
                if (colon) {
                  this.decl(tokens, customProperty);
                  return;
                } else {
                  break;
                }
              } else if (type === "{") {
                this.rule(tokens);
                return;
              } else if (type === "}") {
                this.tokenizer.back(tokens.pop());
                end3 = true;
                break;
              } else if (type === ":") {
                colon = true;
              }
            } else if (type === brackets[brackets.length - 1]) {
              brackets.pop();
              if (brackets.length === 0) bracket = null;
            }
            token = this.tokenizer.nextToken();
          }
          if (this.tokenizer.endOfFile()) end3 = true;
          if (brackets.length > 0) this.unclosedBracket(bracket);
          if (end3 && colon) {
            if (!customProperty) {
              while (tokens.length) {
                token = tokens[tokens.length - 1][0];
                if (token !== "space" && token !== "comment") break;
                this.tokenizer.back(tokens.pop());
              }
            }
            this.decl(tokens, customProperty);
          } else {
            this.unknownWord(tokens);
          }
        }
        parse() {
          let token;
          while (!this.tokenizer.endOfFile()) {
            token = this.tokenizer.nextToken();
            switch (token[0]) {
              case "space":
                this.spaces += token[1];
                break;
              case ";":
                this.freeSemicolon(token);
                break;
              case "}":
                this.end(token);
                break;
              case "comment":
                this.comment(token);
                break;
              case "at-word":
                this.atrule(token);
                break;
              case "{":
                this.emptyRule(token);
                break;
              default:
                this.other(token);
                break;
            }
          }
          this.endFile();
        }
        precheckMissedSemicolon() {
        }
        raw(node, prop, tokens, customProperty) {
          let token, type;
          let length = tokens.length;
          let value = "";
          let clean = true;
          let next, prev;
          for (let i12 = 0; i12 < length; i12 += 1) {
            token = tokens[i12];
            type = token[0];
            if (type === "space" && i12 === length - 1 && !customProperty) {
              clean = false;
            } else if (type === "comment") {
              prev = tokens[i12 - 1] ? tokens[i12 - 1][0] : "empty";
              next = tokens[i12 + 1] ? tokens[i12 + 1][0] : "empty";
              if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {
                if (value.slice(-1) === ",") {
                  clean = false;
                } else {
                  value += token[1];
                }
              } else {
                clean = false;
              }
            } else {
              value += token[1];
            }
          }
          if (!clean) {
            let raw = tokens.reduce((all, i12) => all + i12[1], "");
            node.raws[prop] = { raw, value };
          }
          node[prop] = value;
        }
        rule(tokens) {
          tokens.pop();
          let node = new Rule3();
          this.init(node, tokens[0][2]);
          node.raws.between = this.spacesAndCommentsFromEnd(tokens);
          this.raw(node, "selector", tokens);
          this.current = node;
        }
        spacesAndCommentsFromEnd(tokens) {
          let lastTokenType;
          let spaces = "";
          while (tokens.length) {
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== "space" && lastTokenType !== "comment") break;
            spaces = tokens.pop()[1] + spaces;
          }
          return spaces;
        }
        // Errors
        spacesAndCommentsFromStart(tokens) {
          let next;
          let spaces = "";
          while (tokens.length) {
            next = tokens[0][0];
            if (next !== "space" && next !== "comment") break;
            spaces += tokens.shift()[1];
          }
          return spaces;
        }
        spacesFromEnd(tokens) {
          let lastTokenType;
          let spaces = "";
          while (tokens.length) {
            lastTokenType = tokens[tokens.length - 1][0];
            if (lastTokenType !== "space") break;
            spaces = tokens.pop()[1] + spaces;
          }
          return spaces;
        }
        stringFrom(tokens, from) {
          let result = "";
          for (let i12 = from; i12 < tokens.length; i12++) {
            result += tokens[i12][1];
          }
          tokens.splice(from, tokens.length - from);
          return result;
        }
        unclosedBlock() {
          let pos = this.current.source.start;
          throw this.input.error("Unclosed block", pos.line, pos.column);
        }
        unclosedBracket(bracket) {
          throw this.input.error(
            "Unclosed bracket",
            { offset: bracket[2] },
            { offset: bracket[2] + 1 }
          );
        }
        unexpectedClose(token) {
          throw this.input.error(
            "Unexpected }",
            { offset: token[2] },
            { offset: token[2] + 1 }
          );
        }
        unknownWord(tokens) {
          throw this.input.error(
            "Unknown word " + tokens[0][1],
            { offset: tokens[0][2] },
            { offset: tokens[0][2] + tokens[0][1].length }
          );
        }
        unnamedAtrule(node, token) {
          throw this.input.error(
            "At-rule without name",
            { offset: token[2] },
            { offset: token[2] + token[1].length }
          );
        }
      };
      __name(_Parser, "Parser");
      var Parser = _Parser;
      module.exports = Parser;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/parse.js
  var require_parse2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/parse.js"(exports, module) {
      
      var Container3 = require_container2();
      var Input3 = require_input2();
      var Parser = require_parser2();
      function parse6(css, opts) {
        let input = new Input3(css, opts);
        let parser = new Parser(input);
        try {
          parser.parse();
        } catch (e18) {
          if (true) {
            if (e18.name === "CssSyntaxError" && opts && opts.from) {
              if (/\.scss$/i.test(opts.from)) {
                e18.message += "\nYou tried to parse SCSS with the standard CSS parser; try again with the postcss-scss parser";
              } else if (/\.sass/i.test(opts.from)) {
                e18.message += "\nYou tried to parse Sass with the standard CSS parser; try again with the postcss-sass parser";
              } else if (/\.less$/i.test(opts.from)) {
                e18.message += "\nYou tried to parse Less with the standard CSS parser; try again with the postcss-less parser";
              }
            }
          }
          throw e18;
        }
        return parser.root;
      }
      __name(parse6, "parse");
      module.exports = parse6;
      parse6.default = parse6;
      Container3.registerParse(parse6);
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/warning.js
  var require_warning2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/warning.js"(exports, module) {
      
      var _Warning = class _Warning {
        constructor(text, opts = {}) {
          this.type = "warning";
          this.text = text;
          if (opts.node && opts.node.source) {
            let range = opts.node.rangeBy(opts);
            this.line = range.start.line;
            this.column = range.start.column;
            this.endLine = range.end.line;
            this.endColumn = range.end.column;
          }
          for (let opt in opts) this[opt] = opts[opt];
        }
        toString() {
          if (this.node) {
            return this.node.error(this.text, {
              index: this.index,
              plugin: this.plugin,
              word: this.word
            }).message;
          }
          if (this.plugin) {
            return this.plugin + ": " + this.text;
          }
          return this.text;
        }
      };
      __name(_Warning, "Warning");
      var Warning3 = _Warning;
      module.exports = Warning3;
      Warning3.default = Warning3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/result.js
  var require_result2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/result.js"(exports, module) {
      
      var Warning3 = require_warning2();
      var _Result = class _Result {
        get content() {
          return this.css;
        }
        constructor(processor, root3, opts) {
          this.processor = processor;
          this.messages = [];
          this.root = root3;
          this.opts = opts;
          this.css = "";
          this.map = void 0;
        }
        toString() {
          return this.css;
        }
        warn(text, opts = {}) {
          if (!opts.plugin) {
            if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
              opts.plugin = this.lastPlugin.postcssPlugin;
            }
          }
          let warning = new Warning3(text, opts);
          this.messages.push(warning);
          return warning;
        }
        warnings() {
          return this.messages.filter((i12) => i12.type === "warning");
        }
      };
      __name(_Result, "Result");
      var Result3 = _Result;
      module.exports = Result3;
      Result3.default = Result3;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/warn-once.js
  var require_warn_once2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/warn-once.js"(exports, module) {
      
      var printed = {};
      module.exports = /* @__PURE__ */ __name(function warnOnce(message) {
        if (printed[message]) return;
        printed[message] = true;
        if (typeof console !== "undefined" && console.warn) {
          console.warn(message);
        }
      }, "warnOnce");
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/lazy-result.js
  var require_lazy_result2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/lazy-result.js"(exports, module) {
      
      var Container3 = require_container2();
      var Document3 = require_document2();
      var MapGenerator = require_map_generator2();
      var parse6 = require_parse2();
      var Result3 = require_result2();
      var Root3 = require_root2();
      var stringify3 = require_stringify2();
      var { isClean, my } = require_symbols2();
      var warnOnce = require_warn_once2();
      var TYPE_TO_CLASS_NAME = {
        atrule: "AtRule",
        comment: "Comment",
        decl: "Declaration",
        document: "Document",
        root: "Root",
        rule: "Rule"
      };
      var PLUGIN_PROPS = {
        AtRule: true,
        AtRuleExit: true,
        Comment: true,
        CommentExit: true,
        Declaration: true,
        DeclarationExit: true,
        Document: true,
        DocumentExit: true,
        Once: true,
        OnceExit: true,
        postcssPlugin: true,
        prepare: true,
        Root: true,
        RootExit: true,
        Rule: true,
        RuleExit: true
      };
      var NOT_VISITORS = {
        Once: true,
        postcssPlugin: true,
        prepare: true
      };
      var CHILDREN = 0;
      function isPromise(obj) {
        return typeof obj === "object" && typeof obj.then === "function";
      }
      __name(isPromise, "isPromise");
      function getEvents(node) {
        let key = false;
        let type = TYPE_TO_CLASS_NAME[node.type];
        if (node.type === "decl") {
          key = node.prop.toLowerCase();
        } else if (node.type === "atrule") {
          key = node.name.toLowerCase();
        }
        if (key && node.append) {
          return [
            type,
            type + "-" + key,
            CHILDREN,
            type + "Exit",
            type + "Exit-" + key
          ];
        } else if (key) {
          return [type, type + "-" + key, type + "Exit", type + "Exit-" + key];
        } else if (node.append) {
          return [type, CHILDREN, type + "Exit"];
        } else {
          return [type, type + "Exit"];
        }
      }
      __name(getEvents, "getEvents");
      function toStack(node) {
        let events2;
        if (node.type === "document") {
          events2 = ["Document", CHILDREN, "DocumentExit"];
        } else if (node.type === "root") {
          events2 = ["Root", CHILDREN, "RootExit"];
        } else {
          events2 = getEvents(node);
        }
        return {
          eventIndex: 0,
          events: events2,
          iterator: 0,
          node,
          visitorIndex: 0,
          visitors: []
        };
      }
      __name(toStack, "toStack");
      function cleanMarks(node) {
        node[isClean] = false;
        if (node.nodes) node.nodes.forEach((i12) => cleanMarks(i12));
        return node;
      }
      __name(cleanMarks, "cleanMarks");
      var postcss3 = {};
      var _LazyResult = class _LazyResult {
        get content() {
          return this.stringify().content;
        }
        get css() {
          return this.stringify().css;
        }
        get map() {
          return this.stringify().map;
        }
        get messages() {
          return this.sync().messages;
        }
        get opts() {
          return this.result.opts;
        }
        get processor() {
          return this.result.processor;
        }
        get root() {
          return this.sync().root;
        }
        get [Symbol.toStringTag]() {
          return "LazyResult";
        }
        constructor(processor, css, opts) {
          this.stringified = false;
          this.processed = false;
          let root3;
          if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) {
            root3 = cleanMarks(css);
          } else if (css instanceof _LazyResult || css instanceof Result3) {
            root3 = cleanMarks(css.root);
            if (css.map) {
              if (typeof opts.map === "undefined") opts.map = {};
              if (!opts.map.inline) opts.map.inline = false;
              opts.map.prev = css.map;
            }
          } else {
            let parser = parse6;
            if (opts.syntax) parser = opts.syntax.parse;
            if (opts.parser) parser = opts.parser;
            if (parser.parse) parser = parser.parse;
            try {
              root3 = parser(css, opts);
            } catch (error2) {
              this.processed = true;
              this.error = error2;
            }
            if (root3 && !root3[my]) {
              Container3.rebuild(root3);
            }
          }
          this.result = new Result3(processor, root3, opts);
          this.helpers = { ...postcss3, postcss: postcss3, result: this.result };
          this.plugins = this.processor.plugins.map((plugin3) => {
            if (typeof plugin3 === "object" && plugin3.prepare) {
              return { ...plugin3, ...plugin3.prepare(this.result) };
            } else {
              return plugin3;
            }
          });
        }
        async() {
          if (this.error) return Promise.reject(this.error);
          if (this.processed) return Promise.resolve(this.result);
          if (!this.processing) {
            this.processing = this.runAsync();
          }
          return this.processing;
        }
        catch(onRejected) {
          return this.async().catch(onRejected);
        }
        finally(onFinally) {
          return this.async().then(onFinally, onFinally);
        }
        getAsyncError() {
          throw new Error("Use process(css).then(cb) to work with async plugins");
        }
        handleError(error2, node) {
          let plugin3 = this.result.lastPlugin;
          try {
            if (node) node.addToError(error2);
            this.error = error2;
            if (error2.name === "CssSyntaxError" && !error2.plugin) {
              error2.plugin = plugin3.postcssPlugin;
              error2.setMessage();
            } else if (plugin3.postcssVersion) {
              if (true) {
                let pluginName = plugin3.postcssPlugin;
                let pluginVer = plugin3.postcssVersion;
                let runtimeVer = this.result.processor.version;
                let a21 = pluginVer.split(".");
                let b6 = runtimeVer.split(".");
                if (a21[0] !== b6[0] || parseInt(a21[1]) > parseInt(b6[1])) {
                  console.error(
                    "Unknown error from PostCSS plugin. Your current PostCSS version is " + runtimeVer + ", but " + pluginName + " uses " + pluginVer + ". Perhaps this is the source of the error below."
                  );
                }
              }
            }
          } catch (err) {
            if (console && console.error) console.error(err);
          }
          return error2;
        }
        prepareVisitors() {
          this.listeners = {};
          let add = /* @__PURE__ */ __name((plugin3, type, cb) => {
            if (!this.listeners[type]) this.listeners[type] = [];
            this.listeners[type].push([plugin3, cb]);
          }, "add");
          for (let plugin3 of this.plugins) {
            if (typeof plugin3 === "object") {
              for (let event in plugin3) {
                if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
                  throw new Error(
                    `Unknown event ${event} in ${plugin3.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`
                  );
                }
                if (!NOT_VISITORS[event]) {
                  if (typeof plugin3[event] === "object") {
                    for (let filter in plugin3[event]) {
                      if (filter === "*") {
                        add(plugin3, event, plugin3[event][filter]);
                      } else {
                        add(
                          plugin3,
                          event + "-" + filter.toLowerCase(),
                          plugin3[event][filter]
                        );
                      }
                    }
                  } else if (typeof plugin3[event] === "function") {
                    add(plugin3, event, plugin3[event]);
                  }
                }
              }
            }
          }
          this.hasListener = Object.keys(this.listeners).length > 0;
        }
        async runAsync() {
          this.plugin = 0;
          for (let i12 = 0; i12 < this.plugins.length; i12++) {
            let plugin3 = this.plugins[i12];
            let promise = this.runOnRoot(plugin3);
            if (isPromise(promise)) {
              try {
                await promise;
              } catch (error2) {
                throw this.handleError(error2);
              }
            }
          }
          this.prepareVisitors();
          if (this.hasListener) {
            let root3 = this.result.root;
            while (!root3[isClean]) {
              root3[isClean] = true;
              let stack = [toStack(root3)];
              while (stack.length > 0) {
                let promise = this.visitTick(stack);
                if (isPromise(promise)) {
                  try {
                    await promise;
                  } catch (e18) {
                    let node = stack[stack.length - 1].node;
                    throw this.handleError(e18, node);
                  }
                }
              }
            }
            if (this.listeners.OnceExit) {
              for (let [plugin3, visitor] of this.listeners.OnceExit) {
                this.result.lastPlugin = plugin3;
                try {
                  if (root3.type === "document") {
                    let roots = root3.nodes.map(
                      (subRoot) => visitor(subRoot, this.helpers)
                    );
                    await Promise.all(roots);
                  } else {
                    await visitor(root3, this.helpers);
                  }
                } catch (e18) {
                  throw this.handleError(e18);
                }
              }
            }
          }
          this.processed = true;
          return this.stringify();
        }
        runOnRoot(plugin3) {
          this.result.lastPlugin = plugin3;
          try {
            if (typeof plugin3 === "object" && plugin3.Once) {
              if (this.result.root.type === "document") {
                let roots = this.result.root.nodes.map(
                  (root3) => plugin3.Once(root3, this.helpers)
                );
                if (isPromise(roots[0])) {
                  return Promise.all(roots);
                }
                return roots;
              }
              return plugin3.Once(this.result.root, this.helpers);
            } else if (typeof plugin3 === "function") {
              return plugin3(this.result.root, this.result);
            }
          } catch (error2) {
            throw this.handleError(error2);
          }
        }
        stringify() {
          if (this.error) throw this.error;
          if (this.stringified) return this.result;
          this.stringified = true;
          this.sync();
          let opts = this.result.opts;
          let str = stringify3;
          if (opts.syntax) str = opts.syntax.stringify;
          if (opts.stringifier) str = opts.stringifier;
          if (str.stringify) str = str.stringify;
          let map = new MapGenerator(str, this.result.root, this.result.opts);
          let data = map.generate();
          this.result.css = data[0];
          this.result.map = data[1];
          return this.result;
        }
        sync() {
          if (this.error) throw this.error;
          if (this.processed) return this.result;
          this.processed = true;
          if (this.processing) {
            throw this.getAsyncError();
          }
          for (let plugin3 of this.plugins) {
            let promise = this.runOnRoot(plugin3);
            if (isPromise(promise)) {
              throw this.getAsyncError();
            }
          }
          this.prepareVisitors();
          if (this.hasListener) {
            let root3 = this.result.root;
            while (!root3[isClean]) {
              root3[isClean] = true;
              this.walkSync(root3);
            }
            if (this.listeners.OnceExit) {
              if (root3.type === "document") {
                for (let subRoot of root3.nodes) {
                  this.visitSync(this.listeners.OnceExit, subRoot);
                }
              } else {
                this.visitSync(this.listeners.OnceExit, root3);
              }
            }
          }
          return this.result;
        }
        then(onFulfilled, onRejected) {
          if (true) {
            if (!("from" in this.opts)) {
              warnOnce(
                "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
              );
            }
          }
          return this.async().then(onFulfilled, onRejected);
        }
        toString() {
          return this.css;
        }
        visitSync(visitors, node) {
          for (let [plugin3, visitor] of visitors) {
            this.result.lastPlugin = plugin3;
            let promise;
            try {
              promise = visitor(node, this.helpers);
            } catch (e18) {
              throw this.handleError(e18, node.proxyOf);
            }
            if (node.type !== "root" && node.type !== "document" && !node.parent) {
              return true;
            }
            if (isPromise(promise)) {
              throw this.getAsyncError();
            }
          }
        }
        visitTick(stack) {
          let visit = stack[stack.length - 1];
          let { node, visitors } = visit;
          if (node.type !== "root" && node.type !== "document" && !node.parent) {
            stack.pop();
            return;
          }
          if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
            let [plugin3, visitor] = visitors[visit.visitorIndex];
            visit.visitorIndex += 1;
            if (visit.visitorIndex === visitors.length) {
              visit.visitors = [];
              visit.visitorIndex = 0;
            }
            this.result.lastPlugin = plugin3;
            try {
              return visitor(node.toProxy(), this.helpers);
            } catch (e18) {
              throw this.handleError(e18, node);
            }
          }
          if (visit.iterator !== 0) {
            let iterator = visit.iterator;
            let child;
            while (child = node.nodes[node.indexes[iterator]]) {
              node.indexes[iterator] += 1;
              if (!child[isClean]) {
                child[isClean] = true;
                stack.push(toStack(child));
                return;
              }
            }
            visit.iterator = 0;
            delete node.indexes[iterator];
          }
          let events2 = visit.events;
          while (visit.eventIndex < events2.length) {
            let event = events2[visit.eventIndex];
            visit.eventIndex += 1;
            if (event === CHILDREN) {
              if (node.nodes && node.nodes.length) {
                node[isClean] = true;
                visit.iterator = node.getIterator();
              }
              return;
            } else if (this.listeners[event]) {
              visit.visitors = this.listeners[event];
              return;
            }
          }
          stack.pop();
        }
        walkSync(node) {
          node[isClean] = true;
          let events2 = getEvents(node);
          for (let event of events2) {
            if (event === CHILDREN) {
              if (node.nodes) {
                node.each((child) => {
                  if (!child[isClean]) this.walkSync(child);
                });
              }
            } else {
              let visitors = this.listeners[event];
              if (visitors) {
                if (this.visitSync(visitors, node.toProxy())) return;
              }
            }
          }
        }
        warnings() {
          return this.sync().warnings();
        }
      };
      __name(_LazyResult, "LazyResult");
      var LazyResult = _LazyResult;
      LazyResult.registerPostcss = (dependant) => {
        postcss3 = dependant;
      };
      module.exports = LazyResult;
      LazyResult.default = LazyResult;
      Root3.registerLazyResult(LazyResult);
      Document3.registerLazyResult(LazyResult);
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/no-work-result.js
  var require_no_work_result2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/no-work-result.js"(exports, module) {
      
      var MapGenerator = require_map_generator2();
      var parse6 = require_parse2();
      var Result3 = require_result2();
      var stringify3 = require_stringify2();
      var warnOnce = require_warn_once2();
      var _NoWorkResult = class _NoWorkResult {
        get content() {
          return this.result.css;
        }
        get css() {
          return this.result.css;
        }
        get map() {
          return this.result.map;
        }
        get messages() {
          return [];
        }
        get opts() {
          return this.result.opts;
        }
        get processor() {
          return this.result.processor;
        }
        get root() {
          if (this._root) {
            return this._root;
          }
          let root3;
          let parser = parse6;
          try {
            root3 = parser(this._css, this._opts);
          } catch (error2) {
            this.error = error2;
          }
          if (this.error) {
            throw this.error;
          } else {
            this._root = root3;
            return root3;
          }
        }
        get [Symbol.toStringTag]() {
          return "NoWorkResult";
        }
        constructor(processor, css, opts) {
          css = css.toString();
          this.stringified = false;
          this._processor = processor;
          this._css = css;
          this._opts = opts;
          this._map = void 0;
          let root3;
          let str = stringify3;
          this.result = new Result3(this._processor, root3, this._opts);
          this.result.css = css;
          let self2 = this;
          Object.defineProperty(this.result, "root", {
            get() {
              return self2.root;
            }
          });
          let map = new MapGenerator(str, root3, this._opts, css);
          if (map.isMap()) {
            let [generatedCSS, generatedMap] = map.generate();
            if (generatedCSS) {
              this.result.css = generatedCSS;
            }
            if (generatedMap) {
              this.result.map = generatedMap;
            }
          } else {
            map.clearAnnotation();
            this.result.css = map.css;
          }
        }
        async() {
          if (this.error) return Promise.reject(this.error);
          return Promise.resolve(this.result);
        }
        catch(onRejected) {
          return this.async().catch(onRejected);
        }
        finally(onFinally) {
          return this.async().then(onFinally, onFinally);
        }
        sync() {
          if (this.error) throw this.error;
          return this.result;
        }
        then(onFulfilled, onRejected) {
          if (true) {
            if (!("from" in this._opts)) {
              warnOnce(
                "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
              );
            }
          }
          return this.async().then(onFulfilled, onRejected);
        }
        toString() {
          return this._css;
        }
        warnings() {
          return [];
        }
      };
      __name(_NoWorkResult, "NoWorkResult");
      var NoWorkResult = _NoWorkResult;
      module.exports = NoWorkResult;
      NoWorkResult.default = NoWorkResult;
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/processor.js
  var require_processor2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/processor.js"(exports, module) {
      
      var Document3 = require_document2();
      var LazyResult = require_lazy_result2();
      var NoWorkResult = require_no_work_result2();
      var Root3 = require_root2();
      var _Processor = class _Processor {
        constructor(plugins = []) {
          this.version = "8.5.6";
          this.plugins = this.normalize(plugins);
        }
        normalize(plugins) {
          let normalized = [];
          for (let i12 of plugins) {
            if (i12.postcss === true) {
              i12 = i12();
            } else if (i12.postcss) {
              i12 = i12.postcss;
            }
            if (typeof i12 === "object" && Array.isArray(i12.plugins)) {
              normalized = normalized.concat(i12.plugins);
            } else if (typeof i12 === "object" && i12.postcssPlugin) {
              normalized.push(i12);
            } else if (typeof i12 === "function") {
              normalized.push(i12);
            } else if (typeof i12 === "object" && (i12.parse || i12.stringify)) {
              if (true) {
                throw new Error(
                  "PostCSS syntaxes cannot be used as plugins. Instead, please use one of the syntax/parser/stringifier options as outlined in your PostCSS runner documentation."
                );
              }
            } else {
              throw new Error(i12 + " is not a PostCSS plugin");
            }
          }
          return normalized;
        }
        process(css, opts = {}) {
          if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) {
            return new NoWorkResult(this, css, opts);
          } else {
            return new LazyResult(this, css, opts);
          }
        }
        use(plugin3) {
          this.plugins = this.plugins.concat(this.normalize([plugin3]));
          return this;
        }
      };
      __name(_Processor, "Processor");
      var Processor3 = _Processor;
      module.exports = Processor3;
      Processor3.default = Processor3;
      Root3.registerProcessor(Processor3);
      Document3.registerProcessor(Processor3);
    }
  });

  // ../../contrib/hdbt/node_modules/postcss/lib/postcss.js
  var require_postcss2 = __commonJS({
    "../../contrib/hdbt/node_modules/postcss/lib/postcss.js"(exports, module) {
      
      var AtRule3 = require_at_rule2();
      var Comment4 = require_comment2();
      var Container3 = require_container2();
      var CssSyntaxError3 = require_css_syntax_error2();
      var Declaration3 = require_declaration2();
      var Document3 = require_document2();
      var fromJSON3 = require_fromJSON2();
      var Input3 = require_input2();
      var LazyResult = require_lazy_result2();
      var list3 = require_list2();
      var Node3 = require_node2();
      var parse6 = require_parse2();
      var Processor3 = require_processor2();
      var Result3 = require_result2();
      var Root3 = require_root2();
      var Rule3 = require_rule2();
      var stringify3 = require_stringify2();
      var Warning3 = require_warning2();
      function postcss3(...plugins) {
        if (plugins.length === 1 && Array.isArray(plugins[0])) {
          plugins = plugins[0];
        }
        return new Processor3(plugins);
      }
      __name(postcss3, "postcss");
      postcss3.plugin = /* @__PURE__ */ __name(function plugin3(name, initializer) {
        let warningPrinted = false;
        function creator(...args) {
          if (console && console.warn && !warningPrinted) {
            warningPrinted = true;
            console.warn(
              name + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"
            );
            if (process.env.LANG && process.env.LANG.startsWith("cn")) {
              console.warn(
                name + ": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226"
              );
            }
          }
          let transformer = initializer(...args);
          transformer.postcssPlugin = name;
          transformer.postcssVersion = new Processor3().version;
          return transformer;
        }
        __name(creator, "creator");
        let cache2;
        Object.defineProperty(creator, "postcss", {
          get() {
            if (!cache2) cache2 = creator();
            return cache2;
          }
        });
        creator.process = function(css, processOpts, pluginOpts) {
          return postcss3([creator(pluginOpts)]).process(css, processOpts);
        };
        return creator;
      }, "plugin");
      postcss3.stringify = stringify3;
      postcss3.parse = parse6;
      postcss3.fromJSON = fromJSON3;
      postcss3.list = list3;
      postcss3.comment = (defaults3) => new Comment4(defaults3);
      postcss3.atRule = (defaults3) => new AtRule3(defaults3);
      postcss3.decl = (defaults3) => new Declaration3(defaults3);
      postcss3.rule = (defaults3) => new Rule3(defaults3);
      postcss3.root = (defaults3) => new Root3(defaults3);
      postcss3.document = (defaults3) => new Document3(defaults3);
      postcss3.CssSyntaxError = CssSyntaxError3;
      postcss3.Declaration = Declaration3;
      postcss3.Container = Container3;
      postcss3.Processor = Processor3;
      postcss3.Document = Document3;
      postcss3.Comment = Comment4;
      postcss3.Warning = Warning3;
      postcss3.AtRule = AtRule3;
      postcss3.Result = Result3;
      postcss3.Input = Input3;
      postcss3.Rule = Rule3;
      postcss3.Root = Root3;
      postcss3.Node = Node3;
      LazyResult.registerPostcss(postcss3);
      module.exports = postcss3;
      postcss3.default = postcss3;
    }
  });

  // ../../contrib/hdbt/node_modules/crc-32/crc32.js
  var require_crc322 = __commonJS({
    "../../contrib/hdbt/node_modules/crc-32/crc32.js"(exports) {
      
      var CRC32;
      (function(factory) {
        if (typeof DO_NOT_EXPORT_CRC === "undefined") {
          if ("object" === typeof exports) {
            factory(exports);
          } else if ("function" === typeof define && define.amd) {
            define(function() {
              var module2 = {};
              factory(module2);
              return module2;
            });
          } else {
            factory(CRC32 = {});
          }
        } else {
          factory(CRC32 = {});
        }
      })(function(CRC322) {
        CRC322.version = "1.2.0";
        function signed_crc_table() {
          var c6 = 0, table2 = new Array(256);
          for (var n21 = 0; n21 != 256; ++n21) {
            c6 = n21;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            c6 = c6 & 1 ? -306674912 ^ c6 >>> 1 : c6 >>> 1;
            table2[n21] = c6;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table2) : table2;
        }
        __name(signed_crc_table, "signed_crc_table");
        var T = signed_crc_table();
        function crc32_bstr(bstr, seed) {
          var C2 = seed ^ -1, L2 = bstr.length - 1;
          for (var i12 = 0; i12 < L2; ) {
            C2 = C2 >>> 8 ^ T[(C2 ^ bstr.charCodeAt(i12++)) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ bstr.charCodeAt(i12++)) & 255];
          }
          if (i12 === L2) C2 = C2 >>> 8 ^ T[(C2 ^ bstr.charCodeAt(i12)) & 255];
          return C2 ^ -1;
        }
        __name(crc32_bstr, "crc32_bstr");
        function crc32_buf(buf, seed) {
          if (buf.length > 1e4) return crc32_buf_8(buf, seed);
          var C2 = seed ^ -1, L2 = buf.length - 3;
          for (var i12 = 0; i12 < L2; ) {
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          }
          while (i12 < L2 + 3) C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          return C2 ^ -1;
        }
        __name(crc32_buf, "crc32_buf");
        function crc32_buf_8(buf, seed) {
          var C2 = seed ^ -1, L2 = buf.length - 7;
          for (var i12 = 0; i12 < L2; ) {
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
            C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          }
          while (i12 < L2 + 7) C2 = C2 >>> 8 ^ T[(C2 ^ buf[i12++]) & 255];
          return C2 ^ -1;
        }
        __name(crc32_buf_8, "crc32_buf_8");
        function crc32_str(str, seed) {
          var C2 = seed ^ -1;
          for (var i12 = 0, L2 = str.length, c6, d16; i12 < L2; ) {
            c6 = str.charCodeAt(i12++);
            if (c6 < 128) {
              C2 = C2 >>> 8 ^ T[(C2 ^ c6) & 255];
            } else if (c6 < 2048) {
              C2 = C2 >>> 8 ^ T[(C2 ^ (192 | c6 >> 6 & 31)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 & 63)) & 255];
            } else if (c6 >= 55296 && c6 < 57344) {
              c6 = (c6 & 1023) + 64;
              d16 = str.charCodeAt(i12++) & 1023;
              C2 = C2 >>> 8 ^ T[(C2 ^ (240 | c6 >> 8 & 7)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 >> 2 & 63)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | d16 >> 6 & 15 | (c6 & 3) << 4)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | d16 & 63)) & 255];
            } else {
              C2 = C2 >>> 8 ^ T[(C2 ^ (224 | c6 >> 12 & 15)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 >> 6 & 63)) & 255];
              C2 = C2 >>> 8 ^ T[(C2 ^ (128 | c6 & 63)) & 255];
            }
          }
          return C2 ^ -1;
        }
        __name(crc32_str, "crc32_str");
        CRC322.table = T;
        CRC322.bstr = crc32_bstr;
        CRC322.buf = crc32_buf;
        CRC322.str = crc32_str;
      });
    }
  });

  // ../../contrib/hdbt/node_modules/lodash/lodash.js
  var require_lodash2 = __commonJS({
    "../../contrib/hdbt/node_modules/lodash/lodash.js"(exports, module) {
      
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag2 = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag2] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag2] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          // Latin-1 Supplement block.
          "À": "A",
          "Á": "A",
          "Â": "A",
          "Ã": "A",
          "Ä": "A",
          "Å": "A",
          "à": "a",
          "á": "a",
          "â": "a",
          "ã": "a",
          "ä": "a",
          "å": "a",
          "Ç": "C",
          "ç": "c",
          "Ð": "D",
          "ð": "d",
          "È": "E",
          "É": "E",
          "Ê": "E",
          "Ë": "E",
          "è": "e",
          "é": "e",
          "ê": "e",
          "ë": "e",
          "Ì": "I",
          "Í": "I",
          "Î": "I",
          "Ï": "I",
          "ì": "i",
          "í": "i",
          "î": "i",
          "ï": "i",
          "Ñ": "N",
          "ñ": "n",
          "Ò": "O",
          "Ó": "O",
          "Ô": "O",
          "Õ": "O",
          "Ö": "O",
          "Ø": "O",
          "ò": "o",
          "ó": "o",
          "ô": "o",
          "õ": "o",
          "ö": "o",
          "ø": "o",
          "Ù": "U",
          "Ú": "U",
          "Û": "U",
          "Ü": "U",
          "ù": "u",
          "ú": "u",
          "û": "u",
          "ü": "u",
          "Ý": "Y",
          "ý": "y",
          "ÿ": "y",
          "Æ": "Ae",
          "æ": "ae",
          "Þ": "Th",
          "þ": "th",
          "ß": "ss",
          // Latin Extended-A block.
          "Ā": "A",
          "Ă": "A",
          "Ą": "A",
          "ā": "a",
          "ă": "a",
          "ą": "a",
          "Ć": "C",
          "Ĉ": "C",
          "Ċ": "C",
          "Č": "C",
          "ć": "c",
          "ĉ": "c",
          "ċ": "c",
          "č": "c",
          "Ď": "D",
          "Đ": "D",
          "ď": "d",
          "đ": "d",
          "Ē": "E",
          "Ĕ": "E",
          "Ė": "E",
          "Ę": "E",
          "Ě": "E",
          "ē": "e",
          "ĕ": "e",
          "ė": "e",
          "ę": "e",
          "ě": "e",
          "Ĝ": "G",
          "Ğ": "G",
          "Ġ": "G",
          "Ģ": "G",
          "ĝ": "g",
          "ğ": "g",
          "ġ": "g",
          "ģ": "g",
          "Ĥ": "H",
          "Ħ": "H",
          "ĥ": "h",
          "ħ": "h",
          "Ĩ": "I",
          "Ī": "I",
          "Ĭ": "I",
          "Į": "I",
          "İ": "I",
          "ĩ": "i",
          "ī": "i",
          "ĭ": "i",
          "į": "i",
          "ı": "i",
          "Ĵ": "J",
          "ĵ": "j",
          "Ķ": "K",
          "ķ": "k",
          "ĸ": "k",
          "Ĺ": "L",
          "Ļ": "L",
          "Ľ": "L",
          "Ŀ": "L",
          "Ł": "L",
          "ĺ": "l",
          "ļ": "l",
          "ľ": "l",
          "ŀ": "l",
          "ł": "l",
          "Ń": "N",
          "Ņ": "N",
          "Ň": "N",
          "Ŋ": "N",
          "ń": "n",
          "ņ": "n",
          "ň": "n",
          "ŋ": "n",
          "Ō": "O",
          "Ŏ": "O",
          "Ő": "O",
          "ō": "o",
          "ŏ": "o",
          "ő": "o",
          "Ŕ": "R",
          "Ŗ": "R",
          "Ř": "R",
          "ŕ": "r",
          "ŗ": "r",
          "ř": "r",
          "Ś": "S",
          "Ŝ": "S",
          "Ş": "S",
          "Š": "S",
          "ś": "s",
          "ŝ": "s",
          "ş": "s",
          "š": "s",
          "Ţ": "T",
          "Ť": "T",
          "Ŧ": "T",
          "ţ": "t",
          "ť": "t",
          "ŧ": "t",
          "Ũ": "U",
          "Ū": "U",
          "Ŭ": "U",
          "Ů": "U",
          "Ű": "U",
          "Ų": "U",
          "ũ": "u",
          "ū": "u",
          "ŭ": "u",
          "ů": "u",
          "ű": "u",
          "ų": "u",
          "Ŵ": "W",
          "ŵ": "w",
          "Ŷ": "Y",
          "ŷ": "y",
          "Ÿ": "Y",
          "Ź": "Z",
          "Ż": "Z",
          "Ž": "Z",
          "ź": "z",
          "ż": "z",
          "ž": "z",
          "Ĳ": "IJ",
          "ĳ": "ij",
          "Œ": "Oe",
          "œ": "oe",
          "ŉ": "'n",
          "ſ": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root3 = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e18) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        __name(apply, "apply");
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        __name(arrayAggregator, "arrayAggregator");
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        __name(arrayEach, "arrayEach");
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        __name(arrayEachRight, "arrayEachRight");
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        __name(arrayEvery, "arrayEvery");
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        __name(arrayFilter, "arrayFilter");
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        __name(arrayIncludes, "arrayIncludes");
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        __name(arrayIncludesWith, "arrayIncludesWith");
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        __name(arrayMap, "arrayMap");
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset5 = array.length;
          while (++index < length) {
            array[offset5 + index] = values[index];
          }
          return array;
        }
        __name(arrayPush, "arrayPush");
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        __name(arrayReduce, "arrayReduce");
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        __name(arrayReduceRight, "arrayReduceRight");
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        __name(arraySome, "arraySome");
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        __name(asciiToArray, "asciiToArray");
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        __name(asciiWords, "asciiWords");
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        __name(baseFindKey, "baseFindKey");
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        __name(baseFindIndex, "baseFindIndex");
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        __name(baseIndexOf, "baseIndexOf");
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        __name(baseIndexOfWith, "baseIndexOfWith");
        function baseIsNaN(value) {
          return value !== value;
        }
        __name(baseIsNaN, "baseIsNaN");
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        __name(baseMean, "baseMean");
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        __name(baseProperty, "baseProperty");
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        __name(basePropertyOf, "basePropertyOf");
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        __name(baseReduce, "baseReduce");
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        __name(baseSortBy, "baseSortBy");
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        __name(baseSum, "baseSum");
        function baseTimes(n21, iteratee) {
          var index = -1, result = Array(n21);
          while (++index < n21) {
            result[index] = iteratee(index);
          }
          return result;
        }
        __name(baseTimes, "baseTimes");
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        __name(baseToPairs, "baseToPairs");
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        __name(baseTrim, "baseTrim");
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        __name(baseUnary, "baseUnary");
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        __name(baseValues, "baseValues");
        function cacheHas(cache2, key) {
          return cache2.has(key);
        }
        __name(cacheHas, "cacheHas");
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        __name(charsStartIndex, "charsStartIndex");
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        __name(charsEndIndex, "charsEndIndex");
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        __name(countHolders, "countHolders");
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        __name(escapeStringChar, "escapeStringChar");
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        __name(getValue, "getValue");
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        __name(hasUnicode, "hasUnicode");
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        __name(hasUnicodeWord, "hasUnicodeWord");
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        __name(iteratorToArray, "iteratorToArray");
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        __name(mapToArray, "mapToArray");
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        __name(overArg, "overArg");
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        __name(replaceHolders, "replaceHolders");
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        __name(setToArray, "setToArray");
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        __name(setToPairs, "setToPairs");
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        __name(strictIndexOf, "strictIndexOf");
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        __name(strictLastIndexOf, "strictLastIndexOf");
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        __name(stringSize, "stringSize");
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        __name(stringToArray, "stringToArray");
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        __name(trimmedEndIndex, "trimmedEndIndex");
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        __name(unicodeSize, "unicodeSize");
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        __name(unicodeToArray, "unicodeToArray");
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        __name(unicodeWords, "unicodeWords");
        var runInContext = /* @__PURE__ */ __name(function runInContext2(context) {
          context = context == null ? root3 : _7.defaults(root3.Object(), context, _7.pick(root3, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty3 = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root3._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e18) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root3.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root3.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root3.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty3.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          __name(lodash, "lodash");
          var baseCreate = /* @__PURE__ */ function() {
            function object() {
            }
            __name(object, "object");
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          __name(baseLodash, "baseLodash");
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          __name(LodashWrapper, "LodashWrapper");
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "escape": reEscape,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "evaluate": reEvaluate,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          __name(LazyWrapper, "LazyWrapper");
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          __name(lazyClone, "lazyClone");
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          __name(lazyReverse, "lazyReverse");
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start5 = view.start, end3 = view.end, length = end3 - start5, index = isRight ? end3 : start5 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          __name(lazyValue, "lazyValue");
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          __name(Hash, "Hash");
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          __name(hashClear, "hashClear");
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          __name(hashDelete, "hashDelete");
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty3.call(data, key) ? data[key] : undefined2;
          }
          __name(hashGet, "hashGet");
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty3.call(data, key);
          }
          __name(hashHas, "hashHas");
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          __name(hashSet, "hashSet");
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          __name(ListCache, "ListCache");
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          __name(listCacheClear, "listCacheClear");
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          __name(listCacheDelete, "listCacheDelete");
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          __name(listCacheGet, "listCacheGet");
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          __name(listCacheHas, "listCacheHas");
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          __name(listCacheSet, "listCacheSet");
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          __name(MapCache, "MapCache");
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          __name(mapCacheClear, "mapCacheClear");
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          __name(mapCacheDelete, "mapCacheDelete");
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          __name(mapCacheGet, "mapCacheGet");
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          __name(mapCacheHas, "mapCacheHas");
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          __name(mapCacheSet, "mapCacheSet");
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          __name(SetCache, "SetCache");
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          __name(setCacheAdd, "setCacheAdd");
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          __name(setCacheHas, "setCacheHas");
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          __name(Stack, "Stack");
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          __name(stackClear, "stackClear");
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          __name(stackDelete, "stackDelete");
          function stackGet(key) {
            return this.__data__.get(key);
          }
          __name(stackGet, "stackGet");
          function stackHas(key) {
            return this.__data__.has(key);
          }
          __name(stackHas, "stackHas");
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          __name(stackSet, "stackSet");
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
              isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
              isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
              isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(arrayLikeKeys, "arrayLikeKeys");
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          __name(arraySample, "arraySample");
          function arraySampleSize(array, n21) {
            return shuffleSelf(copyArray(array), baseClamp(n21, 0, array.length));
          }
          __name(arraySampleSize, "arraySampleSize");
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          __name(arrayShuffle, "arrayShuffle");
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          __name(assignMergeValue, "assignMergeValue");
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty3.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          __name(assignValue, "assignValue");
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          __name(assocIndexOf, "assocIndexOf");
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          __name(baseAggregator, "baseAggregator");
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          __name(baseAssign, "baseAssign");
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          __name(baseAssignIn, "baseAssignIn");
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          __name(baseAssignValue, "baseAssignValue");
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get(object, paths[index]);
            }
            return result2;
          }
          __name(baseAt, "baseAt");
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          __name(baseClamp, "baseClamp");
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          __name(baseClone, "baseClone");
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          __name(baseConforms, "baseConforms");
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          __name(baseConformsTo, "baseConformsTo");
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          __name(baseDelay, "baseDelay");
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          __name(baseDifference, "baseDifference");
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          __name(baseEvery, "baseEvery");
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          __name(baseExtremum, "baseExtremum");
          function baseFill(array, value, start5, end3) {
            var length = array.length;
            start5 = toInteger2(start5);
            if (start5 < 0) {
              start5 = -start5 > length ? 0 : length + start5;
            }
            end3 = end3 === undefined2 || end3 > length ? length : toInteger2(end3);
            if (end3 < 0) {
              end3 += length;
            }
            end3 = start5 > end3 ? 0 : toLength(end3);
            while (start5 < end3) {
              array[start5++] = value;
            }
            return array;
          }
          __name(baseFill, "baseFill");
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          __name(baseFilter, "baseFilter");
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          __name(baseFlatten, "baseFlatten");
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          __name(baseForOwn, "baseForOwn");
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          __name(baseForOwnRight, "baseForOwnRight");
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction2(object[key]);
            });
          }
          __name(baseFunctions, "baseFunctions");
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          __name(baseGet, "baseGet");
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          __name(baseGetAllKeys, "baseGetAllKeys");
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString2(value);
          }
          __name(baseGetTag, "baseGetTag");
          function baseGt(value, other) {
            return value > other;
          }
          __name(baseGt, "baseGt");
          function baseHas(object, key) {
            return object != null && hasOwnProperty3.call(object, key);
          }
          __name(baseHas, "baseHas");
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          __name(baseHasIn, "baseHasIn");
          function baseInRange(number, start5, end3) {
            return number >= nativeMin(start5, end3) && number < nativeMax(start5, end3);
          }
          __name(baseInRange, "baseInRange");
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache2 = caches[othIndex];
                    if (!(cache2 ? cacheHas(cache2, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          __name(baseIntersection, "baseIntersection");
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          __name(baseInverter, "baseInverter");
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          __name(baseInvoke, "baseInvoke");
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          __name(baseIsArguments, "baseIsArguments");
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          __name(baseIsArrayBuffer, "baseIsArrayBuffer");
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          __name(baseIsDate, "baseIsDate");
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          __name(baseIsEqual, "baseIsEqual");
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty3.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          __name(baseIsEqualDeep, "baseIsEqualDeep");
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          __name(baseIsMap, "baseIsMap");
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          __name(baseIsMatch, "baseIsMatch");
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          __name(baseIsNative, "baseIsNative");
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          __name(baseIsRegExp, "baseIsRegExp");
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag2;
          }
          __name(baseIsSet, "baseIsSet");
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          __name(baseIsTypedArray, "baseIsTypedArray");
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          __name(baseIteratee, "baseIteratee");
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty3.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(baseKeys, "baseKeys");
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty3.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(baseKeysIn, "baseKeysIn");
          function baseLt(value, other) {
            return value < other;
          }
          __name(baseLt, "baseLt");
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          __name(baseMap, "baseMap");
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          __name(baseMatches, "baseMatches");
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          __name(baseMatchesProperty, "baseMatchesProperty");
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          __name(baseMerge, "baseMerge");
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction2(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          __name(baseMergeDeep, "baseMergeDeep");
          function baseNth(array, n21) {
            var length = array.length;
            if (!length) {
              return;
            }
            n21 += n21 < 0 ? length : 0;
            return isIndex(n21, length) ? array[n21] : undefined2;
          }
          __name(baseNth, "baseNth");
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          __name(baseOrderBy, "baseOrderBy");
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          __name(basePick, "basePick");
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          __name(basePickBy, "basePickBy");
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          __name(basePropertyDeep, "basePropertyDeep");
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          __name(basePullAll, "basePullAll");
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          __name(basePullAt, "basePullAt");
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          __name(baseRandom, "baseRandom");
          function baseRange(start5, end3, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end3 - start5) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start5;
              start5 += step;
            }
            return result2;
          }
          __name(baseRange, "baseRange");
          function baseRepeat(string, n21) {
            var result2 = "";
            if (!string || n21 < 1 || n21 > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n21 % 2) {
                result2 += string;
              }
              n21 = nativeFloor(n21 / 2);
              if (n21) {
                string += string;
              }
            } while (n21);
            return result2;
          }
          __name(baseRepeat, "baseRepeat");
          function baseRest(func, start5) {
            return setToString(overRest(func, start5, identity), func + "");
          }
          __name(baseRest, "baseRest");
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          __name(baseSample, "baseSample");
          function baseSampleSize(collection, n21) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n21, 0, array.length));
          }
          __name(baseSampleSize, "baseSampleSize");
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          __name(baseSet, "baseSet");
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          __name(baseShuffle, "baseShuffle");
          function baseSlice(array, start5, end3) {
            var index = -1, length = array.length;
            if (start5 < 0) {
              start5 = -start5 > length ? 0 : length + start5;
            }
            end3 = end3 > length ? length : end3;
            if (end3 < 0) {
              end3 += length;
            }
            length = start5 > end3 ? 0 : end3 - start5 >>> 0;
            start5 >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start5];
            }
            return result2;
          }
          __name(baseSlice, "baseSlice");
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          __name(baseSome, "baseSome");
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          __name(baseSortedIndex, "baseSortedIndex");
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          __name(baseSortedIndexBy, "baseSortedIndexBy");
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          __name(baseSortedUniq, "baseSortedUniq");
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          __name(baseToNumber, "baseToNumber");
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          __name(baseToString, "baseToString");
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          __name(baseUniq, "baseUniq");
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          __name(baseUnset, "baseUnset");
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          __name(baseUpdate, "baseUpdate");
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          __name(baseWhile, "baseWhile");
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          __name(baseWrapperValue, "baseWrapperValue");
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          __name(baseXor, "baseXor");
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          __name(baseZipObject, "baseZipObject");
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          __name(castArrayLikeObject, "castArrayLikeObject");
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          __name(castFunction, "castFunction");
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          __name(castPath, "castPath");
          var castRest = baseRest;
          function castSlice(array, start5, end3) {
            var length = array.length;
            end3 = end3 === undefined2 ? length : end3;
            return !start5 && end3 >= length ? array : baseSlice(array, start5, end3);
          }
          __name(castSlice, "castSlice");
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root3.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          __name(cloneBuffer, "cloneBuffer");
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          __name(cloneArrayBuffer, "cloneArrayBuffer");
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          __name(cloneDataView, "cloneDataView");
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          __name(cloneRegExp, "cloneRegExp");
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          __name(cloneSymbol, "cloneSymbol");
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          __name(cloneTypedArray, "cloneTypedArray");
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          __name(compareAscending, "compareAscending");
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order3 = orders[index];
                return result2 * (order3 == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          __name(compareMultiple, "compareMultiple");
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          __name(composeArgs, "composeArgs");
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset5 = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset5 + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset5 + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          __name(composeArgsRight, "composeArgsRight");
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          __name(copyArray, "copyArray");
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          __name(copyObject, "copyObject");
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          __name(copySymbols, "copySymbols");
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          __name(copySymbolsIn, "copySymbolsIn");
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          __name(createAggregator, "createAggregator");
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          __name(createAssigner, "createAssigner");
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          __name(createBaseEach, "createBaseEach");
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          __name(createBaseFor, "createBaseFor");
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn3 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
              return fn3.apply(isBind ? thisArg : this, arguments);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createBind, "createBind");
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          __name(createCaseFirst, "createCaseFirst");
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          __name(createCompounder, "createCompounder");
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          __name(createCtor, "createCtor");
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn3 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
              return apply(fn3, this, args);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createCurry, "createCurry");
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = /* @__PURE__ */ __name(function(key) {
                  return iteratee2(iterable[key], key, iterable);
                }, "predicate");
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          __name(createFind, "createFind");
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          __name(createFlow, "createFlow");
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn3 = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root3 && this instanceof wrapper) {
                fn3 = Ctor || createCtor(fn3);
              }
              return fn3.apply(thisBinding, args);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createHybrid, "createHybrid");
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          __name(createInverter, "createInverter");
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          __name(createMathOperation, "createMathOperation");
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          __name(createOver, "createOver");
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          __name(createPadding, "createPadding");
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn3 = this && this !== root3 && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn3, isBind ? thisArg : this, args);
            }
            __name(wrapper, "wrapper");
            return wrapper;
          }
          __name(createPartial, "createPartial");
          function createRange(fromRight) {
            return function(start5, end3, step) {
              if (step && typeof step != "number" && isIterateeCall(start5, end3, step)) {
                end3 = step = undefined2;
              }
              start5 = toFinite(start5);
              if (end3 === undefined2) {
                end3 = start5;
                start5 = 0;
              } else {
                end3 = toFinite(end3);
              }
              step = step === undefined2 ? start5 < end3 ? 1 : -1 : toFinite(step);
              return baseRange(start5, end3, step, fromRight);
            };
          }
          __name(createRange, "createRange");
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          __name(createRelationalOperation, "createRelationalOperation");
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          __name(createRecurry, "createRecurry");
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger2(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          __name(createRound, "createRound");
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag2) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          __name(createToPairs, "createToPairs");
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger2(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger2(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          __name(createWrap, "createWrap");
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty3.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          __name(customDefaultsAssignIn, "customDefaultsAssignIn");
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          __name(customDefaultsMerge, "customDefaultsMerge");
          function customOmitClone(value) {
            return isPlainObject2(value) ? undefined2 : value;
          }
          __name(customOmitClone, "customOmitClone");
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          __name(equalArrays, "equalArrays");
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert2 = mapToArray;
              case setTag2:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert2 || (convert2 = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          __name(equalByTag, "equalByTag");
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty3.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          __name(equalObjects, "equalObjects");
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          __name(flatRest, "flatRest");
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          __name(getAllKeys, "getAllKeys");
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          __name(getAllKeysIn, "getAllKeysIn");
          var getData = !metaMap ? noop4 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty3.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          __name(getFuncName, "getFuncName");
          function getHolder(func) {
            var object = hasOwnProperty3.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          __name(getHolder, "getHolder");
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          __name(getIteratee, "getIteratee");
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          __name(getMapData, "getMapData");
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          __name(getMatchData, "getMatchData");
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          __name(getNative, "getNative");
          function getRawTag(value) {
            var isOwn = hasOwnProperty3.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e18) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          __name(getRawTag, "getRawTag");
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag2 || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = /* @__PURE__ */ __name(function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag2;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            }, "getTag");
          }
          function getView(start5, end3, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start5 += size2;
                  break;
                case "dropRight":
                  end3 -= size2;
                  break;
                case "take":
                  end3 = nativeMin(end3, start5 + size2);
                  break;
                case "takeRight":
                  start5 = nativeMax(start5, end3 - size2);
                  break;
              }
            }
            return { "start": start5, "end": end3 };
          }
          __name(getView, "getView");
          function getWrapDetails(source) {
            var match4 = source.match(reWrapDetails);
            return match4 ? match4[1].split(reSplitDetails) : [];
          }
          __name(getWrapDetails, "getWrapDetails");
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          __name(hasPath, "hasPath");
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty3.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          __name(initCloneArray, "initCloneArray");
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          __name(initCloneObject, "initCloneObject");
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag2:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          __name(initCloneByTag, "initCloneByTag");
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          __name(insertWrapDetails, "insertWrapDetails");
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          __name(isFlattenable, "isFlattenable");
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          __name(isIndex, "isIndex");
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          __name(isIterateeCall, "isIterateeCall");
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          __name(isKey, "isKey");
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          __name(isKeyable, "isKeyable");
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          __name(isLaziable, "isLaziable");
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          __name(isMasked, "isMasked");
          var isMaskable = coreJsData ? isFunction2 : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          __name(isPrototype, "isPrototype");
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          __name(isStrictComparable, "isStrictComparable");
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          __name(matchesStrictComparable, "matchesStrictComparable");
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache2.size === MAX_MEMOIZE_SIZE) {
                cache2.clear();
              }
              return key;
            });
            var cache2 = result2.cache;
            return result2;
          }
          __name(memoizeCapped, "memoizeCapped");
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          __name(mergeData, "mergeData");
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          __name(nativeKeysIn, "nativeKeysIn");
          function objectToString2(value) {
            return nativeObjectToString.call(value);
          }
          __name(objectToString2, "objectToString");
          function overRest(func, start5, transform2) {
            start5 = nativeMax(start5 === undefined2 ? func.length - 1 : start5, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start5, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start5 + index];
              }
              index = -1;
              var otherArgs = Array2(start5 + 1);
              while (++index < start5) {
                otherArgs[index] = args[index];
              }
              otherArgs[start5] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          __name(overRest, "overRest");
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          __name(parent, "parent");
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          __name(reorder, "reorder");
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          __name(safeGet, "safeGet");
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root3.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference3, bitmask) {
            var source = reference3 + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          __name(setWrapToString, "setWrapToString");
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          __name(shortOut, "shortOut");
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          __name(shuffleSelf, "shuffleSelf");
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match4, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match4);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          __name(toKey, "toKey");
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e18) {
              }
              try {
                return func + "";
              } catch (e18) {
              }
            }
            return "";
          }
          __name(toSource, "toSource");
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          __name(updateWrapDetails, "updateWrapDetails");
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          __name(wrapperClone, "wrapperClone");
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger2(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          __name(chunk, "chunk");
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          __name(compact, "compact");
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          __name(concat, "concat");
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n21, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            return baseSlice(array, n21 < 0 ? 0 : n21, length);
          }
          __name(drop, "drop");
          function dropRight(array, n21, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            n21 = length - n21;
            return baseSlice(array, 0, n21 < 0 ? 0 : n21);
          }
          __name(dropRight, "dropRight");
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          __name(dropRightWhile, "dropRightWhile");
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          __name(dropWhile, "dropWhile");
          function fill(array, value, start5, end3) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start5 && typeof start5 != "number" && isIterateeCall(array, value, start5)) {
              start5 = 0;
              end3 = length;
            }
            return baseFill(array, value, start5, end3);
          }
          __name(fill, "fill");
          function findIndex4(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger2(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          __name(findIndex4, "findIndex");
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger2(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          __name(findLastIndex, "findLastIndex");
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          __name(flatten, "flatten");
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          __name(flattenDeep, "flattenDeep");
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger2(depth);
            return baseFlatten(array, depth);
          }
          __name(flattenDepth, "flattenDepth");
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          __name(fromPairs, "fromPairs");
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          __name(head, "head");
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger2(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          __name(indexOf, "indexOf");
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          __name(initial, "initial");
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          __name(join, "join");
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          __name(last, "last");
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger2(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          __name(lastIndexOf, "lastIndexOf");
          function nth(array, n21) {
            return array && array.length ? baseNth(array, toInteger2(n21)) : undefined2;
          }
          __name(nth, "nth");
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          __name(pullAll, "pullAll");
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          __name(pullAllBy, "pullAllBy");
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          __name(pullAllWith, "pullAllWith");
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          __name(remove, "remove");
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          __name(reverse, "reverse");
          function slice(array, start5, end3) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end3 && typeof end3 != "number" && isIterateeCall(array, start5, end3)) {
              start5 = 0;
              end3 = length;
            } else {
              start5 = start5 == null ? 0 : toInteger2(start5);
              end3 = end3 === undefined2 ? length : toInteger2(end3);
            }
            return baseSlice(array, start5, end3);
          }
          __name(slice, "slice");
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          __name(sortedIndex, "sortedIndex");
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          __name(sortedIndexBy, "sortedIndexBy");
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          __name(sortedIndexOf, "sortedIndexOf");
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          __name(sortedLastIndex, "sortedLastIndex");
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          __name(sortedLastIndexBy, "sortedLastIndexBy");
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          __name(sortedLastIndexOf, "sortedLastIndexOf");
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          __name(sortedUniq, "sortedUniq");
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          __name(sortedUniqBy, "sortedUniqBy");
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          __name(tail, "tail");
          function take(array, n21, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            return baseSlice(array, 0, n21 < 0 ? 0 : n21);
          }
          __name(take, "take");
          function takeRight(array, n21, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n21 = guard || n21 === undefined2 ? 1 : toInteger2(n21);
            n21 = length - n21;
            return baseSlice(array, n21 < 0 ? 0 : n21, length);
          }
          __name(takeRight, "takeRight");
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          __name(takeRightWhile, "takeRightWhile");
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          __name(takeWhile, "takeWhile");
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          __name(uniq, "uniq");
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          __name(uniqBy, "uniqBy");
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          __name(uniqWith, "uniqWith");
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          __name(unzip, "unzip");
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          __name(unzipWith, "unzipWith");
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          __name(zipObject, "zipObject");
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          __name(zipObjectDeep, "zipObjectDeep");
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          __name(chain, "chain");
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          __name(tap, "tap");
          function thru(value, interceptor) {
            return interceptor(value);
          }
          __name(thru, "thru");
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start5 = length ? paths[0] : 0, value = this.__wrapped__, interceptor = /* @__PURE__ */ __name(function(object) {
              return baseAt(object, paths);
            }, "interceptor");
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start5)) {
              return this.thru(interceptor);
            }
            value = value.slice(start5, +start5 + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          __name(wrapperChain, "wrapperChain");
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          __name(wrapperCommit, "wrapperCommit");
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray3(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          __name(wrapperNext, "wrapperNext");
          function wrapperToIterator() {
            return this;
          }
          __name(wrapperToIterator, "wrapperToIterator");
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone6 = wrapperClone(parent2);
              clone6.__index__ = 0;
              clone6.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone6;
              } else {
                result2 = clone6;
              }
              var previous = clone6;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          __name(wrapperPlant, "wrapperPlant");
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          __name(wrapperReverse, "wrapperReverse");
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          __name(wrapperValue, "wrapperValue");
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty3.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          __name(every, "every");
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          __name(filter, "filter");
          var find = createFind(findIndex4);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          __name(flatMap, "flatMap");
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          __name(flatMapDeep, "flatMapDeep");
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger2(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          __name(flatMapDepth, "flatMapDepth");
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          __name(forEach, "forEach");
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          __name(forEachRight, "forEachRight");
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty3.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString4(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          __name(includes, "includes");
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          __name(map, "map");
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          __name(orderBy, "orderBy");
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          __name(reduce, "reduce");
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          __name(reduceRight, "reduceRight");
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          __name(reject, "reject");
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          __name(sample, "sample");
          function sampleSize(collection, n21, guard) {
            if (guard ? isIterateeCall(collection, n21, guard) : n21 === undefined2) {
              n21 = 1;
            } else {
              n21 = toInteger2(n21);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n21);
          }
          __name(sampleSize, "sampleSize");
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          __name(shuffle, "shuffle");
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString4(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag2) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          __name(size, "size");
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          __name(some, "some");
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now3 = ctxNow || function() {
            return root3.Date.now();
          };
          function after(n21, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n21 = toInteger2(n21);
            return function() {
              if (--n21 < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          __name(after, "after");
          function ary(func, n21, guard) {
            n21 = guard ? undefined2 : n21;
            n21 = func && n21 == null ? func.length : n21;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n21);
          }
          __name(ary, "ary");
          function before(n21, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n21 = toInteger2(n21);
            return function() {
              if (--n21 > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n21 <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          __name(before, "before");
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          __name(curry, "curry");
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          __name(curryRight, "curryRight");
          function debounce3(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            __name(invokeFunc, "invokeFunc");
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            __name(leadingEdge, "leadingEdge");
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            __name(remainingWait, "remainingWait");
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            __name(shouldInvoke, "shouldInvoke");
            function timerExpired() {
              var time = now3();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            __name(timerExpired, "timerExpired");
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            __name(trailingEdge, "trailingEdge");
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            __name(cancel, "cancel");
            function flush4() {
              return timerId === undefined2 ? result2 : trailingEdge(now3());
            }
            __name(flush4, "flush");
            function debounced() {
              var time = now3(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            __name(debounced, "debounced");
            debounced.cancel = cancel;
            debounced.flush = flush4;
            return debounced;
          }
          __name(debounce3, "debounce");
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip3(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          __name(flip3, "flip");
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = /* @__PURE__ */ __name(function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
              if (cache2.has(key)) {
                return cache2.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache2.set(key, result2) || cache2;
              return result2;
            }, "memoized");
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          __name(memoize, "memoize");
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          __name(negate, "negate");
          function once3(func) {
            return before(2, func);
          }
          __name(once3, "once");
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start5) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start5 = start5 === undefined2 ? start5 : toInteger2(start5);
            return baseRest(func, start5);
          }
          __name(rest, "rest");
          function spread(func, start5) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start5 = start5 == null ? 0 : nativeMax(toInteger2(start5), 0);
            return baseRest(function(args) {
              var array = args[start5], otherArgs = castSlice(args, 0, start5);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          __name(spread, "spread");
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce3(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          __name(throttle, "throttle");
          function unary(func) {
            return ary(func, 1);
          }
          __name(unary, "unary");
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          __name(wrap, "wrap");
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          __name(castArray, "castArray");
          function clone5(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          __name(clone5, "clone");
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          __name(cloneWith, "cloneWith");
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          __name(cloneDeep, "cloneDeep");
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          __name(cloneDeepWith, "cloneDeepWith");
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          __name(conformsTo, "conformsTo");
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          __name(eq, "eq");
          var gt3 = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(/* @__PURE__ */ function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty3.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction2(value);
          }
          __name(isArrayLike, "isArrayLike");
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          __name(isArrayLikeObject, "isArrayLikeObject");
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          __name(isBoolean, "isBoolean");
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate3 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement4(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
          }
          __name(isElement4, "isElement");
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag2) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty3.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          __name(isEmpty, "isEmpty");
          function isEqual5(value, other) {
            return baseIsEqual(value, other);
          }
          __name(isEqual5, "isEqual");
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          __name(isEqualWith, "isEqualWith");
          function isError2(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
          }
          __name(isError2, "isError");
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          __name(isFinite2, "isFinite");
          function isFunction2(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          __name(isFunction2, "isFunction");
          function isInteger3(value) {
            return typeof value == "number" && value == toInteger2(value);
          }
          __name(isInteger3, "isInteger");
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          __name(isLength, "isLength");
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          __name(isObject, "isObject");
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          __name(isObjectLike, "isObjectLike");
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          __name(isMatch, "isMatch");
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          __name(isMatchWith, "isMatchWith");
          function isNaN2(value) {
            return isNumber3(value) && value != +value;
          }
          __name(isNaN2, "isNaN");
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          __name(isNative, "isNative");
          function isNull(value) {
            return value === null;
          }
          __name(isNull, "isNull");
          function isNil(value) {
            return value == null;
          }
          __name(isNil, "isNil");
          function isNumber3(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          __name(isNumber3, "isNumber");
          function isPlainObject2(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty3.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          __name(isPlainObject2, "isPlainObject");
          var isRegExp2 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger3(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          __name(isSafeInteger, "isSafeInteger");
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString4(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          __name(isString4, "isString");
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          __name(isSymbol, "isSymbol");
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined4(value) {
            return value === undefined2;
          }
          __name(isUndefined4, "isUndefined");
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          __name(isWeakMap, "isWeakMap");
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          __name(isWeakSet, "isWeakSet");
          var lt3 = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray3(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString4(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag2 ? setToArray : values;
            return func(value);
          }
          __name(toArray3, "toArray");
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          __name(toFinite, "toFinite");
          function toInteger2(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          __name(toInteger2, "toInteger");
          function toLength(value) {
            return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          __name(toLength, "toLength");
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          __name(toNumber, "toNumber");
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          __name(toPlainObject, "toPlainObject");
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger2(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          __name(toSafeInteger, "toSafeInteger");
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          __name(toString, "toString");
          var assign4 = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty3.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at3 = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          __name(create, "create");
          var defaults3 = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty3.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey2(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          __name(findKey2, "findKey");
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          __name(findLastKey, "findLastKey");
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          __name(forIn, "forIn");
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          __name(forInRight, "forInRight");
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          __name(forOwn, "forOwn");
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          __name(forOwnRight, "forOwnRight");
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          __name(functions, "functions");
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          __name(functionsIn, "functionsIn");
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          __name(get, "get");
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          __name(has, "has");
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          __name(hasIn, "hasIn");
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty3.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          __name(keys, "keys");
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          __name(keysIn, "keysIn");
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          __name(mapKeys, "mapKeys");
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          __name(mapValues, "mapValues");
          var merge2 = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          __name(omitBy, "omitBy");
          var pick3 = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          __name(pickBy, "pickBy");
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction2(value) ? value.call(object) : value;
            }
            return object;
          }
          __name(result, "result");
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          __name(set, "set");
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          __name(setWith, "setWith");
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          __name(transform, "transform");
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          __name(unset, "unset");
          function update5(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          __name(update5, "update");
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          __name(updateWith, "updateWith");
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          __name(values, "values");
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          __name(valuesIn, "valuesIn");
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          __name(clamp, "clamp");
          function inRange(number, start5, end3) {
            start5 = toFinite(start5);
            if (end3 === undefined2) {
              end3 = start5;
              start5 = 0;
            } else {
              end3 = toFinite(end3);
            }
            number = toNumber(number);
            return baseInRange(number, start5, end3);
          }
          __name(inRange, "inRange");
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          __name(random, "random");
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          __name(capitalize, "capitalize");
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          __name(deburr, "deburr");
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger2(position), 0, length);
            var end3 = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end3) == target;
          }
          __name(endsWith, "endsWith");
          function escape2(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          __name(escape2, "escape");
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          __name(escapeRegExp, "escapeRegExp");
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger2(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          __name(pad, "pad");
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger2(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          __name(padEnd, "padEnd");
          function padStart3(string, length, chars) {
            string = toString(string);
            length = toInteger2(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          __name(padStart3, "padStart");
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          __name(parseInt2, "parseInt");
          function repeat(string, n21, guard) {
            if (guard ? isIterateeCall(string, n21, guard) : n21 === undefined2) {
              n21 = 1;
            } else {
              n21 = toInteger2(n21);
            }
            return baseRepeat(toString(string), n21);
          }
          __name(repeat, "repeat");
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          __name(replace, "replace");
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp2(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          __name(split, "split");
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger2(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          __name(startsWith, "startsWith");
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate3 = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate3.source + "|" + (interpolate3 === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty3.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match4, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset5) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset5).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset5 + match4.length;
              return match4;
            });
            source += "';\n";
            var variable = hasOwnProperty3.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError2(result2)) {
              throw result2;
            }
            return result2;
          }
          __name(template, "template");
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          __name(toLower, "toLower");
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          __name(toUpper, "toUpper");
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start5 = charsStartIndex(strSymbols, chrSymbols), end3 = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start5, end3).join("");
          }
          __name(trim, "trim");
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end3 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end3).join("");
          }
          __name(trimEnd, "trimEnd");
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start5 = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start5).join("");
          }
          __name(trimStart, "trimStart");
          function truncate2(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger2(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end3 = length - stringSize(omission);
            if (end3 < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end3).join("") : string.slice(0, end3);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end3 += result2.length - end3;
            }
            if (isRegExp2(separator)) {
              if (string.slice(end3).search(separator)) {
                var match4, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match4 = separator.exec(substring)) {
                  var newEnd = match4.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end3 : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end3) != end3) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          __name(truncate2, "truncate");
          function unescape2(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          __name(unescape2, "unescape");
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          __name(words, "words");
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e18) {
              return isError2(e18) ? e18 : new Error2(e18);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          __name(cond, "cond");
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          __name(conforms, "conforms");
          function constant(value) {
            return function() {
              return value;
            };
          }
          __name(constant, "constant");
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          __name(defaultTo, "defaultTo");
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          __name(identity, "identity");
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          __name(iteratee, "iteratee");
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          __name(matches, "matches");
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          __name(matchesProperty, "matchesProperty");
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          __name(mixin, "mixin");
          function noConflict() {
            if (root3._ === this) {
              root3._ = oldDash;
            }
            return this;
          }
          __name(noConflict, "noConflict");
          function noop4() {
          }
          __name(noop4, "noop");
          function nthArg(n21) {
            n21 = toInteger2(n21);
            return baseRest(function(args) {
              return baseNth(args, n21);
            });
          }
          __name(nthArg, "nthArg");
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          __name(property, "property");
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          __name(propertyOf, "propertyOf");
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          __name(stubArray, "stubArray");
          function stubFalse() {
            return false;
          }
          __name(stubFalse, "stubFalse");
          function stubObject() {
            return {};
          }
          __name(stubObject, "stubObject");
          function stubString() {
            return "";
          }
          __name(stubString, "stubString");
          function stubTrue() {
            return true;
          }
          __name(stubTrue, "stubTrue");
          function times(n21, iteratee2) {
            n21 = toInteger2(n21);
            if (n21 < 1 || n21 > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n21, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n21 -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n21) {
              iteratee2(index);
            }
            return result2;
          }
          __name(times, "times");
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          __name(toPath, "toPath");
          function uniqueId(prefix3) {
            var id = ++idCounter;
            return toString(prefix3) + id;
          }
          __name(uniqueId, "uniqueId");
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max3(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          __name(max3, "max");
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          __name(maxBy, "maxBy");
          function mean(array) {
            return baseMean(array, identity);
          }
          __name(mean, "mean");
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          __name(meanBy, "meanBy");
          function min3(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          __name(min3, "min");
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          __name(minBy, "minBy");
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round3 = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          __name(sum, "sum");
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          __name(sumBy, "sumBy");
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign4;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at3;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce3;
          lodash.defaults = defaults3;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip3;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge2;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once3;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick3;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray3;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update5;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone5;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape2;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex4;
          lodash.findKey = findKey2;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt3;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate3;
          lodash.isElement = isElement4;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual5;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError2;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction2;
          lodash.isInteger = isInteger3;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber3;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject2;
          lodash.isRegExp = isRegExp2;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString4;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined4;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt3;
          lodash.lte = lte;
          lodash.max = max3;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min3;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop4;
          lodash.now = now3;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart3;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round3;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger2;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate2;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty3.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n21) {
              n21 = n21 === undefined2 ? 1 : nativeMax(toInteger2(n21), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n21, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n21, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n21) {
              return this.reverse()[methodName](n21).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start5, end3) {
            start5 = toInteger2(start5);
            var result2 = this;
            if (result2.__filtered__ && (start5 > 0 || end3 < 0)) {
              return new LazyWrapper(result2);
            }
            if (start5 < 0) {
              result2 = result2.takeRight(-start5);
            } else if (start5) {
              result2 = result2.drop(start5);
            }
            if (end3 !== undefined2) {
              end3 = toInteger2(end3);
              result2 = end3 < 0 ? result2.dropRight(-end3) : result2.take(end3 - start5);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = /* @__PURE__ */ __name(function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              }, "interceptor");
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty3.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        }, "runInContext");
        var _7 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root3._ = _7;
          define(function() {
            return _7;
          });
        } else if (freeModule) {
          (freeModule.exports = _7)._ = _7;
          freeExports._ = _7;
        } else {
          root3._ = _7;
        }
      }).call(exports);
    }
  });

  // ../../contrib/hdbt/node_modules/react-fast-compare/index.js
  var require_react_fast_compare2 = __commonJS({
    "../../contrib/hdbt/node_modules/react-fast-compare/index.js"(exports, module) {
      
      var hasElementType = typeof Element !== "undefined";
      var hasMap = typeof Map === "function";
      var hasSet = typeof Set === "function";
      var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
      function equal(a21, b6) {
        if (a21 === b6) return true;
        if (a21 && b6 && typeof a21 == "object" && typeof b6 == "object") {
          if (a21.constructor !== b6.constructor) return false;
          var length, i12, keys;
          if (Array.isArray(a21)) {
            length = a21.length;
            if (length != b6.length) return false;
            for (i12 = length; i12-- !== 0; )
              if (!equal(a21[i12], b6[i12])) return false;
            return true;
          }
          var it3;
          if (hasMap && a21 instanceof Map && b6 instanceof Map) {
            if (a21.size !== b6.size) return false;
            it3 = a21.entries();
            while (!(i12 = it3.next()).done)
              if (!b6.has(i12.value[0])) return false;
            it3 = a21.entries();
            while (!(i12 = it3.next()).done)
              if (!equal(i12.value[1], b6.get(i12.value[0]))) return false;
            return true;
          }
          if (hasSet && a21 instanceof Set && b6 instanceof Set) {
            if (a21.size !== b6.size) return false;
            it3 = a21.entries();
            while (!(i12 = it3.next()).done)
              if (!b6.has(i12.value[0])) return false;
            return true;
          }
          if (hasArrayBuffer && ArrayBuffer.isView(a21) && ArrayBuffer.isView(b6)) {
            length = a21.length;
            if (length != b6.length) return false;
            for (i12 = length; i12-- !== 0; )
              if (a21[i12] !== b6[i12]) return false;
            return true;
          }
          if (a21.constructor === RegExp) return a21.source === b6.source && a21.flags === b6.flags;
          if (a21.valueOf !== Object.prototype.valueOf) return a21.valueOf() === b6.valueOf();
          if (a21.toString !== Object.prototype.toString) return a21.toString() === b6.toString();
          keys = Object.keys(a21);
          length = keys.length;
          if (length !== Object.keys(b6).length) return false;
          for (i12 = length; i12-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b6, keys[i12])) return false;
          if (hasElementType && a21 instanceof Element) return false;
          for (i12 = length; i12-- !== 0; ) {
            if ((keys[i12] === "_owner" || keys[i12] === "__v" || keys[i12] === "__o") && a21.$$typeof) {
              continue;
            }
            if (!equal(a21[keys[i12]], b6[keys[i12]])) return false;
          }
          return true;
        }
        return a21 !== a21 && b6 !== b6;
      }
      __name(equal, "equal");
      module.exports = /* @__PURE__ */ __name(function isEqual5(a21, b6) {
        try {
          return equal(a21, b6);
        } catch (error2) {
          if ((error2.message || "").match(/stack|recursion/i)) {
            console.warn("react-fast-compare cannot handle circular refs");
            return false;
          }
          throw error2;
        }
      }, "isEqual");
    }
  });

  // ../../contrib/hdbt/node_modules/cookie/index.js
  var require_cookie2 = __commonJS({
    "../../contrib/hdbt/node_modules/cookie/index.js"(exports) {
      
      exports.parse = parse6;
      exports.serialize = serialize2;
      var decode = decodeURIComponent;
      var encode = encodeURIComponent;
      var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
      function parse6(str, options) {
        if (typeof str !== "string") {
          throw new TypeError("argument str must be a string");
        }
        var obj = {};
        var opt = options || {};
        var pairs = str.split(";");
        var dec = opt.decode || decode;
        for (var i12 = 0; i12 < pairs.length; i12++) {
          var pair = pairs[i12];
          var index = pair.indexOf("=");
          if (index < 0) {
            continue;
          }
          var key = pair.substring(0, index).trim();
          if (void 0 == obj[key]) {
            var val = pair.substring(index + 1, pair.length).trim();
            if (val[0] === '"') {
              val = val.slice(1, -1);
            }
            obj[key] = tryDecode(val, dec);
          }
        }
        return obj;
      }
      __name(parse6, "parse");
      function serialize2(name, val, options) {
        var opt = options || {};
        var enc = opt.encode || encode;
        if (typeof enc !== "function") {
          throw new TypeError("option encode is invalid");
        }
        if (!fieldContentRegExp.test(name)) {
          throw new TypeError("argument name is invalid");
        }
        var value = enc(val);
        if (value && !fieldContentRegExp.test(value)) {
          throw new TypeError("argument val is invalid");
        }
        var str = name + "=" + value;
        if (null != opt.maxAge) {
          var maxAge = opt.maxAge - 0;
          if (isNaN(maxAge) || !isFinite(maxAge)) {
            throw new TypeError("option maxAge is invalid");
          }
          str += "; Max-Age=" + Math.floor(maxAge);
        }
        if (opt.domain) {
          if (!fieldContentRegExp.test(opt.domain)) {
            throw new TypeError("option domain is invalid");
          }
          str += "; Domain=" + opt.domain;
        }
        if (opt.path) {
          if (!fieldContentRegExp.test(opt.path)) {
            throw new TypeError("option path is invalid");
          }
          str += "; Path=" + opt.path;
        }
        if (opt.expires) {
          if (typeof opt.expires.toUTCString !== "function") {
            throw new TypeError("option expires is invalid");
          }
          str += "; Expires=" + opt.expires.toUTCString();
        }
        if (opt.httpOnly) {
          str += "; HttpOnly";
        }
        if (opt.secure) {
          str += "; Secure";
        }
        if (opt.sameSite) {
          var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
          switch (sameSite) {
            case true:
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError("option sameSite is invalid");
          }
        }
        return str;
      }
      __name(serialize2, "serialize");
      function tryDecode(str, decode2) {
        try {
          return decode2(str);
        } catch (e18) {
          return str;
        }
      }
      __name(tryDecode, "tryDecode");
    }
  });

  // ../../contrib/hdbt/node_modules/crypto-js/core.js
  var require_core2 = __commonJS({
    "../../contrib/hdbt/node_modules/crypto-js/core.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define([], factory);
        } else {
          root3.CryptoJS = factory();
        }
      })(exports, function() {
        var CryptoJS3 = CryptoJS3 || function(Math2, undefined2) {
          var crypto;
          if (typeof window !== "undefined" && window.crypto) {
            crypto = window.crypto;
          }
          if (typeof self !== "undefined" && self.crypto) {
            crypto = self.crypto;
          }
          if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto = globalThis.crypto;
          }
          if (!crypto && typeof window !== "undefined" && window.msCrypto) {
            crypto = window.msCrypto;
          }
          if (!crypto && typeof global !== "undefined" && global.crypto) {
            crypto = global.crypto;
          }
          if (!crypto && typeof __require === "function") {
            try {
              crypto = require_crypto();
            } catch (err) {
            }
          }
          var cryptoSecureRandomInt = /* @__PURE__ */ __name(function() {
            if (crypto) {
              if (typeof crypto.getRandomValues === "function") {
                try {
                  return crypto.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {
                }
              }
              if (typeof crypto.randomBytes === "function") {
                try {
                  return crypto.randomBytes(4).readInt32LE();
                } catch (err) {
                }
              }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
          }, "cryptoSecureRandomInt");
          var create = Object.create || /* @__PURE__ */ function() {
            function F3() {
            }
            __name(F3, "F");
            return function(obj) {
              var subtype;
              F3.prototype = obj;
              subtype = new F3();
              F3.prototype = null;
              return subtype;
            };
          }();
          var C2 = {};
          var C_lib = C2.lib = {};
          var Base = C_lib.Base = /* @__PURE__ */ function() {
            return {
              /**
               * Creates a new object that inherits from this object.
               *
               * @param {Object} overrides Properties to copy into the new object.
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         field: 'value',
               *
               *         method: function () {
               *         }
               *     });
               */
              extend: /* @__PURE__ */ __name(function(overrides) {
                var subtype = create(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              }, "extend"),
              /**
               * Extends this object and runs the init method.
               * Arguments to create() will be passed to init().
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var instance = MyType.create();
               */
              create: /* @__PURE__ */ __name(function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              }, "create"),
              /**
               * Initializes a newly created object.
               * Override this method to add some logic when your objects are created.
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         init: function () {
               *             // ...
               *         }
               *     });
               */
              init: /* @__PURE__ */ __name(function() {
              }, "init"),
              /**
               * Copies properties into this object.
               *
               * @param {Object} properties The properties to mix in.
               *
               * @example
               *
               *     MyType.mixIn({
               *         field: 'value'
               *     });
               */
              mixIn: /* @__PURE__ */ __name(function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              }, "mixIn"),
              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = instance.clone();
               */
              clone: /* @__PURE__ */ __name(function() {
                return this.init.prototype.extend(this);
              }, "clone")
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: /* @__PURE__ */ __name(function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined2) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            }, "init"),
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: /* @__PURE__ */ __name(function(encoder) {
              return (encoder || Hex).stringify(this);
            }, "toString"),
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: /* @__PURE__ */ __name(function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i12 = 0; i12 < thatSigBytes; i12++) {
                  var thatByte = thatWords[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                  thisWords[thisSigBytes + i12 >>> 2] |= thatByte << 24 - (thisSigBytes + i12) % 4 * 8;
                }
              } else {
                for (var j2 = 0; j2 < thatSigBytes; j2 += 4) {
                  thisWords[thisSigBytes + j2 >>> 2] = thatWords[j2 >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            }, "concat"),
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: /* @__PURE__ */ __name(function() {
              var words = this.words;
              var sigBytes = this.sigBytes;
              words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words.length = Math2.ceil(sigBytes / 4);
            }, "clamp"),
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: /* @__PURE__ */ __name(function() {
              var clone5 = Base.clone.call(this);
              clone5.words = this.words.slice(0);
              return clone5;
            }, "clone"),
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: /* @__PURE__ */ __name(function(nBytes) {
              var words = [];
              for (var i12 = 0; i12 < nBytes; i12 += 4) {
                words.push(cryptoSecureRandomInt());
              }
              return new WordArray.init(words, nBytes);
            }, "random")
          });
          var C_enc = C2.enc = {};
          var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i12 = 0; i12 < sigBytes; i12++) {
                var bite = words[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            }, "stringify"),
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: /* @__PURE__ */ __name(function(hexStr) {
              var hexStrLength = hexStr.length;
              var words = [];
              for (var i12 = 0; i12 < hexStrLength; i12 += 2) {
                words[i12 >>> 3] |= parseInt(hexStr.substr(i12, 2), 16) << 24 - i12 % 8 * 4;
              }
              return new WordArray.init(words, hexStrLength / 2);
            }, "parse")
          };
          var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i12 = 0; i12 < sigBytes; i12++) {
                var bite = words[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            }, "stringify"),
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: /* @__PURE__ */ __name(function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words = [];
              for (var i12 = 0; i12 < latin1StrLength; i12++) {
                words[i12 >>> 2] |= (latin1Str.charCodeAt(i12) & 255) << 24 - i12 % 4 * 8;
              }
              return new WordArray.init(words, latin1StrLength);
            }, "parse")
          };
          var Utf83 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e18) {
                throw new Error("Malformed UTF-8 data");
              }
            }, "stringify"),
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: /* @__PURE__ */ __name(function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }, "parse")
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: /* @__PURE__ */ __name(function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            }, "reset"),
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: /* @__PURE__ */ __name(function(data) {
              if (typeof data == "string") {
                data = Utf83.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            }, "_append"),
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: /* @__PURE__ */ __name(function(doFlush) {
              var processedWords;
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset5 = 0; offset5 < nWordsReady; offset5 += blockSize) {
                  this._doProcessBlock(dataWords, offset5);
                }
                processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            }, "_process"),
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: /* @__PURE__ */ __name(function() {
              var clone5 = Base.clone.call(this);
              clone5._data = this._data.clone();
              return clone5;
            }, "clone"),
            _minBufferSize: 0
          });
          var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: /* @__PURE__ */ __name(function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            }, "init"),
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: /* @__PURE__ */ __name(function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            }, "reset"),
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: /* @__PURE__ */ __name(function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            }, "update"),
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: /* @__PURE__ */ __name(function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash5 = this._doFinalize();
              return hash5;
            }, "finalize"),
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: /* @__PURE__ */ __name(function(hasher) {
              return function(message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            }, "_createHelper"),
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: /* @__PURE__ */ __name(function(hasher) {
              return function(message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
              };
            }, "_createHmacHelper")
          });
          var C_algo = C2.algo = {};
          return C2;
        }(Math);
        return CryptoJS3;
      });
    }
  });

  // ../../contrib/hdbt/node_modules/crypto-js/sha256.js
  var require_sha2562 = __commonJS({
    "../../contrib/hdbt/node_modules/crypto-js/sha256.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core2());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root3.CryptoJS);
        }
      })(exports, function(CryptoJS3) {
        (function(Math2) {
          var C2 = CryptoJS3;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C2.algo;
          var H3 = [];
          var K3 = [];
          (function() {
            function isPrime(n22) {
              var sqrtN = Math2.sqrt(n22);
              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n22 % factor)) {
                  return false;
                }
              }
              return true;
            }
            __name(isPrime, "isPrime");
            function getFractionalBits(n22) {
              return (n22 - (n22 | 0)) * 4294967296 | 0;
            }
            __name(getFractionalBits, "getFractionalBits");
            var n21 = 2;
            var nPrime = 0;
            while (nPrime < 64) {
              if (isPrime(n21)) {
                if (nPrime < 8) {
                  H3[nPrime] = getFractionalBits(Math2.pow(n21, 1 / 2));
                }
                K3[nPrime] = getFractionalBits(Math2.pow(n21, 1 / 3));
                nPrime++;
              }
              n21++;
            }
          })();
          var W3 = [];
          var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: /* @__PURE__ */ __name(function() {
              this._hash = new WordArray.init(H3.slice(0));
            }, "_doReset"),
            _doProcessBlock: /* @__PURE__ */ __name(function(M, offset5) {
              var H4 = this._hash.words;
              var a21 = H4[0];
              var b6 = H4[1];
              var c6 = H4[2];
              var d16 = H4[3];
              var e18 = H4[4];
              var f2 = H4[5];
              var g4 = H4[6];
              var h5 = H4[7];
              for (var i12 = 0; i12 < 64; i12++) {
                if (i12 < 16) {
                  W3[i12] = M[offset5 + i12] | 0;
                } else {
                  var gamma0x = W3[i12 - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W3[i12 - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W3[i12] = gamma0 + W3[i12 - 7] + gamma1 + W3[i12 - 16];
                }
                var ch = e18 & f2 ^ ~e18 & g4;
                var maj = a21 & b6 ^ a21 & c6 ^ b6 & c6;
                var sigma0 = (a21 << 30 | a21 >>> 2) ^ (a21 << 19 | a21 >>> 13) ^ (a21 << 10 | a21 >>> 22);
                var sigma1 = (e18 << 26 | e18 >>> 6) ^ (e18 << 21 | e18 >>> 11) ^ (e18 << 7 | e18 >>> 25);
                var t1 = h5 + sigma1 + ch + K3[i12] + W3[i12];
                var t22 = sigma0 + maj;
                h5 = g4;
                g4 = f2;
                f2 = e18;
                e18 = d16 + t1 | 0;
                d16 = c6;
                c6 = b6;
                b6 = a21;
                a21 = t1 + t22 | 0;
              }
              H4[0] = H4[0] + a21 | 0;
              H4[1] = H4[1] + b6 | 0;
              H4[2] = H4[2] + c6 | 0;
              H4[3] = H4[3] + d16 | 0;
              H4[4] = H4[4] + e18 | 0;
              H4[5] = H4[5] + f2 | 0;
              H4[6] = H4[6] + g4 | 0;
              H4[7] = H4[7] + h5 | 0;
            }, "_doProcessBlock"),
            _doFinalize: /* @__PURE__ */ __name(function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            }, "_doFinalize"),
            clone: /* @__PURE__ */ __name(function() {
              var clone5 = Hasher.clone.call(this);
              clone5._hash = this._hash.clone();
              return clone5;
            }, "clone")
          });
          C2.SHA256 = Hasher._createHelper(SHA256);
          C2.HmacSHA256 = Hasher._createHmacHelper(SHA256);
        })(Math);
        return CryptoJS3.SHA256;
      });
    }
  });

  // ../../contrib/hdbt/node_modules/crypto-js/enc-base64.js
  var require_enc_base642 = __commonJS({
    "../../contrib/hdbt/node_modules/crypto-js/enc-base64.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core2());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root3.CryptoJS);
        }
      })(exports, function(CryptoJS3) {
        (function() {
          var C2 = CryptoJS3;
          var C_lib = C2.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C2.enc;
          var Base643 = C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: /* @__PURE__ */ __name(function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = this._map;
              wordArray.clamp();
              var base64Chars = [];
              for (var i12 = 0; i12 < sigBytes; i12 += 3) {
                var byte1 = words[i12 >>> 2] >>> 24 - i12 % 4 * 8 & 255;
                var byte2 = words[i12 + 1 >>> 2] >>> 24 - (i12 + 1) % 4 * 8 & 255;
                var byte3 = words[i12 + 2 >>> 2] >>> 24 - (i12 + 2) % 4 * 8 & 255;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                for (var j2 = 0; j2 < 4 && i12 + j2 * 0.75 < sigBytes; j2++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j2) & 63));
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }
              return base64Chars.join("");
            }, "stringify"),
            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: /* @__PURE__ */ __name(function(base64Str) {
              var base64StrLength = base64Str.length;
              var map = this._map;
              var reverseMap = this._reverseMap;
              if (!reverseMap) {
                reverseMap = this._reverseMap = [];
                for (var j2 = 0; j2 < map.length; j2++) {
                  reverseMap[map.charCodeAt(j2)] = j2;
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              }
              return parseLoop(base64Str, base64StrLength, reverseMap);
            }, "parse"),
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
          };
          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for (var i12 = 0; i12 < base64StrLength; i12++) {
              if (i12 % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i12 - 1)] << i12 % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i12)] >>> 6 - i12 % 4 * 2;
                var bitsCombined = bits1 | bits2;
                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }
            return WordArray.create(words, nBytes);
          }
          __name(parseLoop, "parseLoop");
        })();
        return CryptoJS3.enc.Base64;
      });
    }
  });

  // ../../contrib/hdbt/node_modules/crypto-js/enc-utf8.js
  var require_enc_utf82 = __commonJS({
    "../../contrib/hdbt/node_modules/crypto-js/enc-utf8.js"(exports, module) {
      
      (function(root3, factory) {
        if (typeof exports === "object") {
          module.exports = exports = factory(require_core2());
        } else if (typeof define === "function" && define.amd) {
          define(["./core"], factory);
        } else {
          factory(root3.CryptoJS);
        }
      })(exports, function(CryptoJS3) {
        return CryptoJS3.enc.Utf8;
      });
    }
  });

  // ../../contrib/hdbt/node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../../contrib/hdbt/node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      
      if (true) {
        (function() {
          
          var React19 = require_react();
          var _assign = require_object_assign();
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var ReactSharedInternals = React19.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error2(format4) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format4, args);
            }
          }
          __name(error2, "error");
          function printWarning(level3, format4, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format4 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format4);
              Function.prototype.apply.call(console[level3], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          __name(isValidElementType, "isValidElementType");
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentName, "getComponentName");
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match4 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match4 && match4[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn3, construct) {
            if (!fn3 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn3);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: /* @__PURE__ */ __name(function() {
                    throw Error();
                  }, "set")
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn3, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn3.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn3();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s21 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s21 >= 1 && c6 >= 0 && sampleLines[s21] !== controlLines[c6]) {
                  c6--;
                }
                for (; s21 >= 1 && c6 >= 0; s21--, c6--) {
                  if (sampleLines[s21] !== controlLines[c6]) {
                    if (s21 !== 1 || c6 !== 1) {
                      do {
                        s21--;
                        c6--;
                        if (c6 < 0 || sampleLines[s21] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s21].replace(" at new ", " at ");
                          {
                            if (typeof fn3 === "function") {
                              componentFrameCache.set(fn3, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s21 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn3 ? fn3.displayName || fn3.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn3 === "function") {
                componentFrameCache.set(fn3, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeFunctionComponentFrame(fn3, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn3, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config3) {
            {
              if (hasOwnProperty3.call(config3, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.ref !== void 0;
          }
          __name(hasValidRef, "hasValidRef");
          function hasValidKey(config3) {
            {
              if (hasOwnProperty3.call(config3, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.key !== void 0;
          }
          __name(hasValidKey, "hasValidKey");
          function warnIfStringRefCannotBeAutoConverted(config3, self2) {
            {
              if (typeof config3.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config3.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          __name(warnIfStringRefCannotBeAutoConverted, "warnIfStringRefCannotBeAutoConverted");
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = /* @__PURE__ */ __name(function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }, "warnAboutAccessingKey");
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          __name(defineKeyPropWarningGetter, "defineKeyPropWarningGetter");
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = /* @__PURE__ */ __name(function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }, "warnAboutAccessingRef");
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          __name(defineRefPropWarningGetter, "defineRefPropWarningGetter");
          var ReactElement2 = /* @__PURE__ */ __name(function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          }, "ReactElement");
          function jsxDEV(type, config3, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config3)) {
                key = "" + config3.key;
              }
              if (hasValidRef(config3)) {
                ref = config3.ref;
                warnIfStringRefCannotBeAutoConverted(config3, self2);
              }
              for (propName in config3) {
                if (hasOwnProperty3.call(config3, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  props[propName] = config3[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement2(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          __name(jsxDEV, "jsxDEV");
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement$1, "setCurrentlyValidatingElement$1");
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement2(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          __name(isValidElement2, "isValidElement");
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          __name(getSourceInfoErrorAddendum, "getSourceInfoErrorAddendum");
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info2 = getDeclarationErrorAddendum();
              if (!info2) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info2;
            }
          }
          __name(getCurrentComponentErrorInfo, "getCurrentComponentErrorInfo");
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          __name(validateExplicitKey, "validateExplicitKey");
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (Array.isArray(node)) {
                for (var i12 = 0; i12 < node.length; i12++) {
                  var child = node[i12];
                  if (isValidElement2(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement2(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement2(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          __name(validateChildKeys, "validateChildKeys");
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          __name(validatePropTypes, "validatePropTypes");
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i12 = 0; i12 < keys.length; i12++) {
                var key = keys[i12];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          __name(validateFragmentProps, "validateFragmentProps");
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info2 = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info2 += sourceInfo;
                } else {
                  info2 += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info2 = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i12 = 0; i12 < children.length; i12++) {
                        validateChildKeys(children[i12], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          __name(jsxWithValidation, "jsxWithValidation");
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          __name(jsxWithValidationStatic, "jsxWithValidationStatic");
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          __name(jsxWithValidationDynamic, "jsxWithValidationDynamic");
          var jsx20 = jsxWithValidationDynamic;
          var jsxs14 = jsxWithValidationStatic;
          exports.jsx = jsx20;
          exports.jsxs = jsxs14;
        })();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../../contrib/hdbt/node_modules/react/jsx-runtime.js"(exports, module) {
      
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign2 = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      __name(toObject, "toObject");
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i12 = 0; i12 < 10; i12++) {
            test2["_" + String.fromCharCode(i12)] = i12;
          }
          var order22 = Object.getOwnPropertyNames(test2).map(function(n21) {
            return test2[n21];
          });
          if (order22.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      __name(shouldUseNative, "shouldUseNative");
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to5 = toObject(target);
        var symbols;
        for (var s21 = 1; s21 < arguments.length; s21++) {
          from = Object(arguments[s21]);
          for (var key in from) {
            if (hasOwnProperty3.call(from, key)) {
              to5[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i12 = 0; i12 < symbols.length; i12++) {
              if (propIsEnumerable.call(from, symbols[i12])) {
                to5[symbols[i12]] = from[symbols[i12]];
              }
            }
          }
        }
        return to5;
      };
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development2 = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      
      if (true) {
        (function() {
          
          var React19 = require_react();
          var _assign = require_object_assign2();
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          __name(getIteratorFn, "getIteratorFn");
          var ReactSharedInternals = React19.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error2(format4) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format4, args);
            }
          }
          __name(error2, "error");
          function printWarning(level3, format4, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format4 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format4);
              Function.prototype.apply.call(console[level3], console, argsWithFormat);
            }
          }
          __name(printWarning, "printWarning");
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          __name(isValidElementType, "isValidElementType");
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          __name(getWrappedName, "getWrappedName");
          function getContextName(type) {
            return type.displayName || "Context";
          }
          __name(getContextName, "getContextName");
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          __name(getComponentName, "getComponentName");
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          __name(disabledLog, "disabledLog");
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          __name(disableLogs, "disableLogs");
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          __name(reenableLogs, "reenableLogs");
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match4 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match4 && match4[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          __name(describeBuiltInComponentFrame, "describeBuiltInComponentFrame");
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn3, construct) {
            if (!fn3 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn3);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = /* @__PURE__ */ __name(function() {
                  throw Error();
                }, "Fake");
                Object.defineProperty(Fake.prototype, "props", {
                  set: /* @__PURE__ */ __name(function() {
                    throw Error();
                  }, "set")
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn3, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn3.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn3();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s21 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s21 >= 1 && c6 >= 0 && sampleLines[s21] !== controlLines[c6]) {
                  c6--;
                }
                for (; s21 >= 1 && c6 >= 0; s21--, c6--) {
                  if (sampleLines[s21] !== controlLines[c6]) {
                    if (s21 !== 1 || c6 !== 1) {
                      do {
                        s21--;
                        c6--;
                        if (c6 < 0 || sampleLines[s21] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s21].replace(" at new ", " at ");
                          {
                            if (typeof fn3 === "function") {
                              componentFrameCache.set(fn3, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s21 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn3 ? fn3.displayName || fn3.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn3 === "function") {
                componentFrameCache.set(fn3, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          __name(describeNativeComponentFrame, "describeNativeComponentFrame");
          function describeFunctionComponentFrame(fn3, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn3, false);
            }
          }
          __name(describeFunctionComponentFrame, "describeFunctionComponentFrame");
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          __name(shouldConstruct, "shouldConstruct");
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          __name(describeUnknownElementTypeFrameInDEV, "describeUnknownElementTypeFrameInDEV");
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement, "setCurrentlyValidatingElement");
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          __name(checkPropTypes, "checkPropTypes");
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config3) {
            {
              if (hasOwnProperty3.call(config3, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.ref !== void 0;
          }
          __name(hasValidRef, "hasValidRef");
          function hasValidKey(config3) {
            {
              if (hasOwnProperty3.call(config3, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config3, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config3.key !== void 0;
          }
          __name(hasValidKey, "hasValidKey");
          function warnIfStringRefCannotBeAutoConverted(config3, self2) {
            {
              if (typeof config3.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config3.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          __name(warnIfStringRefCannotBeAutoConverted, "warnIfStringRefCannotBeAutoConverted");
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = /* @__PURE__ */ __name(function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }, "warnAboutAccessingKey");
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          __name(defineKeyPropWarningGetter, "defineKeyPropWarningGetter");
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = /* @__PURE__ */ __name(function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }, "warnAboutAccessingRef");
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          __name(defineRefPropWarningGetter, "defineRefPropWarningGetter");
          var ReactElement2 = /* @__PURE__ */ __name(function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          }, "ReactElement");
          function jsxDEV(type, config3, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config3)) {
                key = "" + config3.key;
              }
              if (hasValidRef(config3)) {
                ref = config3.ref;
                warnIfStringRefCannotBeAutoConverted(config3, self2);
              }
              for (propName in config3) {
                if (hasOwnProperty3.call(config3, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  props[propName] = config3[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement2(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          __name(jsxDEV, "jsxDEV");
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          __name(setCurrentlyValidatingElement$1, "setCurrentlyValidatingElement$1");
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement2(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          __name(isValidElement2, "isValidElement");
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          __name(getDeclarationErrorAddendum, "getDeclarationErrorAddendum");
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          __name(getSourceInfoErrorAddendum, "getSourceInfoErrorAddendum");
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info2 = getDeclarationErrorAddendum();
              if (!info2) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info2;
            }
          }
          __name(getCurrentComponentErrorInfo, "getCurrentComponentErrorInfo");
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          __name(validateExplicitKey, "validateExplicitKey");
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (Array.isArray(node)) {
                for (var i12 = 0; i12 < node.length; i12++) {
                  var child = node[i12];
                  if (isValidElement2(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement2(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement2(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          __name(validateChildKeys, "validateChildKeys");
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          __name(validatePropTypes, "validatePropTypes");
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i12 = 0; i12 < keys.length; i12++) {
                var key = keys[i12];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          __name(validateFragmentProps, "validateFragmentProps");
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info2 = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info2 += sourceInfo;
                } else {
                  info2 += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info2 = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i12 = 0; i12 < children.length; i12++) {
                        validateChildKeys(children[i12], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          __name(jsxWithValidation, "jsxWithValidation");
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          __name(jsxWithValidationStatic, "jsxWithValidationStatic");
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          __name(jsxWithValidationDynamic, "jsxWithValidationDynamic");
          var jsx20 = jsxWithValidationDynamic;
          var jsxs14 = jsxWithValidationStatic;
          exports.jsx = jsx20;
          exports.jsxs = jsxs14;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime2 = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development2();
      }
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/generated/decode-data-html.js
  var require_decode_data_html = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/generated/decode-data-html.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = new Uint16Array(
        // prettier-ignore
        'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(c6) {
          return c6.charCodeAt(0);
        })
      );
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/generated/decode-data-xml.js
  var require_decode_data_xml = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/generated/decode-data-xml.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = new Uint16Array(
        // prettier-ignore
        "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(c6) {
          return c6.charCodeAt(0);
        })
      );
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/decode_codepoint.js
  var require_decode_codepoint = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/decode_codepoint.js"(exports) {
      
      var _a;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.replaceCodePoint = exports.fromCodePoint = void 0;
      var decodeMap = /* @__PURE__ */ new Map([
        [0, 65533],
        // C1 Unicode control character reference replacements
        [128, 8364],
        [130, 8218],
        [131, 402],
        [132, 8222],
        [133, 8230],
        [134, 8224],
        [135, 8225],
        [136, 710],
        [137, 8240],
        [138, 352],
        [139, 8249],
        [140, 338],
        [142, 381],
        [145, 8216],
        [146, 8217],
        [147, 8220],
        [148, 8221],
        [149, 8226],
        [150, 8211],
        [151, 8212],
        [152, 732],
        [153, 8482],
        [154, 353],
        [155, 8250],
        [156, 339],
        [158, 382],
        [159, 376]
      ]);
      exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
      (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {
        var output = "";
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += String.fromCharCode(codePoint);
        return output;
      };
      function replaceCodePoint(codePoint) {
        var _a2;
        if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
          return 65533;
        }
        return (_a2 = decodeMap.get(codePoint)) !== null && _a2 !== void 0 ? _a2 : codePoint;
      }
      __name(replaceCodePoint, "replaceCodePoint");
      exports.replaceCodePoint = replaceCodePoint;
      function decodeCodePoint(codePoint) {
        return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
      }
      __name(decodeCodePoint, "decodeCodePoint");
      exports.default = decodeCodePoint;
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/decode.js
  var require_decode = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/decode.js"(exports) {
      
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o18, v4) {
        Object.defineProperty(o18, "default", { enumerable: true, value: v4 });
      } : function(o18, v4) {
        o18["default"] = v4;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;
      var decode_data_html_js_1 = __importDefault(require_decode_data_html());
      exports.htmlDecodeTree = decode_data_html_js_1.default;
      var decode_data_xml_js_1 = __importDefault(require_decode_data_xml());
      exports.xmlDecodeTree = decode_data_xml_js_1.default;
      var decode_codepoint_js_1 = __importStar(require_decode_codepoint());
      exports.decodeCodePoint = decode_codepoint_js_1.default;
      var decode_codepoint_js_2 = require_decode_codepoint();
      Object.defineProperty(exports, "replaceCodePoint", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_codepoint_js_2.replaceCodePoint;
      }, "get") });
      Object.defineProperty(exports, "fromCodePoint", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_codepoint_js_2.fromCodePoint;
      }, "get") });
      var CharCodes;
      (function(CharCodes2) {
        CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
        CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
        CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
        CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
        CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
        CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
        CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
        CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
        CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
        CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
        CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
        CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
      })(CharCodes || (CharCodes = {}));
      var TO_LOWER_BIT = 32;
      var BinTrieFlags;
      (function(BinTrieFlags2) {
        BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
        BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
        BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
      })(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));
      function isNumber3(code) {
        return code >= CharCodes.ZERO && code <= CharCodes.NINE;
      }
      __name(isNumber3, "isNumber");
      function isHexadecimalCharacter(code) {
        return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
      }
      __name(isHexadecimalCharacter, "isHexadecimalCharacter");
      function isAsciiAlphaNumeric(code) {
        return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber3(code);
      }
      __name(isAsciiAlphaNumeric, "isAsciiAlphaNumeric");
      function isEntityInAttributeInvalidEnd(code) {
        return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
      }
      __name(isEntityInAttributeInvalidEnd, "isEntityInAttributeInvalidEnd");
      var EntityDecoderState;
      (function(EntityDecoderState2) {
        EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
        EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
        EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
        EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
        EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
      })(EntityDecoderState || (EntityDecoderState = {}));
      var DecodingMode;
      (function(DecodingMode2) {
        DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
        DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
        DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
      })(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
      var EntityDecoder = (
        /** @class */
        function() {
          function EntityDecoder2(decodeTree, emitCodePoint, errors) {
            this.decodeTree = decodeTree;
            this.emitCodePoint = emitCodePoint;
            this.errors = errors;
            this.state = EntityDecoderState.EntityStart;
            this.consumed = 1;
            this.result = 0;
            this.treeIndex = 0;
            this.excess = 1;
            this.decodeMode = DecodingMode.Strict;
          }
          __name(EntityDecoder2, "EntityDecoder");
          EntityDecoder2.prototype.startEntity = function(decodeMode) {
            this.decodeMode = decodeMode;
            this.state = EntityDecoderState.EntityStart;
            this.result = 0;
            this.treeIndex = 0;
            this.excess = 1;
            this.consumed = 1;
          };
          EntityDecoder2.prototype.write = function(str, offset5) {
            switch (this.state) {
              case EntityDecoderState.EntityStart: {
                if (str.charCodeAt(offset5) === CharCodes.NUM) {
                  this.state = EntityDecoderState.NumericStart;
                  this.consumed += 1;
                  return this.stateNumericStart(str, offset5 + 1);
                }
                this.state = EntityDecoderState.NamedEntity;
                return this.stateNamedEntity(str, offset5);
              }
              case EntityDecoderState.NumericStart: {
                return this.stateNumericStart(str, offset5);
              }
              case EntityDecoderState.NumericDecimal: {
                return this.stateNumericDecimal(str, offset5);
              }
              case EntityDecoderState.NumericHex: {
                return this.stateNumericHex(str, offset5);
              }
              case EntityDecoderState.NamedEntity: {
                return this.stateNamedEntity(str, offset5);
              }
            }
          };
          EntityDecoder2.prototype.stateNumericStart = function(str, offset5) {
            if (offset5 >= str.length) {
              return -1;
            }
            if ((str.charCodeAt(offset5) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
              this.state = EntityDecoderState.NumericHex;
              this.consumed += 1;
              return this.stateNumericHex(str, offset5 + 1);
            }
            this.state = EntityDecoderState.NumericDecimal;
            return this.stateNumericDecimal(str, offset5);
          };
          EntityDecoder2.prototype.addToNumericResult = function(str, start5, end3, base) {
            if (start5 !== end3) {
              var digitCount = end3 - start5;
              this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start5, digitCount), base);
              this.consumed += digitCount;
            }
          };
          EntityDecoder2.prototype.stateNumericHex = function(str, offset5) {
            var startIdx = offset5;
            while (offset5 < str.length) {
              var char = str.charCodeAt(offset5);
              if (isNumber3(char) || isHexadecimalCharacter(char)) {
                offset5 += 1;
              } else {
                this.addToNumericResult(str, startIdx, offset5, 16);
                return this.emitNumericEntity(char, 3);
              }
            }
            this.addToNumericResult(str, startIdx, offset5, 16);
            return -1;
          };
          EntityDecoder2.prototype.stateNumericDecimal = function(str, offset5) {
            var startIdx = offset5;
            while (offset5 < str.length) {
              var char = str.charCodeAt(offset5);
              if (isNumber3(char)) {
                offset5 += 1;
              } else {
                this.addToNumericResult(str, startIdx, offset5, 10);
                return this.emitNumericEntity(char, 2);
              }
            }
            this.addToNumericResult(str, startIdx, offset5, 10);
            return -1;
          };
          EntityDecoder2.prototype.emitNumericEntity = function(lastCp, expectedLength) {
            var _a;
            if (this.consumed <= expectedLength) {
              (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
              return 0;
            }
            if (lastCp === CharCodes.SEMI) {
              this.consumed += 1;
            } else if (this.decodeMode === DecodingMode.Strict) {
              return 0;
            }
            this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);
            if (this.errors) {
              if (lastCp !== CharCodes.SEMI) {
                this.errors.missingSemicolonAfterCharacterReference();
              }
              this.errors.validateNumericCharacterReference(this.result);
            }
            return this.consumed;
          };
          EntityDecoder2.prototype.stateNamedEntity = function(str, offset5) {
            var decodeTree = this.decodeTree;
            var current = decodeTree[this.treeIndex];
            var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            for (; offset5 < str.length; offset5++, this.excess++) {
              var char = str.charCodeAt(offset5);
              this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
              if (this.treeIndex < 0) {
                return this.result === 0 || // If we are parsing an attribute
                this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
                (valueLength === 0 || // And there should be no invalid characters.
                isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
              }
              current = decodeTree[this.treeIndex];
              valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
              if (valueLength !== 0) {
                if (char === CharCodes.SEMI) {
                  return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                }
                if (this.decodeMode !== DecodingMode.Strict) {
                  this.result = this.treeIndex;
                  this.consumed += this.excess;
                  this.excess = 0;
                }
              }
            }
            return -1;
          };
          EntityDecoder2.prototype.emitNotTerminatedNamedEntity = function() {
            var _a;
            var _b = this, result = _b.result, decodeTree = _b.decodeTree;
            var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
            this.emitNamedEntityData(result, valueLength, this.consumed);
            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
            return this.consumed;
          };
          EntityDecoder2.prototype.emitNamedEntityData = function(result, valueLength, consumed) {
            var decodeTree = this.decodeTree;
            this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
            if (valueLength === 3) {
              this.emitCodePoint(decodeTree[result + 2], consumed);
            }
            return consumed;
          };
          EntityDecoder2.prototype.end = function() {
            var _a;
            switch (this.state) {
              case EntityDecoderState.NamedEntity: {
                return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
              }
              // Otherwise, emit a numeric entity if we have one.
              case EntityDecoderState.NumericDecimal: {
                return this.emitNumericEntity(0, 2);
              }
              case EntityDecoderState.NumericHex: {
                return this.emitNumericEntity(0, 3);
              }
              case EntityDecoderState.NumericStart: {
                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                return 0;
              }
              case EntityDecoderState.EntityStart: {
                return 0;
              }
            }
          };
          return EntityDecoder2;
        }()
      );
      exports.EntityDecoder = EntityDecoder;
      function getDecoder(decodeTree) {
        var ret = "";
        var decoder = new EntityDecoder(decodeTree, function(str) {
          return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);
        });
        return /* @__PURE__ */ __name(function decodeWithTrie(str, decodeMode) {
          var lastIndex = 0;
          var offset5 = 0;
          while ((offset5 = str.indexOf("&", offset5)) >= 0) {
            ret += str.slice(lastIndex, offset5);
            decoder.startEntity(decodeMode);
            var len = decoder.write(
              str,
              // Skip the "&"
              offset5 + 1
            );
            if (len < 0) {
              lastIndex = offset5 + decoder.end();
              break;
            }
            lastIndex = offset5 + len;
            offset5 = len === 0 ? lastIndex + 1 : lastIndex;
          }
          var result = ret + str.slice(lastIndex);
          ret = "";
          return result;
        }, "decodeWithTrie");
      }
      __name(getDecoder, "getDecoder");
      function determineBranch(decodeTree, current, nodeIdx, char) {
        var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
        var jumpOffset = current & BinTrieFlags.JUMP_TABLE;
        if (branchCount === 0) {
          return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
        }
        if (jumpOffset) {
          var value = char - jumpOffset;
          return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
        }
        var lo2 = nodeIdx;
        var hi = lo2 + branchCount - 1;
        while (lo2 <= hi) {
          var mid = lo2 + hi >>> 1;
          var midVal = decodeTree[mid];
          if (midVal < char) {
            lo2 = mid + 1;
          } else if (midVal > char) {
            hi = mid - 1;
          } else {
            return decodeTree[mid + branchCount];
          }
        }
        return -1;
      }
      __name(determineBranch, "determineBranch");
      exports.determineBranch = determineBranch;
      var htmlDecoder = getDecoder(decode_data_html_js_1.default);
      var xmlDecoder = getDecoder(decode_data_xml_js_1.default);
      function decodeHTML(str, mode) {
        if (mode === void 0) {
          mode = DecodingMode.Legacy;
        }
        return htmlDecoder(str, mode);
      }
      __name(decodeHTML, "decodeHTML");
      exports.decodeHTML = decodeHTML;
      function decodeHTMLAttribute(str) {
        return htmlDecoder(str, DecodingMode.Attribute);
      }
      __name(decodeHTMLAttribute, "decodeHTMLAttribute");
      exports.decodeHTMLAttribute = decodeHTMLAttribute;
      function decodeHTMLStrict(str) {
        return htmlDecoder(str, DecodingMode.Strict);
      }
      __name(decodeHTMLStrict, "decodeHTMLStrict");
      exports.decodeHTMLStrict = decodeHTMLStrict;
      function decodeXML(str) {
        return xmlDecoder(str, DecodingMode.Strict);
      }
      __name(decodeXML, "decodeXML");
      exports.decodeXML = decodeXML;
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js
  var require_Tokenizer = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/node_modules/htmlparser2/lib/Tokenizer.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.QuoteType = void 0;
      var decode_js_1 = require_decode();
      var CharCodes;
      (function(CharCodes2) {
        CharCodes2[CharCodes2["Tab"] = 9] = "Tab";
        CharCodes2[CharCodes2["NewLine"] = 10] = "NewLine";
        CharCodes2[CharCodes2["FormFeed"] = 12] = "FormFeed";
        CharCodes2[CharCodes2["CarriageReturn"] = 13] = "CarriageReturn";
        CharCodes2[CharCodes2["Space"] = 32] = "Space";
        CharCodes2[CharCodes2["ExclamationMark"] = 33] = "ExclamationMark";
        CharCodes2[CharCodes2["Number"] = 35] = "Number";
        CharCodes2[CharCodes2["Amp"] = 38] = "Amp";
        CharCodes2[CharCodes2["SingleQuote"] = 39] = "SingleQuote";
        CharCodes2[CharCodes2["DoubleQuote"] = 34] = "DoubleQuote";
        CharCodes2[CharCodes2["Dash"] = 45] = "Dash";
        CharCodes2[CharCodes2["Slash"] = 47] = "Slash";
        CharCodes2[CharCodes2["Zero"] = 48] = "Zero";
        CharCodes2[CharCodes2["Nine"] = 57] = "Nine";
        CharCodes2[CharCodes2["Semi"] = 59] = "Semi";
        CharCodes2[CharCodes2["Lt"] = 60] = "Lt";
        CharCodes2[CharCodes2["Eq"] = 61] = "Eq";
        CharCodes2[CharCodes2["Gt"] = 62] = "Gt";
        CharCodes2[CharCodes2["Questionmark"] = 63] = "Questionmark";
        CharCodes2[CharCodes2["UpperA"] = 65] = "UpperA";
        CharCodes2[CharCodes2["LowerA"] = 97] = "LowerA";
        CharCodes2[CharCodes2["UpperF"] = 70] = "UpperF";
        CharCodes2[CharCodes2["LowerF"] = 102] = "LowerF";
        CharCodes2[CharCodes2["UpperZ"] = 90] = "UpperZ";
        CharCodes2[CharCodes2["LowerZ"] = 122] = "LowerZ";
        CharCodes2[CharCodes2["LowerX"] = 120] = "LowerX";
        CharCodes2[CharCodes2["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
      })(CharCodes || (CharCodes = {}));
      var State;
      (function(State2) {
        State2[State2["Text"] = 1] = "Text";
        State2[State2["BeforeTagName"] = 2] = "BeforeTagName";
        State2[State2["InTagName"] = 3] = "InTagName";
        State2[State2["InSelfClosingTag"] = 4] = "InSelfClosingTag";
        State2[State2["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
        State2[State2["InClosingTagName"] = 6] = "InClosingTagName";
        State2[State2["AfterClosingTagName"] = 7] = "AfterClosingTagName";
        State2[State2["BeforeAttributeName"] = 8] = "BeforeAttributeName";
        State2[State2["InAttributeName"] = 9] = "InAttributeName";
        State2[State2["AfterAttributeName"] = 10] = "AfterAttributeName";
        State2[State2["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
        State2[State2["InAttributeValueDq"] = 12] = "InAttributeValueDq";
        State2[State2["InAttributeValueSq"] = 13] = "InAttributeValueSq";
        State2[State2["InAttributeValueNq"] = 14] = "InAttributeValueNq";
        State2[State2["BeforeDeclaration"] = 15] = "BeforeDeclaration";
        State2[State2["InDeclaration"] = 16] = "InDeclaration";
        State2[State2["InProcessingInstruction"] = 17] = "InProcessingInstruction";
        State2[State2["BeforeComment"] = 18] = "BeforeComment";
        State2[State2["CDATASequence"] = 19] = "CDATASequence";
        State2[State2["InSpecialComment"] = 20] = "InSpecialComment";
        State2[State2["InCommentLike"] = 21] = "InCommentLike";
        State2[State2["BeforeSpecialS"] = 22] = "BeforeSpecialS";
        State2[State2["SpecialStartSequence"] = 23] = "SpecialStartSequence";
        State2[State2["InSpecialTag"] = 24] = "InSpecialTag";
        State2[State2["InEntity"] = 25] = "InEntity";
      })(State || (State = {}));
      function isWhitespace(c6) {
        return c6 === CharCodes.Space || c6 === CharCodes.NewLine || c6 === CharCodes.Tab || c6 === CharCodes.FormFeed || c6 === CharCodes.CarriageReturn;
      }
      __name(isWhitespace, "isWhitespace");
      function isEndOfTagSection(c6) {
        return c6 === CharCodes.Slash || c6 === CharCodes.Gt || isWhitespace(c6);
      }
      __name(isEndOfTagSection, "isEndOfTagSection");
      function isASCIIAlpha(c6) {
        return c6 >= CharCodes.LowerA && c6 <= CharCodes.LowerZ || c6 >= CharCodes.UpperA && c6 <= CharCodes.UpperZ;
      }
      __name(isASCIIAlpha, "isASCIIAlpha");
      var QuoteType;
      (function(QuoteType2) {
        QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
        QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
        QuoteType2[QuoteType2["Single"] = 2] = "Single";
        QuoteType2[QuoteType2["Double"] = 3] = "Double";
      })(QuoteType = exports.QuoteType || (exports.QuoteType = {}));
      var Sequences = {
        Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
        CdataEnd: new Uint8Array([93, 93, 62]),
        CommentEnd: new Uint8Array([45, 45, 62]),
        ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
        StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
        TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101])
        // `</title`
      };
      var Tokenizer = (
        /** @class */
        function() {
          function Tokenizer2(_a, cbs) {
            var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;
            var _this = this;
            this.cbs = cbs;
            this.state = State.Text;
            this.buffer = "";
            this.sectionStart = 0;
            this.index = 0;
            this.entityStart = 0;
            this.baseState = State.Text;
            this.isSpecial = false;
            this.running = true;
            this.offset = 0;
            this.currentSequence = void 0;
            this.sequenceIndex = 0;
            this.xmlMode = xmlMode;
            this.decodeEntities = decodeEntities;
            this.entityDecoder = new decode_js_1.EntityDecoder(xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree, function(cp, consumed) {
              return _this.emitCodePoint(cp, consumed);
            });
          }
          __name(Tokenizer2, "Tokenizer");
          Tokenizer2.prototype.reset = function() {
            this.state = State.Text;
            this.buffer = "";
            this.sectionStart = 0;
            this.index = 0;
            this.baseState = State.Text;
            this.currentSequence = void 0;
            this.running = true;
            this.offset = 0;
          };
          Tokenizer2.prototype.write = function(chunk) {
            this.offset += this.buffer.length;
            this.buffer = chunk;
            this.parse();
          };
          Tokenizer2.prototype.end = function() {
            if (this.running)
              this.finish();
          };
          Tokenizer2.prototype.pause = function() {
            this.running = false;
          };
          Tokenizer2.prototype.resume = function() {
            this.running = true;
            if (this.index < this.buffer.length + this.offset) {
              this.parse();
            }
          };
          Tokenizer2.prototype.stateText = function(c6) {
            if (c6 === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {
              if (this.index > this.sectionStart) {
                this.cbs.ontext(this.sectionStart, this.index);
              }
              this.state = State.BeforeTagName;
              this.sectionStart = this.index;
            } else if (this.decodeEntities && c6 === CharCodes.Amp) {
              this.startEntity();
            }
          };
          Tokenizer2.prototype.stateSpecialStartSequence = function(c6) {
            var isEnd = this.sequenceIndex === this.currentSequence.length;
            var isMatch = isEnd ? (
              // If we are at the end of the sequence, make sure the tag name has ended
              isEndOfTagSection(c6)
            ) : (
              // Otherwise, do a case-insensitive comparison
              (c6 | 32) === this.currentSequence[this.sequenceIndex]
            );
            if (!isMatch) {
              this.isSpecial = false;
            } else if (!isEnd) {
              this.sequenceIndex++;
              return;
            }
            this.sequenceIndex = 0;
            this.state = State.InTagName;
            this.stateInTagName(c6);
          };
          Tokenizer2.prototype.stateInSpecialTag = function(c6) {
            if (this.sequenceIndex === this.currentSequence.length) {
              if (c6 === CharCodes.Gt || isWhitespace(c6)) {
                var endOfText = this.index - this.currentSequence.length;
                if (this.sectionStart < endOfText) {
                  var actualIndex = this.index;
                  this.index = endOfText;
                  this.cbs.ontext(this.sectionStart, endOfText);
                  this.index = actualIndex;
                }
                this.isSpecial = false;
                this.sectionStart = endOfText + 2;
                this.stateInClosingTagName(c6);
                return;
              }
              this.sequenceIndex = 0;
            }
            if ((c6 | 32) === this.currentSequence[this.sequenceIndex]) {
              this.sequenceIndex += 1;
            } else if (this.sequenceIndex === 0) {
              if (this.currentSequence === Sequences.TitleEnd) {
                if (this.decodeEntities && c6 === CharCodes.Amp) {
                  this.startEntity();
                }
              } else if (this.fastForwardTo(CharCodes.Lt)) {
                this.sequenceIndex = 1;
              }
            } else {
              this.sequenceIndex = Number(c6 === CharCodes.Lt);
            }
          };
          Tokenizer2.prototype.stateCDATASequence = function(c6) {
            if (c6 === Sequences.Cdata[this.sequenceIndex]) {
              if (++this.sequenceIndex === Sequences.Cdata.length) {
                this.state = State.InCommentLike;
                this.currentSequence = Sequences.CdataEnd;
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
              }
            } else {
              this.sequenceIndex = 0;
              this.state = State.InDeclaration;
              this.stateInDeclaration(c6);
            }
          };
          Tokenizer2.prototype.fastForwardTo = function(c6) {
            while (++this.index < this.buffer.length + this.offset) {
              if (this.buffer.charCodeAt(this.index - this.offset) === c6) {
                return true;
              }
            }
            this.index = this.buffer.length + this.offset - 1;
            return false;
          };
          Tokenizer2.prototype.stateInCommentLike = function(c6) {
            if (c6 === this.currentSequence[this.sequenceIndex]) {
              if (++this.sequenceIndex === this.currentSequence.length) {
                if (this.currentSequence === Sequences.CdataEnd) {
                  this.cbs.oncdata(this.sectionStart, this.index, 2);
                } else {
                  this.cbs.oncomment(this.sectionStart, this.index, 2);
                }
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
                this.state = State.Text;
              }
            } else if (this.sequenceIndex === 0) {
              if (this.fastForwardTo(this.currentSequence[0])) {
                this.sequenceIndex = 1;
              }
            } else if (c6 !== this.currentSequence[this.sequenceIndex - 1]) {
              this.sequenceIndex = 0;
            }
          };
          Tokenizer2.prototype.isTagStartChar = function(c6) {
            return this.xmlMode ? !isEndOfTagSection(c6) : isASCIIAlpha(c6);
          };
          Tokenizer2.prototype.startSpecial = function(sequence, offset5) {
            this.isSpecial = true;
            this.currentSequence = sequence;
            this.sequenceIndex = offset5;
            this.state = State.SpecialStartSequence;
          };
          Tokenizer2.prototype.stateBeforeTagName = function(c6) {
            if (c6 === CharCodes.ExclamationMark) {
              this.state = State.BeforeDeclaration;
              this.sectionStart = this.index + 1;
            } else if (c6 === CharCodes.Questionmark) {
              this.state = State.InProcessingInstruction;
              this.sectionStart = this.index + 1;
            } else if (this.isTagStartChar(c6)) {
              var lower = c6 | 32;
              this.sectionStart = this.index;
              if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
                this.startSpecial(Sequences.TitleEnd, 3);
              } else {
                this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;
              }
            } else if (c6 === CharCodes.Slash) {
              this.state = State.BeforeClosingTagName;
            } else {
              this.state = State.Text;
              this.stateText(c6);
            }
          };
          Tokenizer2.prototype.stateInTagName = function(c6) {
            if (isEndOfTagSection(c6)) {
              this.cbs.onopentagname(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.state = State.BeforeAttributeName;
              this.stateBeforeAttributeName(c6);
            }
          };
          Tokenizer2.prototype.stateBeforeClosingTagName = function(c6) {
            if (isWhitespace(c6)) {
            } else if (c6 === CharCodes.Gt) {
              this.state = State.Text;
            } else {
              this.state = this.isTagStartChar(c6) ? State.InClosingTagName : State.InSpecialComment;
              this.sectionStart = this.index;
            }
          };
          Tokenizer2.prototype.stateInClosingTagName = function(c6) {
            if (c6 === CharCodes.Gt || isWhitespace(c6)) {
              this.cbs.onclosetag(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.state = State.AfterClosingTagName;
              this.stateAfterClosingTagName(c6);
            }
          };
          Tokenizer2.prototype.stateAfterClosingTagName = function(c6) {
            if (c6 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
              this.state = State.Text;
              this.sectionStart = this.index + 1;
            }
          };
          Tokenizer2.prototype.stateBeforeAttributeName = function(c6) {
            if (c6 === CharCodes.Gt) {
              this.cbs.onopentagend(this.index);
              if (this.isSpecial) {
                this.state = State.InSpecialTag;
                this.sequenceIndex = 0;
              } else {
                this.state = State.Text;
              }
              this.sectionStart = this.index + 1;
            } else if (c6 === CharCodes.Slash) {
              this.state = State.InSelfClosingTag;
            } else if (!isWhitespace(c6)) {
              this.state = State.InAttributeName;
              this.sectionStart = this.index;
            }
          };
          Tokenizer2.prototype.stateInSelfClosingTag = function(c6) {
            if (c6 === CharCodes.Gt) {
              this.cbs.onselfclosingtag(this.index);
              this.state = State.Text;
              this.sectionStart = this.index + 1;
              this.isSpecial = false;
            } else if (!isWhitespace(c6)) {
              this.state = State.BeforeAttributeName;
              this.stateBeforeAttributeName(c6);
            }
          };
          Tokenizer2.prototype.stateInAttributeName = function(c6) {
            if (c6 === CharCodes.Eq || isEndOfTagSection(c6)) {
              this.cbs.onattribname(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.state = State.AfterAttributeName;
              this.stateAfterAttributeName(c6);
            }
          };
          Tokenizer2.prototype.stateAfterAttributeName = function(c6) {
            if (c6 === CharCodes.Eq) {
              this.state = State.BeforeAttributeValue;
            } else if (c6 === CharCodes.Slash || c6 === CharCodes.Gt) {
              this.cbs.onattribend(QuoteType.NoValue, this.index);
              this.state = State.BeforeAttributeName;
              this.stateBeforeAttributeName(c6);
            } else if (!isWhitespace(c6)) {
              this.cbs.onattribend(QuoteType.NoValue, this.index);
              this.state = State.InAttributeName;
              this.sectionStart = this.index;
            }
          };
          Tokenizer2.prototype.stateBeforeAttributeValue = function(c6) {
            if (c6 === CharCodes.DoubleQuote) {
              this.state = State.InAttributeValueDq;
              this.sectionStart = this.index + 1;
            } else if (c6 === CharCodes.SingleQuote) {
              this.state = State.InAttributeValueSq;
              this.sectionStart = this.index + 1;
            } else if (!isWhitespace(c6)) {
              this.sectionStart = this.index;
              this.state = State.InAttributeValueNq;
              this.stateInAttributeValueNoQuotes(c6);
            }
          };
          Tokenizer2.prototype.handleInAttributeValue = function(c6, quote) {
            if (c6 === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
              this.cbs.onattribdata(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);
              this.state = State.BeforeAttributeName;
            } else if (this.decodeEntities && c6 === CharCodes.Amp) {
              this.startEntity();
            }
          };
          Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c6) {
            this.handleInAttributeValue(c6, CharCodes.DoubleQuote);
          };
          Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c6) {
            this.handleInAttributeValue(c6, CharCodes.SingleQuote);
          };
          Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c6) {
            if (isWhitespace(c6) || c6 === CharCodes.Gt) {
              this.cbs.onattribdata(this.sectionStart, this.index);
              this.sectionStart = -1;
              this.cbs.onattribend(QuoteType.Unquoted, this.index);
              this.state = State.BeforeAttributeName;
              this.stateBeforeAttributeName(c6);
            } else if (this.decodeEntities && c6 === CharCodes.Amp) {
              this.startEntity();
            }
          };
          Tokenizer2.prototype.stateBeforeDeclaration = function(c6) {
            if (c6 === CharCodes.OpeningSquareBracket) {
              this.state = State.CDATASequence;
              this.sequenceIndex = 0;
            } else {
              this.state = c6 === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;
            }
          };
          Tokenizer2.prototype.stateInDeclaration = function(c6) {
            if (c6 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
              this.cbs.ondeclaration(this.sectionStart, this.index);
              this.state = State.Text;
              this.sectionStart = this.index + 1;
            }
          };
          Tokenizer2.prototype.stateInProcessingInstruction = function(c6) {
            if (c6 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
              this.cbs.onprocessinginstruction(this.sectionStart, this.index);
              this.state = State.Text;
              this.sectionStart = this.index + 1;
            }
          };
          Tokenizer2.prototype.stateBeforeComment = function(c6) {
            if (c6 === CharCodes.Dash) {
              this.state = State.InCommentLike;
              this.currentSequence = Sequences.CommentEnd;
              this.sequenceIndex = 2;
              this.sectionStart = this.index + 1;
            } else {
              this.state = State.InDeclaration;
            }
          };
          Tokenizer2.prototype.stateInSpecialComment = function(c6) {
            if (c6 === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {
              this.cbs.oncomment(this.sectionStart, this.index, 0);
              this.state = State.Text;
              this.sectionStart = this.index + 1;
            }
          };
          Tokenizer2.prototype.stateBeforeSpecialS = function(c6) {
            var lower = c6 | 32;
            if (lower === Sequences.ScriptEnd[3]) {
              this.startSpecial(Sequences.ScriptEnd, 4);
            } else if (lower === Sequences.StyleEnd[3]) {
              this.startSpecial(Sequences.StyleEnd, 4);
            } else {
              this.state = State.InTagName;
              this.stateInTagName(c6);
            }
          };
          Tokenizer2.prototype.startEntity = function() {
            this.baseState = this.state;
            this.state = State.InEntity;
            this.entityStart = this.index;
            this.entityDecoder.startEntity(this.xmlMode ? decode_js_1.DecodingMode.Strict : this.baseState === State.Text || this.baseState === State.InSpecialTag ? decode_js_1.DecodingMode.Legacy : decode_js_1.DecodingMode.Attribute);
          };
          Tokenizer2.prototype.stateInEntity = function() {
            var length = this.entityDecoder.write(this.buffer, this.index - this.offset);
            if (length >= 0) {
              this.state = this.baseState;
              if (length === 0) {
                this.index = this.entityStart;
              }
            } else {
              this.index = this.offset + this.buffer.length - 1;
            }
          };
          Tokenizer2.prototype.cleanup = function() {
            if (this.running && this.sectionStart !== this.index) {
              if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {
                this.cbs.ontext(this.sectionStart, this.index);
                this.sectionStart = this.index;
              } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {
                this.cbs.onattribdata(this.sectionStart, this.index);
                this.sectionStart = this.index;
              }
            }
          };
          Tokenizer2.prototype.shouldContinue = function() {
            return this.index < this.buffer.length + this.offset && this.running;
          };
          Tokenizer2.prototype.parse = function() {
            while (this.shouldContinue()) {
              var c6 = this.buffer.charCodeAt(this.index - this.offset);
              switch (this.state) {
                case State.Text: {
                  this.stateText(c6);
                  break;
                }
                case State.SpecialStartSequence: {
                  this.stateSpecialStartSequence(c6);
                  break;
                }
                case State.InSpecialTag: {
                  this.stateInSpecialTag(c6);
                  break;
                }
                case State.CDATASequence: {
                  this.stateCDATASequence(c6);
                  break;
                }
                case State.InAttributeValueDq: {
                  this.stateInAttributeValueDoubleQuotes(c6);
                  break;
                }
                case State.InAttributeName: {
                  this.stateInAttributeName(c6);
                  break;
                }
                case State.InCommentLike: {
                  this.stateInCommentLike(c6);
                  break;
                }
                case State.InSpecialComment: {
                  this.stateInSpecialComment(c6);
                  break;
                }
                case State.BeforeAttributeName: {
                  this.stateBeforeAttributeName(c6);
                  break;
                }
                case State.InTagName: {
                  this.stateInTagName(c6);
                  break;
                }
                case State.InClosingTagName: {
                  this.stateInClosingTagName(c6);
                  break;
                }
                case State.BeforeTagName: {
                  this.stateBeforeTagName(c6);
                  break;
                }
                case State.AfterAttributeName: {
                  this.stateAfterAttributeName(c6);
                  break;
                }
                case State.InAttributeValueSq: {
                  this.stateInAttributeValueSingleQuotes(c6);
                  break;
                }
                case State.BeforeAttributeValue: {
                  this.stateBeforeAttributeValue(c6);
                  break;
                }
                case State.BeforeClosingTagName: {
                  this.stateBeforeClosingTagName(c6);
                  break;
                }
                case State.AfterClosingTagName: {
                  this.stateAfterClosingTagName(c6);
                  break;
                }
                case State.BeforeSpecialS: {
                  this.stateBeforeSpecialS(c6);
                  break;
                }
                case State.InAttributeValueNq: {
                  this.stateInAttributeValueNoQuotes(c6);
                  break;
                }
                case State.InSelfClosingTag: {
                  this.stateInSelfClosingTag(c6);
                  break;
                }
                case State.InDeclaration: {
                  this.stateInDeclaration(c6);
                  break;
                }
                case State.BeforeDeclaration: {
                  this.stateBeforeDeclaration(c6);
                  break;
                }
                case State.BeforeComment: {
                  this.stateBeforeComment(c6);
                  break;
                }
                case State.InProcessingInstruction: {
                  this.stateInProcessingInstruction(c6);
                  break;
                }
                case State.InEntity: {
                  this.stateInEntity();
                  break;
                }
              }
              this.index++;
            }
            this.cleanup();
          };
          Tokenizer2.prototype.finish = function() {
            if (this.state === State.InEntity) {
              this.entityDecoder.end();
              this.state = this.baseState;
            }
            this.handleTrailingData();
            this.cbs.onend();
          };
          Tokenizer2.prototype.handleTrailingData = function() {
            var endIndex = this.buffer.length + this.offset;
            if (this.sectionStart >= endIndex) {
              return;
            }
            if (this.state === State.InCommentLike) {
              if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, endIndex, 0);
              } else {
                this.cbs.oncomment(this.sectionStart, endIndex, 0);
              }
            } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {
            } else {
              this.cbs.ontext(this.sectionStart, endIndex);
            }
          };
          Tokenizer2.prototype.emitCodePoint = function(cp, consumed) {
            if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {
              if (this.sectionStart < this.entityStart) {
                this.cbs.onattribdata(this.sectionStart, this.entityStart);
              }
              this.sectionStart = this.entityStart + consumed;
              this.index = this.sectionStart - 1;
              this.cbs.onattribentity(cp);
            } else {
              if (this.sectionStart < this.entityStart) {
                this.cbs.ontext(this.sectionStart, this.entityStart);
              }
              this.sectionStart = this.entityStart + consumed;
              this.index = this.sectionStart - 1;
              this.cbs.ontextentity(cp, this.sectionStart);
            }
          };
          return Tokenizer2;
        }()
      );
      exports.default = Tokenizer;
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/node_modules/htmlparser2/lib/Parser.js
  var require_Parser = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/node_modules/htmlparser2/lib/Parser.js"(exports) {
      
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o18, v4) {
        Object.defineProperty(o18, "default", { enumerable: true, value: v4 });
      } : function(o18, v4) {
        o18["default"] = v4;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Parser = void 0;
      var Tokenizer_js_1 = __importStar(require_Tokenizer());
      var decode_js_1 = require_decode();
      var formTags = /* @__PURE__ */ new Set([
        "input",
        "option",
        "optgroup",
        "select",
        "button",
        "datalist",
        "textarea"
      ]);
      var pTag = /* @__PURE__ */ new Set(["p"]);
      var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
      var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
      var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
      var openImpliesClose = /* @__PURE__ */ new Map([
        ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
        ["th", /* @__PURE__ */ new Set(["th"])],
        ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
        ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
        ["li", /* @__PURE__ */ new Set(["li"])],
        ["p", pTag],
        ["h1", pTag],
        ["h2", pTag],
        ["h3", pTag],
        ["h4", pTag],
        ["h5", pTag],
        ["h6", pTag],
        ["select", formTags],
        ["input", formTags],
        ["output", formTags],
        ["button", formTags],
        ["datalist", formTags],
        ["textarea", formTags],
        ["option", /* @__PURE__ */ new Set(["option"])],
        ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
        ["dd", ddtTags],
        ["dt", ddtTags],
        ["address", pTag],
        ["article", pTag],
        ["aside", pTag],
        ["blockquote", pTag],
        ["details", pTag],
        ["div", pTag],
        ["dl", pTag],
        ["fieldset", pTag],
        ["figcaption", pTag],
        ["figure", pTag],
        ["footer", pTag],
        ["form", pTag],
        ["header", pTag],
        ["hr", pTag],
        ["main", pTag],
        ["nav", pTag],
        ["ol", pTag],
        ["pre", pTag],
        ["section", pTag],
        ["table", pTag],
        ["ul", pTag],
        ["rt", rtpTags],
        ["rp", rtpTags],
        ["tbody", tableSectionTags],
        ["tfoot", tableSectionTags]
      ]);
      var voidElements = /* @__PURE__ */ new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
      ]);
      var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
      var htmlIntegrationElements = /* @__PURE__ */ new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignobject",
        "desc",
        "title"
      ]);
      var reNameEnd = /\s|\//;
      var Parser = (
        /** @class */
        function() {
          function Parser2(cbs, options) {
            if (options === void 0) {
              options = {};
            }
            var _a, _b, _c, _d, _e3;
            this.options = options;
            this.startIndex = 0;
            this.endIndex = 0;
            this.openTagStart = 0;
            this.tagname = "";
            this.attribname = "";
            this.attribvalue = "";
            this.attribs = null;
            this.stack = [];
            this.buffers = [];
            this.bufferOffset = 0;
            this.writeIndex = 0;
            this.ended = false;
            this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
            this.htmlMode = !this.options.xmlMode;
            this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : this.htmlMode;
            this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : this.htmlMode;
            this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);
            this.foreignContext = [!this.htmlMode];
            (_e3 = (_d = this.cbs).onparserinit) === null || _e3 === void 0 ? void 0 : _e3.call(_d, this);
          }
          __name(Parser2, "Parser");
          Parser2.prototype.ontext = function(start5, endIndex) {
            var _a, _b;
            var data = this.getSlice(start5, endIndex);
            this.endIndex = endIndex - 1;
            (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
            this.startIndex = endIndex;
          };
          Parser2.prototype.ontextentity = function(cp, endIndex) {
            var _a, _b;
            this.endIndex = endIndex - 1;
            (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));
            this.startIndex = endIndex;
          };
          Parser2.prototype.isVoidElement = function(name) {
            return this.htmlMode && voidElements.has(name);
          };
          Parser2.prototype.onopentagname = function(start5, endIndex) {
            this.endIndex = endIndex;
            var name = this.getSlice(start5, endIndex);
            if (this.lowerCaseTagNames) {
              name = name.toLowerCase();
            }
            this.emitOpenTag(name);
          };
          Parser2.prototype.emitOpenTag = function(name) {
            var _a, _b, _c, _d;
            this.openTagStart = this.startIndex;
            this.tagname = name;
            var impliesClose = this.htmlMode && openImpliesClose.get(name);
            if (impliesClose) {
              while (this.stack.length > 0 && impliesClose.has(this.stack[0])) {
                var element = this.stack.shift();
                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);
              }
            }
            if (!this.isVoidElement(name)) {
              this.stack.unshift(name);
              if (this.htmlMode) {
                if (foreignContextElements.has(name)) {
                  this.foreignContext.unshift(true);
                } else if (htmlIntegrationElements.has(name)) {
                  this.foreignContext.unshift(false);
                }
              }
            }
            (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
            if (this.cbs.onopentag)
              this.attribs = {};
          };
          Parser2.prototype.endOpenTag = function(isImplied) {
            var _a, _b;
            this.startIndex = this.openTagStart;
            if (this.attribs) {
              (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
              this.attribs = null;
            }
            if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
              this.cbs.onclosetag(this.tagname, true);
            }
            this.tagname = "";
          };
          Parser2.prototype.onopentagend = function(endIndex) {
            this.endIndex = endIndex;
            this.endOpenTag(false);
            this.startIndex = endIndex + 1;
          };
          Parser2.prototype.onclosetag = function(start5, endIndex) {
            var _a, _b, _c, _d, _e3, _f, _g, _h;
            this.endIndex = endIndex;
            var name = this.getSlice(start5, endIndex);
            if (this.lowerCaseTagNames) {
              name = name.toLowerCase();
            }
            if (this.htmlMode && (foreignContextElements.has(name) || htmlIntegrationElements.has(name))) {
              this.foreignContext.shift();
            }
            if (!this.isVoidElement(name)) {
              var pos = this.stack.indexOf(name);
              if (pos !== -1) {
                for (var index = 0; index <= pos; index++) {
                  var element = this.stack.shift();
                  (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, index !== pos);
                }
              } else if (this.htmlMode && name === "p") {
                this.emitOpenTag("p");
                this.closeCurrentTag(true);
              }
            } else if (this.htmlMode && name === "br") {
              (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, "br");
              (_f = (_e3 = this.cbs).onopentag) === null || _f === void 0 ? void 0 : _f.call(_e3, "br", {}, true);
              (_h = (_g = this.cbs).onclosetag) === null || _h === void 0 ? void 0 : _h.call(_g, "br", false);
            }
            this.startIndex = endIndex + 1;
          };
          Parser2.prototype.onselfclosingtag = function(endIndex) {
            this.endIndex = endIndex;
            if (this.options.recognizeSelfClosing || this.foreignContext[0]) {
              this.closeCurrentTag(false);
              this.startIndex = endIndex + 1;
            } else {
              this.onopentagend(endIndex);
            }
          };
          Parser2.prototype.closeCurrentTag = function(isOpenImplied) {
            var _a, _b;
            var name = this.tagname;
            this.endOpenTag(isOpenImplied);
            if (this.stack[0] === name) {
              (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
              this.stack.shift();
            }
          };
          Parser2.prototype.onattribname = function(start5, endIndex) {
            this.startIndex = start5;
            var name = this.getSlice(start5, endIndex);
            this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
          };
          Parser2.prototype.onattribdata = function(start5, endIndex) {
            this.attribvalue += this.getSlice(start5, endIndex);
          };
          Parser2.prototype.onattribentity = function(cp) {
            this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);
          };
          Parser2.prototype.onattribend = function(quote, endIndex) {
            var _a, _b;
            this.endIndex = endIndex;
            (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? void 0 : null);
            if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
              this.attribs[this.attribname] = this.attribvalue;
            }
            this.attribvalue = "";
          };
          Parser2.prototype.getInstructionName = function(value) {
            var index = value.search(reNameEnd);
            var name = index < 0 ? value : value.substr(0, index);
            if (this.lowerCaseTagNames) {
              name = name.toLowerCase();
            }
            return name;
          };
          Parser2.prototype.ondeclaration = function(start5, endIndex) {
            this.endIndex = endIndex;
            var value = this.getSlice(start5, endIndex);
            if (this.cbs.onprocessinginstruction) {
              var name = this.getInstructionName(value);
              this.cbs.onprocessinginstruction("!".concat(name), "!".concat(value));
            }
            this.startIndex = endIndex + 1;
          };
          Parser2.prototype.onprocessinginstruction = function(start5, endIndex) {
            this.endIndex = endIndex;
            var value = this.getSlice(start5, endIndex);
            if (this.cbs.onprocessinginstruction) {
              var name = this.getInstructionName(value);
              this.cbs.onprocessinginstruction("?".concat(name), "?".concat(value));
            }
            this.startIndex = endIndex + 1;
          };
          Parser2.prototype.oncomment = function(start5, endIndex, offset5) {
            var _a, _b, _c, _d;
            this.endIndex = endIndex;
            (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start5, endIndex - offset5));
            (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
            this.startIndex = endIndex + 1;
          };
          Parser2.prototype.oncdata = function(start5, endIndex, offset5) {
            var _a, _b, _c, _d, _e3, _f, _g, _h, _j, _k;
            this.endIndex = endIndex;
            var value = this.getSlice(start5, endIndex - offset5);
            if (!this.htmlMode || this.options.recognizeCDATA) {
              (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
              (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
              (_f = (_e3 = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e3);
            } else {
              (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[".concat(value, "]]"));
              (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
            }
            this.startIndex = endIndex + 1;
          };
          Parser2.prototype.onend = function() {
            var _a, _b;
            if (this.cbs.onclosetag) {
              this.endIndex = this.startIndex;
              for (var index = 0; index < this.stack.length; index++) {
                this.cbs.onclosetag(this.stack[index], true);
              }
            }
            (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
          };
          Parser2.prototype.reset = function() {
            var _a, _b, _c, _d;
            (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
            this.tokenizer.reset();
            this.tagname = "";
            this.attribname = "";
            this.attribs = null;
            this.stack.length = 0;
            this.startIndex = 0;
            this.endIndex = 0;
            (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
            this.buffers.length = 0;
            this.foreignContext.length = 0;
            this.foreignContext.unshift(!this.htmlMode);
            this.bufferOffset = 0;
            this.writeIndex = 0;
            this.ended = false;
          };
          Parser2.prototype.parseComplete = function(data) {
            this.reset();
            this.end(data);
          };
          Parser2.prototype.getSlice = function(start5, end3) {
            while (start5 - this.bufferOffset >= this.buffers[0].length) {
              this.shiftBuffer();
            }
            var slice = this.buffers[0].slice(start5 - this.bufferOffset, end3 - this.bufferOffset);
            while (end3 - this.bufferOffset > this.buffers[0].length) {
              this.shiftBuffer();
              slice += this.buffers[0].slice(0, end3 - this.bufferOffset);
            }
            return slice;
          };
          Parser2.prototype.shiftBuffer = function() {
            this.bufferOffset += this.buffers[0].length;
            this.writeIndex--;
            this.buffers.shift();
          };
          Parser2.prototype.write = function(chunk) {
            var _a, _b;
            if (this.ended) {
              (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
              return;
            }
            this.buffers.push(chunk);
            if (this.tokenizer.running) {
              this.tokenizer.write(chunk);
              this.writeIndex++;
            }
          };
          Parser2.prototype.end = function(chunk) {
            var _a, _b;
            if (this.ended) {
              (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".end() after done!"));
              return;
            }
            if (chunk)
              this.write(chunk);
            this.ended = true;
            this.tokenizer.end();
          };
          Parser2.prototype.pause = function() {
            this.tokenizer.pause();
          };
          Parser2.prototype.resume = function() {
            this.tokenizer.resume();
            while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
              this.tokenizer.write(this.buffers[this.writeIndex++]);
            }
            if (this.ended)
              this.tokenizer.end();
          };
          Parser2.prototype.parseChunk = function(chunk) {
            this.write(chunk);
          };
          Parser2.prototype.done = function(chunk) {
            this.end(chunk);
          };
          return Parser2;
        }()
      );
      exports.Parser = Parser;
    }
  });

  // ../../contrib/hdbt/node_modules/domelementtype/lib/index.js
  var require_lib = __commonJS({
    "../../contrib/hdbt/node_modules/domelementtype/lib/index.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
      var ElementType;
      (function(ElementType2) {
        ElementType2["Root"] = "root";
        ElementType2["Text"] = "text";
        ElementType2["Directive"] = "directive";
        ElementType2["Comment"] = "comment";
        ElementType2["Script"] = "script";
        ElementType2["Style"] = "style";
        ElementType2["Tag"] = "tag";
        ElementType2["CDATA"] = "cdata";
        ElementType2["Doctype"] = "doctype";
      })(ElementType = exports.ElementType || (exports.ElementType = {}));
      function isTag(elem) {
        return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
      }
      __name(isTag, "isTag");
      exports.isTag = isTag;
      exports.Root = ElementType.Root;
      exports.Text = ElementType.Text;
      exports.Directive = ElementType.Directive;
      exports.Comment = ElementType.Comment;
      exports.Script = ElementType.Script;
      exports.Style = ElementType.Style;
      exports.Tag = ElementType.Tag;
      exports.CDATA = ElementType.CDATA;
      exports.Doctype = ElementType.Doctype;
    }
  });

  // ../../contrib/hdbt/node_modules/domhandler/lib/node.js
  var require_node3 = __commonJS({
    "../../contrib/hdbt/node_modules/domhandler/lib/node.js"(exports) {
      
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = /* @__PURE__ */ __name(function(d16, b6) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d17, b7) {
            d17.__proto__ = b7;
          } || function(d17, b7) {
            for (var p5 in b7) if (Object.prototype.hasOwnProperty.call(b7, p5)) d17[p5] = b7[p5];
          };
          return extendStatics(d16, b6);
        }, "extendStatics");
        return function(d16, b6) {
          if (typeof b6 !== "function" && b6 !== null)
            throw new TypeError("Class extends value " + String(b6) + " is not a constructor or null");
          extendStatics(d16, b6);
          function __() {
            this.constructor = d16;
          }
          __name(__, "__");
          d16.prototype = b6 === null ? Object.create(b6) : (__.prototype = b6.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t21) {
          for (var s21, i12 = 1, n21 = arguments.length; i12 < n21; i12++) {
            s21 = arguments[i12];
            for (var p5 in s21) if (Object.prototype.hasOwnProperty.call(s21, p5))
              t21[p5] = s21[p5];
          }
          return t21;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
      var domelementtype_1 = require_lib();
      var Node3 = (
        /** @class */
        function() {
          function Node4() {
            this.parent = null;
            this.prev = null;
            this.next = null;
            this.startIndex = null;
            this.endIndex = null;
          }
          __name(Node4, "Node");
          Object.defineProperty(Node4.prototype, "parentNode", {
            // Read-write aliases for properties
            /**
             * Same as {@link parent}.
             * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
             */
            get: /* @__PURE__ */ __name(function() {
              return this.parent;
            }, "get"),
            set: /* @__PURE__ */ __name(function(parent) {
              this.parent = parent;
            }, "set"),
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Node4.prototype, "previousSibling", {
            /**
             * Same as {@link prev}.
             * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
             */
            get: /* @__PURE__ */ __name(function() {
              return this.prev;
            }, "get"),
            set: /* @__PURE__ */ __name(function(prev) {
              this.prev = prev;
            }, "set"),
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Node4.prototype, "nextSibling", {
            /**
             * Same as {@link next}.
             * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
             */
            get: /* @__PURE__ */ __name(function() {
              return this.next;
            }, "get"),
            set: /* @__PURE__ */ __name(function(next) {
              this.next = next;
            }, "set"),
            enumerable: false,
            configurable: true
          });
          Node4.prototype.cloneNode = function(recursive) {
            if (recursive === void 0) {
              recursive = false;
            }
            return cloneNode(this, recursive);
          };
          return Node4;
        }()
      );
      exports.Node = Node3;
      var DataNode = (
        /** @class */
        function(_super) {
          __extends(DataNode2, _super);
          function DataNode2(data) {
            var _this = _super.call(this) || this;
            _this.data = data;
            return _this;
          }
          __name(DataNode2, "DataNode");
          Object.defineProperty(DataNode2.prototype, "nodeValue", {
            /**
             * Same as {@link data}.
             * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
             */
            get: /* @__PURE__ */ __name(function() {
              return this.data;
            }, "get"),
            set: /* @__PURE__ */ __name(function(data) {
              this.data = data;
            }, "set"),
            enumerable: false,
            configurable: true
          });
          return DataNode2;
        }(Node3)
      );
      exports.DataNode = DataNode;
      var Text2 = (
        /** @class */
        function(_super) {
          __extends(Text3, _super);
          function Text3() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = domelementtype_1.ElementType.Text;
            return _this;
          }
          __name(Text3, "Text");
          Object.defineProperty(Text3.prototype, "nodeType", {
            get: /* @__PURE__ */ __name(function() {
              return 3;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          return Text3;
        }(DataNode)
      );
      exports.Text = Text2;
      var Comment4 = (
        /** @class */
        function(_super) {
          __extends(Comment5, _super);
          function Comment5() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = domelementtype_1.ElementType.Comment;
            return _this;
          }
          __name(Comment5, "Comment");
          Object.defineProperty(Comment5.prototype, "nodeType", {
            get: /* @__PURE__ */ __name(function() {
              return 8;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          return Comment5;
        }(DataNode)
      );
      exports.Comment = Comment4;
      var ProcessingInstruction2 = (
        /** @class */
        function(_super) {
          __extends(ProcessingInstruction3, _super);
          function ProcessingInstruction3(name, data) {
            var _this = _super.call(this, data) || this;
            _this.name = name;
            _this.type = domelementtype_1.ElementType.Directive;
            return _this;
          }
          __name(ProcessingInstruction3, "ProcessingInstruction");
          Object.defineProperty(ProcessingInstruction3.prototype, "nodeType", {
            get: /* @__PURE__ */ __name(function() {
              return 1;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          return ProcessingInstruction3;
        }(DataNode)
      );
      exports.ProcessingInstruction = ProcessingInstruction2;
      var NodeWithChildren = (
        /** @class */
        function(_super) {
          __extends(NodeWithChildren2, _super);
          function NodeWithChildren2(children) {
            var _this = _super.call(this) || this;
            _this.children = children;
            return _this;
          }
          __name(NodeWithChildren2, "NodeWithChildren");
          Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
            // Aliases
            /** First child of the node. */
            get: /* @__PURE__ */ __name(function() {
              var _a;
              return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
            /** Last child of the node. */
            get: /* @__PURE__ */ __name(function() {
              return this.children.length > 0 ? this.children[this.children.length - 1] : null;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
            /**
             * Same as {@link children}.
             * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
             */
            get: /* @__PURE__ */ __name(function() {
              return this.children;
            }, "get"),
            set: /* @__PURE__ */ __name(function(children) {
              this.children = children;
            }, "set"),
            enumerable: false,
            configurable: true
          });
          return NodeWithChildren2;
        }(Node3)
      );
      exports.NodeWithChildren = NodeWithChildren;
      var CDATA = (
        /** @class */
        function(_super) {
          __extends(CDATA2, _super);
          function CDATA2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = domelementtype_1.ElementType.CDATA;
            return _this;
          }
          __name(CDATA2, "CDATA");
          Object.defineProperty(CDATA2.prototype, "nodeType", {
            get: /* @__PURE__ */ __name(function() {
              return 4;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          return CDATA2;
        }(NodeWithChildren)
      );
      exports.CDATA = CDATA;
      var Document3 = (
        /** @class */
        function(_super) {
          __extends(Document4, _super);
          function Document4() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = domelementtype_1.ElementType.Root;
            return _this;
          }
          __name(Document4, "Document");
          Object.defineProperty(Document4.prototype, "nodeType", {
            get: /* @__PURE__ */ __name(function() {
              return 9;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          return Document4;
        }(NodeWithChildren)
      );
      exports.Document = Document3;
      var Element3 = (
        /** @class */
        function(_super) {
          __extends(Element4, _super);
          function Element4(name, attribs, children, type) {
            if (children === void 0) {
              children = [];
            }
            if (type === void 0) {
              type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
            }
            var _this = _super.call(this, children) || this;
            _this.name = name;
            _this.attribs = attribs;
            _this.type = type;
            return _this;
          }
          __name(Element4, "Element");
          Object.defineProperty(Element4.prototype, "nodeType", {
            get: /* @__PURE__ */ __name(function() {
              return 1;
            }, "get"),
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Element4.prototype, "tagName", {
            // DOM Level 1 aliases
            /**
             * Same as {@link name}.
             * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
             */
            get: /* @__PURE__ */ __name(function() {
              return this.name;
            }, "get"),
            set: /* @__PURE__ */ __name(function(name) {
              this.name = name;
            }, "set"),
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Element4.prototype, "attributes", {
            get: /* @__PURE__ */ __name(function() {
              var _this = this;
              return Object.keys(this.attribs).map(function(name) {
                var _a, _b;
                return {
                  name,
                  value: _this.attribs[name],
                  namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                  prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
                };
              });
            }, "get"),
            enumerable: false,
            configurable: true
          });
          return Element4;
        }(NodeWithChildren)
      );
      exports.Element = Element3;
      function isTag(node) {
        return (0, domelementtype_1.isTag)(node);
      }
      __name(isTag, "isTag");
      exports.isTag = isTag;
      function isCDATA(node) {
        return node.type === domelementtype_1.ElementType.CDATA;
      }
      __name(isCDATA, "isCDATA");
      exports.isCDATA = isCDATA;
      function isText(node) {
        return node.type === domelementtype_1.ElementType.Text;
      }
      __name(isText, "isText");
      exports.isText = isText;
      function isComment(node) {
        return node.type === domelementtype_1.ElementType.Comment;
      }
      __name(isComment, "isComment");
      exports.isComment = isComment;
      function isDirective(node) {
        return node.type === domelementtype_1.ElementType.Directive;
      }
      __name(isDirective, "isDirective");
      exports.isDirective = isDirective;
      function isDocument(node) {
        return node.type === domelementtype_1.ElementType.Root;
      }
      __name(isDocument, "isDocument");
      exports.isDocument = isDocument;
      function hasChildren(node) {
        return Object.prototype.hasOwnProperty.call(node, "children");
      }
      __name(hasChildren, "hasChildren");
      exports.hasChildren = hasChildren;
      function cloneNode(node, recursive) {
        if (recursive === void 0) {
          recursive = false;
        }
        var result;
        if (isText(node)) {
          result = new Text2(node.data);
        } else if (isComment(node)) {
          result = new Comment4(node.data);
        } else if (isTag(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_1 = new Element3(node.name, __assign({}, node.attribs), children);
          children.forEach(function(child) {
            return child.parent = clone_1;
          });
          if (node.namespace != null) {
            clone_1.namespace = node.namespace;
          }
          if (node["x-attribsNamespace"]) {
            clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);
          }
          if (node["x-attribsPrefix"]) {
            clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);
          }
          result = clone_1;
        } else if (isCDATA(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_2 = new CDATA(children);
          children.forEach(function(child) {
            return child.parent = clone_2;
          });
          result = clone_2;
        } else if (isDocument(node)) {
          var children = recursive ? cloneChildren(node.children) : [];
          var clone_3 = new Document3(children);
          children.forEach(function(child) {
            return child.parent = clone_3;
          });
          if (node["x-mode"]) {
            clone_3["x-mode"] = node["x-mode"];
          }
          result = clone_3;
        } else if (isDirective(node)) {
          var instruction = new ProcessingInstruction2(node.name, node.data);
          if (node["x-name"] != null) {
            instruction["x-name"] = node["x-name"];
            instruction["x-publicId"] = node["x-publicId"];
            instruction["x-systemId"] = node["x-systemId"];
          }
          result = instruction;
        } else {
          throw new Error("Not implemented yet: ".concat(node.type));
        }
        result.startIndex = node.startIndex;
        result.endIndex = node.endIndex;
        if (node.sourceCodeLocation != null) {
          result.sourceCodeLocation = node.sourceCodeLocation;
        }
        return result;
      }
      __name(cloneNode, "cloneNode");
      exports.cloneNode = cloneNode;
      function cloneChildren(childs) {
        var children = childs.map(function(child) {
          return cloneNode(child, true);
        });
        for (var i12 = 1; i12 < children.length; i12++) {
          children[i12].prev = children[i12 - 1];
          children[i12 - 1].next = children[i12];
        }
        return children;
      }
      __name(cloneChildren, "cloneChildren");
    }
  });

  // ../../contrib/hdbt/node_modules/domhandler/lib/index.js
  var require_lib2 = __commonJS({
    "../../contrib/hdbt/node_modules/domhandler/lib/index.js"(exports) {
      
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m6, exports2) {
        for (var p5 in m6) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding(exports2, m6, p5);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DomHandler = void 0;
      var domelementtype_1 = require_lib();
      var node_js_1 = require_node3();
      __exportStar(require_node3(), exports);
      var defaultOpts = {
        withStartIndices: false,
        withEndIndices: false,
        xmlMode: false
      };
      var DomHandler = (
        /** @class */
        function() {
          function DomHandler2(callback, options, elementCB) {
            this.dom = [];
            this.root = new node_js_1.Document(this.dom);
            this.done = false;
            this.tagStack = [this.root];
            this.lastNode = null;
            this.parser = null;
            if (typeof options === "function") {
              elementCB = options;
              options = defaultOpts;
            }
            if (typeof callback === "object") {
              options = callback;
              callback = void 0;
            }
            this.callback = callback !== null && callback !== void 0 ? callback : null;
            this.options = options !== null && options !== void 0 ? options : defaultOpts;
            this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
          }
          __name(DomHandler2, "DomHandler");
          DomHandler2.prototype.onparserinit = function(parser) {
            this.parser = parser;
          };
          DomHandler2.prototype.onreset = function() {
            this.dom = [];
            this.root = new node_js_1.Document(this.dom);
            this.done = false;
            this.tagStack = [this.root];
            this.lastNode = null;
            this.parser = null;
          };
          DomHandler2.prototype.onend = function() {
            if (this.done)
              return;
            this.done = true;
            this.parser = null;
            this.handleCallback(null);
          };
          DomHandler2.prototype.onerror = function(error2) {
            this.handleCallback(error2);
          };
          DomHandler2.prototype.onclosetag = function() {
            this.lastNode = null;
            var elem = this.tagStack.pop();
            if (this.options.withEndIndices) {
              elem.endIndex = this.parser.endIndex;
            }
            if (this.elementCB)
              this.elementCB(elem);
          };
          DomHandler2.prototype.onopentag = function(name, attribs) {
            var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : void 0;
            var element = new node_js_1.Element(name, attribs, void 0, type);
            this.addNode(element);
            this.tagStack.push(element);
          };
          DomHandler2.prototype.ontext = function(data) {
            var lastNode = this.lastNode;
            if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
              lastNode.data += data;
              if (this.options.withEndIndices) {
                lastNode.endIndex = this.parser.endIndex;
              }
            } else {
              var node = new node_js_1.Text(data);
              this.addNode(node);
              this.lastNode = node;
            }
          };
          DomHandler2.prototype.oncomment = function(data) {
            if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
              this.lastNode.data += data;
              return;
            }
            var node = new node_js_1.Comment(data);
            this.addNode(node);
            this.lastNode = node;
          };
          DomHandler2.prototype.oncommentend = function() {
            this.lastNode = null;
          };
          DomHandler2.prototype.oncdatastart = function() {
            var text = new node_js_1.Text("");
            var node = new node_js_1.CDATA([text]);
            this.addNode(node);
            text.parent = node;
            this.lastNode = text;
          };
          DomHandler2.prototype.oncdataend = function() {
            this.lastNode = null;
          };
          DomHandler2.prototype.onprocessinginstruction = function(name, data) {
            var node = new node_js_1.ProcessingInstruction(name, data);
            this.addNode(node);
          };
          DomHandler2.prototype.handleCallback = function(error2) {
            if (typeof this.callback === "function") {
              this.callback(error2, this.dom);
            } else if (error2) {
              throw error2;
            }
          };
          DomHandler2.prototype.addNode = function(node) {
            var parent = this.tagStack[this.tagStack.length - 1];
            var previousSibling = parent.children[parent.children.length - 1];
            if (this.options.withStartIndices) {
              node.startIndex = this.parser.startIndex;
            }
            if (this.options.withEndIndices) {
              node.endIndex = this.parser.endIndex;
            }
            parent.children.push(node);
            if (previousSibling) {
              node.prev = previousSibling;
              previousSibling.next = node;
            }
            node.parent = parent;
            this.lastNode = null;
          };
          return DomHandler2;
        }()
      );
      exports.DomHandler = DomHandler;
      exports.default = DomHandler;
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/generated/encode-html.js
  var require_encode_html = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/generated/encode-html.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      function restoreDiff(arr) {
        for (var i12 = 1; i12 < arr.length; i12++) {
          arr[i12][0] += arr[i12 - 1][0] + 1;
        }
        return arr;
      }
      __name(restoreDiff, "restoreDiff");
      exports.default = new Map(/* @__PURE__ */ restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(/* @__PURE__ */ restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]]));
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/escape.js
  var require_escape = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/escape.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;
      exports.xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
      var xmlCodeMap = /* @__PURE__ */ new Map([
        [34, "&quot;"],
        [38, "&amp;"],
        [39, "&apos;"],
        [60, "&lt;"],
        [62, "&gt;"]
      ]);
      exports.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      String.prototype.codePointAt != null ? function(str, index) {
        return str.codePointAt(index);
      } : (
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        function(c6, index) {
          return (c6.charCodeAt(index) & 64512) === 55296 ? (c6.charCodeAt(index) - 55296) * 1024 + c6.charCodeAt(index + 1) - 56320 + 65536 : c6.charCodeAt(index);
        }
      );
      function encodeXML(str) {
        var ret = "";
        var lastIdx = 0;
        var match4;
        while ((match4 = exports.xmlReplacer.exec(str)) !== null) {
          var i12 = match4.index;
          var char = str.charCodeAt(i12);
          var next = xmlCodeMap.get(char);
          if (next !== void 0) {
            ret += str.substring(lastIdx, i12) + next;
            lastIdx = i12 + 1;
          } else {
            ret += "".concat(str.substring(lastIdx, i12), "&#x").concat((0, exports.getCodePoint)(str, i12).toString(16), ";");
            lastIdx = exports.xmlReplacer.lastIndex += Number((char & 64512) === 55296);
          }
        }
        return ret + str.substr(lastIdx);
      }
      __name(encodeXML, "encodeXML");
      exports.encodeXML = encodeXML;
      exports.escape = encodeXML;
      function getEscaper(regex, map) {
        return /* @__PURE__ */ __name(function escape2(data) {
          var match4;
          var lastIdx = 0;
          var result = "";
          while (match4 = regex.exec(data)) {
            if (lastIdx !== match4.index) {
              result += data.substring(lastIdx, match4.index);
            }
            result += map.get(match4[0].charCodeAt(0));
            lastIdx = match4.index + 1;
          }
          return result + data.substring(lastIdx);
        }, "escape");
      }
      __name(getEscaper, "getEscaper");
      exports.escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
      exports.escapeAttribute = getEscaper(/["&\u00A0]/g, /* @__PURE__ */ new Map([
        [34, "&quot;"],
        [38, "&amp;"],
        [160, "&nbsp;"]
      ]));
      exports.escapeText = getEscaper(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
        [38, "&amp;"],
        [60, "&lt;"],
        [62, "&gt;"],
        [160, "&nbsp;"]
      ]));
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/encode.js
  var require_encode = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/encode.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encodeNonAsciiHTML = exports.encodeHTML = void 0;
      var encode_html_js_1 = __importDefault(require_encode_html());
      var escape_js_1 = require_escape();
      var htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
      function encodeHTML(data) {
        return encodeHTMLTrieRe(htmlReplacer, data);
      }
      __name(encodeHTML, "encodeHTML");
      exports.encodeHTML = encodeHTML;
      function encodeNonAsciiHTML(data) {
        return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);
      }
      __name(encodeNonAsciiHTML, "encodeNonAsciiHTML");
      exports.encodeNonAsciiHTML = encodeNonAsciiHTML;
      function encodeHTMLTrieRe(regExp, str) {
        var ret = "";
        var lastIdx = 0;
        var match4;
        while ((match4 = regExp.exec(str)) !== null) {
          var i12 = match4.index;
          ret += str.substring(lastIdx, i12);
          var char = str.charCodeAt(i12);
          var next = encode_html_js_1.default.get(char);
          if (typeof next === "object") {
            if (i12 + 1 < str.length) {
              var nextChar = str.charCodeAt(i12 + 1);
              var value = typeof next.n === "number" ? next.n === nextChar ? next.o : void 0 : next.n.get(nextChar);
              if (value !== void 0) {
                ret += value;
                lastIdx = regExp.lastIndex += 1;
                continue;
              }
            }
            next = next.v;
          }
          if (next !== void 0) {
            ret += next;
            lastIdx = i12 + 1;
          } else {
            var cp = (0, escape_js_1.getCodePoint)(str, i12);
            ret += "&#x".concat(cp.toString(16), ";");
            lastIdx = regExp.lastIndex += Number(cp !== char);
          }
        }
        return ret + str.substr(lastIdx);
      }
      __name(encodeHTMLTrieRe, "encodeHTMLTrieRe");
    }
  });

  // ../../contrib/hdbt/node_modules/entities/lib/index.js
  var require_lib3 = __commonJS({
    "../../contrib/hdbt/node_modules/entities/lib/index.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLAttribute = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.DecodingMode = exports.EntityDecoder = exports.encodeHTML5 = exports.encodeHTML4 = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = exports.EncodingMode = exports.EntityLevel = void 0;
      var decode_js_1 = require_decode();
      var encode_js_1 = require_encode();
      var escape_js_1 = require_escape();
      var EntityLevel;
      (function(EntityLevel2) {
        EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
        EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
      })(EntityLevel = exports.EntityLevel || (exports.EntityLevel = {}));
      var EncodingMode;
      (function(EncodingMode2) {
        EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
        EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
        EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
        EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
        EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
      })(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));
      function decode(data, options) {
        if (options === void 0) {
          options = EntityLevel.XML;
        }
        var level3 = typeof options === "number" ? options : options.level;
        if (level3 === EntityLevel.HTML) {
          var mode = typeof options === "object" ? options.mode : void 0;
          return (0, decode_js_1.decodeHTML)(data, mode);
        }
        return (0, decode_js_1.decodeXML)(data);
      }
      __name(decode, "decode");
      exports.decode = decode;
      function decodeStrict(data, options) {
        var _a;
        if (options === void 0) {
          options = EntityLevel.XML;
        }
        var opts = typeof options === "number" ? { level: options } : options;
        (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = decode_js_1.DecodingMode.Strict;
        return decode(data, opts);
      }
      __name(decodeStrict, "decodeStrict");
      exports.decodeStrict = decodeStrict;
      function encode(data, options) {
        if (options === void 0) {
          options = EntityLevel.XML;
        }
        var opts = typeof options === "number" ? { level: options } : options;
        if (opts.mode === EncodingMode.UTF8)
          return (0, escape_js_1.escapeUTF8)(data);
        if (opts.mode === EncodingMode.Attribute)
          return (0, escape_js_1.escapeAttribute)(data);
        if (opts.mode === EncodingMode.Text)
          return (0, escape_js_1.escapeText)(data);
        if (opts.level === EntityLevel.HTML) {
          if (opts.mode === EncodingMode.ASCII) {
            return (0, encode_js_1.encodeNonAsciiHTML)(data);
          }
          return (0, encode_js_1.encodeHTML)(data);
        }
        return (0, escape_js_1.encodeXML)(data);
      }
      __name(encode, "encode");
      exports.encode = encode;
      var escape_js_2 = require_escape();
      Object.defineProperty(exports, "encodeXML", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return escape_js_2.encodeXML;
      }, "get") });
      Object.defineProperty(exports, "escape", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return escape_js_2.escape;
      }, "get") });
      Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return escape_js_2.escapeUTF8;
      }, "get") });
      Object.defineProperty(exports, "escapeAttribute", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return escape_js_2.escapeAttribute;
      }, "get") });
      Object.defineProperty(exports, "escapeText", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return escape_js_2.escapeText;
      }, "get") });
      var encode_js_2 = require_encode();
      Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return encode_js_2.encodeHTML;
      }, "get") });
      Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return encode_js_2.encodeNonAsciiHTML;
      }, "get") });
      Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return encode_js_2.encodeHTML;
      }, "get") });
      Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return encode_js_2.encodeHTML;
      }, "get") });
      var decode_js_2 = require_decode();
      Object.defineProperty(exports, "EntityDecoder", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.EntityDecoder;
      }, "get") });
      Object.defineProperty(exports, "DecodingMode", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.DecodingMode;
      }, "get") });
      Object.defineProperty(exports, "decodeXML", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeXML;
      }, "get") });
      Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTML;
      }, "get") });
      Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTMLStrict;
      }, "get") });
      Object.defineProperty(exports, "decodeHTMLAttribute", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTMLAttribute;
      }, "get") });
      Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTML;
      }, "get") });
      Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTML;
      }, "get") });
      Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTMLStrict;
      }, "get") });
      Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeHTMLStrict;
      }, "get") });
      Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return decode_js_2.decodeXML;
      }, "get") });
    }
  });

  // ../../contrib/hdbt/node_modules/dom-serializer/lib/foreignNames.js
  var require_foreignNames = __commonJS({
    "../../contrib/hdbt/node_modules/dom-serializer/lib/foreignNames.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.attributeNames = exports.elementNames = void 0;
      exports.elementNames = new Map([
        "altGlyph",
        "altGlyphDef",
        "altGlyphItem",
        "animateColor",
        "animateMotion",
        "animateTransform",
        "clipPath",
        "feBlend",
        "feColorMatrix",
        "feComponentTransfer",
        "feComposite",
        "feConvolveMatrix",
        "feDiffuseLighting",
        "feDisplacementMap",
        "feDistantLight",
        "feDropShadow",
        "feFlood",
        "feFuncA",
        "feFuncB",
        "feFuncG",
        "feFuncR",
        "feGaussianBlur",
        "feImage",
        "feMerge",
        "feMergeNode",
        "feMorphology",
        "feOffset",
        "fePointLight",
        "feSpecularLighting",
        "feSpotLight",
        "feTile",
        "feTurbulence",
        "foreignObject",
        "glyphRef",
        "linearGradient",
        "radialGradient",
        "textPath"
      ].map(function(val) {
        return [val.toLowerCase(), val];
      }));
      exports.attributeNames = new Map([
        "definitionURL",
        "attributeName",
        "attributeType",
        "baseFrequency",
        "baseProfile",
        "calcMode",
        "clipPathUnits",
        "diffuseConstant",
        "edgeMode",
        "filterUnits",
        "glyphRef",
        "gradientTransform",
        "gradientUnits",
        "kernelMatrix",
        "kernelUnitLength",
        "keyPoints",
        "keySplines",
        "keyTimes",
        "lengthAdjust",
        "limitingConeAngle",
        "markerHeight",
        "markerUnits",
        "markerWidth",
        "maskContentUnits",
        "maskUnits",
        "numOctaves",
        "pathLength",
        "patternContentUnits",
        "patternTransform",
        "patternUnits",
        "pointsAtX",
        "pointsAtY",
        "pointsAtZ",
        "preserveAlpha",
        "preserveAspectRatio",
        "primitiveUnits",
        "refX",
        "refY",
        "repeatCount",
        "repeatDur",
        "requiredExtensions",
        "requiredFeatures",
        "specularConstant",
        "specularExponent",
        "spreadMethod",
        "startOffset",
        "stdDeviation",
        "stitchTiles",
        "surfaceScale",
        "systemLanguage",
        "tableValues",
        "targetX",
        "targetY",
        "textLength",
        "viewBox",
        "viewTarget",
        "xChannelSelector",
        "yChannelSelector",
        "zoomAndPan"
      ].map(function(val) {
        return [val.toLowerCase(), val];
      }));
    }
  });

  // ../../contrib/hdbt/node_modules/dom-serializer/lib/index.js
  var require_lib4 = __commonJS({
    "../../contrib/hdbt/node_modules/dom-serializer/lib/index.js"(exports) {
      
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t21) {
          for (var s21, i12 = 1, n21 = arguments.length; i12 < n21; i12++) {
            s21 = arguments[i12];
            for (var p5 in s21) if (Object.prototype.hasOwnProperty.call(s21, p5))
              t21[p5] = s21[p5];
          }
          return t21;
        };
        return __assign.apply(this, arguments);
      };
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o18, v4) {
        Object.defineProperty(o18, "default", { enumerable: true, value: v4 });
      } : function(o18, v4) {
        o18["default"] = v4;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.render = void 0;
      var ElementType = __importStar(require_lib());
      var entities_1 = require_lib3();
      var foreignNames_js_1 = require_foreignNames();
      var unencodedElements = /* @__PURE__ */ new Set([
        "style",
        "script",
        "xmp",
        "iframe",
        "noembed",
        "noframes",
        "plaintext",
        "noscript"
      ]);
      function replaceQuotes(value) {
        return value.replace(/"/g, "&quot;");
      }
      __name(replaceQuotes, "replaceQuotes");
      function formatAttributes(attributes, opts) {
        var _a;
        if (!attributes)
          return;
        var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? entities_1.encodeXML : entities_1.escapeAttribute;
        return Object.keys(attributes).map(function(key) {
          var _a2, _b;
          var value = (_a2 = attributes[key]) !== null && _a2 !== void 0 ? _a2 : "";
          if (opts.xmlMode === "foreign") {
            key = (_b = foreignNames_js_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
          }
          if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
            return key;
          }
          return "".concat(key, '="').concat(encode(value), '"');
        }).join(" ");
      }
      __name(formatAttributes, "formatAttributes");
      var singleTag = /* @__PURE__ */ new Set([
        "area",
        "base",
        "basefont",
        "br",
        "col",
        "command",
        "embed",
        "frame",
        "hr",
        "img",
        "input",
        "isindex",
        "keygen",
        "link",
        "meta",
        "param",
        "source",
        "track",
        "wbr"
      ]);
      function render(node, options) {
        if (options === void 0) {
          options = {};
        }
        var nodes = "length" in node ? node : [node];
        var output = "";
        for (var i12 = 0; i12 < nodes.length; i12++) {
          output += renderNode(nodes[i12], options);
        }
        return output;
      }
      __name(render, "render");
      exports.render = render;
      exports.default = render;
      function renderNode(node, options) {
        switch (node.type) {
          case ElementType.Root:
            return render(node.children, options);
          // @ts-expect-error We don't use `Doctype` yet
          case ElementType.Doctype:
          case ElementType.Directive:
            return renderDirective(node);
          case ElementType.Comment:
            return renderComment(node);
          case ElementType.CDATA:
            return renderCdata(node);
          case ElementType.Script:
          case ElementType.Style:
          case ElementType.Tag:
            return renderTag(node, options);
          case ElementType.Text:
            return renderText(node, options);
        }
      }
      __name(renderNode, "renderNode");
      var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
        "mi",
        "mo",
        "mn",
        "ms",
        "mtext",
        "annotation-xml",
        "foreignObject",
        "desc",
        "title"
      ]);
      var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
      function renderTag(elem, opts) {
        var _a;
        if (opts.xmlMode === "foreign") {
          elem.name = (_a = foreignNames_js_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
          if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = __assign(__assign({}, opts), { xmlMode: false });
          }
        }
        if (!opts.xmlMode && foreignElements.has(elem.name)) {
          opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
        }
        var tag = "<".concat(elem.name);
        var attribs = formatAttributes(elem.attribs, opts);
        if (attribs) {
          tag += " ".concat(attribs);
        }
        if (elem.children.length === 0 && (opts.xmlMode ? (
          // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
          opts.selfClosingTags !== false
        ) : (
          // User explicitly asked for self-closing tags, even in HTML mode
          opts.selfClosingTags && singleTag.has(elem.name)
        ))) {
          if (!opts.xmlMode)
            tag += " ";
          tag += "/>";
        } else {
          tag += ">";
          if (elem.children.length > 0) {
            tag += render(elem.children, opts);
          }
          if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += "</".concat(elem.name, ">");
          }
        }
        return tag;
      }
      __name(renderTag, "renderTag");
      function renderDirective(elem) {
        return "<".concat(elem.data, ">");
      }
      __name(renderDirective, "renderDirective");
      function renderText(elem, opts) {
        var _a;
        var data = elem.data || "";
        if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
          data = opts.xmlMode || opts.encodeEntities !== "utf8" ? (0, entities_1.encodeXML)(data) : (0, entities_1.escapeText)(data);
        }
        return data;
      }
      __name(renderText, "renderText");
      function renderCdata(elem) {
        return "<![CDATA[".concat(elem.children[0].data, "]]>");
      }
      __name(renderCdata, "renderCdata");
      function renderComment(elem) {
        return "<!--".concat(elem.data, "-->");
      }
      __name(renderComment, "renderComment");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/stringify.js
  var require_stringify3 = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/stringify.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getOuterHTML = getOuterHTML;
      exports.getInnerHTML = getInnerHTML;
      exports.getText = getText;
      exports.textContent = textContent;
      exports.innerText = innerText;
      var domhandler_1 = require_lib2();
      var dom_serializer_1 = __importDefault(require_lib4());
      var domelementtype_1 = require_lib();
      function getOuterHTML(node, options) {
        return (0, dom_serializer_1.default)(node, options);
      }
      __name(getOuterHTML, "getOuterHTML");
      function getInnerHTML(node, options) {
        return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node2) {
          return getOuterHTML(node2, options);
        }).join("") : "";
      }
      __name(getInnerHTML, "getInnerHTML");
      function getText(node) {
        if (Array.isArray(node))
          return node.map(getText).join("");
        if ((0, domhandler_1.isTag)(node))
          return node.name === "br" ? "\n" : getText(node.children);
        if ((0, domhandler_1.isCDATA)(node))
          return getText(node.children);
        if ((0, domhandler_1.isText)(node))
          return node.data;
        return "";
      }
      __name(getText, "getText");
      function textContent(node) {
        if (Array.isArray(node))
          return node.map(textContent).join("");
        if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
          return textContent(node.children);
        }
        if ((0, domhandler_1.isText)(node))
          return node.data;
        return "";
      }
      __name(textContent, "textContent");
      function innerText(node) {
        if (Array.isArray(node))
          return node.map(innerText).join("");
        if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
          return innerText(node.children);
        }
        if ((0, domhandler_1.isText)(node))
          return node.data;
        return "";
      }
      __name(innerText, "innerText");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/traversal.js
  var require_traversal = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/traversal.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getChildren = getChildren;
      exports.getParent = getParent;
      exports.getSiblings = getSiblings;
      exports.getAttributeValue = getAttributeValue;
      exports.hasAttrib = hasAttrib;
      exports.getName = getName;
      exports.nextElementSibling = nextElementSibling;
      exports.prevElementSibling = prevElementSibling;
      var domhandler_1 = require_lib2();
      function getChildren(elem) {
        return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];
      }
      __name(getChildren, "getChildren");
      function getParent(elem) {
        return elem.parent || null;
      }
      __name(getParent, "getParent");
      function getSiblings(elem) {
        var _a, _b;
        var parent = getParent(elem);
        if (parent != null)
          return getChildren(parent);
        var siblings = [elem];
        var prev = elem.prev, next = elem.next;
        while (prev != null) {
          siblings.unshift(prev);
          _a = prev, prev = _a.prev;
        }
        while (next != null) {
          siblings.push(next);
          _b = next, next = _b.next;
        }
        return siblings;
      }
      __name(getSiblings, "getSiblings");
      function getAttributeValue(elem, name) {
        var _a;
        return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
      }
      __name(getAttributeValue, "getAttributeValue");
      function hasAttrib(elem, name) {
        return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
      }
      __name(hasAttrib, "hasAttrib");
      function getName(elem) {
        return elem.name;
      }
      __name(getName, "getName");
      function nextElementSibling(elem) {
        var _a;
        var next = elem.next;
        while (next !== null && !(0, domhandler_1.isTag)(next))
          _a = next, next = _a.next;
        return next;
      }
      __name(nextElementSibling, "nextElementSibling");
      function prevElementSibling(elem) {
        var _a;
        var prev = elem.prev;
        while (prev !== null && !(0, domhandler_1.isTag)(prev))
          _a = prev, prev = _a.prev;
        return prev;
      }
      __name(prevElementSibling, "prevElementSibling");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/manipulation.js
  var require_manipulation = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/manipulation.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removeElement = removeElement;
      exports.replaceElement = replaceElement;
      exports.appendChild = appendChild;
      exports.append = append;
      exports.prependChild = prependChild;
      exports.prepend = prepend;
      function removeElement(elem) {
        if (elem.prev)
          elem.prev.next = elem.next;
        if (elem.next)
          elem.next.prev = elem.prev;
        if (elem.parent) {
          var childs = elem.parent.children;
          var childsIndex = childs.lastIndexOf(elem);
          if (childsIndex >= 0) {
            childs.splice(childsIndex, 1);
          }
        }
        elem.next = null;
        elem.prev = null;
        elem.parent = null;
      }
      __name(removeElement, "removeElement");
      function replaceElement(elem, replacement) {
        var prev = replacement.prev = elem.prev;
        if (prev) {
          prev.next = replacement;
        }
        var next = replacement.next = elem.next;
        if (next) {
          next.prev = replacement;
        }
        var parent = replacement.parent = elem.parent;
        if (parent) {
          var childs = parent.children;
          childs[childs.lastIndexOf(elem)] = replacement;
          elem.parent = null;
        }
      }
      __name(replaceElement, "replaceElement");
      function appendChild(parent, child) {
        removeElement(child);
        child.next = null;
        child.parent = parent;
        if (parent.children.push(child) > 1) {
          var sibling = parent.children[parent.children.length - 2];
          sibling.next = child;
          child.prev = sibling;
        } else {
          child.prev = null;
        }
      }
      __name(appendChild, "appendChild");
      function append(elem, next) {
        removeElement(next);
        var parent = elem.parent;
        var currNext = elem.next;
        next.next = currNext;
        next.prev = elem;
        elem.next = next;
        next.parent = parent;
        if (currNext) {
          currNext.prev = next;
          if (parent) {
            var childs = parent.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next);
          }
        } else if (parent) {
          parent.children.push(next);
        }
      }
      __name(append, "append");
      function prependChild(parent, child) {
        removeElement(child);
        child.parent = parent;
        child.prev = null;
        if (parent.children.unshift(child) !== 1) {
          var sibling = parent.children[1];
          sibling.prev = child;
          child.next = sibling;
        } else {
          child.next = null;
        }
      }
      __name(prependChild, "prependChild");
      function prepend(elem, prev) {
        removeElement(prev);
        var parent = elem.parent;
        if (parent) {
          var childs = parent.children;
          childs.splice(childs.indexOf(elem), 0, prev);
        }
        if (elem.prev) {
          elem.prev.next = prev;
        }
        prev.parent = parent;
        prev.prev = elem.prev;
        prev.next = elem;
        elem.prev = prev;
      }
      __name(prepend, "prepend");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/querying.js
  var require_querying = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/querying.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.filter = filter;
      exports.find = find;
      exports.findOneChild = findOneChild;
      exports.findOne = findOne;
      exports.existsOne = existsOne;
      exports.findAll = findAll;
      var domhandler_1 = require_lib2();
      function filter(test, node, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return find(test, Array.isArray(node) ? node : [node], recurse, limit);
      }
      __name(filter, "filter");
      function find(test, nodes, recurse, limit) {
        var result = [];
        var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];
        var indexStack = [0];
        for (; ; ) {
          if (indexStack[0] >= nodeStack[0].length) {
            if (indexStack.length === 1) {
              return result;
            }
            nodeStack.shift();
            indexStack.shift();
            continue;
          }
          var elem = nodeStack[0][indexStack[0]++];
          if (test(elem)) {
            result.push(elem);
            if (--limit <= 0)
              return result;
          }
          if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
          }
        }
      }
      __name(find, "find");
      function findOneChild(test, nodes) {
        return nodes.find(test);
      }
      __name(findOneChild, "findOneChild");
      function findOne(test, nodes, recurse) {
        if (recurse === void 0) {
          recurse = true;
        }
        var searchedNodes = Array.isArray(nodes) ? nodes : [nodes];
        for (var i12 = 0; i12 < searchedNodes.length; i12++) {
          var node = searchedNodes[i12];
          if ((0, domhandler_1.isTag)(node) && test(node)) {
            return node;
          }
          if (recurse && (0, domhandler_1.hasChildren)(node) && node.children.length > 0) {
            var found = findOne(test, node.children, true);
            if (found)
              return found;
          }
        }
        return null;
      }
      __name(findOne, "findOne");
      function existsOne(test, nodes) {
        return (Array.isArray(nodes) ? nodes : [nodes]).some(function(node) {
          return (0, domhandler_1.isTag)(node) && test(node) || (0, domhandler_1.hasChildren)(node) && existsOne(test, node.children);
        });
      }
      __name(existsOne, "existsOne");
      function findAll(test, nodes) {
        var result = [];
        var nodeStack = [Array.isArray(nodes) ? nodes : [nodes]];
        var indexStack = [0];
        for (; ; ) {
          if (indexStack[0] >= nodeStack[0].length) {
            if (nodeStack.length === 1) {
              return result;
            }
            nodeStack.shift();
            indexStack.shift();
            continue;
          }
          var elem = nodeStack[0][indexStack[0]++];
          if ((0, domhandler_1.isTag)(elem) && test(elem))
            result.push(elem);
          if ((0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
          }
        }
      }
      __name(findAll, "findAll");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/legacy.js
  var require_legacy = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/legacy.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.testElement = testElement;
      exports.getElements = getElements;
      exports.getElementById = getElementById;
      exports.getElementsByTagName = getElementsByTagName;
      exports.getElementsByClassName = getElementsByClassName;
      exports.getElementsByTagType = getElementsByTagType;
      var domhandler_1 = require_lib2();
      var querying_js_1 = require_querying();
      var Checks = {
        tag_name: /* @__PURE__ */ __name(function(name) {
          if (typeof name === "function") {
            return function(elem) {
              return (0, domhandler_1.isTag)(elem) && name(elem.name);
            };
          } else if (name === "*") {
            return domhandler_1.isTag;
          }
          return function(elem) {
            return (0, domhandler_1.isTag)(elem) && elem.name === name;
          };
        }, "tag_name"),
        tag_type: /* @__PURE__ */ __name(function(type) {
          if (typeof type === "function") {
            return function(elem) {
              return type(elem.type);
            };
          }
          return function(elem) {
            return elem.type === type;
          };
        }, "tag_type"),
        tag_contains: /* @__PURE__ */ __name(function(data) {
          if (typeof data === "function") {
            return function(elem) {
              return (0, domhandler_1.isText)(elem) && data(elem.data);
            };
          }
          return function(elem) {
            return (0, domhandler_1.isText)(elem) && elem.data === data;
          };
        }, "tag_contains")
      };
      function getAttribCheck(attrib, value) {
        if (typeof value === "function") {
          return function(elem) {
            return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
          };
        }
        return function(elem) {
          return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
        };
      }
      __name(getAttribCheck, "getAttribCheck");
      function combineFuncs(a21, b6) {
        return function(elem) {
          return a21(elem) || b6(elem);
        };
      }
      __name(combineFuncs, "combineFuncs");
      function compileTest(options) {
        var funcs = Object.keys(options).map(function(key) {
          var value = options[key];
          return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
        });
        return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
      }
      __name(compileTest, "compileTest");
      function testElement(options, node) {
        var test = compileTest(options);
        return test ? test(node) : true;
      }
      __name(testElement, "testElement");
      function getElements(options, nodes, recurse, limit) {
        if (limit === void 0) {
          limit = Infinity;
        }
        var test = compileTest(options);
        return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];
      }
      __name(getElements, "getElements");
      function getElementById(id, nodes, recurse) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (!Array.isArray(nodes))
          nodes = [nodes];
        return (0, querying_js_1.findOne)(getAttribCheck("id", id), nodes, recurse);
      }
      __name(getElementById, "getElementById");
      function getElementsByTagName(tagName, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return (0, querying_js_1.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
      }
      __name(getElementsByTagName, "getElementsByTagName");
      function getElementsByClassName(className, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return (0, querying_js_1.filter)(getAttribCheck("class", className), nodes, recurse, limit);
      }
      __name(getElementsByClassName, "getElementsByClassName");
      function getElementsByTagType(type, nodes, recurse, limit) {
        if (recurse === void 0) {
          recurse = true;
        }
        if (limit === void 0) {
          limit = Infinity;
        }
        return (0, querying_js_1.filter)(Checks["tag_type"](type), nodes, recurse, limit);
      }
      __name(getElementsByTagType, "getElementsByTagType");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/helpers.js
  var require_helpers = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/helpers.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DocumentPosition = void 0;
      exports.removeSubsets = removeSubsets;
      exports.compareDocumentPosition = compareDocumentPosition;
      exports.uniqueSort = uniqueSort;
      var domhandler_1 = require_lib2();
      function removeSubsets(nodes) {
        var idx = nodes.length;
        while (--idx >= 0) {
          var node = nodes[idx];
          if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
          }
          for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.includes(ancestor)) {
              nodes.splice(idx, 1);
              break;
            }
          }
        }
        return nodes;
      }
      __name(removeSubsets, "removeSubsets");
      var DocumentPosition;
      (function(DocumentPosition2) {
        DocumentPosition2[DocumentPosition2["DISCONNECTED"] = 1] = "DISCONNECTED";
        DocumentPosition2[DocumentPosition2["PRECEDING"] = 2] = "PRECEDING";
        DocumentPosition2[DocumentPosition2["FOLLOWING"] = 4] = "FOLLOWING";
        DocumentPosition2[DocumentPosition2["CONTAINS"] = 8] = "CONTAINS";
        DocumentPosition2[DocumentPosition2["CONTAINED_BY"] = 16] = "CONTAINED_BY";
      })(DocumentPosition || (exports.DocumentPosition = DocumentPosition = {}));
      function compareDocumentPosition(nodeA, nodeB) {
        var aParents = [];
        var bParents = [];
        if (nodeA === nodeB) {
          return 0;
        }
        var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
        while (current) {
          aParents.unshift(current);
          current = current.parent;
        }
        current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
        while (current) {
          bParents.unshift(current);
          current = current.parent;
        }
        var maxIdx = Math.min(aParents.length, bParents.length);
        var idx = 0;
        while (idx < maxIdx && aParents[idx] === bParents[idx]) {
          idx++;
        }
        if (idx === 0) {
          return DocumentPosition.DISCONNECTED;
        }
        var sharedParent = aParents[idx - 1];
        var siblings = sharedParent.children;
        var aSibling = aParents[idx];
        var bSibling = bParents[idx];
        if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
          if (sharedParent === nodeB) {
            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
          }
          return DocumentPosition.FOLLOWING;
        }
        if (sharedParent === nodeA) {
          return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
        }
        return DocumentPosition.PRECEDING;
      }
      __name(compareDocumentPosition, "compareDocumentPosition");
      function uniqueSort(nodes) {
        nodes = nodes.filter(function(node, i12, arr) {
          return !arr.includes(node, i12 + 1);
        });
        nodes.sort(function(a21, b6) {
          var relative = compareDocumentPosition(a21, b6);
          if (relative & DocumentPosition.PRECEDING) {
            return -1;
          } else if (relative & DocumentPosition.FOLLOWING) {
            return 1;
          }
          return 0;
        });
        return nodes;
      }
      __name(uniqueSort, "uniqueSort");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/feeds.js
  var require_feeds = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/feeds.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getFeed = getFeed;
      var stringify_js_1 = require_stringify3();
      var legacy_js_1 = require_legacy();
      function getFeed(doc) {
        var feedRoot = getOneElement(isValidFeed, doc);
        return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
      }
      __name(getFeed, "getFeed");
      function getAtomFeed(feedRoot) {
        var _a;
        var childs = feedRoot.children;
        var feed = {
          type: "atom",
          items: (0, legacy_js_1.getElementsByTagName)("entry", childs).map(function(item) {
            var _a2;
            var children = item.children;
            var entry = { media: getMediaElements(children) };
            addConditionally(entry, "id", "id", children);
            addConditionally(entry, "title", "title", children);
            var href2 = (_a2 = getOneElement("link", children)) === null || _a2 === void 0 ? void 0 : _a2.attribs["href"];
            if (href2) {
              entry.link = href2;
            }
            var description = fetch2("summary", children) || fetch2("content", children);
            if (description) {
              entry.description = description;
            }
            var pubDate = fetch2("updated", children);
            if (pubDate) {
              entry.pubDate = new Date(pubDate);
            }
            return entry;
          })
        };
        addConditionally(feed, "id", "id", childs);
        addConditionally(feed, "title", "title", childs);
        var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs["href"];
        if (href) {
          feed.link = href;
        }
        addConditionally(feed, "description", "subtitle", childs);
        var updated = fetch2("updated", childs);
        if (updated) {
          feed.updated = new Date(updated);
        }
        addConditionally(feed, "author", "email", childs, true);
        return feed;
      }
      __name(getAtomFeed, "getAtomFeed");
      function getRssFeed(feedRoot) {
        var _a, _b;
        var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
        var feed = {
          type: feedRoot.name.substr(0, 3),
          id: "",
          items: (0, legacy_js_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
            var children = item.children;
            var entry = { media: getMediaElements(children) };
            addConditionally(entry, "id", "guid", children);
            addConditionally(entry, "title", "title", children);
            addConditionally(entry, "link", "link", children);
            addConditionally(entry, "description", "description", children);
            var pubDate = fetch2("pubDate", children) || fetch2("dc:date", children);
            if (pubDate)
              entry.pubDate = new Date(pubDate);
            return entry;
          })
        };
        addConditionally(feed, "title", "title", childs);
        addConditionally(feed, "link", "link", childs);
        addConditionally(feed, "description", "description", childs);
        var updated = fetch2("lastBuildDate", childs);
        if (updated) {
          feed.updated = new Date(updated);
        }
        addConditionally(feed, "author", "managingEditor", childs, true);
        return feed;
      }
      __name(getRssFeed, "getRssFeed");
      var MEDIA_KEYS_STRING = ["url", "type", "lang"];
      var MEDIA_KEYS_INT = [
        "fileSize",
        "bitrate",
        "framerate",
        "samplingrate",
        "channels",
        "duration",
        "height",
        "width"
      ];
      function getMediaElements(where) {
        return (0, legacy_js_1.getElementsByTagName)("media:content", where).map(function(elem) {
          var attribs = elem.attribs;
          var media = {
            medium: attribs["medium"],
            isDefault: !!attribs["isDefault"]
          };
          for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
            var attrib = MEDIA_KEYS_STRING_1[_i];
            if (attribs[attrib]) {
              media[attrib] = attribs[attrib];
            }
          }
          for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
            var attrib = MEDIA_KEYS_INT_1[_a];
            if (attribs[attrib]) {
              media[attrib] = parseInt(attribs[attrib], 10);
            }
          }
          if (attribs["expression"]) {
            media.expression = attribs["expression"];
          }
          return media;
        });
      }
      __name(getMediaElements, "getMediaElements");
      function getOneElement(tagName, node) {
        return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];
      }
      __name(getOneElement, "getOneElement");
      function fetch2(tagName, where, recurse) {
        if (recurse === void 0) {
          recurse = false;
        }
        return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
      }
      __name(fetch2, "fetch");
      function addConditionally(obj, prop, tagName, where, recurse) {
        if (recurse === void 0) {
          recurse = false;
        }
        var val = fetch2(tagName, where, recurse);
        if (val)
          obj[prop] = val;
      }
      __name(addConditionally, "addConditionally");
      function isValidFeed(value) {
        return value === "rss" || value === "feed" || value === "rdf:RDF";
      }
      __name(isValidFeed, "isValidFeed");
    }
  });

  // ../../contrib/hdbt/node_modules/domutils/lib/index.js
  var require_lib5 = __commonJS({
    "../../contrib/hdbt/node_modules/domutils/lib/index.js"(exports) {
      
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m6, exports2) {
        for (var p5 in m6) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding(exports2, m6, p5);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
      __exportStar(require_stringify3(), exports);
      __exportStar(require_traversal(), exports);
      __exportStar(require_manipulation(), exports);
      __exportStar(require_querying(), exports);
      __exportStar(require_legacy(), exports);
      __exportStar(require_helpers(), exports);
      __exportStar(require_feeds(), exports);
      var domhandler_1 = require_lib2();
      Object.defineProperty(exports, "isTag", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.isTag;
      }, "get") });
      Object.defineProperty(exports, "isCDATA", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.isCDATA;
      }, "get") });
      Object.defineProperty(exports, "isText", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.isText;
      }, "get") });
      Object.defineProperty(exports, "isComment", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.isComment;
      }, "get") });
      Object.defineProperty(exports, "isDocument", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.isDocument;
      }, "get") });
      Object.defineProperty(exports, "hasChildren", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.hasChildren;
      }, "get") });
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/node_modules/htmlparser2/lib/index.js
  var require_lib6 = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/node_modules/htmlparser2/lib/index.js"(exports) {
      
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o18, v4) {
        Object.defineProperty(o18, "default", { enumerable: true, value: v4 });
      } : function(o18, v4) {
        o18["default"] = v4;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.createDocumentStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;
      var Parser_js_1 = require_Parser();
      var Parser_js_2 = require_Parser();
      Object.defineProperty(exports, "Parser", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return Parser_js_2.Parser;
      }, "get") });
      var domhandler_1 = require_lib2();
      var domhandler_2 = require_lib2();
      Object.defineProperty(exports, "DomHandler", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_2.DomHandler;
      }, "get") });
      Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_2.DomHandler;
      }, "get") });
      function parseDocument(data, options) {
        var handler = new domhandler_1.DomHandler(void 0, options);
        new Parser_js_1.Parser(handler, options).end(data);
        return handler.root;
      }
      __name(parseDocument, "parseDocument");
      exports.parseDocument = parseDocument;
      function parseDOM(data, options) {
        return parseDocument(data, options).children;
      }
      __name(parseDOM, "parseDOM");
      exports.parseDOM = parseDOM;
      function createDocumentStream(callback, options, elementCallback) {
        var handler = new domhandler_1.DomHandler(function(error2) {
          return callback(error2, handler.root);
        }, options, elementCallback);
        return new Parser_js_1.Parser(handler, options);
      }
      __name(createDocumentStream, "createDocumentStream");
      exports.createDocumentStream = createDocumentStream;
      function createDomStream(callback, options, elementCallback) {
        var handler = new domhandler_1.DomHandler(callback, options, elementCallback);
        return new Parser_js_1.Parser(handler, options);
      }
      __name(createDomStream, "createDomStream");
      exports.createDomStream = createDomStream;
      var Tokenizer_js_1 = require_Tokenizer();
      Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return __importDefault(Tokenizer_js_1).default;
      }, "get") });
      exports.ElementType = __importStar(require_lib());
      var domutils_1 = require_lib5();
      var domutils_2 = require_lib5();
      Object.defineProperty(exports, "getFeed", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domutils_2.getFeed;
      }, "get") });
      var parseFeedDefaultOptions = { xmlMode: true };
      function parseFeed(feed, options) {
        if (options === void 0) {
          options = parseFeedDefaultOptions;
        }
        return (0, domutils_1.getFeed)(parseDOM(feed, options));
      }
      __name(parseFeed, "parseFeed");
      exports.parseFeed = parseFeed;
      exports.DomUtils = __importStar(require_lib5());
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/lib/server/utilities.js
  var require_utilities = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/lib/server/utilities.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unsetRootParent = void 0;
      function unsetRootParent(nodes) {
        var index = 0;
        var nodesLength = nodes.length;
        for (; index < nodesLength; index++) {
          var node = nodes[index];
          node.parent = null;
        }
        return nodes;
      }
      __name(unsetRootParent, "unsetRootParent");
      exports.unsetRootParent = unsetRootParent;
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/lib/server/html-to-dom.js
  var require_html_to_dom = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/lib/server/html-to-dom.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      var htmlparser2_1 = require_lib6();
      var domhandler_1 = require_lib2();
      var utilities_1 = require_utilities();
      function HTMLDOMParser(html, options) {
        if (typeof html !== "string") {
          throw new TypeError("First argument must be a string.");
        }
        if (!html) {
          return [];
        }
        var handler = new domhandler_1.DomHandler(void 0, options);
        new htmlparser2_1.Parser(handler, options).end(html);
        return (0, utilities_1.unsetRootParent)(handler.dom);
      }
      __name(HTMLDOMParser, "HTMLDOMParser");
      exports.default = HTMLDOMParser;
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/lib/types.js
  var require_types = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/lib/types.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../contrib/hdbt/node_modules/html-dom-parser/lib/index.js
  var require_lib7 = __commonJS({
    "../../contrib/hdbt/node_modules/html-dom-parser/lib/index.js"(exports) {
      
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m6, k);
        if (!desc || ("get" in desc ? !m6.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
            return m6[k];
          }, "get") };
        }
        Object.defineProperty(o18, k2, desc);
      } : function(o18, m6, k, k2) {
        if (k2 === void 0) k2 = k;
        o18[k2] = m6[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m6, exports2) {
        for (var p5 in m6) if (p5 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p5)) __createBinding(exports2, m6, p5);
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = void 0;
      var html_to_dom_1 = require_html_to_dom();
      Object.defineProperty(exports, "default", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return __importDefault(html_to_dom_1).default;
      }, "get") });
      __exportStar(require_types(), exports);
    }
  });

  // ../../contrib/hdbt/node_modules/react-property/lib/possibleStandardNamesOptimized.js
  var require_possibleStandardNamesOptimized = __commonJS({
    "../../contrib/hdbt/node_modules/react-property/lib/possibleStandardNamesOptimized.js"(exports) {
      
      var SAME = 0;
      exports.SAME = SAME;
      var CAMELCASE = 1;
      exports.CAMELCASE = CAMELCASE;
      exports.possibleStandardNames = {
        accept: 0,
        acceptCharset: 1,
        "accept-charset": "acceptCharset",
        accessKey: 1,
        action: 0,
        allowFullScreen: 1,
        alt: 0,
        as: 0,
        async: 0,
        autoCapitalize: 1,
        autoComplete: 1,
        autoCorrect: 1,
        autoFocus: 1,
        autoPlay: 1,
        autoSave: 1,
        capture: 0,
        cellPadding: 1,
        cellSpacing: 1,
        challenge: 0,
        charSet: 1,
        checked: 0,
        children: 0,
        cite: 0,
        class: "className",
        classID: 1,
        className: 1,
        cols: 0,
        colSpan: 1,
        content: 0,
        contentEditable: 1,
        contextMenu: 1,
        controls: 0,
        controlsList: 1,
        coords: 0,
        crossOrigin: 1,
        dangerouslySetInnerHTML: 1,
        data: 0,
        dateTime: 1,
        default: 0,
        defaultChecked: 1,
        defaultValue: 1,
        defer: 0,
        dir: 0,
        disabled: 0,
        disablePictureInPicture: 1,
        disableRemotePlayback: 1,
        download: 0,
        draggable: 0,
        encType: 1,
        enterKeyHint: 1,
        for: "htmlFor",
        form: 0,
        formMethod: 1,
        formAction: 1,
        formEncType: 1,
        formNoValidate: 1,
        formTarget: 1,
        frameBorder: 1,
        headers: 0,
        height: 0,
        hidden: 0,
        high: 0,
        href: 0,
        hrefLang: 1,
        htmlFor: 1,
        httpEquiv: 1,
        "http-equiv": "httpEquiv",
        icon: 0,
        id: 0,
        innerHTML: 1,
        inputMode: 1,
        integrity: 0,
        is: 0,
        itemID: 1,
        itemProp: 1,
        itemRef: 1,
        itemScope: 1,
        itemType: 1,
        keyParams: 1,
        keyType: 1,
        kind: 0,
        label: 0,
        lang: 0,
        list: 0,
        loop: 0,
        low: 0,
        manifest: 0,
        marginWidth: 1,
        marginHeight: 1,
        max: 0,
        maxLength: 1,
        media: 0,
        mediaGroup: 1,
        method: 0,
        min: 0,
        minLength: 1,
        multiple: 0,
        muted: 0,
        name: 0,
        noModule: 1,
        nonce: 0,
        noValidate: 1,
        open: 0,
        optimum: 0,
        pattern: 0,
        placeholder: 0,
        playsInline: 1,
        poster: 0,
        preload: 0,
        profile: 0,
        radioGroup: 1,
        readOnly: 1,
        referrerPolicy: 1,
        rel: 0,
        required: 0,
        reversed: 0,
        role: 0,
        rows: 0,
        rowSpan: 1,
        sandbox: 0,
        scope: 0,
        scoped: 0,
        scrolling: 0,
        seamless: 0,
        selected: 0,
        shape: 0,
        size: 0,
        sizes: 0,
        span: 0,
        spellCheck: 1,
        src: 0,
        srcDoc: 1,
        srcLang: 1,
        srcSet: 1,
        start: 0,
        step: 0,
        style: 0,
        summary: 0,
        tabIndex: 1,
        target: 0,
        title: 0,
        type: 0,
        useMap: 1,
        value: 0,
        width: 0,
        wmode: 0,
        wrap: 0,
        about: 0,
        accentHeight: 1,
        "accent-height": "accentHeight",
        accumulate: 0,
        additive: 0,
        alignmentBaseline: 1,
        "alignment-baseline": "alignmentBaseline",
        allowReorder: 1,
        alphabetic: 0,
        amplitude: 0,
        arabicForm: 1,
        "arabic-form": "arabicForm",
        ascent: 0,
        attributeName: 1,
        attributeType: 1,
        autoReverse: 1,
        azimuth: 0,
        baseFrequency: 1,
        baselineShift: 1,
        "baseline-shift": "baselineShift",
        baseProfile: 1,
        bbox: 0,
        begin: 0,
        bias: 0,
        by: 0,
        calcMode: 1,
        capHeight: 1,
        "cap-height": "capHeight",
        clip: 0,
        clipPath: 1,
        "clip-path": "clipPath",
        clipPathUnits: 1,
        clipRule: 1,
        "clip-rule": "clipRule",
        color: 0,
        colorInterpolation: 1,
        "color-interpolation": "colorInterpolation",
        colorInterpolationFilters: 1,
        "color-interpolation-filters": "colorInterpolationFilters",
        colorProfile: 1,
        "color-profile": "colorProfile",
        colorRendering: 1,
        "color-rendering": "colorRendering",
        contentScriptType: 1,
        contentStyleType: 1,
        cursor: 0,
        cx: 0,
        cy: 0,
        d: 0,
        datatype: 0,
        decelerate: 0,
        descent: 0,
        diffuseConstant: 1,
        direction: 0,
        display: 0,
        divisor: 0,
        dominantBaseline: 1,
        "dominant-baseline": "dominantBaseline",
        dur: 0,
        dx: 0,
        dy: 0,
        edgeMode: 1,
        elevation: 0,
        enableBackground: 1,
        "enable-background": "enableBackground",
        end: 0,
        exponent: 0,
        externalResourcesRequired: 1,
        fill: 0,
        fillOpacity: 1,
        "fill-opacity": "fillOpacity",
        fillRule: 1,
        "fill-rule": "fillRule",
        filter: 0,
        filterRes: 1,
        filterUnits: 1,
        floodOpacity: 1,
        "flood-opacity": "floodOpacity",
        floodColor: 1,
        "flood-color": "floodColor",
        focusable: 0,
        fontFamily: 1,
        "font-family": "fontFamily",
        fontSize: 1,
        "font-size": "fontSize",
        fontSizeAdjust: 1,
        "font-size-adjust": "fontSizeAdjust",
        fontStretch: 1,
        "font-stretch": "fontStretch",
        fontStyle: 1,
        "font-style": "fontStyle",
        fontVariant: 1,
        "font-variant": "fontVariant",
        fontWeight: 1,
        "font-weight": "fontWeight",
        format: 0,
        from: 0,
        fx: 0,
        fy: 0,
        g1: 0,
        g2: 0,
        glyphName: 1,
        "glyph-name": "glyphName",
        glyphOrientationHorizontal: 1,
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphOrientationVertical: 1,
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphRef: 1,
        gradientTransform: 1,
        gradientUnits: 1,
        hanging: 0,
        horizAdvX: 1,
        "horiz-adv-x": "horizAdvX",
        horizOriginX: 1,
        "horiz-origin-x": "horizOriginX",
        ideographic: 0,
        imageRendering: 1,
        "image-rendering": "imageRendering",
        in2: 0,
        in: 0,
        inlist: 0,
        intercept: 0,
        k1: 0,
        k2: 0,
        k3: 0,
        k4: 0,
        k: 0,
        kernelMatrix: 1,
        kernelUnitLength: 1,
        kerning: 0,
        keyPoints: 1,
        keySplines: 1,
        keyTimes: 1,
        lengthAdjust: 1,
        letterSpacing: 1,
        "letter-spacing": "letterSpacing",
        lightingColor: 1,
        "lighting-color": "lightingColor",
        limitingConeAngle: 1,
        local: 0,
        markerEnd: 1,
        "marker-end": "markerEnd",
        markerHeight: 1,
        markerMid: 1,
        "marker-mid": "markerMid",
        markerStart: 1,
        "marker-start": "markerStart",
        markerUnits: 1,
        markerWidth: 1,
        mask: 0,
        maskContentUnits: 1,
        maskUnits: 1,
        mathematical: 0,
        mode: 0,
        numOctaves: 1,
        offset: 0,
        opacity: 0,
        operator: 0,
        order: 0,
        orient: 0,
        orientation: 0,
        origin: 0,
        overflow: 0,
        overlinePosition: 1,
        "overline-position": "overlinePosition",
        overlineThickness: 1,
        "overline-thickness": "overlineThickness",
        paintOrder: 1,
        "paint-order": "paintOrder",
        panose1: 0,
        "panose-1": "panose1",
        pathLength: 1,
        patternContentUnits: 1,
        patternTransform: 1,
        patternUnits: 1,
        pointerEvents: 1,
        "pointer-events": "pointerEvents",
        points: 0,
        pointsAtX: 1,
        pointsAtY: 1,
        pointsAtZ: 1,
        prefix: 0,
        preserveAlpha: 1,
        preserveAspectRatio: 1,
        primitiveUnits: 1,
        property: 0,
        r: 0,
        radius: 0,
        refX: 1,
        refY: 1,
        renderingIntent: 1,
        "rendering-intent": "renderingIntent",
        repeatCount: 1,
        repeatDur: 1,
        requiredExtensions: 1,
        requiredFeatures: 1,
        resource: 0,
        restart: 0,
        result: 0,
        results: 0,
        rotate: 0,
        rx: 0,
        ry: 0,
        scale: 0,
        security: 0,
        seed: 0,
        shapeRendering: 1,
        "shape-rendering": "shapeRendering",
        slope: 0,
        spacing: 0,
        specularConstant: 1,
        specularExponent: 1,
        speed: 0,
        spreadMethod: 1,
        startOffset: 1,
        stdDeviation: 1,
        stemh: 0,
        stemv: 0,
        stitchTiles: 1,
        stopColor: 1,
        "stop-color": "stopColor",
        stopOpacity: 1,
        "stop-opacity": "stopOpacity",
        strikethroughPosition: 1,
        "strikethrough-position": "strikethroughPosition",
        strikethroughThickness: 1,
        "strikethrough-thickness": "strikethroughThickness",
        string: 0,
        stroke: 0,
        strokeDasharray: 1,
        "stroke-dasharray": "strokeDasharray",
        strokeDashoffset: 1,
        "stroke-dashoffset": "strokeDashoffset",
        strokeLinecap: 1,
        "stroke-linecap": "strokeLinecap",
        strokeLinejoin: 1,
        "stroke-linejoin": "strokeLinejoin",
        strokeMiterlimit: 1,
        "stroke-miterlimit": "strokeMiterlimit",
        strokeWidth: 1,
        "stroke-width": "strokeWidth",
        strokeOpacity: 1,
        "stroke-opacity": "strokeOpacity",
        suppressContentEditableWarning: 1,
        suppressHydrationWarning: 1,
        surfaceScale: 1,
        systemLanguage: 1,
        tableValues: 1,
        targetX: 1,
        targetY: 1,
        textAnchor: 1,
        "text-anchor": "textAnchor",
        textDecoration: 1,
        "text-decoration": "textDecoration",
        textLength: 1,
        textRendering: 1,
        "text-rendering": "textRendering",
        to: 0,
        transform: 0,
        typeof: 0,
        u1: 0,
        u2: 0,
        underlinePosition: 1,
        "underline-position": "underlinePosition",
        underlineThickness: 1,
        "underline-thickness": "underlineThickness",
        unicode: 0,
        unicodeBidi: 1,
        "unicode-bidi": "unicodeBidi",
        unicodeRange: 1,
        "unicode-range": "unicodeRange",
        unitsPerEm: 1,
        "units-per-em": "unitsPerEm",
        unselectable: 0,
        vAlphabetic: 1,
        "v-alphabetic": "vAlphabetic",
        values: 0,
        vectorEffect: 1,
        "vector-effect": "vectorEffect",
        version: 0,
        vertAdvY: 1,
        "vert-adv-y": "vertAdvY",
        vertOriginX: 1,
        "vert-origin-x": "vertOriginX",
        vertOriginY: 1,
        "vert-origin-y": "vertOriginY",
        vHanging: 1,
        "v-hanging": "vHanging",
        vIdeographic: 1,
        "v-ideographic": "vIdeographic",
        viewBox: 1,
        viewTarget: 1,
        visibility: 0,
        vMathematical: 1,
        "v-mathematical": "vMathematical",
        vocab: 0,
        widths: 0,
        wordSpacing: 1,
        "word-spacing": "wordSpacing",
        writingMode: 1,
        "writing-mode": "writingMode",
        x1: 0,
        x2: 0,
        x: 0,
        xChannelSelector: 1,
        xHeight: 1,
        "x-height": "xHeight",
        xlinkActuate: 1,
        "xlink:actuate": "xlinkActuate",
        xlinkArcrole: 1,
        "xlink:arcrole": "xlinkArcrole",
        xlinkHref: 1,
        "xlink:href": "xlinkHref",
        xlinkRole: 1,
        "xlink:role": "xlinkRole",
        xlinkShow: 1,
        "xlink:show": "xlinkShow",
        xlinkTitle: 1,
        "xlink:title": "xlinkTitle",
        xlinkType: 1,
        "xlink:type": "xlinkType",
        xmlBase: 1,
        "xml:base": "xmlBase",
        xmlLang: 1,
        "xml:lang": "xmlLang",
        xmlns: 0,
        "xml:space": "xmlSpace",
        xmlnsXlink: 1,
        "xmlns:xlink": "xmlnsXlink",
        xmlSpace: 1,
        y1: 0,
        y2: 0,
        y: 0,
        yChannelSelector: 1,
        z: 0,
        zoomAndPan: 1
      };
    }
  });

  // ../../contrib/hdbt/node_modules/react-property/lib/index.js
  var require_lib8 = __commonJS({
    "../../contrib/hdbt/node_modules/react-property/lib/index.js"(exports) {
      
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      __name(getPropertyInfo, "getPropertyInfo");
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
      }
      __name(PropertyInfoRecord, "PropertyInfoRecord");
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        ["acceptCharset", "accept-charset"],
        ["className", "class"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"]
      ].forEach(([name, attributeName]) => {
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "autoReverse",
        "externalResourcesRequired",
        "focusable",
        "preserveAlpha"
      ].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "allowFullScreen",
        "async",
        // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        // Microdata
        "itemScope"
      ].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "checked",
        // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        "multiple",
        "muted",
        "selected"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "capture",
        "download"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "cols",
        "rows",
        "size",
        "span"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false,
          // mustUseProperty
          name,
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      ["rowSpan", "start"].forEach((name) => {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false,
          // mustUseProperty
          name.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = /* @__PURE__ */ __name((token) => token[1].toUpperCase(), "capitalize");
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach((attributeName) => {
        const name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach((attributeName) => {
        const name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/1999/xlink",
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
        // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach((attributeName) => {
        const name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false,
          // mustUseProperty
          attributeName,
          "http://www.w3.org/XML/1998/namespace",
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      ["tabIndex", "crossOrigin"].forEach((attributeName) => {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          false,
          // sanitizeURL
          false
          // removeEmptyString
        );
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord(
        "xlinkHref",
        STRING,
        false,
        // mustUseProperty
        "xlink:href",
        "http://www.w3.org/1999/xlink",
        true,
        // sanitizeURL
        false
        // removeEmptyString
      );
      ["src", "href", "action", "formAction"].forEach((attributeName) => {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false,
          // mustUseProperty
          attributeName.toLowerCase(),
          // attributeName
          null,
          // attributeNamespace
          true,
          // sanitizeURL
          true
          // removeEmptyString
        );
      });
      var {
        CAMELCASE,
        SAME,
        possibleStandardNames: possibleStandardNamesOptimized
      } = require_possibleStandardNamesOptimized();
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var isCustomAttribute = RegExp.prototype.test.bind(
        // eslint-disable-next-line no-misleading-character-class
        new RegExp("^(data|aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$")
      );
      var possibleStandardNames = Object.keys(
        possibleStandardNamesOptimized
      ).reduce((accumulator, standardName) => {
        const propName = possibleStandardNamesOptimized[standardName];
        if (propName === SAME) {
          accumulator[standardName] = standardName;
        } else if (propName === CAMELCASE) {
          accumulator[standardName.toLowerCase()] = standardName;
        } else {
          accumulator[standardName] = propName;
        }
        return accumulator;
      }, {});
      exports.BOOLEAN = BOOLEAN;
      exports.BOOLEANISH_STRING = BOOLEANISH_STRING;
      exports.NUMERIC = NUMERIC;
      exports.OVERLOADED_BOOLEAN = OVERLOADED_BOOLEAN;
      exports.POSITIVE_NUMERIC = POSITIVE_NUMERIC;
      exports.RESERVED = RESERVED;
      exports.STRING = STRING;
      exports.getPropertyInfo = getPropertyInfo;
      exports.isCustomAttribute = isCustomAttribute;
      exports.possibleStandardNames = possibleStandardNames;
    }
  });

  // ../../contrib/hdbt/node_modules/inline-style-parser/index.js
  var require_inline_style_parser = __commonJS({
    "../../contrib/hdbt/node_modules/inline-style-parser/index.js"(exports, module) {
      
      var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
      var NEWLINE_REGEX = /\n/g;
      var WHITESPACE_REGEX = /^\s*/;
      var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
      var COLON_REGEX = /^:\s*/;
      var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
      var SEMICOLON_REGEX = /^[;\s]*/;
      var TRIM_REGEX = /^\s+|\s+$/g;
      var NEWLINE = "\n";
      var FORWARD_SLASH = "/";
      var ASTERISK = "*";
      var EMPTY_STRING = "";
      var TYPE_COMMENT = "comment";
      var TYPE_DECLARATION = "declaration";
      module.exports = function(style, options) {
        if (typeof style !== "string") {
          throw new TypeError("First argument must be a string");
        }
        if (!style) return [];
        options = options || {};
        var lineno = 1;
        var column = 1;
        function updatePosition(str) {
          var lines = str.match(NEWLINE_REGEX);
          if (lines) lineno += lines.length;
          var i12 = str.lastIndexOf(NEWLINE);
          column = ~i12 ? str.length - i12 : column + str.length;
        }
        __name(updatePosition, "updatePosition");
        function position() {
          var start5 = { line: lineno, column };
          return function(node) {
            node.position = new Position(start5);
            whitespace();
            return node;
          };
        }
        __name(position, "position");
        function Position(start5) {
          this.start = start5;
          this.end = { line: lineno, column };
          this.source = options.source;
        }
        __name(Position, "Position");
        Position.prototype.content = style;
        var errorsList = [];
        function error2(msg) {
          var err = new Error(
            options.source + ":" + lineno + ":" + column + ": " + msg
          );
          err.reason = msg;
          err.filename = options.source;
          err.line = lineno;
          err.column = column;
          err.source = style;
          if (options.silent) {
            errorsList.push(err);
          } else {
            throw err;
          }
        }
        __name(error2, "error");
        function match4(re3) {
          var m6 = re3.exec(style);
          if (!m6) return;
          var str = m6[0];
          updatePosition(str);
          style = style.slice(str.length);
          return m6;
        }
        __name(match4, "match");
        function whitespace() {
          match4(WHITESPACE_REGEX);
        }
        __name(whitespace, "whitespace");
        function comments(rules) {
          var c6;
          rules = rules || [];
          while (c6 = comment3()) {
            if (c6 !== false) {
              rules.push(c6);
            }
          }
          return rules;
        }
        __name(comments, "comments");
        function comment3() {
          var pos = position();
          if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
          var i12 = 2;
          while (EMPTY_STRING != style.charAt(i12) && (ASTERISK != style.charAt(i12) || FORWARD_SLASH != style.charAt(i12 + 1))) {
            ++i12;
          }
          i12 += 2;
          if (EMPTY_STRING === style.charAt(i12 - 1)) {
            return error2("End of comment missing");
          }
          var str = style.slice(2, i12 - 2);
          column += 2;
          updatePosition(str);
          style = style.slice(i12);
          column += 2;
          return pos({
            type: TYPE_COMMENT,
            comment: str
          });
        }
        __name(comment3, "comment");
        function declaration() {
          var pos = position();
          var prop = match4(PROPERTY_REGEX);
          if (!prop) return;
          comment3();
          if (!match4(COLON_REGEX)) return error2("property missing ':'");
          var val = match4(VALUE_REGEX);
          var ret = pos({
            type: TYPE_DECLARATION,
            property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
          });
          match4(SEMICOLON_REGEX);
          return ret;
        }
        __name(declaration, "declaration");
        function declarations() {
          var decls = [];
          comments(decls);
          var decl3;
          while (decl3 = declaration()) {
            if (decl3 !== false) {
              decls.push(decl3);
              comments(decls);
            }
          }
          return decls;
        }
        __name(declarations, "declarations");
        whitespace();
        return declarations();
      };
      function trim(str) {
        return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
      }
      __name(trim, "trim");
    }
  });

  // ../../contrib/hdbt/node_modules/style-to-object/cjs/index.js
  var require_cjs = __commonJS({
    "../../contrib/hdbt/node_modules/style-to-object/cjs/index.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var inline_style_parser_1 = __importDefault(require_inline_style_parser());
      function StyleToObject(style, iterator) {
        var styleObject = null;
        if (!style || typeof style !== "string") {
          return styleObject;
        }
        var declarations = (0, inline_style_parser_1.default)(style);
        var hasIterator = typeof iterator === "function";
        declarations.forEach(function(declaration) {
          if (declaration.type !== "declaration") {
            return;
          }
          var property = declaration.property, value = declaration.value;
          if (hasIterator) {
            iterator(property, value, declaration);
          } else if (value) {
            styleObject = styleObject || {};
            styleObject[property] = value;
          }
        });
        return styleObject;
      }
      __name(StyleToObject, "StyleToObject");
      exports.default = StyleToObject;
    }
  });

  // ../../contrib/hdbt/node_modules/style-to-js/cjs/utilities.js
  var require_utilities2 = __commonJS({
    "../../contrib/hdbt/node_modules/style-to-js/cjs/utilities.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.camelCase = void 0;
      var CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9-]+$/;
      var HYPHEN_REGEX = /-([a-z])/g;
      var NO_HYPHEN_REGEX = /^[^-]+$/;
      var VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;
      var MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;
      var skipCamelCase = /* @__PURE__ */ __name(function(property) {
        return !property || NO_HYPHEN_REGEX.test(property) || CUSTOM_PROPERTY_REGEX.test(property);
      }, "skipCamelCase");
      var capitalize = /* @__PURE__ */ __name(function(match4, character) {
        return character.toUpperCase();
      }, "capitalize");
      var trimHyphen = /* @__PURE__ */ __name(function(match4, prefix3) {
        return "".concat(prefix3, "-");
      }, "trimHyphen");
      var camelCase = /* @__PURE__ */ __name(function(property, options) {
        if (options === void 0) {
          options = {};
        }
        if (skipCamelCase(property)) {
          return property;
        }
        property = property.toLowerCase();
        if (options.reactCompat) {
          property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);
        } else {
          property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);
        }
        return property.replace(HYPHEN_REGEX, capitalize);
      }, "camelCase");
      exports.camelCase = camelCase;
    }
  });

  // ../../contrib/hdbt/node_modules/style-to-js/cjs/index.js
  var require_cjs2 = __commonJS({
    "../../contrib/hdbt/node_modules/style-to-js/cjs/index.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var style_to_object_1 = __importDefault(require_cjs());
      var utilities_1 = require_utilities2();
      function StyleToJS(style, options) {
        var output = {};
        if (!style || typeof style !== "string") {
          return output;
        }
        (0, style_to_object_1.default)(style, function(property, value) {
          if (property && value) {
            output[(0, utilities_1.camelCase)(property, options)] = value;
          }
        });
        return output;
      }
      __name(StyleToJS, "StyleToJS");
      exports.default = StyleToJS;
    }
  });

  // ../../contrib/hdbt/node_modules/html-react-parser/lib/utilities.js
  var require_utilities3 = __commonJS({
    "../../contrib/hdbt/node_modules/html-react-parser/lib/utilities.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.returnFirstArg = exports.canTextBeChildOfNode = exports.ELEMENTS_WITH_NO_TEXT_CHILDREN = exports.PRESERVE_CUSTOM_ATTRIBUTES = exports.setStyleProp = exports.isCustomComponent = void 0;
      var react_1 = require_react();
      var style_to_js_1 = __importDefault(require_cjs2());
      var RESERVED_SVG_MATHML_ELEMENTS = /* @__PURE__ */ new Set([
        "annotation-xml",
        "color-profile",
        "font-face",
        "font-face-src",
        "font-face-uri",
        "font-face-format",
        "font-face-name",
        "missing-glyph"
      ]);
      function isCustomComponent(tagName, props) {
        if (!tagName.includes("-")) {
          return Boolean(props && typeof props.is === "string");
        }
        if (RESERVED_SVG_MATHML_ELEMENTS.has(tagName)) {
          return false;
        }
        return true;
      }
      __name(isCustomComponent, "isCustomComponent");
      exports.isCustomComponent = isCustomComponent;
      var styleOptions = {
        reactCompat: true
      };
      function setStyleProp(style, props) {
        if (typeof style !== "string") {
          return;
        }
        if (!style.trim()) {
          props.style = {};
          return;
        }
        try {
          props.style = (0, style_to_js_1.default)(style, styleOptions);
        } catch (error2) {
          props.style = {};
        }
      }
      __name(setStyleProp, "setStyleProp");
      exports.setStyleProp = setStyleProp;
      exports.PRESERVE_CUSTOM_ATTRIBUTES = Number(react_1.version.split(".")[0]) >= 16;
      exports.ELEMENTS_WITH_NO_TEXT_CHILDREN = /* @__PURE__ */ new Set([
        "tr",
        "tbody",
        "thead",
        "tfoot",
        "colgroup",
        "table",
        "head",
        "html",
        "frameset"
      ]);
      var canTextBeChildOfNode = /* @__PURE__ */ __name(function(node) {
        return !exports.ELEMENTS_WITH_NO_TEXT_CHILDREN.has(node.name);
      }, "canTextBeChildOfNode");
      exports.canTextBeChildOfNode = canTextBeChildOfNode;
      var returnFirstArg = /* @__PURE__ */ __name(function(arg) {
        return arg;
      }, "returnFirstArg");
      exports.returnFirstArg = returnFirstArg;
    }
  });

  // ../../contrib/hdbt/node_modules/html-react-parser/lib/attributes-to-props.js
  var require_attributes_to_props = __commonJS({
    "../../contrib/hdbt/node_modules/html-react-parser/lib/attributes-to-props.js"(exports) {
      
      Object.defineProperty(exports, "__esModule", { value: true });
      var react_property_1 = require_lib8();
      var utilities_1 = require_utilities3();
      var UNCONTROLLED_COMPONENT_ATTRIBUTES = ["checked", "value"];
      var UNCONTROLLED_COMPONENT_NAMES = ["input", "select", "textarea"];
      var valueOnlyInputs = {
        reset: true,
        submit: true
      };
      function attributesToProps2(attributes, nodeName) {
        if (attributes === void 0) {
          attributes = {};
        }
        var props = {};
        var isInputValueOnly = Boolean(attributes.type && valueOnlyInputs[attributes.type]);
        for (var attributeName in attributes) {
          var attributeValue = attributes[attributeName];
          if ((0, react_property_1.isCustomAttribute)(attributeName)) {
            props[attributeName] = attributeValue;
            continue;
          }
          var attributeNameLowerCased = attributeName.toLowerCase();
          var propName = getPropName(attributeNameLowerCased);
          if (propName) {
            var propertyInfo = (0, react_property_1.getPropertyInfo)(propName);
            if (UNCONTROLLED_COMPONENT_ATTRIBUTES.includes(propName) && UNCONTROLLED_COMPONENT_NAMES.includes(nodeName) && !isInputValueOnly) {
              propName = getPropName("default" + attributeNameLowerCased);
            }
            props[propName] = attributeValue;
            switch (propertyInfo && propertyInfo.type) {
              case react_property_1.BOOLEAN:
                props[propName] = true;
                break;
              case react_property_1.OVERLOADED_BOOLEAN:
                if (attributeValue === "") {
                  props[propName] = true;
                }
                break;
            }
            continue;
          }
          if (utilities_1.PRESERVE_CUSTOM_ATTRIBUTES) {
            props[attributeName] = attributeValue;
          }
        }
        (0, utilities_1.setStyleProp)(attributes.style, props);
        return props;
      }
      __name(attributesToProps2, "attributesToProps");
      exports.default = attributesToProps2;
      function getPropName(attributeName) {
        return react_property_1.possibleStandardNames[attributeName];
      }
      __name(getPropName, "getPropName");
    }
  });

  // ../../contrib/hdbt/node_modules/html-react-parser/lib/dom-to-react.js
  var require_dom_to_react = __commonJS({
    "../../contrib/hdbt/node_modules/html-react-parser/lib/dom-to-react.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var react_1 = require_react();
      var attributes_to_props_1 = __importDefault(require_attributes_to_props());
      var utilities_1 = require_utilities3();
      var React19 = {
        cloneElement: react_1.cloneElement,
        createElement: react_1.createElement,
        isValidElement: react_1.isValidElement
      };
      function domToReact2(nodes, options) {
        var reactElements = [];
        var hasReplace = typeof (options === null || options === void 0 ? void 0 : options.replace) === "function";
        var transform = (options === null || options === void 0 ? void 0 : options.transform) || utilities_1.returnFirstArg;
        var _a = (options === null || options === void 0 ? void 0 : options.library) || React19, cloneElement = _a.cloneElement, createElement8 = _a.createElement, isValidElement2 = _a.isValidElement;
        var nodesLength = nodes.length;
        for (var index = 0; index < nodesLength; index++) {
          var node = nodes[index];
          if (hasReplace) {
            var replaceElement = options.replace(node);
            if (isValidElement2(replaceElement)) {
              if (nodesLength > 1) {
                replaceElement = cloneElement(replaceElement, {
                  key: replaceElement.key || index
                });
              }
              reactElements.push(transform(replaceElement, node, index));
              continue;
            }
          }
          if (node.type === "text") {
            var isWhitespace = !node.data.trim().length;
            if (isWhitespace && node.parent && !(0, utilities_1.canTextBeChildOfNode)(node.parent)) {
              continue;
            }
            if ((options === null || options === void 0 ? void 0 : options.trim) && isWhitespace) {
              continue;
            }
            reactElements.push(transform(node.data, node, index));
            continue;
          }
          var element = node;
          var props = {};
          if (skipAttributesToProps(element)) {
            (0, utilities_1.setStyleProp)(element.attribs.style, element.attribs);
            props = element.attribs;
          } else if (element.attribs) {
            props = (0, attributes_to_props_1.default)(element.attribs, element.name);
          }
          var children = void 0;
          switch (node.type) {
            case "script":
            case "style":
              if (node.children[0]) {
                props.dangerouslySetInnerHTML = {
                  __html: node.children[0].data
                };
              }
              break;
            case "tag":
              if (node.name === "textarea" && node.children[0]) {
                props.defaultValue = node.children[0].data;
              } else if (node.children && node.children.length) {
                children = domToReact2(node.children, options);
              }
              break;
            // skip all other cases (e.g., comment)
            default:
              continue;
          }
          if (nodesLength > 1) {
            props.key = index;
          }
          reactElements.push(transform(createElement8(node.name, props, children), node, index));
        }
        return reactElements.length === 1 ? reactElements[0] : reactElements;
      }
      __name(domToReact2, "domToReact");
      exports.default = domToReact2;
      function skipAttributesToProps(node) {
        return utilities_1.PRESERVE_CUSTOM_ATTRIBUTES && node.type === "tag" && (0, utilities_1.isCustomComponent)(node.name, node.attribs);
      }
      __name(skipAttributesToProps, "skipAttributesToProps");
    }
  });

  // ../../contrib/hdbt/node_modules/html-react-parser/lib/index.js
  var require_lib9 = __commonJS({
    "../../contrib/hdbt/node_modules/html-react-parser/lib/index.js"(exports) {
      
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.htmlToDOM = exports.domToReact = exports.attributesToProps = exports.Text = exports.ProcessingInstruction = exports.Element = exports.Comment = void 0;
      var html_dom_parser_1 = __importDefault(require_lib7());
      exports.htmlToDOM = html_dom_parser_1.default;
      var attributes_to_props_1 = __importDefault(require_attributes_to_props());
      exports.attributesToProps = attributes_to_props_1.default;
      var dom_to_react_1 = __importDefault(require_dom_to_react());
      exports.domToReact = dom_to_react_1.default;
      var domhandler_1 = require_lib2();
      Object.defineProperty(exports, "Comment", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.Comment;
      }, "get") });
      Object.defineProperty(exports, "Element", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.Element;
      }, "get") });
      Object.defineProperty(exports, "ProcessingInstruction", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.ProcessingInstruction;
      }, "get") });
      Object.defineProperty(exports, "Text", { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return domhandler_1.Text;
      }, "get") });
      var domParserOptions = { lowerCaseAttributeNames: false };
      function HTMLReactParser2(html, options) {
        if (typeof html !== "string") {
          throw new TypeError("First argument must be a string");
        }
        if (!html) {
          return [];
        }
        return (0, dom_to_react_1.default)((0, html_dom_parser_1.default)(html, (options === null || options === void 0 ? void 0 : options.htmlparser2) || domParserOptions), options);
      }
      __name(HTMLReactParser2, "HTMLReactParser");
      exports.default = HTMLReactParser2;
    }
  });

  // src/js/react/apps/allu-decisions-search/index.tsx
  var import_react76 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());

  // node_modules/@sentry/core/build/esm/debug-build.js
  var DEBUG_BUILD = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

  // node_modules/@sentry/core/build/esm/utils/worldwide.js
  var GLOBAL_OBJ = globalThis;

  // node_modules/@sentry/core/build/esm/utils/version.js
  var SDK_VERSION = "9.39.0";

  // node_modules/@sentry/core/build/esm/carrier.js
  function getMainCarrier() {
    getSentryCarrier(GLOBAL_OBJ);
    return GLOBAL_OBJ;
  }
  __name(getMainCarrier, "getMainCarrier");
  function getSentryCarrier(carrier) {
    const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    __SENTRY__.version = __SENTRY__.version || SDK_VERSION;
    return __SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {};
  }
  __name(getSentryCarrier, "getSentryCarrier");
  function getGlobalSingleton(name, creator, obj = GLOBAL_OBJ) {
    const __SENTRY__ = obj.__SENTRY__ = obj.__SENTRY__ || {};
    const carrier = __SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {};
    return carrier[name] || (carrier[name] = creator());
  }
  __name(getGlobalSingleton, "getGlobalSingleton");

  // node_modules/@sentry/core/build/esm/utils/logger.js
  var PREFIX = "Sentry Logger ";
  var originalConsoleMethods = {};
  function consoleSandbox(callback) {
    if (!("console" in GLOBAL_OBJ)) {
      return callback();
    }
    const console2 = GLOBAL_OBJ.console;
    const wrappedFuncs = {};
    const wrappedLevels = Object.keys(originalConsoleMethods);
    wrappedLevels.forEach((level3) => {
      const originalConsoleMethod = originalConsoleMethods[level3];
      wrappedFuncs[level3] = console2[level3];
      console2[level3] = originalConsoleMethod;
    });
    try {
      return callback();
    } finally {
      wrappedLevels.forEach((level3) => {
        console2[level3] = wrappedFuncs[level3];
      });
    }
  }
  __name(consoleSandbox, "consoleSandbox");
  function enable() {
    _getLoggerSettings().enabled = true;
  }
  __name(enable, "enable");
  function disable() {
    _getLoggerSettings().enabled = false;
  }
  __name(disable, "disable");
  function isEnabled() {
    return _getLoggerSettings().enabled;
  }
  __name(isEnabled, "isEnabled");
  function log(...args) {
    _maybeLog("log", ...args);
  }
  __name(log, "log");
  function info(...args) {
    _maybeLog("info", ...args);
  }
  __name(info, "info");
  function warn(...args) {
    _maybeLog("warn", ...args);
  }
  __name(warn, "warn");
  function error(...args) {
    _maybeLog("error", ...args);
  }
  __name(error, "error");
  function _debug(...args) {
    _maybeLog("debug", ...args);
  }
  __name(_debug, "_debug");
  function assert(...args) {
    _maybeLog("assert", ...args);
  }
  __name(assert, "assert");
  function trace(...args) {
    _maybeLog("trace", ...args);
  }
  __name(trace, "trace");
  function _maybeLog(level3, ...args) {
    if (!DEBUG_BUILD) {
      return;
    }
    if (isEnabled()) {
      consoleSandbox(() => {
        GLOBAL_OBJ.console[level3](`${PREFIX}[${level3}]:`, ...args);
      });
    }
  }
  __name(_maybeLog, "_maybeLog");
  function _getLoggerSettings() {
    if (!DEBUG_BUILD) {
      return { enabled: false };
    }
    return getGlobalSingleton("loggerSettings", () => ({ enabled: false }));
  }
  __name(_getLoggerSettings, "_getLoggerSettings");
  var logger = {
    /** Enable logging. */
    enable,
    /** Disable logging. */
    disable,
    /** Check if logging is enabled. */
    isEnabled,
    /** Log a message. */
    log,
    /** Log level info */
    info,
    /** Log a warning. */
    warn,
    /** Log an error. */
    error,
    /** Log a debug message. */
    debug: _debug,
    /** Log an assertion. */
    assert,
    /** Log a trace. */
    trace
  };
  var debug = {
    /** Enable logging. */
    enable,
    /** Disable logging. */
    disable,
    /** Check if logging is enabled. */
    isEnabled,
    /** Log a message. */
    log,
    /** Log a warning. */
    warn,
    /** Log an error. */
    error
  };

  // node_modules/@sentry/core/build/esm/utils/is.js
  var objectToString = Object.prototype.toString;
  function isError(wat) {
    switch (objectToString.call(wat)) {
      case "[object Error]":
      case "[object Exception]":
      case "[object DOMException]":
      case "[object WebAssembly.Exception]":
        return true;
      default:
        return isInstanceOf(wat, Error);
    }
  }
  __name(isError, "isError");
  function isBuiltin(wat, className) {
    return objectToString.call(wat) === `[object ${className}]`;
  }
  __name(isBuiltin, "isBuiltin");
  function isPlainObject(wat) {
    return isBuiltin(wat, "Object");
  }
  __name(isPlainObject, "isPlainObject");
  function isThenable(wat) {
    return Boolean(wat?.then && typeof wat.then === "function");
  }
  __name(isThenable, "isThenable");
  function isInstanceOf(wat, base) {
    try {
      return wat instanceof base;
    } catch (_e3) {
      return false;
    }
  }
  __name(isInstanceOf, "isInstanceOf");

  // node_modules/@sentry/core/build/esm/utils/string.js
  function truncate(str, max3 = 0) {
    if (typeof str !== "string" || max3 === 0) {
      return str;
    }
    return str.length <= max3 ? str : `${str.slice(0, max3)}...`;
  }
  __name(truncate, "truncate");

  // node_modules/@sentry/core/build/esm/utils/object.js
  function addNonEnumerableProperty(obj, name, value) {
    try {
      Object.defineProperty(obj, name, {
        // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
        value,
        writable: true,
        configurable: true
      });
    } catch (o_O) {
      DEBUG_BUILD && debug.log(`Failed to add non-enumerable property "${name}" to object`, obj);
    }
  }
  __name(addNonEnumerableProperty, "addNonEnumerableProperty");

  // node_modules/@sentry/core/build/esm/utils/misc.js
  function getCrypto() {
    const gbl = GLOBAL_OBJ;
    return gbl.crypto || gbl.msCrypto;
  }
  __name(getCrypto, "getCrypto");
  function uuid4(crypto = getCrypto()) {
    let getRandomByte = /* @__PURE__ */ __name(() => Math.random() * 16, "getRandomByte");
    try {
      if (crypto?.randomUUID) {
        return crypto.randomUUID().replace(/-/g, "");
      }
      if (crypto?.getRandomValues) {
        getRandomByte = /* @__PURE__ */ __name(() => {
          const typedArray = new Uint8Array(1);
          crypto.getRandomValues(typedArray);
          return typedArray[0];
        }, "getRandomByte");
      }
    } catch (_7) {
    }
    return ("10000000100040008000" + 1e11).replace(
      /[018]/g,
      (c6) => (
        // eslint-disable-next-line no-bitwise
        (c6 ^ (getRandomByte() & 15) >> c6 / 4).toString(16)
      )
    );
  }
  __name(uuid4, "uuid4");

  // node_modules/@sentry/core/build/esm/utils/time.js
  var ONE_SECOND_IN_MS = 1e3;
  function dateTimestampInSeconds() {
    return Date.now() / ONE_SECOND_IN_MS;
  }
  __name(dateTimestampInSeconds, "dateTimestampInSeconds");
  function createUnixTimestampInSecondsFunc() {
    const { performance: performance2 } = GLOBAL_OBJ;
    if (!performance2?.now || !performance2.timeOrigin) {
      return dateTimestampInSeconds;
    }
    const timeOrigin = performance2.timeOrigin;
    return () => {
      return (timeOrigin + performance2.now()) / ONE_SECOND_IN_MS;
    };
  }
  __name(createUnixTimestampInSecondsFunc, "createUnixTimestampInSecondsFunc");
  var _cachedTimestampInSeconds;
  function timestampInSeconds() {
    const func = _cachedTimestampInSeconds ?? (_cachedTimestampInSeconds = createUnixTimestampInSecondsFunc());
    return func();
  }
  __name(timestampInSeconds, "timestampInSeconds");

  // node_modules/@sentry/core/build/esm/session.js
  function updateSession(session, context = {}) {
    if (context.user) {
      if (!session.ipAddress && context.user.ip_address) {
        session.ipAddress = context.user.ip_address;
      }
      if (!session.did && !context.did) {
        session.did = context.user.id || context.user.email || context.user.username;
      }
    }
    session.timestamp = context.timestamp || timestampInSeconds();
    if (context.abnormal_mechanism) {
      session.abnormal_mechanism = context.abnormal_mechanism;
    }
    if (context.ignoreDuration) {
      session.ignoreDuration = context.ignoreDuration;
    }
    if (context.sid) {
      session.sid = context.sid.length === 32 ? context.sid : uuid4();
    }
    if (context.init !== void 0) {
      session.init = context.init;
    }
    if (!session.did && context.did) {
      session.did = `${context.did}`;
    }
    if (typeof context.started === "number") {
      session.started = context.started;
    }
    if (session.ignoreDuration) {
      session.duration = void 0;
    } else if (typeof context.duration === "number") {
      session.duration = context.duration;
    } else {
      const duration = session.timestamp - session.started;
      session.duration = duration >= 0 ? duration : 0;
    }
    if (context.release) {
      session.release = context.release;
    }
    if (context.environment) {
      session.environment = context.environment;
    }
    if (!session.ipAddress && context.ipAddress) {
      session.ipAddress = context.ipAddress;
    }
    if (!session.userAgent && context.userAgent) {
      session.userAgent = context.userAgent;
    }
    if (typeof context.errors === "number") {
      session.errors = context.errors;
    }
    if (context.status) {
      session.status = context.status;
    }
  }
  __name(updateSession, "updateSession");

  // node_modules/@sentry/core/build/esm/utils/merge.js
  function merge(initialObj, mergeObj, levels = 2) {
    if (!mergeObj || typeof mergeObj !== "object" || levels <= 0) {
      return mergeObj;
    }
    if (initialObj && Object.keys(mergeObj).length === 0) {
      return initialObj;
    }
    const output = { ...initialObj };
    for (const key in mergeObj) {
      if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {
        output[key] = merge(output[key], mergeObj[key], levels - 1);
      }
    }
    return output;
  }
  __name(merge, "merge");

  // node_modules/@sentry/core/build/esm/utils/propagationContext.js
  function generateTraceId() {
    return uuid4();
  }
  __name(generateTraceId, "generateTraceId");

  // node_modules/@sentry/core/build/esm/utils/spanOnScope.js
  var SCOPE_SPAN_FIELD = "_sentrySpan";
  function _setSpanForScope(scope, span) {
    if (span) {
      addNonEnumerableProperty(scope, SCOPE_SPAN_FIELD, span);
    } else {
      delete scope[SCOPE_SPAN_FIELD];
    }
  }
  __name(_setSpanForScope, "_setSpanForScope");
  function _getSpanForScope(scope) {
    return scope[SCOPE_SPAN_FIELD];
  }
  __name(_getSpanForScope, "_getSpanForScope");

  // node_modules/@sentry/core/build/esm/scope.js
  var DEFAULT_MAX_BREADCRUMBS = 100;
  var _Scope = class _Scope {
    /** Flag if notifying is happening. */
    /** Callback for client to receive scope changes. */
    /** Callback list that will be called during event processing. */
    /** Array of breadcrumbs. */
    /** User */
    /** Tags */
    /** Extra */
    /** Contexts */
    /** Attachments */
    /** Propagation Context for distributed tracing */
    /**
     * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
     * sent to Sentry
     */
    /** Fingerprint */
    /** Severity */
    /**
     * Transaction Name
     *
     * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.
     * It's purpose is to assign a transaction to the scope that's added to non-transaction events.
     */
    /** Session */
    /** The client on this scope */
    /** Contains the last event id of a captured event.  */
    // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
    constructor() {
      this._notifyingListeners = false;
      this._scopeListeners = [];
      this._eventProcessors = [];
      this._breadcrumbs = [];
      this._attachments = [];
      this._user = {};
      this._tags = {};
      this._extra = {};
      this._contexts = {};
      this._sdkProcessingMetadata = {};
      this._propagationContext = {
        traceId: generateTraceId(),
        sampleRand: Math.random()
      };
    }
    /**
     * Clone all data from this scope into a new scope.
     */
    clone() {
      const newScope = new _Scope();
      newScope._breadcrumbs = [...this._breadcrumbs];
      newScope._tags = { ...this._tags };
      newScope._extra = { ...this._extra };
      newScope._contexts = { ...this._contexts };
      if (this._contexts.flags) {
        newScope._contexts.flags = {
          values: [...this._contexts.flags.values]
        };
      }
      newScope._user = this._user;
      newScope._level = this._level;
      newScope._session = this._session;
      newScope._transactionName = this._transactionName;
      newScope._fingerprint = this._fingerprint;
      newScope._eventProcessors = [...this._eventProcessors];
      newScope._attachments = [...this._attachments];
      newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };
      newScope._propagationContext = { ...this._propagationContext };
      newScope._client = this._client;
      newScope._lastEventId = this._lastEventId;
      _setSpanForScope(newScope, _getSpanForScope(this));
      return newScope;
    }
    /**
     * Update the client assigned to this scope.
     * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,
     * as well as manually created scopes.
     */
    setClient(client) {
      this._client = client;
    }
    /**
     * Set the ID of the last captured error event.
     * This is generally only captured on the isolation scope.
     */
    setLastEventId(lastEventId2) {
      this._lastEventId = lastEventId2;
    }
    /**
     * Get the client assigned to this scope.
     */
    getClient() {
      return this._client;
    }
    /**
     * Get the ID of the last captured error event.
     * This is generally only available on the isolation scope.
     */
    lastEventId() {
      return this._lastEventId;
    }
    /**
     * @inheritDoc
     */
    addScopeListener(callback) {
      this._scopeListeners.push(callback);
    }
    /**
     * Add an event processor that will be called before an event is sent.
     */
    addEventProcessor(callback) {
      this._eventProcessors.push(callback);
      return this;
    }
    /**
     * Set the user for this scope.
     * Set to `null` to unset the user.
     */
    setUser(user) {
      this._user = user || {
        email: void 0,
        id: void 0,
        ip_address: void 0,
        username: void 0
      };
      if (this._session) {
        updateSession(this._session, { user });
      }
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Get the user from this scope.
     */
    getUser() {
      return this._user;
    }
    /**
     * Set an object that will be merged into existing tags on the scope,
     * and will be sent as tags data with the event.
     */
    setTags(tags) {
      this._tags = {
        ...this._tags,
        ...tags
      };
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Set a single tag that will be sent as tags data with the event.
     */
    setTag(key, value) {
      this._tags = { ...this._tags, [key]: value };
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Set an object that will be merged into existing extra on the scope,
     * and will be sent as extra data with the event.
     */
    setExtras(extras) {
      this._extra = {
        ...this._extra,
        ...extras
      };
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Set a single key:value extra entry that will be sent as extra data with the event.
     */
    setExtra(key, extra) {
      this._extra = { ...this._extra, [key]: extra };
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Sets the fingerprint on the scope to send with the events.
     * @param {string[]} fingerprint Fingerprint to group events in Sentry.
     */
    setFingerprint(fingerprint) {
      this._fingerprint = fingerprint;
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Sets the level on the scope for future events.
     */
    setLevel(level3) {
      this._level = level3;
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Sets the transaction name on the scope so that the name of e.g. taken server route or
     * the page location is attached to future events.
     *
     * IMPORTANT: Calling this function does NOT change the name of the currently active
     * root span. If you want to change the name of the active root span, use
     * `Sentry.updateSpanName(rootSpan, 'new name')` instead.
     *
     * By default, the SDK updates the scope's transaction name automatically on sensible
     * occasions, such as a page navigation or when handling a new request on the server.
     */
    setTransactionName(name) {
      this._transactionName = name;
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Sets context data with the given name.
     * Data passed as context will be normalized. You can also pass `null` to unset the context.
     * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.
     */
    setContext(key, context) {
      if (context === null) {
        delete this._contexts[key];
      } else {
        this._contexts[key] = context;
      }
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Set the session for the scope.
     */
    setSession(session) {
      if (!session) {
        delete this._session;
      } else {
        this._session = session;
      }
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Get the session from the scope.
     */
    getSession() {
      return this._session;
    }
    /**
     * Updates the scope with provided data. Can work in three variations:
     * - plain object containing updatable attributes
     * - Scope instance that'll extract the attributes from
     * - callback function that'll receive the current scope as an argument and allow for modifications
     */
    update(captureContext) {
      if (!captureContext) {
        return this;
      }
      const scopeToMerge = typeof captureContext === "function" ? captureContext(this) : captureContext;
      const scopeInstance = scopeToMerge instanceof _Scope ? scopeToMerge.getScopeData() : isPlainObject(scopeToMerge) ? captureContext : void 0;
      const { tags, extra, user, contexts, level: level3, fingerprint = [], propagationContext } = scopeInstance || {};
      this._tags = { ...this._tags, ...tags };
      this._extra = { ...this._extra, ...extra };
      this._contexts = { ...this._contexts, ...contexts };
      if (user && Object.keys(user).length) {
        this._user = user;
      }
      if (level3) {
        this._level = level3;
      }
      if (fingerprint.length) {
        this._fingerprint = fingerprint;
      }
      if (propagationContext) {
        this._propagationContext = propagationContext;
      }
      return this;
    }
    /**
     * Clears the current scope and resets its properties.
     * Note: The client will not be cleared.
     */
    clear() {
      this._breadcrumbs = [];
      this._tags = {};
      this._extra = {};
      this._user = {};
      this._contexts = {};
      this._level = void 0;
      this._transactionName = void 0;
      this._fingerprint = void 0;
      this._session = void 0;
      _setSpanForScope(this, void 0);
      this._attachments = [];
      this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Adds a breadcrumb to the scope.
     * By default, the last 100 breadcrumbs are kept.
     */
    addBreadcrumb(breadcrumb, maxBreadcrumbs) {
      const maxCrumbs = typeof maxBreadcrumbs === "number" ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;
      if (maxCrumbs <= 0) {
        return this;
      }
      const mergedBreadcrumb = {
        timestamp: dateTimestampInSeconds(),
        ...breadcrumb,
        // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory
        message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message
      };
      this._breadcrumbs.push(mergedBreadcrumb);
      if (this._breadcrumbs.length > maxCrumbs) {
        this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);
        this._client?.recordDroppedEvent("buffer_overflow", "log_item");
      }
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Get the last breadcrumb of the scope.
     */
    getLastBreadcrumb() {
      return this._breadcrumbs[this._breadcrumbs.length - 1];
    }
    /**
     * Clear all breadcrumbs from the scope.
     */
    clearBreadcrumbs() {
      this._breadcrumbs = [];
      this._notifyScopeListeners();
      return this;
    }
    /**
     * Add an attachment to the scope.
     */
    addAttachment(attachment) {
      this._attachments.push(attachment);
      return this;
    }
    /**
     * Clear all attachments from the scope.
     */
    clearAttachments() {
      this._attachments = [];
      return this;
    }
    /**
     * Get the data of this scope, which should be applied to an event during processing.
     */
    getScopeData() {
      return {
        breadcrumbs: this._breadcrumbs,
        attachments: this._attachments,
        contexts: this._contexts,
        tags: this._tags,
        extra: this._extra,
        user: this._user,
        level: this._level,
        fingerprint: this._fingerprint || [],
        eventProcessors: this._eventProcessors,
        propagationContext: this._propagationContext,
        sdkProcessingMetadata: this._sdkProcessingMetadata,
        transactionName: this._transactionName,
        span: _getSpanForScope(this)
      };
    }
    /**
     * Add data which will be accessible during event processing but won't get sent to Sentry.
     */
    setSDKProcessingMetadata(newData) {
      this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);
      return this;
    }
    /**
     * Add propagation context to the scope, used for distributed tracing
     */
    setPropagationContext(context) {
      this._propagationContext = context;
      return this;
    }
    /**
     * Get propagation context from the scope, used for distributed tracing
     */
    getPropagationContext() {
      return this._propagationContext;
    }
    /**
     * Capture an exception for this scope.
     *
     * @returns {string} The id of the captured Sentry event.
     */
    captureException(exception, hint) {
      const eventId = hint?.event_id || uuid4();
      if (!this._client) {
        DEBUG_BUILD && debug.warn("No client configured on scope - will not capture exception!");
        return eventId;
      }
      const syntheticException = new Error("Sentry syntheticException");
      this._client.captureException(
        exception,
        {
          originalException: exception,
          syntheticException,
          ...hint,
          event_id: eventId
        },
        this
      );
      return eventId;
    }
    /**
     * Capture a message for this scope.
     *
     * @returns {string} The id of the captured message.
     */
    captureMessage(message, level3, hint) {
      const eventId = hint?.event_id || uuid4();
      if (!this._client) {
        DEBUG_BUILD && debug.warn("No client configured on scope - will not capture message!");
        return eventId;
      }
      const syntheticException = new Error(message);
      this._client.captureMessage(
        message,
        level3,
        {
          originalException: message,
          syntheticException,
          ...hint,
          event_id: eventId
        },
        this
      );
      return eventId;
    }
    /**
     * Capture a Sentry event for this scope.
     *
     * @returns {string} The id of the captured event.
     */
    captureEvent(event, hint) {
      const eventId = hint?.event_id || uuid4();
      if (!this._client) {
        DEBUG_BUILD && debug.warn("No client configured on scope - will not capture event!");
        return eventId;
      }
      this._client.captureEvent(event, { ...hint, event_id: eventId }, this);
      return eventId;
    }
    /**
     * This will be called on every set call.
     */
    _notifyScopeListeners() {
      if (!this._notifyingListeners) {
        this._notifyingListeners = true;
        this._scopeListeners.forEach((callback) => {
          callback(this);
        });
        this._notifyingListeners = false;
      }
    }
  };
  __name(_Scope, "Scope");
  var Scope = _Scope;

  // node_modules/@sentry/core/build/esm/defaultScopes.js
  function getDefaultCurrentScope() {
    return getGlobalSingleton("defaultCurrentScope", () => new Scope());
  }
  __name(getDefaultCurrentScope, "getDefaultCurrentScope");
  function getDefaultIsolationScope() {
    return getGlobalSingleton("defaultIsolationScope", () => new Scope());
  }
  __name(getDefaultIsolationScope, "getDefaultIsolationScope");

  // node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js
  var _AsyncContextStack = class _AsyncContextStack {
    constructor(scope, isolationScope) {
      let assignedScope;
      if (!scope) {
        assignedScope = new Scope();
      } else {
        assignedScope = scope;
      }
      let assignedIsolationScope;
      if (!isolationScope) {
        assignedIsolationScope = new Scope();
      } else {
        assignedIsolationScope = isolationScope;
      }
      this._stack = [{ scope: assignedScope }];
      this._isolationScope = assignedIsolationScope;
    }
    /**
     * Fork a scope for the stack.
     */
    withScope(callback) {
      const scope = this._pushScope();
      let maybePromiseResult;
      try {
        maybePromiseResult = callback(scope);
      } catch (e18) {
        this._popScope();
        throw e18;
      }
      if (isThenable(maybePromiseResult)) {
        return maybePromiseResult.then(
          (res) => {
            this._popScope();
            return res;
          },
          (e18) => {
            this._popScope();
            throw e18;
          }
        );
      }
      this._popScope();
      return maybePromiseResult;
    }
    /**
     * Get the client of the stack.
     */
    getClient() {
      return this.getStackTop().client;
    }
    /**
     * Returns the scope of the top stack.
     */
    getScope() {
      return this.getStackTop().scope;
    }
    /**
     * Get the isolation scope for the stack.
     */
    getIsolationScope() {
      return this._isolationScope;
    }
    /**
     * Returns the topmost scope layer in the order domain > local > process.
     */
    getStackTop() {
      return this._stack[this._stack.length - 1];
    }
    /**
     * Push a scope to the stack.
     */
    _pushScope() {
      const scope = this.getScope().clone();
      this._stack.push({
        client: this.getClient(),
        scope
      });
      return scope;
    }
    /**
     * Pop a scope from the stack.
     */
    _popScope() {
      if (this._stack.length <= 1) return false;
      return !!this._stack.pop();
    }
  };
  __name(_AsyncContextStack, "AsyncContextStack");
  var AsyncContextStack = _AsyncContextStack;
  function getAsyncContextStack() {
    const registry = getMainCarrier();
    const sentry = getSentryCarrier(registry);
    return sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope());
  }
  __name(getAsyncContextStack, "getAsyncContextStack");
  function withScope(callback) {
    return getAsyncContextStack().withScope(callback);
  }
  __name(withScope, "withScope");
  function withSetScope(scope, callback) {
    const stack = getAsyncContextStack();
    return stack.withScope(() => {
      stack.getStackTop().scope = scope;
      return callback(scope);
    });
  }
  __name(withSetScope, "withSetScope");
  function withIsolationScope(callback) {
    return getAsyncContextStack().withScope(() => {
      return callback(getAsyncContextStack().getIsolationScope());
    });
  }
  __name(withIsolationScope, "withIsolationScope");
  function getStackAsyncContextStrategy() {
    return {
      withIsolationScope,
      withScope,
      withSetScope,
      withSetIsolationScope: /* @__PURE__ */ __name((_isolationScope, callback) => {
        return withIsolationScope(callback);
      }, "withSetIsolationScope"),
      getCurrentScope: /* @__PURE__ */ __name(() => getAsyncContextStack().getScope(), "getCurrentScope"),
      getIsolationScope: /* @__PURE__ */ __name(() => getAsyncContextStack().getIsolationScope(), "getIsolationScope")
    };
  }
  __name(getStackAsyncContextStrategy, "getStackAsyncContextStrategy");

  // node_modules/@sentry/core/build/esm/asyncContext/index.js
  function getAsyncContextStrategy(carrier) {
    const sentry = getSentryCarrier(carrier);
    if (sentry.acs) {
      return sentry.acs;
    }
    return getStackAsyncContextStrategy();
  }
  __name(getAsyncContextStrategy, "getAsyncContextStrategy");

  // node_modules/@sentry/core/build/esm/currentScopes.js
  function getCurrentScope() {
    const carrier = getMainCarrier();
    const acs = getAsyncContextStrategy(carrier);
    return acs.getCurrentScope();
  }
  __name(getCurrentScope, "getCurrentScope");
  function getIsolationScope() {
    const carrier = getMainCarrier();
    const acs = getAsyncContextStrategy(carrier);
    return acs.getIsolationScope();
  }
  __name(getIsolationScope, "getIsolationScope");
  function withScope2(...rest) {
    const carrier = getMainCarrier();
    const acs = getAsyncContextStrategy(carrier);
    if (rest.length === 2) {
      const [scope, callback] = rest;
      if (!scope) {
        return acs.withScope(callback);
      }
      return acs.withSetScope(scope, callback);
    }
    return acs.withScope(rest[0]);
  }
  __name(withScope2, "withScope");
  function getClient() {
    return getCurrentScope().getClient();
  }
  __name(getClient, "getClient");

  // node_modules/@sentry/core/build/esm/utils/dsn.js
  var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
  function isValidProtocol(protocol) {
    return protocol === "http" || protocol === "https";
  }
  __name(isValidProtocol, "isValidProtocol");
  function dsnToString(dsn, withPassword = false) {
    const { host: host3, path, pass, port, projectId, protocol, publicKey } = dsn;
    return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ""}@${host3}${port ? `:${port}` : ""}/${path ? `${path}/` : path}${projectId}`;
  }
  __name(dsnToString, "dsnToString");
  function dsnFromString(str) {
    const match4 = DSN_REGEX.exec(str);
    if (!match4) {
      consoleSandbox(() => {
        console.error(`Invalid Sentry Dsn: ${str}`);
      });
      return void 0;
    }
    const [protocol, publicKey, pass = "", host3 = "", port = "", lastPath = ""] = match4.slice(1);
    let path = "";
    let projectId = lastPath;
    const split = projectId.split("/");
    if (split.length > 1) {
      path = split.slice(0, -1).join("/");
      projectId = split.pop();
    }
    if (projectId) {
      const projectMatch = projectId.match(/^\d+/);
      if (projectMatch) {
        projectId = projectMatch[0];
      }
    }
    return dsnFromComponents({ host: host3, pass, path, projectId, port, protocol, publicKey });
  }
  __name(dsnFromString, "dsnFromString");
  function dsnFromComponents(components) {
    return {
      protocol: components.protocol,
      publicKey: components.publicKey || "",
      pass: components.pass || "",
      host: components.host,
      port: components.port || "",
      path: components.path || "",
      projectId: components.projectId
    };
  }
  __name(dsnFromComponents, "dsnFromComponents");
  function validateDsn(dsn) {
    if (!DEBUG_BUILD) {
      return true;
    }
    const { port, projectId, protocol } = dsn;
    const requiredComponents = ["protocol", "publicKey", "host", "projectId"];
    const hasMissingRequiredComponent = requiredComponents.find((component) => {
      if (!dsn[component]) {
        debug.error(`Invalid Sentry Dsn: ${component} missing`);
        return true;
      }
      return false;
    });
    if (hasMissingRequiredComponent) {
      return false;
    }
    if (!projectId.match(/^\d+$/)) {
      debug.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);
      return false;
    }
    if (!isValidProtocol(protocol)) {
      debug.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);
      return false;
    }
    if (port && isNaN(parseInt(port, 10))) {
      debug.error(`Invalid Sentry Dsn: Invalid port ${port}`);
      return false;
    }
    return true;
  }
  __name(validateDsn, "validateDsn");
  function makeDsn(from) {
    const components = typeof from === "string" ? dsnFromString(from) : dsnFromComponents(from);
    if (!components || !validateDsn(components)) {
      return void 0;
    }
    return components;
  }
  __name(makeDsn, "makeDsn");

  // node_modules/@sentry/core/build/esm/utils/prepareEvent.js
  function parseEventHintOrCaptureContext(hint) {
    if (!hint) {
      return void 0;
    }
    if (hintIsScopeOrFunction(hint)) {
      return { captureContext: hint };
    }
    if (hintIsScopeContext(hint)) {
      return {
        captureContext: hint
      };
    }
    return hint;
  }
  __name(parseEventHintOrCaptureContext, "parseEventHintOrCaptureContext");
  function hintIsScopeOrFunction(hint) {
    return hint instanceof Scope || typeof hint === "function";
  }
  __name(hintIsScopeOrFunction, "hintIsScopeOrFunction");
  var captureContextKeys = [
    "user",
    "level",
    "extra",
    "contexts",
    "tags",
    "fingerprint",
    "propagationContext"
  ];
  function hintIsScopeContext(hint) {
    return Object.keys(hint).some((key) => captureContextKeys.includes(key));
  }
  __name(hintIsScopeContext, "hintIsScopeContext");

  // node_modules/@sentry/core/build/esm/exports.js
  function captureException(exception, hint) {
    return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));
  }
  __name(captureException, "captureException");
  function lastEventId() {
    return getIsolationScope().lastEventId();
  }
  __name(lastEventId, "lastEventId");

  // node_modules/@sentry/core/build/esm/api.js
  function getBaseApiEndpoint(dsn) {
    const protocol = dsn.protocol ? `${dsn.protocol}:` : "";
    const port = dsn.port ? `:${dsn.port}` : "";
    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ""}/api/`;
  }
  __name(getBaseApiEndpoint, "getBaseApiEndpoint");
  function getReportDialogEndpoint(dsnLike, dialogOptions) {
    const dsn = makeDsn(dsnLike);
    if (!dsn) {
      return "";
    }
    const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;
    let encodedOptions = `dsn=${dsnToString(dsn)}`;
    for (const key in dialogOptions) {
      if (key === "dsn") {
        continue;
      }
      if (key === "onClose") {
        continue;
      }
      if (key === "user") {
        const user = dialogOptions.user;
        if (!user) {
          continue;
        }
        if (user.name) {
          encodedOptions += `&name=${encodeURIComponent(user.name)}`;
        }
        if (user.email) {
          encodedOptions += `&email=${encodeURIComponent(user.email)}`;
        }
      } else {
        encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;
      }
    }
    return `${endpoint}?${encodedOptions}`;
  }
  __name(getReportDialogEndpoint, "getReportDialogEndpoint");

  // node_modules/@sentry/browser/build/npm/esm/helpers.js
  var WINDOW = GLOBAL_OBJ;

  // node_modules/@sentry/browser/build/npm/esm/debug-build.js
  var DEBUG_BUILD2 = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

  // node_modules/@sentry/browser/build/npm/esm/report-dialog.js
  function showReportDialog(options = {}) {
    const optionalDocument = WINDOW.document;
    const injectionPoint = optionalDocument?.head || optionalDocument?.body;
    if (!injectionPoint) {
      DEBUG_BUILD2 && logger.error("[showReportDialog] Global document not defined");
      return;
    }
    const scope = getCurrentScope();
    const client = getClient();
    const dsn = client?.getDsn();
    if (!dsn) {
      DEBUG_BUILD2 && logger.error("[showReportDialog] DSN not configured");
      return;
    }
    const mergedOptions = {
      ...options,
      user: {
        ...scope.getUser(),
        ...options.user
      },
      eventId: options.eventId || lastEventId()
    };
    const script = WINDOW.document.createElement("script");
    script.async = true;
    script.crossOrigin = "anonymous";
    script.src = getReportDialogEndpoint(dsn, mergedOptions);
    const { onLoad, onClose } = mergedOptions;
    if (onLoad) {
      script.onload = onLoad;
    }
    if (onClose) {
      const reportDialogClosedMessageHandler = /* @__PURE__ */ __name((event) => {
        if (event.data === "__sentry_reportdialog_closed__") {
          try {
            onClose();
          } finally {
            WINDOW.removeEventListener("message", reportDialogClosedMessageHandler);
          }
        }
      }, "reportDialogClosedMessageHandler");
      WINDOW.addEventListener("message", reportDialogClosedMessageHandler);
    }
    injectionPoint.appendChild(script);
  }
  __name(showReportDialog, "showReportDialog");

  // node_modules/@sentry/react/build/esm/error.js
  var import_react = __toESM(require_react(), 1);
  function isAtLeastReact17(reactVersion) {
    const reactMajor = reactVersion.match(/^([^.]+)/);
    return reactMajor !== null && parseInt(reactMajor[0]) >= 17;
  }
  __name(isAtLeastReact17, "isAtLeastReact17");
  function setCause(error2, cause) {
    const seenErrors = /* @__PURE__ */ new WeakSet();
    function recurse(error3, cause2) {
      if (seenErrors.has(error3)) {
        return;
      }
      if (error3.cause) {
        seenErrors.add(error3);
        return recurse(error3.cause, cause2);
      }
      error3.cause = cause2;
    }
    __name(recurse, "recurse");
    recurse(error2, cause);
  }
  __name(setCause, "setCause");
  function captureReactException(error2, { componentStack }, hint) {
    if (isAtLeastReact17(import_react.version) && isError(error2) && componentStack) {
      const errorBoundaryError = new Error(error2.message);
      errorBoundaryError.name = `React ErrorBoundary ${error2.name}`;
      errorBoundaryError.stack = componentStack;
      setCause(error2, errorBoundaryError);
    }
    return withScope2((scope) => {
      scope.setContext("react", { componentStack });
      return captureException(error2, hint);
    });
  }
  __name(captureReactException, "captureReactException");

  // node_modules/@sentry/react/build/esm/errorboundary.js
  var React = __toESM(require_react(), 1);

  // node_modules/@sentry/react/build/esm/debug-build.js
  var DEBUG_BUILD3 = typeof __SENTRY_DEBUG__ === "undefined" || __SENTRY_DEBUG__;

  // node_modules/@sentry/react/build/esm/errorboundary.js
  var INITIAL_STATE = {
    componentStack: null,
    error: null,
    eventId: null
  };
  var _ErrorBoundary = class _ErrorBoundary extends React.Component {
    constructor(props) {
      super(props);
      this.state = INITIAL_STATE;
      this._openFallbackReportDialog = true;
      const client = getClient();
      if (client && props.showDialog) {
        this._openFallbackReportDialog = false;
        this._cleanupHook = client.on("afterSendEvent", (event) => {
          if (!event.type && this._lastEventId && event.event_id === this._lastEventId) {
            showReportDialog({ ...props.dialogOptions, eventId: this._lastEventId });
          }
        });
      }
    }
    componentDidCatch(error2, errorInfo) {
      const { componentStack } = errorInfo;
      const { beforeCapture, onError, showDialog, dialogOptions } = this.props;
      withScope2((scope) => {
        if (beforeCapture) {
          beforeCapture(scope, error2, componentStack);
        }
        const handled = this.props.handled != null ? this.props.handled : !!this.props.fallback;
        const eventId = captureReactException(error2, errorInfo, { mechanism: { handled } });
        if (onError) {
          onError(error2, componentStack, eventId);
        }
        if (showDialog) {
          this._lastEventId = eventId;
          if (this._openFallbackReportDialog) {
            showReportDialog({ ...dialogOptions, eventId });
          }
        }
        this.setState({ error: error2, componentStack, eventId });
      });
    }
    componentDidMount() {
      const { onMount } = this.props;
      if (onMount) {
        onMount();
      }
    }
    componentWillUnmount() {
      const { error: error2, componentStack, eventId } = this.state;
      const { onUnmount } = this.props;
      if (onUnmount) {
        if (this.state === INITIAL_STATE) {
          onUnmount(null, null, null);
        } else {
          onUnmount(error2, componentStack, eventId);
        }
      }
      if (this._cleanupHook) {
        this._cleanupHook();
        this._cleanupHook = void 0;
      }
    }
    resetErrorBoundary() {
      const { onReset } = this.props;
      const { error: error2, componentStack, eventId } = this.state;
      if (onReset) {
        onReset(error2, componentStack, eventId);
      }
      this.setState(INITIAL_STATE);
    }
    render() {
      const { fallback, children } = this.props;
      const state = this.state;
      if (state.componentStack === null) {
        return typeof children === "function" ? children() : children;
      }
      const element = typeof fallback === "function" ? React.createElement(fallback, {
        error: state.error,
        componentStack: state.componentStack,
        resetError: /* @__PURE__ */ __name(() => this.resetErrorBoundary(), "resetError"),
        eventId: state.eventId
      }) : fallback;
      if (React.isValidElement(element)) {
        return element;
      }
      if (fallback) {
        DEBUG_BUILD3 && debug.warn("fallback did not produce a valid ReactElement");
      }
      return null;
    }
  };
  __name(_ErrorBoundary, "ErrorBoundary");
  var ErrorBoundary = _ErrorBoundary;

  // src/js/react/apps/allu-decisions-search/containers/SearchContainer.tsx
  var import_react75 = __toESM(require_react());

  // node_modules/swr/dist/core/index.mjs
  var import_react3 = __toESM(require_react(), 1);
  var import_shim = __toESM(require_shim(), 1);

  // node_modules/swr/dist/_internal/index.mjs
  var import_react2 = __toESM(require_react(), 1);
  var noop = /* @__PURE__ */ __name(() => {
  }, "noop");
  var UNDEFINED = (
    /*#__NOINLINE__*/
    noop()
  );
  var OBJECT = Object;
  var isUndefined = /* @__PURE__ */ __name((v4) => v4 === UNDEFINED, "isUndefined");
  var isFunction = /* @__PURE__ */ __name((v4) => typeof v4 == "function", "isFunction");
  var mergeObjects = /* @__PURE__ */ __name((a21, b6) => ({
    ...a21,
    ...b6
  }), "mergeObjects");
  var isPromiseLike = /* @__PURE__ */ __name((x) => isFunction(x.then), "isPromiseLike");
  var table = /* @__PURE__ */ new WeakMap();
  var counter = 0;
  var stableHash = /* @__PURE__ */ __name((arg) => {
    const type = typeof arg;
    const constructor = arg && arg.constructor;
    const isDate3 = constructor == Date;
    let result;
    let index;
    if (OBJECT(arg) === arg && !isDate3 && constructor != RegExp) {
      result = table.get(arg);
      if (result) return result;
      result = ++counter + "~";
      table.set(arg, result);
      if (constructor == Array) {
        result = "@";
        for (index = 0; index < arg.length; index++) {
          result += stableHash(arg[index]) + ",";
        }
        table.set(arg, result);
      }
      if (constructor == OBJECT) {
        result = "#";
        const keys = OBJECT.keys(arg).sort();
        while (!isUndefined(index = keys.pop())) {
          if (!isUndefined(arg[index])) {
            result += index + ":" + stableHash(arg[index]) + ",";
          }
        }
        table.set(arg, result);
      }
    } else {
      result = isDate3 ? arg.toJSON() : type == "symbol" ? arg.toString() : type == "string" ? JSON.stringify(arg) : "" + arg;
    }
    return result;
  }, "stableHash");
  var SWRGlobalState = /* @__PURE__ */ new WeakMap();
  var EMPTY_CACHE = {};
  var INITIAL_CACHE = {};
  var STR_UNDEFINED = "undefined";
  var isWindowDefined = typeof window != STR_UNDEFINED;
  var isDocumentDefined = typeof document != STR_UNDEFINED;
  var hasRequestAnimationFrame = /* @__PURE__ */ __name(() => isWindowDefined && typeof window["requestAnimationFrame"] != STR_UNDEFINED, "hasRequestAnimationFrame");
  var createCacheHelper = /* @__PURE__ */ __name((cache2, key) => {
    const state = SWRGlobalState.get(cache2);
    return [
      // Getter
      () => !isUndefined(key) && cache2.get(key) || EMPTY_CACHE,
      // Setter
      (info2) => {
        if (!isUndefined(key)) {
          const prev = cache2.get(key);
          if (!(key in INITIAL_CACHE)) {
            INITIAL_CACHE[key] = prev;
          }
          state[5](key, mergeObjects(prev, info2), prev || EMPTY_CACHE);
        }
      },
      // Subscriber
      state[6],
      // Get server cache snapshot
      () => {
        if (!isUndefined(key)) {
          if (key in INITIAL_CACHE) return INITIAL_CACHE[key];
        }
        return !isUndefined(key) && cache2.get(key) || EMPTY_CACHE;
      }
    ];
  }, "createCacheHelper");
  var online = true;
  var isOnline = /* @__PURE__ */ __name(() => online, "isOnline");
  var [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [
    window.addEventListener.bind(window),
    window.removeEventListener.bind(window)
  ] : [
    noop,
    noop
  ];
  var isVisible = /* @__PURE__ */ __name(() => {
    const visibilityState = isDocumentDefined && document.visibilityState;
    return isUndefined(visibilityState) || visibilityState !== "hidden";
  }, "isVisible");
  var initFocus = /* @__PURE__ */ __name((callback) => {
    if (isDocumentDefined) {
      document.addEventListener("visibilitychange", callback);
    }
    onWindowEvent("focus", callback);
    return () => {
      if (isDocumentDefined) {
        document.removeEventListener("visibilitychange", callback);
      }
      offWindowEvent("focus", callback);
    };
  }, "initFocus");
  var initReconnect = /* @__PURE__ */ __name((callback) => {
    const onOnline = /* @__PURE__ */ __name(() => {
      online = true;
      callback();
    }, "onOnline");
    const onOffline = /* @__PURE__ */ __name(() => {
      online = false;
    }, "onOffline");
    onWindowEvent("online", onOnline);
    onWindowEvent("offline", onOffline);
    return () => {
      offWindowEvent("online", onOnline);
      offWindowEvent("offline", onOffline);
    };
  }, "initReconnect");
  var preset = {
    isOnline,
    isVisible
  };
  var defaultConfigOptions = {
    initFocus,
    initReconnect
  };
  var IS_REACT_LEGACY = !import_react2.default.useId;
  var IS_SERVER = !isWindowDefined || "Deno" in window;
  var rAF = /* @__PURE__ */ __name((f2) => hasRequestAnimationFrame() ? window["requestAnimationFrame"](f2) : setTimeout(f2, 1), "rAF");
  var useIsomorphicLayoutEffect = IS_SERVER ? import_react2.useEffect : import_react2.useLayoutEffect;
  var navigatorConnection = typeof navigator !== "undefined" && navigator.connection;
  var slowConnection = !IS_SERVER && navigatorConnection && ([
    "slow-2g",
    "2g"
  ].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);
  var serialize = /* @__PURE__ */ __name((key) => {
    if (isFunction(key)) {
      try {
        key = key();
      } catch (err) {
        key = "";
      }
    }
    const args = key;
    key = typeof key == "string" ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : "";
    return [
      key,
      args
    ];
  }, "serialize");
  var __timestamp = 0;
  var getTimestamp = /* @__PURE__ */ __name(() => ++__timestamp, "getTimestamp");
  var FOCUS_EVENT = 0;
  var RECONNECT_EVENT = 1;
  var MUTATE_EVENT = 2;
  var ERROR_REVALIDATE_EVENT = 3;
  var events = {
    __proto__: null,
    ERROR_REVALIDATE_EVENT,
    FOCUS_EVENT,
    MUTATE_EVENT,
    RECONNECT_EVENT
  };
  async function internalMutate(...args) {
    const [cache2, _key, _data, _opts] = args;
    const options = mergeObjects({
      populateCache: true,
      throwOnError: true
    }, typeof _opts === "boolean" ? {
      revalidate: _opts
    } : _opts || {});
    let populateCache = options.populateCache;
    const rollbackOnErrorOption = options.rollbackOnError;
    let optimisticData = options.optimisticData;
    const rollbackOnError = /* @__PURE__ */ __name((error2) => {
      return typeof rollbackOnErrorOption === "function" ? rollbackOnErrorOption(error2) : rollbackOnErrorOption !== false;
    }, "rollbackOnError");
    const throwOnError = options.throwOnError;
    if (isFunction(_key)) {
      const keyFilter = _key;
      const matchedKeys = [];
      const it3 = cache2.keys();
      for (const key of it3) {
        if (
          // Skip the special useSWRInfinite and useSWRSubscription keys.
          !/^\$(inf|sub)\$/.test(key) && keyFilter(cache2.get(key)._k)
        ) {
          matchedKeys.push(key);
        }
      }
      return Promise.all(matchedKeys.map(mutateByKey));
    }
    return mutateByKey(_key);
    async function mutateByKey(_k) {
      const [key] = serialize(_k);
      if (!key) return;
      const [get, set] = createCacheHelper(cache2, key);
      const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache2);
      const startRevalidate = /* @__PURE__ */ __name(() => {
        const revalidators = EVENT_REVALIDATORS[key];
        const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;
        if (revalidate) {
          delete FETCH[key];
          delete PRELOAD[key];
          if (revalidators && revalidators[0]) {
            return revalidators[0](MUTATE_EVENT).then(() => get().data);
          }
        }
        return get().data;
      }, "startRevalidate");
      if (args.length < 3) {
        return startRevalidate();
      }
      let data = _data;
      let error2;
      const beforeMutationTs = getTimestamp();
      MUTATION[key] = [
        beforeMutationTs,
        0
      ];
      const hasOptimisticData = !isUndefined(optimisticData);
      const state = get();
      const displayedData = state.data;
      const currentData = state._c;
      const committedData = isUndefined(currentData) ? displayedData : currentData;
      if (hasOptimisticData) {
        optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;
        set({
          data: optimisticData,
          _c: committedData
        });
      }
      if (isFunction(data)) {
        try {
          data = data(committedData);
        } catch (err) {
          error2 = err;
        }
      }
      if (data && isPromiseLike(data)) {
        data = await data.catch((err) => {
          error2 = err;
        });
        if (beforeMutationTs !== MUTATION[key][0]) {
          if (error2) throw error2;
          return data;
        } else if (error2 && hasOptimisticData && rollbackOnError(error2)) {
          populateCache = true;
          set({
            data: committedData,
            _c: UNDEFINED
          });
        }
      }
      if (populateCache) {
        if (!error2) {
          if (isFunction(populateCache)) {
            const populateCachedData = populateCache(data, committedData);
            set({
              data: populateCachedData,
              error: UNDEFINED,
              _c: UNDEFINED
            });
          } else {
            set({
              data,
              error: UNDEFINED,
              _c: UNDEFINED
            });
          }
        }
      }
      MUTATION[key][1] = getTimestamp();
      Promise.resolve(startRevalidate()).then(() => {
        set({
          _c: UNDEFINED
        });
      });
      if (error2) {
        if (throwOnError) throw error2;
        return;
      }
      return data;
    }
    __name(mutateByKey, "mutateByKey");
  }
  __name(internalMutate, "internalMutate");
  var revalidateAllKeys = /* @__PURE__ */ __name((revalidators, type) => {
    for (const key in revalidators) {
      if (revalidators[key][0]) revalidators[key][0](type);
    }
  }, "revalidateAllKeys");
  var initCache = /* @__PURE__ */ __name((provider, options) => {
    if (!SWRGlobalState.has(provider)) {
      const opts = mergeObjects(defaultConfigOptions, options);
      const EVENT_REVALIDATORS = {};
      const mutate2 = internalMutate.bind(UNDEFINED, provider);
      let unmount = noop;
      const subscriptions = {};
      const subscribe = /* @__PURE__ */ __name((key, callback) => {
        const subs = subscriptions[key] || [];
        subscriptions[key] = subs;
        subs.push(callback);
        return () => subs.splice(subs.indexOf(callback), 1);
      }, "subscribe");
      const setter = /* @__PURE__ */ __name((key, value, prev) => {
        provider.set(key, value);
        const subs = subscriptions[key];
        if (subs) {
          for (const fn3 of subs) {
            fn3(value, prev);
          }
        }
      }, "setter");
      const initProvider = /* @__PURE__ */ __name(() => {
        if (!SWRGlobalState.has(provider)) {
          SWRGlobalState.set(provider, [
            EVENT_REVALIDATORS,
            {},
            {},
            {},
            mutate2,
            setter,
            subscribe
          ]);
          if (!IS_SERVER) {
            const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));
            const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));
            unmount = /* @__PURE__ */ __name(() => {
              releaseFocus && releaseFocus();
              releaseReconnect && releaseReconnect();
              SWRGlobalState.delete(provider);
            }, "unmount");
          }
        }
      }, "initProvider");
      initProvider();
      return [
        provider,
        mutate2,
        initProvider,
        unmount
      ];
    }
    return [
      provider,
      SWRGlobalState.get(provider)[4]
    ];
  }, "initCache");
  var onErrorRetry = /* @__PURE__ */ __name((_7, __, config3, revalidate, opts) => {
    const maxRetryCount = config3.errorRetryCount;
    const currentRetryCount = opts.retryCount;
    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config3.errorRetryInterval;
    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {
      return;
    }
    setTimeout(revalidate, timeout, opts);
  }, "onErrorRetry");
  var compare = /* @__PURE__ */ __name((currentData, newData) => stableHash(currentData) == stableHash(newData), "compare");
  var [cache, mutate] = initCache(/* @__PURE__ */ new Map());
  var defaultConfig = mergeObjects(
    {
      // events
      onLoadingSlow: noop,
      onSuccess: noop,
      onError: noop,
      onErrorRetry,
      onDiscarded: noop,
      // switches
      revalidateOnFocus: true,
      revalidateOnReconnect: true,
      revalidateIfStale: true,
      shouldRetryOnError: true,
      // timeouts
      errorRetryInterval: slowConnection ? 1e4 : 5e3,
      focusThrottleInterval: 5 * 1e3,
      dedupingInterval: 2 * 1e3,
      loadingTimeout: slowConnection ? 5e3 : 3e3,
      // providers
      compare,
      isPaused: /* @__PURE__ */ __name(() => false, "isPaused"),
      cache,
      mutate,
      fallback: {}
    },
    // use web preset by default
    preset
  );
  var mergeConfigs = /* @__PURE__ */ __name((a21, b6) => {
    const v4 = mergeObjects(a21, b6);
    if (b6) {
      const { use: u1, fallback: f1 } = a21;
      const { use: u22, fallback: f2 } = b6;
      if (u1 && u22) {
        v4.use = u1.concat(u22);
      }
      if (f1 && f2) {
        v4.fallback = mergeObjects(f1, f2);
      }
    }
    return v4;
  }, "mergeConfigs");
  var SWRConfigContext = (0, import_react2.createContext)({});
  var SWRConfig = /* @__PURE__ */ __name((props) => {
    const { value } = props;
    const parentConfig = (0, import_react2.useContext)(SWRConfigContext);
    const isFunctionalConfig = isFunction(value);
    const config3 = (0, import_react2.useMemo)(() => isFunctionalConfig ? value(parentConfig) : value, [
      isFunctionalConfig,
      parentConfig,
      value
    ]);
    const extendedConfig = (0, import_react2.useMemo)(() => isFunctionalConfig ? config3 : mergeConfigs(parentConfig, config3), [
      isFunctionalConfig,
      parentConfig,
      config3
    ]);
    const provider = config3 && config3.provider;
    const cacheContextRef = (0, import_react2.useRef)(UNDEFINED);
    if (provider && !cacheContextRef.current) {
      cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config3);
    }
    const cacheContext = cacheContextRef.current;
    if (cacheContext) {
      extendedConfig.cache = cacheContext[0];
      extendedConfig.mutate = cacheContext[1];
    }
    useIsomorphicLayoutEffect(() => {
      if (cacheContext) {
        cacheContext[2] && cacheContext[2]();
        return cacheContext[3];
      }
    }, []);
    return (0, import_react2.createElement)(SWRConfigContext.Provider, mergeObjects(props, {
      value: extendedConfig
    }));
  }, "SWRConfig");
  var INFINITE_PREFIX = "$inf$";
  var enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;
  var use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];
  var setupDevTools = /* @__PURE__ */ __name(() => {
    if (enableDevtools) {
      window.__SWR_DEVTOOLS_REACT__ = import_react2.default;
    }
  }, "setupDevTools");
  var normalize = /* @__PURE__ */ __name((args) => {
    return isFunction(args[1]) ? [
      args[0],
      args[1],
      args[2] || {}
    ] : [
      args[0],
      null,
      (args[1] === null ? args[2] : args[1]) || {}
    ];
  }, "normalize");
  var useSWRConfig = /* @__PURE__ */ __name(() => {
    return mergeObjects(defaultConfig, (0, import_react2.useContext)(SWRConfigContext));
  }, "useSWRConfig");
  var middleware = /* @__PURE__ */ __name((useSWRNext) => (key_, fetcher_, config3) => {
    const fetcher = fetcher_ && ((...args) => {
      const [key] = serialize(key_);
      const [, , , PRELOAD] = SWRGlobalState.get(cache);
      if (key.startsWith(INFINITE_PREFIX)) {
        return fetcher_(...args);
      }
      const req = PRELOAD[key];
      if (isUndefined(req)) return fetcher_(...args);
      delete PRELOAD[key];
      return req;
    });
    return useSWRNext(key_, fetcher, config3);
  }, "middleware");
  var BUILT_IN_MIDDLEWARE = use.concat(middleware);
  var withArgs = /* @__PURE__ */ __name((hook) => {
    return /* @__PURE__ */ __name(function useSWRArgs(...args) {
      const fallbackConfig = useSWRConfig();
      const [key, fn3, _config] = normalize(args);
      const config3 = mergeConfigs(fallbackConfig, _config);
      let next = hook;
      const { use: use4 } = config3;
      const middleware2 = (use4 || []).concat(BUILT_IN_MIDDLEWARE);
      for (let i12 = middleware2.length; i12--; ) {
        next = middleware2[i12](next);
      }
      return next(key, fn3 || config3.fetcher || null, config3);
    }, "useSWRArgs");
  }, "withArgs");
  var subscribeCallback = /* @__PURE__ */ __name((key, callbacks, callback) => {
    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);
    keyedRevalidators.push(callback);
    return () => {
      const index = keyedRevalidators.indexOf(callback);
      if (index >= 0) {
        keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];
        keyedRevalidators.pop();
      }
    };
  }, "subscribeCallback");
  setupDevTools();

  // node_modules/swr/dist/core/index.mjs
  var use2 = import_react3.default.use || ((promise) => {
    if (promise.status === "pending") {
      throw promise;
    } else if (promise.status === "fulfilled") {
      return promise.value;
    } else if (promise.status === "rejected") {
      throw promise.reason;
    } else {
      promise.status = "pending";
      promise.then((v4) => {
        promise.status = "fulfilled";
        promise.value = v4;
      }, (e18) => {
        promise.status = "rejected";
        promise.reason = e18;
      });
      throw promise;
    }
  });
  var WITH_DEDUPE = {
    dedupe: true
  };
  var useSWRHandler = /* @__PURE__ */ __name((_key, fetcher, config3) => {
    const { cache: cache2, compare: compare2, suspense, fallbackData, revalidateOnMount, revalidateIfStale, refreshInterval, refreshWhenHidden, refreshWhenOffline, keepPreviousData } = config3;
    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache2);
    const [key, fnArg] = serialize(_key);
    const initialMountedRef = (0, import_react3.useRef)(false);
    const unmountedRef = (0, import_react3.useRef)(false);
    const keyRef = (0, import_react3.useRef)(key);
    const fetcherRef = (0, import_react3.useRef)(fetcher);
    const configRef = (0, import_react3.useRef)(config3);
    const getConfig = /* @__PURE__ */ __name(() => configRef.current, "getConfig");
    const isActive = /* @__PURE__ */ __name(() => getConfig().isVisible() && getConfig().isOnline(), "isActive");
    const [getCache, setCache, subscribeCache, getInitialCache] = createCacheHelper(cache2, key);
    const stateDependencies = (0, import_react3.useRef)({}).current;
    const fallback = isUndefined(fallbackData) ? config3.fallback[key] : fallbackData;
    const isEqual5 = /* @__PURE__ */ __name((prev, current) => {
      for (const _7 in stateDependencies) {
        const t21 = _7;
        if (t21 === "data") {
          if (!compare2(prev[t21], current[t21])) {
            if (!isUndefined(prev[t21])) {
              return false;
            }
            if (!compare2(returnedData, current[t21])) {
              return false;
            }
          }
        } else {
          if (current[t21] !== prev[t21]) {
            return false;
          }
        }
      }
      return true;
    }, "isEqual");
    const getSnapshot = (0, import_react3.useMemo)(() => {
      const shouldStartRequest = (() => {
        if (!key) return false;
        if (!fetcher) return false;
        if (!isUndefined(revalidateOnMount)) return revalidateOnMount;
        if (getConfig().isPaused()) return false;
        if (suspense) return false;
        if (!isUndefined(revalidateIfStale)) return revalidateIfStale;
        return true;
      })();
      const getSelectedCache = /* @__PURE__ */ __name((state) => {
        const snapshot = mergeObjects(state);
        delete snapshot._k;
        if (!shouldStartRequest) {
          return snapshot;
        }
        return {
          isValidating: true,
          isLoading: true,
          ...snapshot
        };
      }, "getSelectedCache");
      const cachedData2 = getCache();
      const initialData = getInitialCache();
      const clientSnapshot = getSelectedCache(cachedData2);
      const serverSnapshot = cachedData2 === initialData ? clientSnapshot : getSelectedCache(initialData);
      let memorizedSnapshot = clientSnapshot;
      return [
        () => {
          const newSnapshot = getSelectedCache(getCache());
          const compareResult = isEqual5(newSnapshot, memorizedSnapshot);
          if (compareResult) {
            memorizedSnapshot.data = newSnapshot.data;
            memorizedSnapshot.isLoading = newSnapshot.isLoading;
            memorizedSnapshot.isValidating = newSnapshot.isValidating;
            memorizedSnapshot.error = newSnapshot.error;
            return memorizedSnapshot;
          } else {
            memorizedSnapshot = newSnapshot;
            return newSnapshot;
          }
        },
        () => serverSnapshot
      ];
    }, [
      cache2,
      key
    ]);
    const cached = (0, import_shim.useSyncExternalStore)((0, import_react3.useCallback)(
      (callback) => subscribeCache(key, (current, prev) => {
        if (!isEqual5(prev, current)) callback();
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [
        cache2,
        key
      ]
    ), getSnapshot[0], getSnapshot[1]);
    const isInitialMount = !initialMountedRef.current;
    const hasRevalidator = EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0;
    const cachedData = cached.data;
    const data = isUndefined(cachedData) ? fallback : cachedData;
    const error2 = cached.error;
    const laggyDataRef = (0, import_react3.useRef)(data);
    const returnedData = keepPreviousData ? isUndefined(cachedData) ? laggyDataRef.current : cachedData : data;
    const shouldDoInitialRevalidation = (() => {
      if (hasRevalidator && !isUndefined(error2)) return false;
      if (isInitialMount && !isUndefined(revalidateOnMount)) return revalidateOnMount;
      if (getConfig().isPaused()) return false;
      if (suspense) return isUndefined(data) ? false : revalidateIfStale;
      return isUndefined(data) || revalidateIfStale;
    })();
    const defaultValidatingState = !!(key && fetcher && isInitialMount && shouldDoInitialRevalidation);
    const isValidating = isUndefined(cached.isValidating) ? defaultValidatingState : cached.isValidating;
    const isLoading = isUndefined(cached.isLoading) ? defaultValidatingState : cached.isLoading;
    const revalidate = (0, import_react3.useCallback)(
      async (revalidateOpts) => {
        const currentFetcher = fetcherRef.current;
        if (!key || !currentFetcher || unmountedRef.current || getConfig().isPaused()) {
          return false;
        }
        let newData;
        let startAt;
        let loading = true;
        const opts = revalidateOpts || {};
        const shouldStartNewRequest = !FETCH[key] || !opts.dedupe;
        const callbackSafeguard = /* @__PURE__ */ __name(() => {
          if (IS_REACT_LEGACY) {
            return !unmountedRef.current && key === keyRef.current && initialMountedRef.current;
          }
          return key === keyRef.current;
        }, "callbackSafeguard");
        const finalState = {
          isValidating: false,
          isLoading: false
        };
        const finishRequestAndUpdateState = /* @__PURE__ */ __name(() => {
          setCache(finalState);
        }, "finishRequestAndUpdateState");
        const cleanupState = /* @__PURE__ */ __name(() => {
          const requestInfo = FETCH[key];
          if (requestInfo && requestInfo[1] === startAt) {
            delete FETCH[key];
          }
        }, "cleanupState");
        const initialState = {
          isValidating: true
        };
        if (isUndefined(getCache().data)) {
          initialState.isLoading = true;
        }
        try {
          if (shouldStartNewRequest) {
            setCache(initialState);
            if (config3.loadingTimeout && isUndefined(getCache().data)) {
              setTimeout(() => {
                if (loading && callbackSafeguard()) {
                  getConfig().onLoadingSlow(key, config3);
                }
              }, config3.loadingTimeout);
            }
            FETCH[key] = [
              currentFetcher(fnArg),
              getTimestamp()
            ];
          }
          [newData, startAt] = FETCH[key];
          newData = await newData;
          if (shouldStartNewRequest) {
            setTimeout(cleanupState, config3.dedupingInterval);
          }
          if (!FETCH[key] || FETCH[key][1] !== startAt) {
            if (shouldStartNewRequest) {
              if (callbackSafeguard()) {
                getConfig().onDiscarded(key);
              }
            }
            return false;
          }
          finalState.error = UNDEFINED;
          const mutationInfo = MUTATION[key];
          if (!isUndefined(mutationInfo) && // case 1
          (startAt <= mutationInfo[0] || // case 2
          startAt <= mutationInfo[1] || // case 3
          mutationInfo[1] === 0)) {
            finishRequestAndUpdateState();
            if (shouldStartNewRequest) {
              if (callbackSafeguard()) {
                getConfig().onDiscarded(key);
              }
            }
            return false;
          }
          const cacheData = getCache().data;
          finalState.data = compare2(cacheData, newData) ? cacheData : newData;
          if (shouldStartNewRequest) {
            if (callbackSafeguard()) {
              getConfig().onSuccess(newData, key, config3);
            }
          }
        } catch (err) {
          cleanupState();
          const currentConfig = getConfig();
          const { shouldRetryOnError } = currentConfig;
          if (!currentConfig.isPaused()) {
            finalState.error = err;
            if (shouldStartNewRequest && callbackSafeguard()) {
              currentConfig.onError(err, key, currentConfig);
              if (shouldRetryOnError === true || isFunction(shouldRetryOnError) && shouldRetryOnError(err)) {
                if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {
                  currentConfig.onErrorRetry(err, key, currentConfig, (_opts) => {
                    const revalidators = EVENT_REVALIDATORS[key];
                    if (revalidators && revalidators[0]) {
                      revalidators[0](events.ERROR_REVALIDATE_EVENT, _opts);
                    }
                  }, {
                    retryCount: (opts.retryCount || 0) + 1,
                    dedupe: true
                  });
                }
              }
            }
          }
        }
        loading = false;
        finishRequestAndUpdateState();
        return true;
      },
      // `setState` is immutable, and `eventsCallback`, `fnArg`, and
      // `keyValidating` are depending on `key`, so we can exclude them from
      // the deps array.
      //
      // FIXME:
      // `fn` and `config` might be changed during the lifecycle,
      // but they might be changed every render like this.
      // `useSWR('key', () => fetch('/api/'), { suspense: true })`
      // So we omit the values from the deps array
      // even though it might cause unexpected behaviors.
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [
        key,
        cache2
      ]
    );
    const boundMutate = (0, import_react3.useCallback)(
      // Use callback to make sure `keyRef.current` returns latest result every time
      (...args) => {
        return internalMutate(cache2, keyRef.current, ...args);
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    useIsomorphicLayoutEffect(() => {
      fetcherRef.current = fetcher;
      configRef.current = config3;
      if (!isUndefined(cachedData)) {
        laggyDataRef.current = cachedData;
      }
    });
    useIsomorphicLayoutEffect(() => {
      if (!key) return;
      const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE);
      let nextFocusRevalidatedAt = 0;
      const onRevalidate = /* @__PURE__ */ __name((type, opts = {}) => {
        if (type == events.FOCUS_EVENT) {
          const now3 = Date.now();
          if (getConfig().revalidateOnFocus && now3 > nextFocusRevalidatedAt && isActive()) {
            nextFocusRevalidatedAt = now3 + getConfig().focusThrottleInterval;
            softRevalidate();
          }
        } else if (type == events.RECONNECT_EVENT) {
          if (getConfig().revalidateOnReconnect && isActive()) {
            softRevalidate();
          }
        } else if (type == events.MUTATE_EVENT) {
          return revalidate();
        } else if (type == events.ERROR_REVALIDATE_EVENT) {
          return revalidate(opts);
        }
        return;
      }, "onRevalidate");
      const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate);
      unmountedRef.current = false;
      keyRef.current = key;
      initialMountedRef.current = true;
      setCache({
        _k: fnArg
      });
      if (shouldDoInitialRevalidation) {
        if (isUndefined(data) || IS_SERVER) {
          softRevalidate();
        } else {
          rAF(softRevalidate);
        }
      }
      return () => {
        unmountedRef.current = true;
        unsubEvents();
      };
    }, [
      key
    ]);
    useIsomorphicLayoutEffect(() => {
      let timer;
      function next() {
        const interval = isFunction(refreshInterval) ? refreshInterval(getCache().data) : refreshInterval;
        if (interval && timer !== -1) {
          timer = setTimeout(execute, interval);
        }
      }
      __name(next, "next");
      function execute() {
        if (!getCache().error && (refreshWhenHidden || getConfig().isVisible()) && (refreshWhenOffline || getConfig().isOnline())) {
          revalidate(WITH_DEDUPE).then(next);
        } else {
          next();
        }
      }
      __name(execute, "execute");
      next();
      return () => {
        if (timer) {
          clearTimeout(timer);
          timer = -1;
        }
      };
    }, [
      refreshInterval,
      refreshWhenHidden,
      refreshWhenOffline,
      key
    ]);
    (0, import_react3.useDebugValue)(returnedData);
    if (suspense && isUndefined(data) && key) {
      if (!IS_REACT_LEGACY && IS_SERVER) {
        throw new Error("Fallback data is required when using suspense in SSR.");
      }
      fetcherRef.current = fetcher;
      configRef.current = config3;
      unmountedRef.current = false;
      const req = PRELOAD[key];
      if (!isUndefined(req)) {
        const promise = boundMutate(req);
        use2(promise);
      }
      if (isUndefined(error2)) {
        const promise = revalidate(WITH_DEDUPE);
        if (!isUndefined(returnedData)) {
          promise.status = "fulfilled";
          promise.value = true;
        }
        use2(promise);
      } else {
        throw error2;
      }
    }
    return {
      mutate: boundMutate,
      get data() {
        stateDependencies.data = true;
        return returnedData;
      },
      get error() {
        stateDependencies.error = true;
        return error2;
      },
      get isValidating() {
        stateDependencies.isValidating = true;
        return isValidating;
      },
      get isLoading() {
        stateDependencies.isLoading = true;
        return isLoading;
      }
    };
  }, "useSWRHandler");
  var SWRConfig2 = OBJECT.defineProperty(SWRConfig, "defaultValue", {
    value: defaultConfig
  });
  var useSWR = withArgs(useSWRHandler);

  // node_modules/jotai/esm/vanilla/internals.mjs
  var import_meta = {};
  var isSelfAtom = /* @__PURE__ */ __name((atom2, a21) => atom2.unstable_is ? atom2.unstable_is(a21) : a21 === atom2, "isSelfAtom");
  var hasInitialValue = /* @__PURE__ */ __name((atom2) => "init" in atom2, "hasInitialValue");
  var isActuallyWritableAtom = /* @__PURE__ */ __name((atom2) => !!atom2.write, "isActuallyWritableAtom");
  var isAtomStateInitialized = /* @__PURE__ */ __name((atomState) => "v" in atomState || "e" in atomState, "isAtomStateInitialized");
  var returnAtomValue = /* @__PURE__ */ __name((atomState) => {
    if ("e" in atomState) {
      throw atomState.e;
    }
    if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production" && !("v" in atomState)) {
      throw new Error("[Bug] atom state is not initialized");
    }
    return atomState.v;
  }, "returnAtomValue");
  var promiseStateMap = /* @__PURE__ */ new WeakMap();
  var isPendingPromise = /* @__PURE__ */ __name((value) => {
    var _a;
    return isPromiseLike2(value) && !!((_a = promiseStateMap.get(value)) == null ? void 0 : _a[0]);
  }, "isPendingPromise");
  var abortPromise = /* @__PURE__ */ __name((promise) => {
    const promiseState = promiseStateMap.get(promise);
    if (promiseState == null ? void 0 : promiseState[0]) {
      promiseState[0] = false;
      promiseState[1].forEach((fn3) => fn3());
    }
  }, "abortPromise");
  var registerAbortHandler = /* @__PURE__ */ __name((promise, abortHandler) => {
    let promiseState = promiseStateMap.get(promise);
    if (!promiseState) {
      promiseState = [true, /* @__PURE__ */ new Set()];
      promiseStateMap.set(promise, promiseState);
      const settle = /* @__PURE__ */ __name(() => {
        promiseState[0] = false;
      }, "settle");
      promise.then(settle, settle);
    }
    promiseState[1].add(abortHandler);
  }, "registerAbortHandler");
  var isPromiseLike2 = /* @__PURE__ */ __name((p5) => typeof (p5 == null ? void 0 : p5.then) === "function", "isPromiseLike");
  var addPendingPromiseToDependency = /* @__PURE__ */ __name((atom2, promise, dependencyAtomState) => {
    if (!dependencyAtomState.p.has(atom2)) {
      dependencyAtomState.p.add(atom2);
      promise.then(
        () => {
          dependencyAtomState.p.delete(atom2);
        },
        () => {
          dependencyAtomState.p.delete(atom2);
        }
      );
    }
  }, "addPendingPromiseToDependency");
  var setAtomStateValueOrPromise = /* @__PURE__ */ __name((atom2, valueOrPromise, ensureAtomState) => {
    const atomState = ensureAtomState(atom2);
    const hasPrevValue = "v" in atomState;
    const prevValue = atomState.v;
    if (isPromiseLike2(valueOrPromise)) {
      for (const a21 of atomState.d.keys()) {
        addPendingPromiseToDependency(atom2, valueOrPromise, ensureAtomState(a21));
      }
    }
    atomState.v = valueOrPromise;
    delete atomState.e;
    if (!hasPrevValue || !Object.is(prevValue, atomState.v)) {
      ++atomState.n;
      if (isPromiseLike2(prevValue)) {
        abortPromise(prevValue);
      }
    }
  }, "setAtomStateValueOrPromise");
  var getMountedOrPendingDependents = /* @__PURE__ */ __name((atom2, atomState, mountedMap) => {
    var _a;
    const dependents = /* @__PURE__ */ new Set();
    for (const a21 of ((_a = mountedMap.get(atom2)) == null ? void 0 : _a.t) || []) {
      if (mountedMap.has(a21)) {
        dependents.add(a21);
      }
    }
    for (const atomWithPendingPromise of atomState.p) {
      dependents.add(atomWithPendingPromise);
    }
    return dependents;
  }, "getMountedOrPendingDependents");
  var createStoreHook = /* @__PURE__ */ __name(() => {
    const callbacks = /* @__PURE__ */ new Set();
    const notify = /* @__PURE__ */ __name(() => {
      callbacks.forEach((fn3) => fn3());
    }, "notify");
    notify.add = (fn3) => {
      callbacks.add(fn3);
      return () => {
        callbacks.delete(fn3);
      };
    };
    return notify;
  }, "createStoreHook");
  var createStoreHookForAtoms = /* @__PURE__ */ __name(() => {
    const all = {};
    const callbacks = /* @__PURE__ */ new WeakMap();
    const notify = /* @__PURE__ */ __name((atom2) => {
      var _a, _b;
      (_a = callbacks.get(all)) == null ? void 0 : _a.forEach((fn3) => fn3(atom2));
      (_b = callbacks.get(atom2)) == null ? void 0 : _b.forEach((fn3) => fn3());
    }, "notify");
    notify.add = (atom2, fn3) => {
      const key = atom2 || all;
      const fns = (callbacks.has(key) ? callbacks : callbacks.set(key, /* @__PURE__ */ new Set())).get(key);
      fns.add(fn3);
      return () => {
        fns == null ? void 0 : fns.delete(fn3);
        if (!fns.size) {
          callbacks.delete(key);
        }
      };
    };
    return notify;
  }, "createStoreHookForAtoms");
  var initializeStoreHooks = /* @__PURE__ */ __name((storeHooks) => {
    storeHooks.c || (storeHooks.c = createStoreHookForAtoms());
    storeHooks.m || (storeHooks.m = createStoreHookForAtoms());
    storeHooks.u || (storeHooks.u = createStoreHookForAtoms());
    storeHooks.f || (storeHooks.f = createStoreHook());
    return storeHooks;
  }, "initializeStoreHooks");
  var BUILDING_BLOCKS = Symbol();
  var buildStore = /* @__PURE__ */ __name((atomStateMap = /* @__PURE__ */ new WeakMap(), mountedMap = /* @__PURE__ */ new WeakMap(), invalidatedAtoms = /* @__PURE__ */ new WeakMap(), changedAtoms = /* @__PURE__ */ new Set(), mountCallbacks = /* @__PURE__ */ new Set(), unmountCallbacks = /* @__PURE__ */ new Set(), storeHooks = {}, atomRead = (atom2, ...params) => atom2.read(...params), atomWrite = (atom2, ...params) => atom2.write(...params), atomOnInit = (atom2, store) => {
    var _a;
    return (_a = atom2.unstable_onInit) == null ? void 0 : _a.call(atom2, store);
  }, atomOnMount = (atom2, setAtom) => {
    var _a;
    return (_a = atom2.onMount) == null ? void 0 : _a.call(atom2, setAtom);
  }, ...buildingBlockFunctions) => {
    const ensureAtomState = buildingBlockFunctions[0] || ((atom2) => {
      if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production" && !atom2) {
        throw new Error("Atom is undefined or null");
      }
      let atomState = atomStateMap.get(atom2);
      if (!atomState) {
        atomState = { d: /* @__PURE__ */ new Map(), p: /* @__PURE__ */ new Set(), n: 0 };
        atomStateMap.set(atom2, atomState);
        atomOnInit == null ? void 0 : atomOnInit(atom2, store);
      }
      return atomState;
    });
    const flushCallbacks = buildingBlockFunctions[1] || (() => {
      const errors = [];
      const call3 = /* @__PURE__ */ __name((fn3) => {
        try {
          fn3();
        } catch (e18) {
          errors.push(e18);
        }
      }, "call");
      do {
        if (storeHooks.f) {
          call3(storeHooks.f);
        }
        const callbacks = /* @__PURE__ */ new Set();
        const add = callbacks.add.bind(callbacks);
        changedAtoms.forEach((atom2) => {
          var _a;
          return (_a = mountedMap.get(atom2)) == null ? void 0 : _a.l.forEach(add);
        });
        changedAtoms.clear();
        unmountCallbacks.forEach(add);
        unmountCallbacks.clear();
        mountCallbacks.forEach(add);
        mountCallbacks.clear();
        callbacks.forEach(call3);
        if (changedAtoms.size) {
          recomputeInvalidatedAtoms();
        }
      } while (changedAtoms.size || unmountCallbacks.size || mountCallbacks.size);
      if (errors.length) {
        throw new AggregateError(errors);
      }
    });
    const recomputeInvalidatedAtoms = buildingBlockFunctions[2] || (() => {
      const topSortedReversed = [];
      const visiting = /* @__PURE__ */ new WeakSet();
      const visited = /* @__PURE__ */ new WeakSet();
      const stack = Array.from(changedAtoms);
      while (stack.length) {
        const a21 = stack[stack.length - 1];
        const aState = ensureAtomState(a21);
        if (visited.has(a21)) {
          stack.pop();
          continue;
        }
        if (visiting.has(a21)) {
          if (invalidatedAtoms.get(a21) === aState.n) {
            topSortedReversed.push([a21, aState]);
          } else if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production" && invalidatedAtoms.has(a21)) {
            throw new Error("[Bug] invalidated atom exists");
          }
          visited.add(a21);
          stack.pop();
          continue;
        }
        visiting.add(a21);
        for (const d16 of getMountedOrPendingDependents(a21, aState, mountedMap)) {
          if (!visiting.has(d16)) {
            stack.push(d16);
          }
        }
      }
      for (let i12 = topSortedReversed.length - 1; i12 >= 0; --i12) {
        const [a21, aState] = topSortedReversed[i12];
        let hasChangedDeps = false;
        for (const dep of aState.d.keys()) {
          if (dep !== a21 && changedAtoms.has(dep)) {
            hasChangedDeps = true;
            break;
          }
        }
        if (hasChangedDeps) {
          readAtomState(a21);
          mountDependencies(a21);
        }
        invalidatedAtoms.delete(a21);
      }
    });
    const readAtomState = buildingBlockFunctions[3] || ((atom2) => {
      var _a;
      const atomState = ensureAtomState(atom2);
      if (isAtomStateInitialized(atomState)) {
        if (mountedMap.has(atom2) && invalidatedAtoms.get(atom2) !== atomState.n) {
          return atomState;
        }
        if (Array.from(atomState.d).every(
          ([a21, n21]) => (
            // Recursively, read the atom state of the dependency, and
            // check if the atom epoch number is unchanged
            readAtomState(a21).n === n21
          )
        )) {
          return atomState;
        }
      }
      atomState.d.clear();
      let isSync = true;
      const mountDependenciesIfAsync = /* @__PURE__ */ __name(() => {
        if (mountedMap.has(atom2)) {
          mountDependencies(atom2);
          recomputeInvalidatedAtoms();
          flushCallbacks();
        }
      }, "mountDependenciesIfAsync");
      const getter = /* @__PURE__ */ __name((a21) => {
        var _a2;
        if (isSelfAtom(atom2, a21)) {
          const aState2 = ensureAtomState(a21);
          if (!isAtomStateInitialized(aState2)) {
            if (hasInitialValue(a21)) {
              setAtomStateValueOrPromise(a21, a21.init, ensureAtomState);
            } else {
              throw new Error("no atom init");
            }
          }
          return returnAtomValue(aState2);
        }
        const aState = readAtomState(a21);
        try {
          return returnAtomValue(aState);
        } finally {
          atomState.d.set(a21, aState.n);
          if (isPendingPromise(atomState.v)) {
            addPendingPromiseToDependency(atom2, atomState.v, aState);
          }
          (_a2 = mountedMap.get(a21)) == null ? void 0 : _a2.t.add(atom2);
          if (!isSync) {
            mountDependenciesIfAsync();
          }
        }
      }, "getter");
      let controller;
      let setSelf;
      const options = {
        get signal() {
          if (!controller) {
            controller = new AbortController();
          }
          return controller.signal;
        },
        get setSelf() {
          if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production" && !isActuallyWritableAtom(atom2)) {
            console.warn("setSelf function cannot be used with read-only atom");
          }
          if (!setSelf && isActuallyWritableAtom(atom2)) {
            setSelf = /* @__PURE__ */ __name((...args) => {
              if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production" && isSync) {
                console.warn("setSelf function cannot be called in sync");
              }
              if (!isSync) {
                try {
                  return writeAtomState(atom2, ...args);
                } finally {
                  recomputeInvalidatedAtoms();
                  flushCallbacks();
                }
              }
            }, "setSelf");
          }
          return setSelf;
        }
      };
      const prevEpochNumber = atomState.n;
      try {
        const valueOrPromise = atomRead(atom2, getter, options);
        setAtomStateValueOrPromise(atom2, valueOrPromise, ensureAtomState);
        if (isPromiseLike2(valueOrPromise)) {
          registerAbortHandler(valueOrPromise, () => controller == null ? void 0 : controller.abort());
          valueOrPromise.then(
            mountDependenciesIfAsync,
            mountDependenciesIfAsync
          );
        }
        return atomState;
      } catch (error2) {
        delete atomState.v;
        atomState.e = error2;
        ++atomState.n;
        return atomState;
      } finally {
        isSync = false;
        if (prevEpochNumber !== atomState.n && invalidatedAtoms.get(atom2) === prevEpochNumber) {
          invalidatedAtoms.set(atom2, atomState.n);
          changedAtoms.add(atom2);
          (_a = storeHooks.c) == null ? void 0 : _a.call(storeHooks, atom2);
        }
      }
    });
    const invalidateDependents = buildingBlockFunctions[4] || ((atom2) => {
      const stack = [atom2];
      while (stack.length) {
        const a21 = stack.pop();
        const aState = ensureAtomState(a21);
        for (const d16 of getMountedOrPendingDependents(a21, aState, mountedMap)) {
          const dState = ensureAtomState(d16);
          invalidatedAtoms.set(d16, dState.n);
          stack.push(d16);
        }
      }
    });
    const writeAtomState = buildingBlockFunctions[5] || ((atom2, ...args) => {
      let isSync = true;
      const getter = /* @__PURE__ */ __name((a21) => returnAtomValue(readAtomState(a21)), "getter");
      const setter = /* @__PURE__ */ __name((a21, ...args2) => {
        var _a;
        const aState = ensureAtomState(a21);
        try {
          if (isSelfAtom(atom2, a21)) {
            if (!hasInitialValue(a21)) {
              throw new Error("atom not writable");
            }
            const prevEpochNumber = aState.n;
            const v4 = args2[0];
            setAtomStateValueOrPromise(a21, v4, ensureAtomState);
            mountDependencies(a21);
            if (prevEpochNumber !== aState.n) {
              changedAtoms.add(a21);
              (_a = storeHooks.c) == null ? void 0 : _a.call(storeHooks, a21);
              invalidateDependents(a21);
            }
            return void 0;
          } else {
            return writeAtomState(a21, ...args2);
          }
        } finally {
          if (!isSync) {
            recomputeInvalidatedAtoms();
            flushCallbacks();
          }
        }
      }, "setter");
      try {
        return atomWrite(atom2, getter, setter, ...args);
      } finally {
        isSync = false;
      }
    });
    const mountDependencies = buildingBlockFunctions[6] || ((atom2) => {
      var _a;
      const atomState = ensureAtomState(atom2);
      const mounted = mountedMap.get(atom2);
      if (mounted && !isPendingPromise(atomState.v)) {
        for (const [a21, n21] of atomState.d) {
          if (!mounted.d.has(a21)) {
            const aState = ensureAtomState(a21);
            const aMounted = mountAtom(a21);
            aMounted.t.add(atom2);
            mounted.d.add(a21);
            if (n21 !== aState.n) {
              changedAtoms.add(a21);
              (_a = storeHooks.c) == null ? void 0 : _a.call(storeHooks, a21);
              invalidateDependents(a21);
            }
          }
        }
        for (const a21 of mounted.d || []) {
          if (!atomState.d.has(a21)) {
            mounted.d.delete(a21);
            const aMounted = unmountAtom(a21);
            aMounted == null ? void 0 : aMounted.t.delete(atom2);
          }
        }
      }
    });
    const mountAtom = buildingBlockFunctions[7] || ((atom2) => {
      var _a;
      const atomState = ensureAtomState(atom2);
      let mounted = mountedMap.get(atom2);
      if (!mounted) {
        readAtomState(atom2);
        for (const a21 of atomState.d.keys()) {
          const aMounted = mountAtom(a21);
          aMounted.t.add(atom2);
        }
        mounted = {
          l: /* @__PURE__ */ new Set(),
          d: new Set(atomState.d.keys()),
          t: /* @__PURE__ */ new Set()
        };
        mountedMap.set(atom2, mounted);
        (_a = storeHooks.m) == null ? void 0 : _a.call(storeHooks, atom2);
        if (isActuallyWritableAtom(atom2)) {
          const processOnMount = /* @__PURE__ */ __name(() => {
            let isSync = true;
            const setAtom = /* @__PURE__ */ __name((...args) => {
              try {
                return writeAtomState(atom2, ...args);
              } finally {
                if (!isSync) {
                  recomputeInvalidatedAtoms();
                  flushCallbacks();
                }
              }
            }, "setAtom");
            try {
              const onUnmount = atomOnMount(atom2, setAtom);
              if (onUnmount) {
                mounted.u = () => {
                  isSync = true;
                  try {
                    onUnmount();
                  } finally {
                    isSync = false;
                  }
                };
              }
            } finally {
              isSync = false;
            }
          }, "processOnMount");
          mountCallbacks.add(processOnMount);
        }
      }
      return mounted;
    });
    const unmountAtom = buildingBlockFunctions[8] || ((atom2) => {
      var _a;
      const atomState = ensureAtomState(atom2);
      let mounted = mountedMap.get(atom2);
      if (mounted && !mounted.l.size && !Array.from(mounted.t).some((a21) => {
        var _a2;
        return (_a2 = mountedMap.get(a21)) == null ? void 0 : _a2.d.has(atom2);
      })) {
        if (mounted.u) {
          unmountCallbacks.add(mounted.u);
        }
        mounted = void 0;
        mountedMap.delete(atom2);
        (_a = storeHooks.u) == null ? void 0 : _a.call(storeHooks, atom2);
        for (const a21 of atomState.d.keys()) {
          const aMounted = unmountAtom(a21);
          aMounted == null ? void 0 : aMounted.t.delete(atom2);
        }
        return void 0;
      }
      return mounted;
    });
    const buildingBlocks = [
      // store state
      atomStateMap,
      mountedMap,
      invalidatedAtoms,
      changedAtoms,
      mountCallbacks,
      unmountCallbacks,
      storeHooks,
      // atom interceptors
      atomRead,
      atomWrite,
      atomOnInit,
      atomOnMount,
      // building-block functions
      ensureAtomState,
      flushCallbacks,
      recomputeInvalidatedAtoms,
      readAtomState,
      invalidateDependents,
      writeAtomState,
      mountDependencies,
      mountAtom,
      unmountAtom
    ];
    const store = {
      get: /* @__PURE__ */ __name((atom2) => returnAtomValue(readAtomState(atom2)), "get"),
      set: /* @__PURE__ */ __name((atom2, ...args) => {
        try {
          return writeAtomState(atom2, ...args);
        } finally {
          recomputeInvalidatedAtoms();
          flushCallbacks();
        }
      }, "set"),
      sub: /* @__PURE__ */ __name((atom2, listener) => {
        const mounted = mountAtom(atom2);
        const listeners = mounted.l;
        listeners.add(listener);
        flushCallbacks();
        return () => {
          listeners.delete(listener);
          unmountAtom(atom2);
          flushCallbacks();
        };
      }, "sub")
    };
    Object.defineProperty(store, BUILDING_BLOCKS, { value: buildingBlocks });
    return store;
  }, "buildStore");
  var INTERNAL_buildStoreRev1 = buildStore;
  var INTERNAL_initializeStoreHooks = initializeStoreHooks;
  var INTERNAL_registerAbortHandler = registerAbortHandler;

  // node_modules/jotai/esm/vanilla.mjs
  var import_meta2 = {};
  var keyCount = 0;
  function atom(read3, write3) {
    const key = `atom${++keyCount}`;
    const config3 = {
      toString() {
        return (import_meta2.env ? import_meta2.env.MODE : void 0) !== "production" && this.debugLabel ? key + ":" + this.debugLabel : key;
      }
    };
    if (typeof read3 === "function") {
      config3.read = read3;
    } else {
      config3.init = read3;
      config3.read = defaultRead;
      config3.write = defaultWrite;
    }
    if (write3) {
      config3.write = write3;
    }
    return config3;
  }
  __name(atom, "atom");
  function defaultRead(get) {
    return get(this);
  }
  __name(defaultRead, "defaultRead");
  function defaultWrite(get, set, arg) {
    return set(
      this,
      typeof arg === "function" ? arg(get(this)) : arg
    );
  }
  __name(defaultWrite, "defaultWrite");
  var createDevStoreRev4 = /* @__PURE__ */ __name(() => {
    let inRestoreAtom = 0;
    const storeHooks = INTERNAL_initializeStoreHooks({});
    const atomStateMap = /* @__PURE__ */ new WeakMap();
    const mountedAtoms = /* @__PURE__ */ new WeakMap();
    const store = INTERNAL_buildStoreRev1(
      atomStateMap,
      mountedAtoms,
      void 0,
      void 0,
      void 0,
      void 0,
      storeHooks,
      void 0,
      (atom2, get, set, ...args) => {
        if (inRestoreAtom) {
          return set(atom2, ...args);
        }
        return atom2.write(get, set, ...args);
      }
    );
    const debugMountedAtoms = /* @__PURE__ */ new Set();
    storeHooks.m.add(void 0, (atom2) => {
      debugMountedAtoms.add(atom2);
      const atomState = atomStateMap.get(atom2);
      atomState.m = mountedAtoms.get(atom2);
    });
    storeHooks.u.add(void 0, (atom2) => {
      debugMountedAtoms.delete(atom2);
      const atomState = atomStateMap.get(atom2);
      delete atomState.m;
    });
    const devStore = {
      // store dev methods (these are tentative and subject to change without notice)
      dev4_get_internal_weak_map: /* @__PURE__ */ __name(() => {
        console.log("Deprecated: Use devstore from the devtools library");
        return atomStateMap;
      }, "dev4_get_internal_weak_map"),
      dev4_get_mounted_atoms: /* @__PURE__ */ __name(() => debugMountedAtoms, "dev4_get_mounted_atoms"),
      dev4_restore_atoms: /* @__PURE__ */ __name((values) => {
        const restoreAtom = {
          read: /* @__PURE__ */ __name(() => null, "read"),
          write: /* @__PURE__ */ __name((_get, set) => {
            ++inRestoreAtom;
            try {
              for (const [atom2, value] of values) {
                if ("init" in atom2) {
                  set(atom2, value);
                }
              }
            } finally {
              --inRestoreAtom;
            }
          }, "write")
        };
        store.set(restoreAtom);
      }, "dev4_restore_atoms")
    };
    return Object.assign(store, devStore);
  }, "createDevStoreRev4");
  var overiddenCreateStore;
  function createStore() {
    if (overiddenCreateStore) {
      return overiddenCreateStore();
    }
    if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production") {
      return createDevStoreRev4();
    }
    return INTERNAL_buildStoreRev1();
  }
  __name(createStore, "createStore");
  var defaultStore;
  function getDefaultStore() {
    if (!defaultStore) {
      defaultStore = createStore();
      if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production") {
        globalThis.__JOTAI_DEFAULT_STORE__ || (globalThis.__JOTAI_DEFAULT_STORE__ = defaultStore);
        if (globalThis.__JOTAI_DEFAULT_STORE__ !== defaultStore) {
          console.warn(
            "Detected multiple Jotai instances. It may cause unexpected behavior with the default store. https://github.com/pmndrs/jotai/discussions/2044"
          );
        }
      }
    }
    return defaultStore;
  }
  __name(getDefaultStore, "getDefaultStore");

  // node_modules/jotai/esm/react.mjs
  var import_react4 = __toESM(require_react(), 1);
  var import_meta3 = {};
  var StoreContext = (0, import_react4.createContext)(
    void 0
  );
  function useStore(options) {
    const store = (0, import_react4.useContext)(StoreContext);
    return (options == null ? void 0 : options.store) || store || getDefaultStore();
  }
  __name(useStore, "useStore");
  var isPromiseLike3 = /* @__PURE__ */ __name((x) => typeof (x == null ? void 0 : x.then) === "function", "isPromiseLike");
  var attachPromiseStatus = /* @__PURE__ */ __name((promise) => {
    if (!promise.status) {
      promise.status = "pending";
      promise.then(
        (v4) => {
          promise.status = "fulfilled";
          promise.value = v4;
        },
        (e18) => {
          promise.status = "rejected";
          promise.reason = e18;
        }
      );
    }
  }, "attachPromiseStatus");
  var use3 = import_react4.default.use || // A shim for older React versions
  ((promise) => {
    if (promise.status === "pending") {
      throw promise;
    } else if (promise.status === "fulfilled") {
      return promise.value;
    } else if (promise.status === "rejected") {
      throw promise.reason;
    } else {
      attachPromiseStatus(promise);
      throw promise;
    }
  });
  var continuablePromiseMap = /* @__PURE__ */ new WeakMap();
  var createContinuablePromise = /* @__PURE__ */ __name((promise, getValue) => {
    let continuablePromise = continuablePromiseMap.get(promise);
    if (!continuablePromise) {
      continuablePromise = new Promise((resolve, reject) => {
        let curr = promise;
        const onFulfilled = /* @__PURE__ */ __name((me3) => (v4) => {
          if (curr === me3) {
            resolve(v4);
          }
        }, "onFulfilled");
        const onRejected = /* @__PURE__ */ __name((me3) => (e18) => {
          if (curr === me3) {
            reject(e18);
          }
        }, "onRejected");
        const onAbort = /* @__PURE__ */ __name(() => {
          try {
            const nextValue = getValue();
            if (isPromiseLike3(nextValue)) {
              continuablePromiseMap.set(nextValue, continuablePromise);
              curr = nextValue;
              nextValue.then(onFulfilled(nextValue), onRejected(nextValue));
              INTERNAL_registerAbortHandler(nextValue, onAbort);
            } else {
              resolve(nextValue);
            }
          } catch (e18) {
            reject(e18);
          }
        }, "onAbort");
        promise.then(onFulfilled(promise), onRejected(promise));
        INTERNAL_registerAbortHandler(promise, onAbort);
      });
      continuablePromiseMap.set(promise, continuablePromise);
    }
    return continuablePromise;
  }, "createContinuablePromise");
  function useAtomValue(atom2, options) {
    const { delay, unstable_promiseStatus: promiseStatus = !import_react4.default.use } = options || {};
    const store = useStore(options);
    const [[valueFromReducer, storeFromReducer, atomFromReducer], rerender] = (0, import_react4.useReducer)(
      (prev) => {
        const nextValue = store.get(atom2);
        if (Object.is(prev[0], nextValue) && prev[1] === store && prev[2] === atom2) {
          return prev;
        }
        return [nextValue, store, atom2];
      },
      void 0,
      () => [store.get(atom2), store, atom2]
    );
    let value = valueFromReducer;
    if (storeFromReducer !== store || atomFromReducer !== atom2) {
      rerender();
      value = store.get(atom2);
    }
    (0, import_react4.useEffect)(() => {
      const unsub = store.sub(atom2, () => {
        if (promiseStatus) {
          try {
            const value2 = store.get(atom2);
            if (isPromiseLike3(value2)) {
              attachPromiseStatus(
                createContinuablePromise(value2, () => store.get(atom2))
              );
            }
          } catch (e18) {
          }
        }
        if (typeof delay === "number") {
          setTimeout(rerender, delay);
          return;
        }
        rerender();
      });
      rerender();
      return unsub;
    }, [store, atom2, delay, promiseStatus]);
    (0, import_react4.useDebugValue)(value);
    if (isPromiseLike3(value)) {
      const promise = createContinuablePromise(value, () => store.get(atom2));
      if (promiseStatus) {
        attachPromiseStatus(promise);
      }
      return use3(promise);
    }
    return value;
  }
  __name(useAtomValue, "useAtomValue");
  function useSetAtom(atom2, options) {
    const store = useStore(options);
    const setAtom = (0, import_react4.useCallback)(
      (...args) => {
        if ((import_meta3.env ? import_meta3.env.MODE : void 0) !== "production" && !("write" in atom2)) {
          throw new Error("not writable atom");
        }
        return store.set(atom2, ...args);
      },
      [store, atom2]
    );
    return setAtom;
  }
  __name(useSetAtom, "useSetAtom");

  // node_modules/jotai/esm/vanilla/utils.mjs
  var import_meta4 = {};
  var RESET = Symbol(
    (import_meta4.env ? import_meta4.env.MODE : void 0) !== "production" ? "RESET" : ""
  );
  var isPromiseLike$3 = /* @__PURE__ */ __name((x) => typeof (x == null ? void 0 : x.then) === "function", "isPromiseLike$3");
  function createJSONStorage(getStringStorage = () => {
    try {
      return window.localStorage;
    } catch (e18) {
      if ((import_meta4.env ? import_meta4.env.MODE : void 0) !== "production") {
        if (typeof window !== "undefined") {
          console.warn(e18);
        }
      }
      return void 0;
    }
  }, options) {
    var _a;
    let lastStr;
    let lastValue;
    const storage = {
      getItem: /* @__PURE__ */ __name((key, initialValue) => {
        var _a2, _b;
        const parse6 = /* @__PURE__ */ __name((str2) => {
          str2 = str2 || "";
          if (lastStr !== str2) {
            try {
              lastValue = JSON.parse(str2, options == null ? void 0 : options.reviver);
            } catch (e18) {
              return initialValue;
            }
            lastStr = str2;
          }
          return lastValue;
        }, "parse");
        const str = (_b = (_a2 = getStringStorage()) == null ? void 0 : _a2.getItem(key)) != null ? _b : null;
        if (isPromiseLike$3(str)) {
          return str.then(parse6);
        }
        return parse6(str);
      }, "getItem"),
      setItem: /* @__PURE__ */ __name((key, newValue) => {
        var _a2;
        return (_a2 = getStringStorage()) == null ? void 0 : _a2.setItem(
          key,
          JSON.stringify(newValue, options == null ? void 0 : options.replacer)
        );
      }, "setItem"),
      removeItem: /* @__PURE__ */ __name((key) => {
        var _a2;
        return (_a2 = getStringStorage()) == null ? void 0 : _a2.removeItem(key);
      }, "removeItem")
    };
    const createHandleSubscribe = /* @__PURE__ */ __name((subscriber2) => (key, callback, initialValue) => subscriber2(key, (v4) => {
      let newValue;
      try {
        newValue = JSON.parse(v4 || "");
      } catch (e18) {
        newValue = initialValue;
      }
      callback(newValue);
    }), "createHandleSubscribe");
    let subscriber;
    try {
      subscriber = (_a = getStringStorage()) == null ? void 0 : _a.subscribe;
    } catch (e18) {
    }
    if (!subscriber && typeof window !== "undefined" && typeof window.addEventListener === "function" && window.Storage) {
      subscriber = /* @__PURE__ */ __name((key, callback) => {
        if (!(getStringStorage() instanceof window.Storage)) {
          return () => {
          };
        }
        const storageEventCallback = /* @__PURE__ */ __name((e18) => {
          if (e18.storageArea === getStringStorage() && e18.key === key) {
            callback(e18.newValue);
          }
        }, "storageEventCallback");
        window.addEventListener("storage", storageEventCallback);
        return () => {
          window.removeEventListener("storage", storageEventCallback);
        };
      }, "subscriber");
    }
    if (subscriber) {
      storage.subscribe = createHandleSubscribe(subscriber);
    }
    return storage;
  }
  __name(createJSONStorage, "createJSONStorage");
  var defaultStorage = createJSONStorage();

  // node_modules/jotai/esm/react/utils.mjs
  var import_react5 = __toESM(require_react(), 1);
  function useAtomCallback(callback, options) {
    const anAtom = (0, import_react5.useMemo)(
      () => atom(null, (get, set, ...args) => callback(get, set, ...args)),
      [callback]
    );
    return useSetAtom(anAtom, options);
  }
  __name(useAtomCallback, "useAtomCallback");

  // node_modules/hds-react/tslib.es6-0bd7f4eb.js
  function o(t21, r30) {
    var n21 = {};
    for (var o18 in t21) Object.prototype.hasOwnProperty.call(t21, o18) && r30.indexOf(o18) < 0 && (n21[o18] = t21[o18]);
    if (null != t21 && "function" == typeof Object.getOwnPropertySymbols) {
      var e18 = 0;
      for (o18 = Object.getOwnPropertySymbols(t21); e18 < o18.length; e18++) r30.indexOf(o18[e18]) < 0 && Object.prototype.propertyIsEnumerable.call(t21, o18[e18]) && (n21[o18[e18]] = t21[o18[e18]]);
    }
    return n21;
  }
  __name(o, "o");
  function e(t21, r30, n21, o18) {
    return new (n21 || (n21 = Promise))(function(e18, c6) {
      function a21(t22) {
        try {
          i12(o18.next(t22));
        } catch (t23) {
          c6(t23);
        }
      }
      __name(a21, "a");
      function p5(t22) {
        try {
          i12(o18.throw(t22));
        } catch (t23) {
          c6(t23);
        }
      }
      __name(p5, "p");
      function i12(t22) {
        var r31;
        t22.done ? e18(t22.value) : (r31 = t22.value, r31 instanceof n21 ? r31 : new n21(function(t23) {
          t23(r31);
        })).then(a21, p5);
      }
      __name(i12, "i");
      i12((o18 = o18.apply(t21, r30 || [])).next());
    });
  }
  __name(e, "e");

  // node_modules/postcss/lib/postcss.mjs
  var import_postcss = __toESM(require_postcss(), 1);
  var stringify = import_postcss.default.stringify;
  var fromJSON = import_postcss.default.fromJSON;
  var plugin = import_postcss.default.plugin;
  var parse = import_postcss.default.parse;
  var list = import_postcss.default.list;
  var document2 = import_postcss.default.document;
  var comment = import_postcss.default.comment;
  var atRule = import_postcss.default.atRule;
  var rule = import_postcss.default.rule;
  var decl = import_postcss.default.decl;
  var root = import_postcss.default.root;
  var CssSyntaxError = import_postcss.default.CssSyntaxError;
  var Declaration = import_postcss.default.Declaration;
  var Container = import_postcss.default.Container;
  var Processor = import_postcss.default.Processor;
  var Document = import_postcss.default.Document;
  var Comment = import_postcss.default.Comment;
  var Warning = import_postcss.default.Warning;
  var AtRule = import_postcss.default.AtRule;
  var Result = import_postcss.default.Result;
  var Input = import_postcss.default.Input;
  var Rule = import_postcss.default.Rule;
  var Root = import_postcss.default.Root;
  var Node = import_postcss.default.Node;

  // node_modules/hds-react/style-inject.es-acdf7ad9.js
  function e2(e18, t21) {
    void 0 === t21 && (t21 = {});
    var d16 = t21.insertAt;
    if (e18 && "undefined" != typeof document) {
      var n21 = document.head || document.getElementsByTagName("head")[0], s21 = document.createElement("style");
      s21.type = "text/css", "top" === d16 && n21.firstChild ? n21.insertBefore(s21, n21.firstChild) : n21.appendChild(s21), s21.styleSheet ? s21.styleSheet.cssText = e18 : s21.appendChild(document.createTextNode(e18));
    }
  }
  __name(e2, "e");

  // node_modules/hds-react/Icon.module-226ab730.js
  var a;
  !function(e18) {
    e18.ExtraSmall = "extraSmall", e18.Small = "small", e18.Medium = "medium", e18.Large = "large", e18.ExtraLarge = "extraLarge";
  }(a || (a = {}));
  var i = { icon: "Icon-module_icon__1Jtzj icon_hds-icon__1YqNC", extraSmall: "Icon-module_extraSmall__3Q7tD icon_hds-icon--size-xs__3dAMZ", small: "Icon-module_small__gTGkU icon_hds-icon--size-s__2Lkik", medium: "Icon-module_medium__1D6Pb icon_hds-icon--size-m__1mcHv", large: "Icon-module_large__28YAW icon_hds-icon--size-l__3Zczy", extraLarge: "Icon-module_extraLarge__27rtn icon_hds-icon--size-xl__1Jes8" };
  e2('.icon_hds-icon__1YqNC{background-color:currentcolor;display:inline-block;height:var(--icon-size);-webkit-mask-image:var(--mask-image);mask-image:var(--mask-image);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:auto;mask-size:auto;width:var(--icon-size)}.icon_hds-icon--size-xs__3dAMZ{--icon-size:var(--spacing-layout-2-xs)}.icon_hds-icon--size-s__2Lkik{--icon-size:var(--spacing-layout-xs)}.icon_hds-icon--size-m__1mcHv{--icon-size:var(--spacing-layout-s)}.icon_hds-icon--size-l__3Zczy{--icon-size:var(--spacing-layout-m)}.icon_hds-icon--size-xl__1Jes8{--icon-size:var(--spacing-layout-l)}[class*=hds-icon-start--]:before{-webkit-mask-image:var(--mask-image-before);mask-image:var(--mask-image-before)}[class*=hds-icon-end--]:after,[class*=hds-icon-start--]:before{background-color:currentcolor;content:"";display:inline-flex;height:var(--icon-size,24px);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:contain;mask-size:contain;width:var(--icon-size,24px)}[class*=hds-icon-end--]:after{-webkit-mask-image:var(--mask-image-after);mask-image:var(--mask-image-after)}.Icon-module_icon__1Jtzj{background-color:transparent}');

  // node_modules/hds-react/IconAngleDown-126d7850.js
  var import_react7 = __toESM(require_react());
  var o2 = /* @__PURE__ */ __name((o18) => {
    var { "aria-label": s21 = "angle-down", "aria-hidden": i12 = true, className: t21 = "", color: n21, size: c6 = a.Small, style: m6 = {} } = o18, d16 = o(o18, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react7.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": i12, className: [i.icon, i[c6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: n21, style: m6 }, d16), import_react7.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 13.5L17 8.5L18.5 10L12 16.5L5.5 10L7 8.5L12 13.5Z", fill: "currentColor" }));
  }, "o");

  // node_modules/hds-react/IconCheck-863f0c90.js
  var import_react8 = __toESM(require_react());
  var s = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "check", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a.Small, style: n21 = {} } = s21, d16 = o(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react8.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i.icon, i[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react8.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 7L10 18L4.5 12.5L6 11L10 15L19.5 5.5L21 7Z", fill: "currentColor" }));
  }, "s");

  // node_modules/hds-react/IconCross-5876a590.js
  var import_react9 = __toESM(require_react());
  var s2 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "cross", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a.Small, style: n21 = {} } = s21, d16 = o(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react9.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i.icon, i[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react9.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18 7.5L13.5 12L18 16.5L16.5 18L12 13.5L7.5 18L6 16.5L10.5 12L6 7.5L7.5 6L12 10.5L16.5 6L18 7.5Z", fill: "currentColor" }));
  }, "s");

  // node_modules/hds-react/IconCrossCircle-31348c7c.js
  var import_react10 = __toESM(require_react());
  var s3 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "cross-circle", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a.Small, style: n21 = {} } = s21, d16 = o(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react10.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i.icon, i[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react10.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM15 7.5L16.5 9L13.5 12L16.5 15L15 16.5L12 13.5L9 16.5L7.5 15L10.5 12L7.5 9L9 7.5L12 10.5L15 7.5Z", fill: "currentColor" }));
  }, "s");

  // node_modules/hds-react/IconCrossCircleFill-eefec6ce.js
  var import_react11 = __toESM(require_react());
  var s4 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": i12 = "cross-circle-fill", "aria-hidden": o18 = true, className: t21 = "", color: c6, size: m6 = a.Small, style: n21 = {} } = s21, d16 = o(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react11.default.createElement("svg", Object.assign({ "aria-label": i12, "aria-hidden": o18, className: [i.icon, i[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react11.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3ZM15 7.5L16.5 9L13.5 12L16.5 15L15 16.5L12 13.5L9 16.5L7.5 15L10.5 12L7.5 9L9 7.5L12 10.5L15 7.5Z", fill: "currentColor" }));
  }, "s");

  // node_modules/hds-react/IconError-7f644a5d.js
  var import_react12 = __toESM(require_react());
  var o3 = /* @__PURE__ */ __name((o18) => {
    var { "aria-label": s21 = "error", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a.Small, style: n21 = {} } = o18, d16 = o(o18, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react12.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": i12, className: [i.icon, i[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react12.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M11.1284 2.50974C11.4971 1.85436 12.4201 1.83095 12.8284 2.43952L12.8716 2.50974L22.4341 19.5097C22.7965 20.1541 22.3585 20.9453 21.638 20.9973L21.5625 21H2.43749C1.69816 21 1.22338 20.2303 1.53125 19.5769L1.56592 19.5097L11.1284 2.50974ZM12 5.04L4.14699 19H19.8525L12 5.04ZM13 16V18H11V16H13ZM13 9.5V14.5H11V9.5H13Z", fill: "currentColor" }));
  }, "o");

  // node_modules/hds-react/IconQuestionCircle-3221fe83.js
  var import_react13 = __toESM(require_react());
  var s5 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": i12 = "question-circle", "aria-hidden": o18 = true, className: t21 = "", color: c6, size: C2 = a.Small, style: n21 = {} } = s21, m6 = o(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react13.default.createElement("svg", Object.assign({ "aria-label": i12, "aria-hidden": o18, className: [i.icon, i[C2], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, m6), import_react13.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM13 16V18H11V16H13ZM12.0437 5.75C14.0343 5.75 15.7173 7.29464 15.7173 9.42361C15.7173 10.7806 15.2461 11.489 14.161 12.306L13.9187 12.4844C13.1753 13.0295 12.9556 13.3359 12.9386 14.142L12.9375 14.25H10.9375C10.9375 12.6746 11.4591 11.8378 12.6143 10.9622L12.8618 10.7796C13.5685 10.2628 13.7173 10.0539 13.7173 9.42361C13.7173 8.43934 12.9662 7.75 12.0437 7.75C11.1907 7.75 10.4785 8.34077 10.3816 9.20835L10.3734 9.30587L8.37663 9.19182C8.49191 7.17347 10.1344 5.75 12.0437 5.75Z", fill: "currentColor" }));
  }, "s");

  // node_modules/hds-react/base.module-f77a180c.js
  e2(':root{--breakpoint-xs:320px;--breakpoint-s:576px;--breakpoint-m:768px;--breakpoint-l:992px;--breakpoint-xl:1248px;--container-width-xs:288px;--container-width-s:544px;--container-width-m:720px;--container-width-l:944px;--container-width-xl:1200px;--color-brick:#bd2719;--color-brick-light:#ffeeed;--color-brick-medium-light:#facbc8;--color-brick-dark:#800e04;--color-bus:#0000bf;--color-bus-light:#f0f0ff;--color-bus-medium-light:#ccf;--color-bus-dark:#00005e;--color-coat-of-arms:#0072c6;--color-coat-of-arms-light:#e6f4ff;--color-coat-of-arms-medium-light:#b5daf7;--color-coat-of-arms-dark:#005799;--color-copper:#00d7a7;--color-copper-light:#cffaf1;--color-copper-medium-light:#9ef0de;--color-copper-dark:#00a17d;--color-engel:#ffe977;--color-engel-light:#fff9db;--color-engel-medium-light:#fff3b8;--color-engel-dark:#dbc030;--color-fog:#9fc9eb;--color-fog-light:#e8f3fc;--color-fog-medium-light:#d0e6f7;--color-fog-dark:#72a5cf;--color-gold:#c2a251;--color-gold-light:#f7f2e4;--color-gold-medium-light:#e8d7a7;--color-gold-dark:#9e823c;--color-metro:#fd4f00;--color-metro-light:#ffeee6;--color-metro-medium-light:#ffcab3;--color-metro-dark:#bd2f00;--color-silver:#dedfe1;--color-silver-light:#f7f7f8;--color-silver-medium-light:#efeff0;--color-silver-dark:#b0b8bf;--color-summer:#ffc61e;--color-summer-light:#fff4d4;--color-summer-medium-light:#ffe49c;--color-summer-dark:#cc9200;--color-suomenlinna:#f5a3c7;--color-suomenlinna-light:#fff0f7;--color-suomenlinna-medium-light:#ffdbeb;--color-suomenlinna-dark:#e673a5;--color-tram:#008741;--color-tram-light:#dff7eb;--color-tram-medium-light:#a3e3c2;--color-tram-dark:#006631;--color-focus-outline:#0072c6;--color-black:#000;--color-white:#fff;--color-black-5:#f2f2f2;--color-black-10:#e6e6e6;--color-black-20:#ccc;--color-black-30:#b3b3b3;--color-black-40:#999;--color-black-50:grey;--color-black-60:#595959;--color-black-70:#4d4d4d;--color-black-80:#333;--color-black-90:#1a1a1a;--color-error:#b01038;--color-error-light:#f6e2e6;--color-error-dark:#8d0d2d;--color-success:#007a64;--color-success-light:#e2f5f3;--color-success-dark:#006250;--color-alert:#ffda07;--color-alert-light:#fff4b4;--color-alert-dark:#d18200;--color-info:#0062b9;--color-info-light:#e5eff8;--color-info-dark:#004f94;--box-shadow-s:0px 2px 10px 0px rgba(0,0,0,0.07);--box-shadow-m:0px 2px 10px 0px rgba(0,0,0,0.1);--box-shadow-l:0px 2px 20px 0px rgba(0,0,0,0.2);--spacing-layout-2-xs:1rem;--spacing-layout-xs:1.5rem;--spacing-layout-s:2rem;--spacing-layout-m:3rem;--spacing-layout-l:4rem;--spacing-layout-xl:6rem;--spacing-layout-2-xl:8rem;--spacing-4-xs:0.125rem;--spacing-3-xs:0.25rem;--spacing-2-xs:0.5rem;--spacing-xs:0.75rem;--spacing-s:1rem;--spacing-m:1.5rem;--spacing-l:2rem;--spacing-xl:2.5rem;--spacing-2-xl:3.0rem;--spacing-3-xl:3.5rem;--spacing-4-xl:4rem;--spacing-5-xl:4.5rem;--fontsize-heading-xxl:4rem;--fontsize-heading-xl:3rem;--fontsize-heading-xl-mobile:2.5rem;--fontsize-heading-l:2rem;--fontsize-heading-m:1.5rem;--fontsize-heading-s:1.25rem;--fontsize-heading-xs:1.125rem;--fontsize-heading-xxs:1rem;--fontsize-body-s:0.875rem;--fontsize-body-m:1rem;--fontsize-body-l:1.125rem;--fontsize-body-xl:1.25rem;--font-default:HelsinkiGrotesk,Arial,sans-serif;--lineheight-s:1;--lineheight-m:1.2;--lineheight-l:1.5;--lineheight-xl:1.75}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.visually-hidden{border:0;clip:"rect(0 0 0 0)";height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.button-reset{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.text-body{color:var(--color-black-90);font-size:var(--fontsize-body-m);line-height:var(--lineheight-l)}.text-body,.text-medium{font-family:var(--font-default)}.text-medium{font-weight:500}.text-bold{font-family:var(--font-default);font-weight:700}.text-xl{font-size:var(--fontsize-heading-m)}.text-lg{font-size:var(--fontsize-heading-s)}.text-md{font-size:var(--fontsize-heading-xs)}.subtitle{font-size:var(--fontsize-body-m)}.text-sm{font-size:var(--fontsize-body-s);line-height:var(--lineheight-xl)}.heading-xxl{font-size:var(--fontsize-heading-xxl);letter-spacing:-1.2px}.heading-xl,.heading-xxl{font-weight:400;line-height:var(--lineheight-s)}.heading-xl{font-size:var(--fontsize-heading-xl);letter-spacing:-1px}.heading-xl-mobile{font-size:var(--fontsize-heading-xl-mobile);font-weight:400;letter-spacing:-.8px;line-height:var(--lineheight-s)}.heading-l{font-size:var(--fontsize-heading-l);font-weight:400;letter-spacing:-.4px}.heading-l,.heading-m{line-height:var(--lineheight-m)}.heading-m{font-size:var(--fontsize-heading-m);font-weight:500;letter-spacing:-.2px}.heading-s{font-size:var(--fontsize-heading-s);font-weight:500}.heading-s,.heading-xs{letter-spacing:0;line-height:var(--lineheight-l)}.heading-xs{font-size:var(--fontsize-heading-xs);font-weight:700}.heading-xxs{font-size:var(--fontsize-heading-xxs);font-weight:700;letter-spacing:.2px;line-height:var(--lineheight-l)}.helper-text{color:var(--color-black-60);display:block;flex-basis:100%;font-size:var(--fontsize-body-m);margin-top:var(--spacing-2-xs)}html{-webkit-text-size-adjust:100%}');

  // node_modules/hds-react/classNames-cb7c78b5.js
  var t = {}.hasOwnProperty;
  function n(r30) {
    const o18 = typeof r30;
    return r30 ? "string" === o18 || "number" === o18 ? r30 : Array.isArray(r30) ? r30.length ? r30.map((t21) => n(t21)).filter(Boolean).join(" ") : null : "object" === o18 ? ((n21, r31 = null) => {
      if (n21.toString !== Object.prototype.toString && !n21.toString.toString().includes("[native code]")) return n21.toString();
      const o19 = Object.assign({}, n21);
      return r31 && Object.keys(r31).filter((t21) => !!n21[t21]).forEach((t21) => {
        o19[r31[t21]] = true;
      }), Object.keys(o19).filter((n22) => t.call(o19, n22) && !!o19[n22]).join(" ");
    })(r30, this) : null : null;
  }
  __name(n, "n");
  var r = /* @__PURE__ */ __name((...t21) => t21.map(n).filter(Boolean).join(" "), "r");

  // node_modules/hds-react/useTheme-c6399169.js
  var import_react14 = __toESM(require_react());
  var import_lodash = __toESM(require_lodash());

  // node_modules/hds-react/isSsrEnvironment-26654d35.js
  var e3 = /* @__PURE__ */ __name(() => "undefined" == typeof window || "undefined" == typeof document, "e");

  // node_modules/hds-react/useTheme-c6399169.js
  var r2 = "undefined" != typeof window && window.document ? import_react14.useLayoutEffect : import_react14.useEffect;
  var d = /* @__PURE__ */ __name((e18, t21, d16) => {
    const c6 = t21 && "string" != typeof t21, i12 = (0, import_react14.useRef)(c6 ? (0, import_lodash.uniqueId)("custom-theme-") : "").current;
    return r2(() => {
      c6 && ((e19, t22, n21) => {
        if (e3()) return;
        const o18 = /* @__PURE__ */ __name((t23) => {
          var o19;
          return null === (o19 = t23.selectorText) || void 0 === o19 ? void 0 : o19.includes(`${e19}.${n21}`);
        }, "o");
        try {
          let s21 = [...document.styleSheets].findIndex((t23) => {
            try {
              return [...t23.cssRules].findIndex((t24) => {
                var n22;
                return null === (n22 = t24.selectorText) || void 0 === n22 ? void 0 : n22.includes(e19);
              }) >= 0;
            } catch (e20) {
              return false;
            }
          });
          if (-1 === s21) {
            const e20 = document.createElement("style");
            document.head.appendChild(e20), s21 = document.styleSheets.length - 1;
          }
          const r30 = document.styleSheets[s21], d17 = r30.cssRules;
          let c7 = [...d17].findIndex(o18);
          -1 === c7 && (r30.insertRule(`.${e19}.${n21} { content: '' }`, d17.length), c7 = [...d17].findIndex(o18));
          const i13 = d17[c7];
          Object.entries(t22).forEach(([e20, t23]) => i13.style.setProperty(e20, t23));
        } catch (t23) {
          console.warn(`Could not find the stylesheet to update with the "${e19}" selector!`);
        }
      })(e18 && e18.split(" ")[0], t21, `${i12}${d16 || ""}`);
    }, [e18, t21, i12, c6, d16]), i12;
  }, "d");

  // node_modules/hds-react/Button-2f796980.js
  var import_react15 = __toESM(require_react());
  var l2;
  var t3;
  var n3;
  var d2 = { button: "Button-module_button__1msFE", primary: "Button-module_primary__2LfKB", secondary: "Button-module_secondary__1nABp", supplementary: "Button-module_supplementary__3YKiS", "theme-coat": "Button-module_theme-coat__2_3U7", "theme-black": "Button-module_theme-black__m8giY", clear: "Button-module_clear__2i_5U", success: "Button-module_success__CU9nK", danger: "Button-module_danger__2el15", "size-small": "Button-module_size-small__3lizH", fullWidth: "Button-module_fullWidth__31eVK", icon: "Button-module_icon__O-h7R" };
  e2(".Button-module_button__1msFE{--border-width:2px;--outline-width-focus:3px;--padding-horizontal:var(--spacing-l);--min-size:56px;--padding-vertical:var(--spacing-s);--padding:calc(var(--padding-vertical) - var(--border-width)) calc(var(--padding-horizontal) - var(--border-width));--icon-reposition:calc(-1 * var(--spacing-2-xs));--computed-background-color:var(--background-color,transparent);--computed-background-color-focus:var(--background-color-focus,var(--computed-background-color,transparent));--computed-background-color-hover:var(--background-color-hover,var(--computed-background-color-focus,transparent));--computed-background-color-active:var(--background-color-active,var(--computed-background-color-hover,transparent));--computed-background-color-disabled:var(--background-color-disabled,var(--color-black-20,transparent));--computed-color:var(--color,inherit);--computed-color-focus:var(--color-focus,var(--computed-color,inherit));--computed-color-hover:var(--color-hover,var(--computed-color-focus,inherit));--computed-color-active:var(--color-active,var(--computed-color-hover,inherit));--computed-color-disabled:var(--color-disabled,var(--color-white,inherit));--computed-border-color:var(--border-color,var(--computed-background-color));--computed-border-color-focus:var(--border-color-focus,var(--computed-border-color,transparent));--computed-border-color-hover:var(--border-color-hover,var(--computed-border-color-focus,transparent));--computed-border-color-active:var(--border-color-active,var(--computed-border-color-hover,transparent));--computed-border-color-disabled:var(--border-color-disabled,var(--computed-background-color-disabled,transparent));--computed-outline-color-focus:var(--outline-color-focus,transparent);--computed-icon-size:var(--icon-size,var(--spacing-m));align-content:flex-start;align-items:center;background-color:var(--computed-background-color);border:var(--border-width) solid var(--computed-border-color);border-radius:0;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;color:var(--computed-color,inherit);column-gap:var(--spacing-2-xs);cursor:var(--cursor,pointer);display:inline-flex;font-family:inherit;font-size:100%;font-weight:500;hyphens:auto;justify-content:center;line-height:var(--lineheight-l);margin:0;min-height:var(--min-size);min-width:var(--min-size);outline:none;outline-offset:2px;overflow:hidden;overflow-wrap:anywhere;padding:var(--padding);position:relative;text-align:center;text-decoration:none;text-transform:none;vertical-align:top}.Button-module_button__1msFE:after{margin-right:var(--icon-reposition)}.Button-module_button__1msFE:before{margin-left:var(--icon-reposition)}.Button-module_button__1msFE,.Button-module_button__1msFE[type=button],.Button-module_button__1msFE[type=reset],.Button-module_button__1msFE[type=submit]{-webkit-appearance:button}.Button-module_button__1msFE:focus-visible{background-color:var(--computed-background-color-focus);border-color:var(--computed-border-color-focus);color:var(--computed-color-focus);outline:var(--outline-width-focus) solid var(--computed-outline-color-focus)}.Button-module_button__1msFE:hover{background-color:var(--computed-background-color-hover);border-color:var(--computed-border-color-hover);color:var(--computed-color-hover)}.Button-module_button__1msFE:active{background-color:var(--computed-background-color-active);border-color:var(--computed-border-color-active);color:var(--computed-color-active);outline:var(--outline-width-focus) solid var(--computed-outline-color-focus)}.Button-module_button__1msFE:disabled{--cursor:not-allowed;background-color:var(--computed-background-color-disabled);border-color:var(--computed-border-color-disabled);color:var(--computed-color-disabled);outline:none}.Button-module_button__1msFE button.Button-module_button__1msFE{-webkit-appearance:button}.Button-module_primary__2LfKB{--background-color:var(--color-bus);--background-color-hover:var(--color-bus-dark);--background-color-focus:var(--color-bus);--background-color-disabled:var(--color-black-20);--border-color:transparent;--color:var(--color-white);--color-disabled:var(--color-white);--outline-color-focus:var(--color-coat-of-arms)}.Button-module_secondary__1nABp{--border-color:var(--color-bus);--border-color-disabled:var(--color-disabled)}.Button-module_secondary__1nABp,.Button-module_supplementary__3YKiS{--background-color:transparent;--background-color-hover:var(--color-bus-light);--background-color-focus:transparent;--background-color-disabled:transparent;--color:var(--color-bus);--color-disabled:var(--color-black-40);--outline-color-focus:var(--color-coat-of-arms)}.Button-module_supplementary__3YKiS{--border-color:transparent;--border-color-disabled:transparent}.Button-module_theme-coat__2_3U7.Button-module_primary__2LfKB{--background-color:var(--color-bus);--background-color-hover:var(--color-bus-dark);--background-color-focus:var(--color-bus);--background-color-disabled:var(--color-black-20);--border-color:transparent;--color-disabled:var(--color-white);--outline-color-focus:var(--color-coat-of-arms);--background-color:var(--color-coat-of-arms);--background-color-hover:var(--color-coat-of-arms-dark);--background-color-focus:var(--color-coat-of-arms);--border-color:var(--color-coat-of-arms);--border-color-hover:var(--color-coat-of-arms-dark);--border-color-focus:var(--color-coat-of-arms);--color:var(--color-white)}.Button-module_theme-coat__2_3U7.Button-module_secondary__1nABp{--border-color:var(--color-bus);--border-color-disabled:var(--color-disabled);--border-color:var(--color-coat-of-arms)}.Button-module_theme-coat__2_3U7.Button-module_secondary__1nABp,.Button-module_theme-coat__2_3U7.Button-module_supplementary__3YKiS{--background-color-hover:var(--color-bus-light);--background-color-disabled:transparent;--color:var(--color-bus);--color-disabled:var(--color-black-40);--outline-color-focus:var(--color-coat-of-arms);--background-color:transparent;--background-color-hover:var(--color-coat-of-arms-light);--background-color-focus:transparent;--color:var(--color-coat-of-arms)}.Button-module_theme-coat__2_3U7.Button-module_supplementary__3YKiS{--border-color-disabled:transparent;--border-color:transparent}.Button-module_theme-black__m8giY.Button-module_primary__2LfKB{--background-color:var(--color-bus);--background-color-hover:var(--color-bus-dark);--background-color-focus:var(--color-bus);--background-color-disabled:var(--color-black-20);--border-color:transparent;--color-disabled:var(--color-white);--outline-color-focus:var(--color-coat-of-arms);--background-color:var(--color-black);--background-color-hover:var(--color-black);--background-color-focus:var(--color-black);--border-color:var(--color-black);--border-color-hover:var(--color-black);--border-color-focus:var(--color-black);--color:var(--color-white);--color-hover:var(--color-white);--color-focus:var(--color-white)}.Button-module_theme-black__m8giY.Button-module_secondary__1nABp{--border-color:var(--color-bus);--border-color-disabled:var(--color-disabled);--border-color:var(--color-black);--border-color-hover:var(--color-black);--border-color-focus:var(--color-black)}.Button-module_theme-black__m8giY.Button-module_secondary__1nABp,.Button-module_theme-black__m8giY.Button-module_supplementary__3YKiS{--background-color-hover:var(--color-bus-light);--background-color-disabled:transparent;--color:var(--color-bus);--color-disabled:var(--color-black-40);--outline-color-focus:var(--color-coat-of-arms);--background-color:transparent;--background-color-hover:var(--color-black-5);--background-color-focus:transparent;--color:var(--color-black);--color-hover:var(--color-black);--color-focus:var(--color-black)}.Button-module_theme-black__m8giY.Button-module_supplementary__3YKiS{--border-color-disabled:transparent;--border-color:transparent;--border-color-hover:transparent}.Button-module_clear__2i_5U{--background-color:transparent;--background-color-disabled:transparent;--border-color:transparent;--border-color-disabled:transparent;--color:var(--color-black-90);--color-disabled:var(--color-black-90)}.Button-module_success__CU9nK{--background-color:var(--color-success);--background-color-hover:var(--color-success-dark);--background-color-focus:var(--color-success);--border-color:var(--color-success);--border-color-hover:var(--color-success-dark);--border-color-focus:var(--color-success)}.Button-module_danger__2el15,.Button-module_success__CU9nK{--color:var(--color-white);--outline-color-focus:var(--color-coat-of-arms)}.Button-module_danger__2el15{--background-color:var(--color-error);--background-color-hover:var(--color-error-dark);--background-color-focus:var(--color-error);--border-color:var(--color-error);--border-color-hover:var(--color-error-dark);--border-color-focus:var(--color-error)}.Button-module_size-small__3lizH{--min-size:44px;--padding-horizontal:var(--spacing-m);--padding-vertical:var(--spacing-2-xs)}.Button-module_fullWidth__31eVK{width:100%}.Button-module_icon__O-h7R{flex-shrink:0;height:var(--computed-icon-size);width:var(--computed-icon-size)}.Button-module_icon__O-h7R:first-child:not(:last-child){margin-left:var(--icon-reposition)}.Button-module_icon__O-h7R:last-child:not(:first-child){margin-right:var(--icon-reposition)}"), function(o18) {
    o18.Small = "small", o18.Medium = "medium";
  }(l2 || (l2 = {})), function(o18) {
    o18.Bus = "bus", o18.Coat = "coat", o18.Black = "black";
  }(t3 || (t3 = {})), function(o18) {
    o18.Primary = "primary", o18.Secondary = "secondary", o18.Supplementary = "supplementary", o18.Success = "success", o18.Danger = "danger", o18.Clear = "clear";
  }(n3 || (n3 = {}));
  var u = import_react15.default.forwardRef((c6, u10) => {
    var { children: s21, className: i12, disabled: b6 = false, fullWidth: m6, size: v4 = l2.Medium, theme: _7 = t3.Bus, variant: p5 = n3.Primary, iconStart: g4, iconEnd: h5, onClick: k } = c6, f2 = o(c6, ["children", "className", "disabled", "fullWidth", "size", "theme", "variant", "iconStart", "iconEnd", "onClick"]);
    const B2 = d(d2.button, _7), y2 = g4 ? import_react15.default.createElement("div", { className: d2.icon, "aria-hidden": "true" }, g4) : null, w = h5 ? import_react15.default.createElement("div", { className: r(d2.icon), "aria-hidden": "true" }, h5) : null;
    return import_react15.default.createElement("button", Object.assign({ ref: u10, disabled: b6, type: "button", className: r(d2.button, d2[p5], "string" == typeof _7 ? d2[`theme-${_7}`] : "", d2[`size-${v4}`], m6 ? d2.fullWidth : "", B2, i12), onClick: b6 ? void 0 : k }, f2), y2, import_react15.default.createElement("span", null, s21), w);
  });

  // node_modules/hds-react/Checkbox-bf00bf69.js
  var import_react17 = __toESM(require_react());

  // node_modules/hds-react/mergeRefWithInternalRef-4c61fd7f.js
  var import_lodash2 = __toESM(require_lodash());
  var t4 = /* @__PURE__ */ __name((t21, e18) => {
    (0, import_lodash2.isFunction)(t21) ? t21(e18.current) : t21.current = e18.current;
  }, "t");

  // node_modules/hds-react/composeAriaDescribedBy-8c23da0a.js
  var r5 = /* @__PURE__ */ __name((r30, e18, n21, l19, o18) => {
    const s21 = [e18 && `${r30}-helper`, n21 && `${r30}-error`, l19 && `${r30}-success`, o18 && `${r30}-info`].filter((r31) => r31);
    return s21.length ? s21.join(" ") : null;
  }, "r");

  // node_modules/hds-react/Tooltip-d8893826.js
  var import_react16 = __toESM(require_react());

  // node_modules/react-popper/lib/esm/utils.js
  var React4 = __toESM(require_react());
  var fromEntries = /* @__PURE__ */ __name(function fromEntries2(entries) {
    return entries.reduce(function(acc, _ref) {
      var key = _ref[0], value = _ref[1];
      acc[key] = value;
      return acc;
    }, {});
  }, "fromEntries");
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && window.document && window.document.createElement ? React4.useLayoutEffect : React4.useEffect;

  // node_modules/react-popper/lib/esm/usePopper.js
  var React5 = __toESM(require_react());

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }
  __name(getNodeName, "getNodeName");

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }
  __name(getWindow, "getWindow");

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement2(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  __name(isElement2, "isElement");
  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  __name(isHTMLElement, "isHTMLElement");
  function isShadowRoot(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }
  __name(isShadowRoot, "isShadowRoot");

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  __name(applyStyles, "applyStyles");
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  __name(effect, "effect");
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }
  __name(getBasePlacement, "getBasePlacement");

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth;
      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }
      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }
    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }
  __name(getBoundingClientRect, "getBoundingClientRect");

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }
  __name(getLayoutRect, "getLayoutRect");

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }
  __name(contains, "contains");

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }
  __name(getComputedStyle, "getComputedStyle");

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }
  __name(isTableElement, "isTableElement");

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement2(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }
  __name(getDocumentElement, "getDocumentElement");

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }
  __name(getParentNode, "getParentNode");

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  __name(getTrueOffsetParent, "getTrueOffsetParent");
  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  __name(getContainingBlock, "getContainingBlock");
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }
  __name(getOffsetParent, "getOffsetParent");

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }
  __name(getMainAxisFromPlacement, "getMainAxisFromPlacement");

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min3, value, max3) {
    return max(min3, min(value, max3));
  }
  __name(within, "within");
  function withinMaxClamp(min3, value, max3) {
    var v4 = within(min3, value, max3);
    return v4 > max3 ? max3 : v4;
  }
  __name(withinMaxClamp, "withinMaxClamp");

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  __name(getFreshSideObject, "getFreshSideObject");

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }
  __name(mergePaddingObject, "mergePaddingObject");

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }
  __name(expandToHashMap, "expandToHashMap");

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = /* @__PURE__ */ __name(function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  }, "toPaddingObject");
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets3 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets3) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets3[axis] - state.rects.popper[len];
    var startDiff = popperOffsets3[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min3 = paddingObject[minProp];
    var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset5 = within(min3, center, max3);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset5, _state$modifiersData$.centerOffset = offset5 - center, _state$modifiersData$);
  }
  __name(arrow, "arrow");
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  __name(effect2, "effect");
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }
  __name(getVariation, "getVariation");

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y2 = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y2 * dpr) / dpr || 0
    };
  }
  __name(roundOffsetsByDPR, "roundOffsetsByDPR");
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper3 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y: y2
    }) : {
      x,
      y: y2
    };
    x = _ref3.x;
    y2 = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper3);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper3)) {
        offsetParent = getDocumentElement(popper3);
        if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y2 -= offsetY - popperRect.height;
        y2 *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y: y2
    }) : {
      x,
      y: y2
    };
    x = _ref4.x;
    y2 = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y2 + "px)" : "translate3d(" + x + "px, " + y2 + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  __name(mapToStyles, "mapToStyles");
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  __name(computeStyles, "computeStyles");
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  __name(effect3, "effect");
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: /* @__PURE__ */ __name(function fn() {
    }, "fn"),
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash[matched];
    });
  }
  __name(getOppositePlacement, "getOppositePlacement");

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash2 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash2[matched];
    });
  }
  __name(getOppositeVariationPlacement, "getOppositeVariationPlacement");

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }
  __name(getWindowScroll, "getWindowScroll");

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }
  __name(getWindowScrollBarX, "getWindowScrollBarX");

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y: y2
    };
  }
  __name(getViewportRect, "getViewportRect");

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y2 = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y: y2
    };
  }
  __name(getDocumentRect, "getDocumentRect");

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }
  __name(isScrollParent, "isScrollParent");

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node) {
    if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }
    return getScrollParent(getParentNode(node));
  }
  __name(getScrollParent, "getScrollParent");

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list3) {
    var _element$ownerDocumen;
    if (list3 === void 0) {
      list3 = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list3.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }
  __name(listScrollParents, "listScrollParents");

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  __name(rectToClientRect, "rectToClientRect");

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  __name(getInnerBoundingClientRect, "getInnerBoundingClientRect");
  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement2(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  __name(getClientRectFromMixedType, "getClientRectFromMixedType");
  function getClippingParents(element) {
    var clippingParents3 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement2(clipperElement)) {
      return [];
    }
    return clippingParents3.filter(function(clippingParent) {
      return isElement2(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  __name(getClippingParents, "getClippingParents");
  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents3 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents3[0];
    var clippingRect = clippingParents3.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }
  __name(getClippingRect, "getClippingRect");

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference3 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference3.x + reference3.width / 2 - element.width / 2;
    var commonY = reference3.y + reference3.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference3.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference3.y + reference3.height
        };
        break;
      case right:
        offsets = {
          x: reference3.x + reference3.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference3.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference3.x,
          y: reference3.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference3[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference3[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }
  __name(computeOffsets, "computeOffsets");

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement2(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets3 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets3));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset5 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset5[axis] * multiply;
      });
    }
    return overflowOffsets;
  }
  __name(detectOverflow, "detectOverflow");

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements3.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements3;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a21, b6) {
      return overflows[a21] - overflows[b6];
    });
  }
  __name(computeAutoPlacement, "computeAutoPlacement");

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  __name(getExpandedFallbackPlacements, "getExpandedFallbackPlacements");
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements3[0];
    for (var i12 = 0; i12 < placements3.length; i12++) {
      var placement = placements3[i12];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = /* @__PURE__ */ __name(function _loop2(_i2) {
        var fittingPlacement = placements3.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      }, "_loop");
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  __name(flip, "flip");
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  __name(getSideOffsets, "getSideOffsets");
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  __name(isAnySideFullyClipped, "isAnySideFullyClipped");
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  __name(hide, "hide");
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset5) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset5 === "function" ? offset5(Object.assign({}, rects, {
      placement
    })) : offset5, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  __name(distanceAndSkiddingToXY, "distanceAndSkiddingToXY");
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset5 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset5);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y2 = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y2;
    }
    state.modifiersData[name] = data;
  }
  __name(offset, "offset");
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  __name(popperOffsets, "popperOffsets");
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  __name(getAltAxis, "getAltAxis");

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets3 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets3) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset5 = popperOffsets3[mainAxis];
      var min3 = offset5 + overflow[mainSide];
      var max3 = offset5 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset5 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset5 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min3, tetherMin) : min3, offset5, tether ? max(max3, tetherMax) : max3);
      popperOffsets3[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset5;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets3[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets3[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  __name(preventOverflow, "preventOverflow");
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  __name(getHTMLElementScroll, "getHTMLElementScroll");

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }
  __name(getNodeScroll, "getNodeScroll");

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  __name(isElementScaled, "isElementScaled");
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  __name(getCompositeRect, "getCompositeRect");

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    __name(sort, "sort");
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  __name(order, "order");
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }
  __name(orderModifiers, "orderModifiers");

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn3) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn3());
          });
        });
      }
      return pending;
    };
  }
  __name(debounce, "debounce");

  // node_modules/@popperjs/core/lib/utils/format.js
  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p5, c6) {
      return p5.replace(/%s/, c6);
    }, str);
  }
  __name(format, "format");

  // node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s21) {
              return '"' + s21 + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }
  __name(validateModifiers, "validateModifiers");

  // node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy(arr, fn3) {
    var identifiers = /* @__PURE__ */ new Set();
    return arr.filter(function(item) {
      var identifier = fn3(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }
  __name(uniqueBy, "uniqueBy");

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }
  __name(mergeByName, "mergeByName");

  // node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  __name(areValidElements, "areValidElements");
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return /* @__PURE__ */ __name(function createPopper3(reference3, popper3, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference3,
          popper: popper3
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: /* @__PURE__ */ __name(function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement2(reference3) ? listScrollParents(reference3) : reference3.contextElement ? listScrollParents(reference3.contextElement) : [],
            popper: listScrollParents(popper3)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m6) {
            return m6.enabled;
          });
          if (true) {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);
            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle(popper3), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        }, "setOptions"),
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: /* @__PURE__ */ __name(function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference4 = _state$elements.reference, popper4 = _state$elements.popper;
          if (!areValidElements(reference4, popper4)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference4, getOffsetParent(popper4), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper4)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn3 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn3 === "function") {
              state = fn3({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        }, "forceUpdate"),
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: /* @__PURE__ */ __name(function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }, "destroy")
      };
      if (!areValidElements(reference3, popper3)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR);
        }
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect7 = _ref3.effect;
          if (typeof effect7 === "function") {
            var cleanupFn = effect7({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = /* @__PURE__ */ __name(function noopFn2() {
            }, "noopFn");
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      __name(runModifierEffects, "runModifierEffects");
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn3) {
          return fn3();
        });
        effectCleanupFns = [];
      }
      __name(cleanupModifierEffects, "cleanupModifierEffects");
      return instance;
    }, "createPopper");
  }
  __name(popperGenerator, "popperGenerator");

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/react-popper/lib/esm/usePopper.js
  var import_react_fast_compare = __toESM(require_react_fast_compare());
  var EMPTY_MODIFIERS = [];
  var usePopper = /* @__PURE__ */ __name(function usePopper2(referenceElement, popperElement, options) {
    if (options === void 0) {
      options = {};
    }
    var prevOptions = React5.useRef(null);
    var optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || "bottom",
      strategy: options.strategy || "absolute",
      modifiers: options.modifiers || EMPTY_MODIFIERS
    };
    var _React$useState = React5.useState({
      styles: {
        popper: {
          position: optionsWithDefaults.strategy,
          left: "0",
          top: "0"
        },
        arrow: {
          position: "absolute"
        }
      },
      attributes: {}
    }), state = _React$useState[0], setState = _React$useState[1];
    var updateStateModifier = React5.useMemo(function() {
      return {
        name: "updateState",
        enabled: true,
        phase: "write",
        fn: /* @__PURE__ */ __name(function fn3(_ref) {
          var state2 = _ref.state;
          var elements = Object.keys(state2.elements);
          setState({
            styles: fromEntries(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        }, "fn"),
        requires: ["computeStyles"]
      };
    }, []);
    var popperOptions = React5.useMemo(function() {
      var newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
          name: "applyStyles",
          enabled: false
        }])
      };
      if ((0, import_react_fast_compare.default)(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      } else {
        prevOptions.current = newOptions;
        return newOptions;
      }
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React5.useRef();
    useIsomorphicLayoutEffect2(function() {
      if (popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect2(function() {
      if (referenceElement == null || popperElement == null) {
        return;
      }
      var createPopper3 = options.createPopper || createPopper;
      var popperInstance = createPopper3(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return function() {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  }, "usePopper");

  // node_modules/hds-react/Tooltip-d8893826.js
  var n4 = "Tooltip-module_button__2x9m0";
  var d3 = "Tooltip-module_root__1Yo9t";
  var c = "Tooltip-module_tooltip__3x8S8";
  var m = "Tooltip-module_boxShadow__3IzE-";
  var u2 = "Tooltip-module_small__29mxd";
  var _ = "Tooltip-module_arrow__210Rd";
  e2(".Tooltip-module_button__2x9m0{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.Tooltip-module_root__1Yo9t{--button-focus-outline-width:3px;--button-focus-outline-color:var(--color-coat-of-arms);--tooltip-arrow-size:8px;--tooltip-background:var(--color-coat-of-arms-light);--tooltip-border-color:var(--color-coat-of-arms);--tooltip-spacing-default:var(--spacing-s);--tooltip-spacing-small:var(--spacing-3-xs) var(--spacing-2-xs)}.Tooltip-module_tooltip__3x8S8{background-color:var(--tooltip-background);font-size:var(--fontsize-body-s);font-weight:400;line-height:24px;max-width:21.875rem;padding:var(--tooltip-spacing-default);z-index:1000}.Tooltip-module_boxShadow__3IzE-{box-shadow:var(--box-shadow-s)}.Tooltip-module_small__29mxd{padding:var(--tooltip-spacing-small)}.Tooltip-module_button__2x9m0>span{display:flex}.Tooltip-module_button__2x9m0:focus{box-shadow:0 0 0 var(--button-focus-outline-width) var(--button-focus-outline-color);outline:none}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=bottom]{border-top:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=top]{border-bottom:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=left]{border-right:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=right]{border-left:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8 .Tooltip-module_arrow__210Rd{position:absolute}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=bottom] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-bottom:var(--tooltip-arrow-size) solid var(--tooltip-border-color);top:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=top] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-top:var(--tooltip-arrow-size) solid var(--tooltip-border-color);bottom:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=left] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-left:var(--tooltip-arrow-size) solid var(--tooltip-border-color);right:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=right] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-right:var(--tooltip-arrow-size) solid var(--tooltip-border-color);left:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}");
  var b = /* @__PURE__ */ __name((i12) => {
    var { boxShadow: b6 = false, children: v4, placement: f2 = "auto", small: x = false, buttonLabel: w = "Tooltip", tooltipLabel: g4 = "Tooltip", className: T, buttonClassName: h5, tooltipClassName: z3 } = i12, S2 = o(i12, ["boxShadow", "children", "placement", "small", "buttonLabel", "tooltipLabel", "className", "buttonClassName", "tooltipClassName"]);
    const [E2, k] = (0, import_react16.useState)(false), y2 = (0, import_react16.useRef)(null), N3 = (0, import_react16.useRef)(null), [j2, L2] = (0, import_react16.useState)(null), { styles: C2, attributes: R3, forceUpdate: I2 } = usePopper(y2.current, N3.current, { placement: f2, modifiers: [{ name: "arrow", options: { element: j2 } }, { name: "offset", options: { offset: [0, 10] } }] });
    (0, import_react16.useEffect)(() => {
      null !== I2 && true === E2 && I2();
    }, [E2, I2]);
    return (0, import_react16.useEffect)(() => {
      const o18 = /* @__PURE__ */ __name((o19) => {
        const t22 = o19.key || o19.keyCode;
        !E2 || "Escape" !== t22 && "Esc" !== t22 && 27 !== t22 || k(false);
      }, "o"), t21 = /* @__PURE__ */ __name((o19) => {
        const t22 = o19.target;
        !E2 || y2.current.contains(t22) || N3.current.contains(t22) || k(false);
      }, "t");
      return document.addEventListener("keyup", o18), document.addEventListener("click", t21), () => {
        document.removeEventListener("keyup", o18), document.removeEventListener("click", t21);
      };
    }), import_react16.default.createElement("div", Object.assign({}, S2, { className: r(d3, T) }), import_react16.default.createElement("button", { ref: y2, type: "button", className: r(n4, h5), title: w, "aria-label": w, "aria-expanded": E2, onClick: /* @__PURE__ */ __name(() => {
      k(!E2);
    }, "onClick"), onBlur: /* @__PURE__ */ __name(() => k(false), "onBlur") }, import_react16.default.createElement("span", { "aria-hidden": "true" }, import_react16.default.createElement(s5, null))), E2 && import_react16.default.createElement("section", Object.assign({ "aria-label": g4, ref: N3, className: r(c, x && u2, b6 && m, z3), style: C2.popper }, R3.popper), v4, import_react16.default.createElement("div", Object.assign({ ref: L2, className: _, style: C2.arrow }, R3.arrow))));
  }, "b");

  // node_modules/hds-react/Checkbox-bf00bf69.js
  var d4 = "Checkbox-module_checkbox__3r5uI";
  var s6 = "Checkbox-module_input__2bdJk";
  var b2 = "Checkbox-module_label__148Ac";
  var h = "Checkbox-module_noLabel__1HSAV";
  var _2 = "Checkbox-module_errorText__1tRw6";
  var u3 = "Checkbox-module_helperText__261fG helpers_helper-text__YRZTD";
  var p = "Checkbox-module_tooltipButton__ErN1J";
  e2(`.helpers_visually-hidden__3lBcX{border:0;clip:"rect(0 0 0 0)";height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.helpers_button-reset__2d38b{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.helpers_text-body__FA9G-{color:var(--color-black-90);font-family:var(--font-default);font-size:var(--fontsize-body-m);line-height:var(--lineheight-l)}.helpers_text-medium__3Hiiz{font-family:var(--font-default);font-weight:500}.helpers_text-bold__2QyP8{font-family:var(--font-default);font-weight:700}.helpers_text-xl__33T1r{font-size:var(--fontsize-heading-m)}.helpers_text-lg__1_8nq{font-size:var(--fontsize-heading-s)}.helpers_text-md__RyeCd{font-size:var(--fontsize-heading-xs)}.helpers_subtitle__RE8f_{font-size:var(--fontsize-body-m)}.helpers_text-sm__AxqmS{font-size:var(--fontsize-body-s);line-height:var(--lineheight-xl)}.helpers_heading-xxl__1GAqs{font-size:var(--fontsize-heading-xxl);font-weight:400;letter-spacing:-1.2px;line-height:var(--lineheight-s)}.helpers_heading-xl__u_X50{font-size:var(--fontsize-heading-xl);font-weight:400;letter-spacing:-1px;line-height:var(--lineheight-s)}.helpers_heading-xl-mobile__gKona{font-size:var(--fontsize-heading-xl-mobile);font-weight:400;letter-spacing:-.8px;line-height:var(--lineheight-s)}.helpers_heading-l__3EMpz{font-size:var(--fontsize-heading-l);font-weight:400;letter-spacing:-.4px;line-height:var(--lineheight-m)}.helpers_heading-m__1Lsy-{font-size:var(--fontsize-heading-m);font-weight:500;letter-spacing:-.2px;line-height:var(--lineheight-m)}.helpers_heading-s__1EK5w{font-size:var(--fontsize-heading-s);font-weight:500;letter-spacing:0;line-height:var(--lineheight-l)}.helpers_heading-xs__iZYJi{font-size:var(--fontsize-heading-xs);font-weight:700;letter-spacing:0;line-height:var(--lineheight-l)}.helpers_heading-xxs__jqtFk{font-size:var(--fontsize-heading-xxs);font-weight:700;letter-spacing:.2px;line-height:var(--lineheight-l)}.helpers_helper-text__YRZTD{color:var(--color-black-60);display:block;flex-basis:100%;font-size:var(--fontsize-body-m);margin-top:var(--spacing-2-xs)}.Checkbox-module_checkbox__3r5uI{--size:24px;--icon-scale:1;--border-width:2px;--outline-width:3px;--label-font-size:var(--fontsize-body-m);--label-padding:var(--spacing-2-xs);--background-unselected:transparent;--background-selected:var(--color-bus);--background-hover:var(--color-bus-dark);--background-disabled:var(--color-black-10);--border-color-selected:var(--color-bus);--border-color-selected-hover:var(--color-bus-dark);--border-color-selected-focus:var(--color-bus);--border-color-unselected:var(--color-black-50);--border-color-unselected-hover:var(--color-black-90);--border-color-unselected-focus:var(--color-black-90);--border-color-disabled:var(--color-black-10);--icon-color-unselected:transparent;--icon-color-selected:var(--color-white);--icon-color-disabled:var(--color-white);--label-color:var(--color-black-90);--label-color-disabled:var(--color-black-40);--icon-size:var(--spacing-m);display:flex;flex-wrap:wrap;min-height:var(--size);position:relative}.Checkbox-module_checkbox__3r5uI,.Checkbox-module_checkbox__3r5uI *,.Checkbox-module_checkbox__3r5uI :after,.Checkbox-module_checkbox__3r5uI :before{box-sizing:border-box}.Checkbox-module_checkbox__3r5uI:not(:first-of-type){margin-top:var(--spacing-2-xs)}.Checkbox-module_input__2bdJk{-moz-appearance:none;-webkit-appearance:none;appearance:none;cursor:pointer;font-family:inherit;font-size:100%;line-height:1.15;margin:0;outline:none}.Checkbox-module_input__2bdJk,.Checkbox-module_input__2bdJk:before{height:var(--size);left:0;position:absolute;top:0;width:var(--size)}.Checkbox-module_input__2bdJk:before{background-color:var(--icon-color-unselected);content:"";mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M21 7L10 18l-5.5-5.5L6 11l4 4 9.5-9.5z'/%3E%3C/g%3E%3C/svg%3E");mask-position:center;mask-repeat:no-repeat;mask-size:calc(var(--size) * var(--icon-scale));transform:scale(.6);z-index:1}.Checkbox-module_input__2bdJk:disabled+label{color:var(--label-color-disabled)}.Checkbox-module_input__2bdJk:checked:disabled:before{background-color:var(--icon-color-disabled)}.Checkbox-module_input__2bdJk:disabled,.Checkbox-module_input__2bdJk:disabled+label{cursor:not-allowed}.Checkbox-module_input__2bdJk:focus+label:after,.Checkbox-module_input__2bdJk:focus:before,.Checkbox-module_input__2bdJk:hover+label:after,.Checkbox-module_input__2bdJk:hover:before{transition:85ms ease-out;transition-property:background-color,border-color,transform}.Checkbox-module_input__2bdJk:focus+label:before{box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.Checkbox-module_input__2bdJk:checked:before{background-color:var(--icon-color-selected);transform:scale(1)}.Checkbox-module_input__2bdJk:not(:checked):indeterminate:before{background-color:var(--icon-color-selected);mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M6 11h12v2H6z'/%3E%3C/g%3E%3C/svg%3E");transform:scale(1)}.Checkbox-module_input__2bdJk:checked+label:after,.Checkbox-module_input__2bdJk:indeterminate+label:after{background-color:var(--background-selected);border-color:var(--border-color-selected)}.Checkbox-module_input__2bdJk:disabled+label:after{background-color:var(--background-disabled);border-color:var(--border-color-disabled)}.Checkbox-module_input__2bdJk:not(:disabled):focus+label:after{border-color:var(--border-color-unselected-focus)}.Checkbox-module_input__2bdJk:not(:disabled):hover+label:after,.Checkbox-module_input__2bdJk:not(:disabled):hover:focus+label:after{border-color:var(--border-color-unselected-hover)}.Checkbox-module_input__2bdJk:not(:disabled):checked:focus+label:after,.Checkbox-module_input__2bdJk:not(:disabled):indeterminate:focus+label:after{border-color:var(--border-color-selected-focus)}.Checkbox-module_input__2bdJk:not(:disabled):checked:hover+label:after,.Checkbox-module_input__2bdJk:not(:disabled):checked:hover:focus+label:after,.Checkbox-module_input__2bdJk:not(:disabled):indeterminate:hover+label:after,.Checkbox-module_input__2bdJk:not(:disabled):indeterminate:hover:focus+label:after{background-color:var(--background-hover);border-color:var(--border-color-selected-hover)}.Checkbox-module_label__148Ac{color:var(--label-color);cursor:pointer;font-size:var(--label-font-size);line-height:var(--lineheight-m);padding-left:calc(var(--size) + var(--label-padding));padding-top:calc((var(--size) - var(--label-font-size) * var(--lineheight-m)) / 2);position:relative}.Checkbox-module_label__148Ac:after,.Checkbox-module_label__148Ac:before{content:"";left:0;position:absolute;top:0;height:var(--size);width:var(--size)}.Checkbox-module_label__148Ac:after{background-color:var(--background-unselected);border:var(--border-width) solid var(--border-color-unselected)}.Checkbox-module_noLabel__1HSAV{padding-left:var(--size)}.Checkbox-module_errorText__1tRw6{background-color:var(--color-error-light);border-left:8px solid var(--color-error);color:var(--color-black);display:flex;flex-basis:100%;font-size:var(--fontsize-body-m);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.Checkbox-module_errorText__1tRw6:before{background:var(--color-error);content:"";display:inline-block;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.Checkbox-module_tooltipButton__ErN1J{display:inline-block;margin-left:var(--spacing-2-xs)}`);
  var v = import_react17.default.forwardRef((t21, v4) => {
    var { checked: f2 = false, className: m6, disabled: g4 = false, errorText: k, helperText: x, id: C2, indeterminate: z3, label: w, onChange: y2 = /* @__PURE__ */ __name(() => null, "y"), style: E2, value: J3, tooltipText: T, tooltipLabel: N3, tooltipButtonLabel: j2, tooltip: A2 } = t21, L2 = o(t21, ["checked", "className", "disabled", "errorText", "helperText", "id", "indeterminate", "label", "onChange", "style", "value", "tooltipText", "tooltipLabel", "tooltipButtonLabel", "tooltip"]);
    const R3 = (0, import_react17.useRef)(null);
    (0, import_react17.useEffect)(() => {
      v4 && t4(v4, R3), R3.current.indeterminate = z3;
    }, [R3, v4, z3]), w && "string" != typeof w && "number" != typeof w && console.warn("Using ReactElement as a label is against good usability and accessibility practices. Please prefer plain strings.");
    const B2 = r5(C2, x, k, void 0, void 0);
    return import_react17.default.createElement("div", { className: r(d4, m6), style: E2 }, import_react17.default.createElement("input", Object.assign({ ref: R3, id: C2, className: r(s6), onChange: y2, value: J3, type: "checkbox", disabled: g4, checked: f2, "aria-describedby": B2 }, L2)), import_react17.default.createElement("label", { htmlFor: C2, className: r(b2, w ? "" : h) }, w), A2 ? import_react17.default.createElement(b, Object.assign({}, A2.props, { buttonClassName: p })) : null, T && import_react17.default.createElement(b, { className: p, buttonLabel: j2, tooltipLabel: N3 }, T), k && import_react17.default.createElement("div", { className: _2, id: `${C2}-error` }, k), x && import_react17.default.createElement("div", { className: u3, id: `${C2}-helper` }, x));
  });

  // node_modules/hds-react/useForceRender-2396bea4.js
  var import_react18 = __toESM(require_react());
  function o6() {
    const [, o18] = (0, import_react18.useState)(0);
    return (0, import_react18.useCallback)(() => {
      o18((r30) => r30 + 1);
    }, [o18]);
  }
  __name(o6, "o");

  // node_modules/hds-react/TextInput-5c74ea95.js
  var import_react22 = __toESM(require_react());

  // node_modules/hds-react/InputWrapper-3554a385.js
  var import_react21 = __toESM(require_react());

  // node_modules/hds-react/FieldLabel-9fe7097e.js
  var import_react20 = __toESM(require_react());

  // node_modules/hds-react/RequiredIndicator-e4ba65c1.js
  var import_react19 = __toESM(require_react());
  var i2 = "RequiredIndicator-module_indicator__Pt7GX text-input_hds-text-input__required__2K-Bs";
  e2(`@keyframes text-input_fadeIn__2iVIH{0%{opacity:0}to{opacity:1}}.text-input_hds-text-input__2YbWJ{--border-width:2px;--outline-width:3px;--outline-offset-readonly:4px;--input-height:56px;--textarea-height:149px;--icon-size:var(--spacing-m);--icon-color:var(--color-black);--helper-color-default:var(--color-black-60);--helper-color-invalid:var(--color-black);--helper-background-color-invalid:var(--color-error-light);--helper-icon-color-invalid:var(--color-error);--helper-color-success:var(--color-black);--helper-background-color-success:var(--color-success-light);--helper-icon-color-success:var(--color-success);--helper-color-info:var(--color-black);--helper-background-color-info:var(--color-info-light);--helper-icon-color-info:var(--color-info);--input-background-default:var(--color-white);--input-background-disabled:var(--color-black-10);--input-border-color-default:var(--color-black-50);--input-border-color-hover:var(--color-black-90);--input-border-color-focus:var(--color-black-90);--input-border-color-invalid:var(--color-error);--input-border-color-disabled:var(--color-black-10);--input-border-color-success:var(--color-success);--input-color-default:var(--color-black-90);--input-color-disabled:var(--color-black-40);--label-color-default:var(--color-black-90);--label-color-invalid:var(--color-black-90);--placeholder-color:var(--color-black-60)}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu{-webkit-appearance:none;background-color:var(--input-background-default);border:var(--border-width) solid var(--input-border-color-default);border-radius:0;box-sizing:border-box;color:var(--input-color-default);font-family:inherit;font-size:1.125em;height:var(--input-height);line-height:normal;margin:0;padding:0 var(--spacing-s);width:100%;will-change:transform,box-shadow}.text-input_hds-text-input__2YbWJ:not([data-hds-textinput-filled]) .text-input_hds-text-input__button-clear__wx6Bm,.text-input_hds-text-input__input-clear__1vpab::-webkit-search-cancel-button{display:none}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__button-clear__wx6Bm>*{pointer-events:none}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu:hover{border-color:var(--input-border-color-hover);transition:border-color 85ms ease-out}.text-input_hds-text-input__input-wrapper__3qg76:focus-within .text-input_hds-text-input__input__BIkQu{border-color:var(--input-border-color-focus);outline:none}.text-input_hds-text-input__2YbWJ.text-input_hds-text-input--invalid__25oHc .text-input_hds-text-input__input__BIkQu{border-color:var(--input-border-color-invalid)}.text-input_hds-text-input__2YbWJ.text-input_hds-text-input--success__28-SV .text-input_hds-text-input__input__BIkQu{border-color:var(--input-border-color-success)}.text-input_hds-text-input__input-wrapper__3qg76:focus-within .text-input_hds-text-input__input__BIkQu:not([readonly]){box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.text-input_hds-text-input__label__15SYz{color:var(--label-color-default);display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.text-input_hds-text-input--invalid__25oHc .text-input_hds-text-input__label__15SYz{color:var(--label-color-invalid);transition:color 85ms linear}.text-input_hds-text-input__required__2K-Bs{display:inline-block;font-size:var(--fontsize-body-xl);line-height:1;margin-left:var(--spacing-2-xs);transform:translateY(var(--spacing-3-xs))}.text-input_hds-text-input__input-wrapper__3qg76{display:flex;position:relative}.text-input_hds-text-input__2YbWJ textarea.text-input_hds-text-input__input__BIkQu{font-family:inherit;height:var(--textarea-height);margin:0;min-height:var(--input-height);overflow:auto;padding:var(--spacing-s);resize:vertical}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu::-ms-reveal{display:none}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu::-moz-placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu::placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__helper-text__gNPue{color:var(--helper-color-default);display:block;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-3-xs);white-space:pre-line}.text-input_hds-text-input__error-text__2Qjmg{background-color:var(--helper-background-color-invalid);border-left:8px solid var(--color-error);color:var(--helper-color-invalid);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);white-space:pre-line}.text-input_hds-text-input__error-text__2Qjmg:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__error-text__2Qjmg:before{animation:text-input_fadeIn__2iVIH 85ms ease-out;background:var(--helper-icon-color-invalid);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__success-text__274NH{background-color:var(--helper-background-color-success);border-left:8px solid var(--color-success);color:var(--helper-color-success);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative;white-space:pre-wrap}.text-input_hds-text-input__success-text__274NH:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__success-text__274NH:before{animation:text-input_fadeIn__2iVIH 85ms ease-out;background:var(--helper-icon-color-success);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__info-text__1hF9o{background-color:var(--helper-background-color-info);border-left:8px solid var(--color-info);color:var(--helper-color-info);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.text-input_hds-text-input__info-text__1hF9o:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__info-text__1hF9o:before{animation:text-input_fadeIn__2iVIH 85ms ease-out;background:var(--helper-icon-color-info);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu[disabled]{background-color:var(--input-background-disabled);border-color:var(--input-border-color-disabled);color:var(--input-color-disabled);cursor:not-allowed}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu[readonly]{background-color:transparent;border:0;color:var(--input-color-default);outline-offset:var(--outline-offset-readonly);padding:0;-webkit-text-fill-color:var(--input-color-default);transform:translateZ(0);transition:85ms ease-out;transition-property:outline,transform}.text-input_hds-text-input__input-wrapper__3qg76:focus-within input.text-input_hds-text-input__input__BIkQu[readonly]{height:calc(var(--input-height) - 2 * var(--outline-offset-readonly));margin:var(--outline-offset-readonly) 0;outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__input-wrapper__3qg76:focus-within textarea.text-input_hds-text-input__input__BIkQu[readonly]{outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__buttons__1eV1P{align-items:center;bottom:0;display:flex;font-size:1rem;justify-content:center;margin-right:calc(var(--spacing-s) - var(--spacing-xs) / 2);position:absolute;right:0;top:0}.text-input_hds-text-input__button__1JeYJ{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;color:var(--icon-color);cursor:pointer;display:flex;font:inherit;outline:none;padding:var(--spacing-xs) calc(var(--spacing-xs) / 2)}.text-input_hds-text-input__button__1JeYJ:focus{outline:var(--outline-width) solid var(--color-focus-outline)}`);
  var r9 = /* @__PURE__ */ __name(({ className: e18, style: r30 }) => import_react19.default.createElement("span", { className: r(i2, e18), style: r30 }, "*"), "r");

  // node_modules/hds-react/FieldLabel-9fe7097e.js
  var i3 = "FieldLabel-module_hidden__3UWxI";
  var r10 = "FieldLabel-module_label__1zrXK";
  var d5 = "FieldLabel-module_tooltipButton__1My3f";
  e2(".FieldLabel-module_hidden__3UWxI{border:0;clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.FieldLabel-module_label__1zrXK{color:var(--label-color-default,var(--color-black-90));display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.FieldLabel-module_tooltipButton__1My3f{position:absolute;right:0;top:0}");
  var n5 = /* @__PURE__ */ __name((l19) => {
    var { hidden: n21, id: s21, inputId: p5, isAriaLabelledBy: b6, label: m6, required: c6, tooltipLabel: u10, tooltipButtonLabel: _7, tooltipText: f2, tooltip: L2 } = l19, h5 = o(l19, ["hidden", "id", "inputId", "isAriaLabelledBy", "label", "required", "tooltipLabel", "tooltipButtonLabel", "tooltipText", "tooltip"]);
    return import_react20.default.createElement(import_react20.default.Fragment, null, import_react20.default.createElement("label", Object.assign({ id: s21 }, (!b6 || !s21) && { htmlFor: p5 }, { className: `${r10} ${n21 ? i3 : ""}` }, h5), m6, c6 && import_react20.default.createElement(r9, null)), L2 && import_react20.default.createElement(b, Object.assign({}, L2.props, { buttonClassName: d5 })), f2 && import_react20.default.createElement(b, { buttonClassName: d5, tooltipLabel: u10, buttonLabel: _7 }, f2));
  }, "n");

  // node_modules/hds-react/InputWrapper-3554a385.js
  var r11 = { root: "TextInput-module_root__2CMNr text-input_hds-text-input__2LODq", invalid: "TextInput-module_invalid__2iYo2 text-input_hds-text-input--invalid__1UfKC", inputWrapper: "TextInput-module_inputWrapper__3Rvel text-input_hds-text-input__input-wrapper__1OqYG", input: "TextInput-module_input__1BlHi text-input_hds-text-input__input__GJm5C", hasButton: "TextInput-module_hasButton__2KCM1", hasClearButton: "TextInput-module_hasClearButton__3-tBe text-input_hds-text-input__input-clear__17qr1", clearButton: "TextInput-module_clearButton__bfCLI text-input_hds-text-input__button-clear__2ED7z", errorText: "TextInput-module_errorText__3pizm text-input_hds-text-input__error-text__1GLYk", helperText: "TextInput-module_helperText__2dLR6 text-input_hds-text-input__helper-text__3V2KM", invalidText: "TextInput-module_invalidText__1w4sm text-input_hds-text-input__helper-text__3V2KM", successText: "TextInput-module_successText__2NMCP text-input_hds-text-input__success-text__3EOiy", infoText: "TextInput-module_infoText__zHOGs text-input_hds-text-input__info-text__3bqzy", success: "TextInput-module_success__1kDOm text-input_hds-text-input--success__3dm2J", readOnly: "TextInput-module_readOnly__j615N undefined", buttonWrapper: "TextInput-module_buttonWrapper___filA text-input_hds-text-input__buttons__1RMzT", button: "TextInput-module_button__1ySMX text-input_hds-text-input__button__1Fh0I" };
  e2(`@keyframes text-input_fadeIn__2IDZ8{0%{opacity:0}to{opacity:1}}.text-input_hds-text-input__2LODq{--border-width:2px;--outline-width:3px;--outline-offset-readonly:4px;--input-height:56px;--textarea-height:149px;--icon-size:var(--spacing-m);--icon-color:var(--color-black);--helper-color-default:var(--color-black-60);--helper-color-invalid:var(--color-black);--helper-background-color-invalid:var(--color-error-light);--helper-icon-color-invalid:var(--color-error);--helper-color-success:var(--color-black);--helper-background-color-success:var(--color-success-light);--helper-icon-color-success:var(--color-success);--helper-color-info:var(--color-black);--helper-background-color-info:var(--color-info-light);--helper-icon-color-info:var(--color-info);--input-background-default:var(--color-white);--input-background-disabled:var(--color-black-10);--input-border-color-default:var(--color-black-50);--input-border-color-hover:var(--color-black-90);--input-border-color-focus:var(--color-black-90);--input-border-color-invalid:var(--color-error);--input-border-color-disabled:var(--color-black-10);--input-border-color-success:var(--color-success);--input-color-default:var(--color-black-90);--input-color-disabled:var(--color-black-40);--label-color-default:var(--color-black-90);--label-color-invalid:var(--color-black-90);--placeholder-color:var(--color-black-60)}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C{-webkit-appearance:none;background-color:var(--input-background-default);border:var(--border-width) solid var(--input-border-color-default);border-radius:0;box-sizing:border-box;color:var(--input-color-default);font-family:inherit;font-size:1.125em;height:var(--input-height);line-height:normal;margin:0;padding:0 var(--spacing-s);width:100%;will-change:transform,box-shadow}.text-input_hds-text-input__2LODq:not([data-hds-textinput-filled]) .text-input_hds-text-input__button-clear__2ED7z,.text-input_hds-text-input__input-clear__17qr1::-webkit-search-cancel-button{display:none}.text-input_hds-text-input__2LODq .text-input_hds-text-input__button-clear__2ED7z>*{pointer-events:none}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C:hover{border-color:var(--input-border-color-hover);transition:border-color 85ms ease-out}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within .text-input_hds-text-input__input__GJm5C{border-color:var(--input-border-color-focus);outline:none}.text-input_hds-text-input__2LODq.text-input_hds-text-input--invalid__1UfKC .text-input_hds-text-input__input__GJm5C{border-color:var(--input-border-color-invalid)}.text-input_hds-text-input__2LODq.text-input_hds-text-input--success__3dm2J .text-input_hds-text-input__input__GJm5C{border-color:var(--input-border-color-success)}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within .text-input_hds-text-input__input__GJm5C:not([readonly]){box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.text-input_hds-text-input__label__15F2V{color:var(--label-color-default);display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.text-input_hds-text-input--invalid__1UfKC .text-input_hds-text-input__label__15F2V{color:var(--label-color-invalid);transition:color 85ms linear}.text-input_hds-text-input__required__z3Hm0{display:inline-block;font-size:var(--fontsize-body-xl);line-height:1;margin-left:var(--spacing-2-xs);transform:translateY(var(--spacing-3-xs))}.text-input_hds-text-input__input-wrapper__1OqYG{display:flex;position:relative}.text-input_hds-text-input__2LODq textarea.text-input_hds-text-input__input__GJm5C{font-family:inherit;height:var(--textarea-height);margin:0;min-height:var(--input-height);overflow:auto;padding:var(--spacing-s);resize:vertical}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C::-ms-reveal{display:none}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C::-moz-placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C::placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__helper-text__3V2KM{color:var(--helper-color-default);display:block;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-3-xs);white-space:pre-line}.text-input_hds-text-input__error-text__1GLYk{background-color:var(--helper-background-color-invalid);border-left:8px solid var(--color-error);color:var(--helper-color-invalid);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);white-space:pre-line}.text-input_hds-text-input__error-text__1GLYk:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__error-text__1GLYk:before{animation:text-input_fadeIn__2IDZ8 85ms ease-out;background:var(--helper-icon-color-invalid);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__success-text__3EOiy{background-color:var(--helper-background-color-success);border-left:8px solid var(--color-success);color:var(--helper-color-success);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative;white-space:pre-wrap}.text-input_hds-text-input__success-text__3EOiy:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__success-text__3EOiy:before{animation:text-input_fadeIn__2IDZ8 85ms ease-out;background:var(--helper-icon-color-success);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__info-text__3bqzy{background-color:var(--helper-background-color-info);border-left:8px solid var(--color-info);color:var(--helper-color-info);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.text-input_hds-text-input__info-text__3bqzy:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__info-text__3bqzy:before{animation:text-input_fadeIn__2IDZ8 85ms ease-out;background:var(--helper-icon-color-info);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C[disabled]{background-color:var(--input-background-disabled);border-color:var(--input-border-color-disabled);color:var(--input-color-disabled);cursor:not-allowed}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C[readonly]{background-color:transparent;border:0;color:var(--input-color-default);outline-offset:var(--outline-offset-readonly);padding:0;-webkit-text-fill-color:var(--input-color-default);transform:translateZ(0);transition:85ms ease-out;transition-property:outline,transform}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within input.text-input_hds-text-input__input__GJm5C[readonly]{height:calc(var(--input-height) - 2 * var(--outline-offset-readonly));margin:var(--outline-offset-readonly) 0;outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within textarea.text-input_hds-text-input__input__GJm5C[readonly]{outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__buttons__1RMzT{align-items:center;bottom:0;display:flex;font-size:1rem;justify-content:center;margin-right:calc(var(--spacing-s) - var(--spacing-xs) / 2);position:absolute;right:0;top:0}.text-input_hds-text-input__button__1Fh0I{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;color:var(--icon-color);cursor:pointer;display:flex;font:inherit;outline:none;padding:var(--spacing-xs) calc(var(--spacing-xs) / 2)}.text-input_hds-text-input__button__1Fh0I:focus{outline:var(--outline-width) solid var(--color-focus-outline)}.TextInput-module_root__2CMNr{position:relative;&.TextInput-module_invalid__2iYo2{label{color:var(--label-color-invalid)}}}.TextInput-module_input__1BlHi.TextInput-module_hasButton__2KCM1,.TextInput-module_input__1BlHi.TextInput-module_hasClearButton__3-tBe{padding-right:calc(2 * var(--spacing-s) + 1.5rem)}.TextInput-module_input__1BlHi.TextInput-module_hasButton__2KCM1.TextInput-module_hasClearButton__3-tBe{padding-right:calc(4 * var(--spacing-s) + 1.5rem)}.TextInput-module_button__1ySMX:disabled{cursor:not-allowed}.TextInput-module_button__1ySMX:focus{outline:var(--outline-width) solid var(--color-focus-outline)}`);
  var l5 = import_react21.default.forwardRef((i12, l19) => {
    var { children: a21, className: s21 = "", errorText: u10, helperText: p5, hideLabel: _7 = false, id: d16, invalid: c6 = false, isAriaLabelledBy: x = false, label: h5, labelId: v4, onBlur: m6, required: g4 = false, style: b6, successText: f2, infoText: w, tooltipLabel: C2, tooltipText: k, tooltipButtonLabel: y2, tooltip: z3 } = i12, T = o(i12, ["children", "className", "errorText", "helperText", "hideLabel", "id", "invalid", "isAriaLabelledBy", "label", "labelId", "onBlur", "required", "style", "successText", "infoText", "tooltipLabel", "tooltipText", "tooltipButtonLabel", "tooltip"]);
    const E2 = { className: r(r11.root, c6 && r11.invalid, f2 && r11.success, s21), onBlur: m6, style: b6 };
    return import_react21.default.createElement("div", Object.assign({}, E2, T, { ref: l19 }), h5 && import_react21.default.createElement(n5, { id: v4, inputId: d16, isAriaLabelledBy: x, hidden: _7, label: h5, required: g4, tooltipLabel: C2, tooltipButtonLabel: y2, tooltipText: k, tooltip: z3 }), import_react21.default.createElement("div", { className: r(r11.inputWrapper) }, a21), u10 && import_react21.default.createElement("div", { className: r11.errorText, id: `${d16}-error` }, u10), f2 && import_react21.default.createElement("div", { className: r11.successText, id: `${d16}-success` }, f2), w && import_react21.default.createElement("div", { className: r11.infoText, id: `${d16}-info` }, w), p5 && import_react21.default.createElement("div", { className: r11.helperText, id: `${d16}-helper` }, p5));
  });

  // node_modules/hds-react/TextInput-5c74ea95.js
  var n6 = import_react22.default.forwardRef((n21, s21) => {
    var { buttonAriaLabel: u10, buttonIcon: c6, children: b6, className: d16 = "", clearButtonAriaLabel: p5 = "Clear", clearButton: m6 = false, defaultValue: f2, disabled: x = false, errorText: h5, helperText: T, hideLabel: B2, id: L2, infoText: y2, invalid: C2, label: v4, labelId: I2, onButtonClick: g4, onChange: j2 = /* @__PURE__ */ __name(() => null, "j"), required: N3, style: A2, successText: E2, tooltipButtonLabel: q3, tooltipLabel: k, tooltipText: V3, tooltip: O2, type: R3 = "text" } = n21, W3 = o(n21, ["buttonAriaLabel", "buttonIcon", "children", "className", "clearButtonAriaLabel", "clearButton", "defaultValue", "disabled", "errorText", "helperText", "hideLabel", "id", "infoText", "invalid", "label", "labelId", "onButtonClick", "onChange", "required", "style", "successText", "tooltipButtonLabel", "tooltipLabel", "tooltipText", "tooltip", "type"]);
    const w = { className: d16, errorText: h5, helperText: T, hideLabel: B2, id: L2, infoText: y2, invalid: C2, label: v4, labelId: I2, required: N3, style: A2, successText: E2, tooltipButtonLabel: q3, tooltipLabel: k, tooltipText: V3, tooltip: O2 }, D = import_react22.default.useRef(null), S2 = r5(L2, T, h5, E2, y2), _7 = Boolean(c6 && g4), z3 = Boolean(m6 || "search" === R3), F3 = /* @__PURE__ */ __name((e18) => {
      if (j2(e18), !z3) return;
      const t21 = e18.target.value;
      z3 && t21.length > 0 ? D.current.setAttribute("data-hds-textinput-filled", "true") : D.current.removeAttribute("data-hds-textinput-filled");
    }, "F");
    return (null == f2 ? void 0 : f2.length) > 0 && z3 && (w["data-hds-textinput-filled"] = true), import_react22.default.createElement(l5, Object.assign({}, w, { ref: D }), import_react22.default.createElement("input", Object.assign({ "aria-describedby": S2, className: r(r11.input, _7 && r11.hasButton, z3 && r11.hasClearButton), defaultValue: f2, disabled: x, id: L2, onChange: F3, ref: s21, required: N3, type: R3 }, W3)), (_7 || z3) && import_react22.default.createElement("div", { className: r11.buttonWrapper }, z3 && import_react22.default.createElement("button", { "aria-label": p5, className: r(r11.button, r11.clearButton), disabled: x, onClick: /* @__PURE__ */ __name((e18) => {
      const t21 = D.current.querySelector("input");
      t21.value = "", t21.focus(), F3(e18);
    }, "onClick"), type: "button" }, import_react22.default.createElement(s3, null)), c6 && g4 && import_react22.default.createElement("button", { "aria-label": u10, className: r11.button, disabled: x, onClick: g4, type: "button" }, c6)), b6);
  });

  // node_modules/hds-react/getChildren-58f1ebcb.js
  var import_react23 = __toESM(require_react());
  var import_lodash3 = __toESM(require_lodash());
  var o7 = /* @__PURE__ */ __name((r30) => void 0 === r30 ? [] : Array.isArray(r30) ? r30 : [r30], "o");

  // node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
  var updateQueue = makeQueue();
  var raf = /* @__PURE__ */ __name((fn3) => schedule(fn3, updateQueue), "raf");
  var writeQueue = makeQueue();
  raf.write = (fn3) => schedule(fn3, writeQueue);
  var onStartQueue = makeQueue();
  raf.onStart = (fn3) => schedule(fn3, onStartQueue);
  var onFrameQueue = makeQueue();
  raf.onFrame = (fn3) => schedule(fn3, onFrameQueue);
  var onFinishQueue = makeQueue();
  raf.onFinish = (fn3) => schedule(fn3, onFinishQueue);
  var timeouts = [];
  raf.setTimeout = (handler, ms) => {
    let time = raf.now() + ms;
    let cancel = /* @__PURE__ */ __name(() => {
      let i12 = timeouts.findIndex((t21) => t21.cancel == cancel);
      if (~i12) timeouts.splice(i12, 1);
      __raf.count -= ~i12 ? 1 : 0;
    }, "cancel");
    let timeout = {
      time,
      handler,
      cancel
    };
    timeouts.splice(findTimeout(time), 0, timeout);
    __raf.count += 1;
    start2();
    return timeout;
  };
  var findTimeout = /* @__PURE__ */ __name((time) => ~(~timeouts.findIndex((t21) => t21.time > time) || ~timeouts.length), "findTimeout");
  raf.cancel = (fn3) => {
    updateQueue.delete(fn3);
    writeQueue.delete(fn3);
  };
  raf.sync = (fn3) => {
    sync = true;
    raf.batchedUpdates(fn3);
    sync = false;
  };
  raf.throttle = (fn3) => {
    let lastArgs;
    function queuedFn() {
      try {
        fn3(...lastArgs);
      } finally {
        lastArgs = null;
      }
    }
    __name(queuedFn, "queuedFn");
    function throttled(...args) {
      lastArgs = args;
      raf.onStart(queuedFn);
    }
    __name(throttled, "throttled");
    throttled.handler = fn3;
    throttled.cancel = () => {
      onStartQueue.delete(queuedFn);
      lastArgs = null;
    };
    return throttled;
  };
  var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
  };
  raf.use = (impl) => nativeRaf = impl;
  raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
  raf.batchedUpdates = (fn3) => fn3();
  raf.catch = console.error;
  raf.frameLoop = "always";
  raf.advance = () => {
    if (raf.frameLoop !== "demand") {
      console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
    } else {
      update();
    }
  };
  var ts = -1;
  var sync = false;
  function schedule(fn3, queue) {
    if (sync) {
      queue.delete(fn3);
      fn3(0);
    } else {
      queue.add(fn3);
      start2();
    }
  }
  __name(schedule, "schedule");
  function start2() {
    if (ts < 0) {
      ts = 0;
      if (raf.frameLoop !== "demand") {
        nativeRaf(loop);
      }
    }
  }
  __name(start2, "start");
  function loop() {
    if (~ts) {
      nativeRaf(loop);
      raf.batchedUpdates(update);
    }
  }
  __name(loop, "loop");
  function update() {
    let prevTs = ts;
    ts = raf.now();
    let count = findTimeout(ts);
    if (count) {
      eachSafely(timeouts.splice(0, count), (t21) => t21.handler());
      __raf.count -= count;
    }
    onStartQueue.flush();
    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
    onFrameQueue.flush();
    writeQueue.flush();
    onFinishQueue.flush();
  }
  __name(update, "update");
  function makeQueue() {
    let next = /* @__PURE__ */ new Set();
    let current = next;
    return {
      add(fn3) {
        __raf.count += current == next && !next.has(fn3) ? 1 : 0;
        next.add(fn3);
      },
      delete(fn3) {
        __raf.count -= current == next && next.has(fn3) ? 1 : 0;
        return next.delete(fn3);
      },
      flush(arg) {
        if (current.size) {
          next = /* @__PURE__ */ new Set();
          __raf.count -= current.size;
          eachSafely(current, (fn3) => fn3(arg) && next.add(fn3));
          __raf.count += next.size;
          current = next;
        }
      }
    };
  }
  __name(makeQueue, "makeQueue");
  function eachSafely(values, each3) {
    values.forEach((value) => {
      try {
        each3(value);
      } catch (e18) {
        raf.catch(e18);
      }
    });
  }
  __name(eachSafely, "eachSafely");
  var __raf = {
    count: 0,
    clear() {
      ts = -1;
      timeouts = [];
      onStartQueue = makeQueue();
      updateQueue = makeQueue();
      onFrameQueue = makeQueue();
      writeQueue = makeQueue();
      onFinishQueue = makeQueue();
      __raf.count = 0;
    }
  };

  // node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
  var React6 = __toESM(require_react());
  var import_react24 = __toESM(require_react());
  function noop2() {
  }
  __name(noop2, "noop");
  var defineHidden = /* @__PURE__ */ __name((obj, key, value) => Object.defineProperty(obj, key, {
    value,
    writable: true,
    configurable: true
  }), "defineHidden");
  var is = {
    arr: Array.isArray,
    obj: /* @__PURE__ */ __name((a21) => !!a21 && a21.constructor.name === "Object", "obj"),
    fun: /* @__PURE__ */ __name((a21) => typeof a21 === "function", "fun"),
    str: /* @__PURE__ */ __name((a21) => typeof a21 === "string", "str"),
    num: /* @__PURE__ */ __name((a21) => typeof a21 === "number", "num"),
    und: /* @__PURE__ */ __name((a21) => a21 === void 0, "und")
  };
  function isEqual2(a21, b6) {
    if (is.arr(a21)) {
      if (!is.arr(b6) || a21.length !== b6.length) return false;
      for (let i12 = 0; i12 < a21.length; i12++) {
        if (a21[i12] !== b6[i12]) return false;
      }
      return true;
    }
    return a21 === b6;
  }
  __name(isEqual2, "isEqual");
  var each = /* @__PURE__ */ __name((obj, fn3) => obj.forEach(fn3), "each");
  function eachProp(obj, fn3, ctx3) {
    if (is.arr(obj)) {
      for (let i12 = 0; i12 < obj.length; i12++) {
        fn3.call(ctx3, obj[i12], `${i12}`);
      }
      return;
    }
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn3.call(ctx3, obj[key], key);
      }
    }
  }
  __name(eachProp, "eachProp");
  var toArray = /* @__PURE__ */ __name((a21) => is.und(a21) ? [] : is.arr(a21) ? a21 : [a21], "toArray");
  var createStringInterpolator$1;
  var to;
  var colors$1 = null;
  var skipAnimation = false;
  var willAdvance = noop2;
  var assign = /* @__PURE__ */ __name((globals3) => {
    if (globals3.to) to = globals3.to;
    if (globals3.now) raf.now = globals3.now;
    if (globals3.colors !== void 0) colors$1 = globals3.colors;
    if (globals3.skipAnimation != null) skipAnimation = globals3.skipAnimation;
    if (globals3.createStringInterpolator) createStringInterpolator$1 = globals3.createStringInterpolator;
    if (globals3.requestAnimationFrame) raf.use(globals3.requestAnimationFrame);
    if (globals3.batchedUpdates) raf.batchedUpdates = globals3.batchedUpdates;
    if (globals3.willAdvance) willAdvance = globals3.willAdvance;
    if (globals3.frameLoop) raf.frameLoop = globals3.frameLoop;
  }, "assign");
  var globals = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    get createStringInterpolator() {
      return createStringInterpolator$1;
    },
    get to() {
      return to;
    },
    get colors() {
      return colors$1;
    },
    get skipAnimation() {
      return skipAnimation;
    },
    get willAdvance() {
      return willAdvance;
    },
    assign
  });
  var startQueue = /* @__PURE__ */ new Set();
  var currentFrame = [];
  var prevFrame = [];
  var priority = 0;
  var frameLoop = {
    get idle() {
      return !startQueue.size && !currentFrame.length;
    },
    start(animation) {
      if (priority > animation.priority) {
        startQueue.add(animation);
        raf.onStart(flushStartQueue);
      } else {
        startSafely(animation);
        raf(advance);
      }
    },
    advance,
    sort(animation) {
      if (priority) {
        raf.onFrame(() => frameLoop.sort(animation));
      } else {
        const prevIndex = currentFrame.indexOf(animation);
        if (~prevIndex) {
          currentFrame.splice(prevIndex, 1);
          startUnsafely(animation);
        }
      }
    },
    clear() {
      currentFrame = [];
      startQueue.clear();
    }
  };
  function flushStartQueue() {
    startQueue.forEach(startSafely);
    startQueue.clear();
    raf(advance);
  }
  __name(flushStartQueue, "flushStartQueue");
  function startSafely(animation) {
    if (!currentFrame.includes(animation)) startUnsafely(animation);
  }
  __name(startSafely, "startSafely");
  function startUnsafely(animation) {
    currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
  }
  __name(startUnsafely, "startUnsafely");
  function advance(dt3) {
    const nextFrame = prevFrame;
    for (let i12 = 0; i12 < currentFrame.length; i12++) {
      const animation = currentFrame[i12];
      priority = animation.priority;
      if (!animation.idle) {
        willAdvance(animation);
        animation.advance(dt3);
        if (!animation.idle) {
          nextFrame.push(animation);
        }
      }
    }
    priority = 0;
    prevFrame = currentFrame;
    prevFrame.length = 0;
    currentFrame = nextFrame;
    return currentFrame.length > 0;
  }
  __name(advance, "advance");
  function findIndex(arr, test) {
    const index = arr.findIndex(test);
    return index < 0 ? arr.length : index;
  }
  __name(findIndex, "findIndex");
  var colors = {
    transparent: 0,
    aliceblue: 4042850303,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    burntsienna: 3934150143,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  var NUMBER = "[-+]?\\d*\\.?\\d+";
  var PERCENTAGE = NUMBER + "%";
  function call(...parts) {
    return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
  }
  __name(call, "call");
  var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
  var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
  var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
  var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
  var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex6 = /^#([0-9a-fA-F]{6})$/;
  var hex8 = /^#([0-9a-fA-F]{8})$/;
  function normalizeColor(color) {
    let match4;
    if (typeof color === "number") {
      return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
    }
    if (match4 = hex6.exec(color)) return parseInt(match4[1] + "ff", 16) >>> 0;
    if (colors$1 && colors$1[color] !== void 0) {
      return colors$1[color];
    }
    if (match4 = rgb.exec(color)) {
      return (parse255(match4[1]) << 24 | parse255(match4[2]) << 16 | parse255(match4[3]) << 8 | 255) >>> 0;
    }
    if (match4 = rgba.exec(color)) {
      return (parse255(match4[1]) << 24 | parse255(match4[2]) << 16 | parse255(match4[3]) << 8 | parse1(match4[4])) >>> 0;
    }
    if (match4 = hex3.exec(color)) {
      return parseInt(match4[1] + match4[1] + match4[2] + match4[2] + match4[3] + match4[3] + "ff", 16) >>> 0;
    }
    if (match4 = hex8.exec(color)) return parseInt(match4[1], 16) >>> 0;
    if (match4 = hex4.exec(color)) {
      return parseInt(match4[1] + match4[1] + match4[2] + match4[2] + match4[3] + match4[3] + match4[4] + match4[4], 16) >>> 0;
    }
    if (match4 = hsl.exec(color)) {
      return (hslToRgb(parse360(match4[1]), parsePercentage(match4[2]), parsePercentage(match4[3])) | 255) >>> 0;
    }
    if (match4 = hsla.exec(color)) {
      return (hslToRgb(parse360(match4[1]), parsePercentage(match4[2]), parsePercentage(match4[3])) | parse1(match4[4])) >>> 0;
    }
    return null;
  }
  __name(normalizeColor, "normalizeColor");
  function hue2rgb(p5, q3, t21) {
    if (t21 < 0) t21 += 1;
    if (t21 > 1) t21 -= 1;
    if (t21 < 1 / 6) return p5 + (q3 - p5) * 6 * t21;
    if (t21 < 1 / 2) return q3;
    if (t21 < 2 / 3) return p5 + (q3 - p5) * (2 / 3 - t21) * 6;
    return p5;
  }
  __name(hue2rgb, "hue2rgb");
  function hslToRgb(h5, s21, l19) {
    const q3 = l19 < 0.5 ? l19 * (1 + s21) : l19 + s21 - l19 * s21;
    const p5 = 2 * l19 - q3;
    const r30 = hue2rgb(p5, q3, h5 + 1 / 3);
    const g4 = hue2rgb(p5, q3, h5);
    const b6 = hue2rgb(p5, q3, h5 - 1 / 3);
    return Math.round(r30 * 255) << 24 | Math.round(g4 * 255) << 16 | Math.round(b6 * 255) << 8;
  }
  __name(hslToRgb, "hslToRgb");
  function parse255(str) {
    const int3 = parseInt(str, 10);
    if (int3 < 0) return 0;
    if (int3 > 255) return 255;
    return int3;
  }
  __name(parse255, "parse255");
  function parse360(str) {
    const int3 = parseFloat(str);
    return (int3 % 360 + 360) % 360 / 360;
  }
  __name(parse360, "parse360");
  function parse1(str) {
    const num = parseFloat(str);
    if (num < 0) return 0;
    if (num > 1) return 255;
    return Math.round(num * 255);
  }
  __name(parse1, "parse1");
  function parsePercentage(str) {
    const int3 = parseFloat(str);
    if (int3 < 0) return 0;
    if (int3 > 100) return 1;
    return int3 / 100;
  }
  __name(parsePercentage, "parsePercentage");
  function colorToRgba(input) {
    let int32Color = normalizeColor(input);
    if (int32Color === null) return input;
    int32Color = int32Color || 0;
    let r30 = (int32Color & 4278190080) >>> 24;
    let g4 = (int32Color & 16711680) >>> 16;
    let b6 = (int32Color & 65280) >>> 8;
    let a21 = (int32Color & 255) / 255;
    return `rgba(${r30}, ${g4}, ${b6}, ${a21})`;
  }
  __name(colorToRgba, "colorToRgba");
  var createInterpolator = /* @__PURE__ */ __name((range, output, extrapolate) => {
    if (is.fun(range)) {
      return range;
    }
    if (is.arr(range)) {
      return createInterpolator({
        range,
        output,
        extrapolate
      });
    }
    if (is.str(range.output[0])) {
      return createStringInterpolator$1(range);
    }
    const config3 = range;
    const outputRange = config3.output;
    const inputRange = config3.range || [0, 1];
    const extrapolateLeft = config3.extrapolateLeft || config3.extrapolate || "extend";
    const extrapolateRight = config3.extrapolateRight || config3.extrapolate || "extend";
    const easing = config3.easing || ((t21) => t21);
    return (input) => {
      const range2 = findRange(input, inputRange);
      return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config3.map);
    };
  }, "createInterpolator");
  function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
    let result = map ? map(input) : input;
    if (result < inputMin) {
      if (extrapolateLeft === "identity") return result;
      else if (extrapolateLeft === "clamp") result = inputMin;
    }
    if (result > inputMax) {
      if (extrapolateRight === "identity") return result;
      else if (extrapolateRight === "clamp") result = inputMax;
    }
    if (outputMin === outputMax) return outputMin;
    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;
    if (inputMin === -Infinity) result = -result;
    else if (inputMax === Infinity) result = result - inputMin;
    else result = (result - inputMin) / (inputMax - inputMin);
    result = easing(result);
    if (outputMin === -Infinity) result = -result;
    else if (outputMax === Infinity) result = result + outputMin;
    else result = result * (outputMax - outputMin) + outputMin;
    return result;
  }
  __name(interpolate, "interpolate");
  function findRange(input, inputRange) {
    for (var i12 = 1; i12 < inputRange.length - 1; ++i12) if (inputRange[i12] >= input) break;
    return i12 - 1;
  }
  __name(findRange, "findRange");
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i12 = 1; i12 < arguments.length; i12++) {
        var source = arguments[i12];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  __name(_extends, "_extends");
  var $get = Symbol.for("FluidValue.get");
  var $observers = Symbol.for("FluidValue.observers");
  var hasFluidValue = /* @__PURE__ */ __name((arg) => Boolean(arg && arg[$get]), "hasFluidValue");
  var getFluidValue = /* @__PURE__ */ __name((arg) => arg && arg[$get] ? arg[$get]() : arg, "getFluidValue");
  function callFluidObserver(observer, event) {
    if (observer.eventObserved) {
      observer.eventObserved(event);
    } else {
      observer(event);
    }
  }
  __name(callFluidObserver, "callFluidObserver");
  function callFluidObservers(target, event) {
    let observers = target[$observers];
    if (observers) {
      observers.forEach((observer) => {
        callFluidObserver(observer, event);
      });
    }
  }
  __name(callFluidObservers, "callFluidObservers");
  var _FluidValue = class _FluidValue {
    constructor(get) {
      this[$get] = void 0;
      this[$observers] = void 0;
      if (!get && !(get = this.get)) {
        throw Error("Unknown getter");
      }
      setFluidGetter(this, get);
    }
  };
  __name(_FluidValue, "FluidValue");
  var FluidValue = _FluidValue;
  var setFluidGetter = /* @__PURE__ */ __name((target, get) => setHidden(target, $get, get), "setFluidGetter");
  function addFluidObserver(target, observer) {
    if (target[$get]) {
      let observers = target[$observers];
      if (!observers) {
        setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
      }
      if (!observers.has(observer)) {
        observers.add(observer);
        if (target.observerAdded) {
          target.observerAdded(observers.size, observer);
        }
      }
    }
    return observer;
  }
  __name(addFluidObserver, "addFluidObserver");
  function removeFluidObserver(target, observer) {
    let observers = target[$observers];
    if (observers && observers.has(observer)) {
      const count = observers.size - 1;
      if (count) {
        observers.delete(observer);
      } else {
        target[$observers] = null;
      }
      if (target.observerRemoved) {
        target.observerRemoved(count, observer);
      }
    }
  }
  __name(removeFluidObserver, "removeFluidObserver");
  var setHidden = /* @__PURE__ */ __name((target, key, value) => Object.defineProperty(target, key, {
    value,
    writable: true,
    configurable: true
  }), "setHidden");
  var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
  var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
  var namedColorRegex;
  var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
  var rgbaRound = /* @__PURE__ */ __name((_7, p1, p22, p32, p42) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p32)}, ${p42})`, "rgbaRound");
  var createStringInterpolator = /* @__PURE__ */ __name((config3) => {
    if (!namedColorRegex) namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
    const output = config3.output.map((value) => getFluidValue(value).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba));
    const keyframes = output.map((value) => value.match(numberRegex).map(Number));
    const outputRanges = keyframes[0].map((_7, i12) => keyframes.map((values) => {
      if (!(i12 in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i12];
    }));
    const interpolators = outputRanges.map((output2) => createInterpolator(_extends({}, config3, {
      output: output2
    })));
    return (input) => {
      var _output$find;
      const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value) => unitRegex.test(value))) == null ? void 0 : _output$find.replace(numberRegex, ""));
      let i12 = 0;
      return output[0].replace(numberRegex, () => `${interpolators[i12++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
    };
  }, "createStringInterpolator");
  var prefix = "react-spring: ";
  var once = /* @__PURE__ */ __name((fn3) => {
    const func = fn3;
    let called = false;
    if (typeof func != "function") {
      throw new TypeError(`${prefix}once requires a function parameter`);
    }
    return (...args) => {
      if (!called) {
        func(...args);
        called = true;
      }
    };
  }, "once");
  var warnInterpolate = once(console.warn);
  function deprecateInterpolate() {
    warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
  }
  __name(deprecateInterpolate, "deprecateInterpolate");
  var warnDirectCall = once(console.warn);
  function isAnimatedString(value) {
    return is.str(value) && (value[0] == "#" || /\d/.test(value) || value in (colors$1 || {}));
  }
  __name(isAnimatedString, "isAnimatedString");
  var useOnce = /* @__PURE__ */ __name((effect7) => (0, import_react24.useEffect)(effect7, emptyDeps), "useOnce");
  var emptyDeps = [];
  function useForceUpdate() {
    const update5 = (0, import_react24.useState)()[1];
    const mounted = (0, import_react24.useState)(makeMountedRef)[0];
    useOnce(mounted.unmount);
    return () => {
      if (mounted.current) {
        update5({});
      }
    };
  }
  __name(useForceUpdate, "useForceUpdate");
  function makeMountedRef() {
    const mounted = {
      current: true,
      unmount: /* @__PURE__ */ __name(() => () => {
        mounted.current = false;
      }, "unmount")
    };
    return mounted;
  }
  __name(makeMountedRef, "makeMountedRef");
  function useMemoOne(getResult, inputs) {
    const [initial] = (0, import_react24.useState)(() => ({
      inputs,
      result: getResult()
    }));
    const committed = (0, import_react24.useRef)();
    const prevCache = committed.current;
    let cache2 = prevCache;
    if (cache2) {
      const useCache = Boolean(inputs && cache2.inputs && areInputsEqual(inputs, cache2.inputs));
      if (!useCache) {
        cache2 = {
          inputs,
          result: getResult()
        };
      }
    } else {
      cache2 = initial;
    }
    (0, import_react24.useEffect)(() => {
      committed.current = cache2;
      if (prevCache == initial) {
        initial.inputs = initial.result = void 0;
      }
    }, [cache2]);
    return cache2.result;
  }
  __name(useMemoOne, "useMemoOne");
  function areInputsEqual(next, prev) {
    if (next.length !== prev.length) {
      return false;
    }
    for (let i12 = 0; i12 < next.length; i12++) {
      if (next[i12] !== prev[i12]) {
        return false;
      }
    }
    return true;
  }
  __name(areInputsEqual, "areInputsEqual");
  var useLayoutEffect4 = typeof window !== "undefined" && window.document && window.document.createElement ? React6.useLayoutEffect : React6.useEffect;

  // node_modules/@react-spring/core/dist/react-spring-core.esm.js
  var React8 = __toESM(require_react());
  var import_react26 = __toESM(require_react());

  // node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
  var React7 = __toESM(require_react());
  var import_react25 = __toESM(require_react());
  var $node = Symbol.for("Animated:node");
  var isAnimated = /* @__PURE__ */ __name((value) => !!value && value[$node] === value, "isAnimated");
  var getAnimated = /* @__PURE__ */ __name((owner) => owner && owner[$node], "getAnimated");
  var setAnimated = /* @__PURE__ */ __name((owner, node) => defineHidden(owner, $node, node), "setAnimated");
  var getPayload = /* @__PURE__ */ __name((owner) => owner && owner[$node] && owner[$node].getPayload(), "getPayload");
  var _Animated = class _Animated {
    constructor() {
      this.payload = void 0;
      setAnimated(this, this);
    }
    getPayload() {
      return this.payload || [];
    }
  };
  __name(_Animated, "Animated");
  var Animated = _Animated;
  var _AnimatedValue = class _AnimatedValue extends Animated {
    constructor(_value) {
      super();
      this.done = true;
      this.elapsedTime = void 0;
      this.lastPosition = void 0;
      this.lastVelocity = void 0;
      this.v0 = void 0;
      this.durationProgress = 0;
      this._value = _value;
      if (is.num(this._value)) {
        this.lastPosition = this._value;
      }
    }
    static create(value) {
      return new _AnimatedValue(value);
    }
    getPayload() {
      return [this];
    }
    getValue() {
      return this._value;
    }
    setValue(value, step) {
      if (is.num(value)) {
        this.lastPosition = value;
        if (step) {
          value = Math.round(value / step) * step;
          if (this.done) {
            this.lastPosition = value;
          }
        }
      }
      if (this._value === value) {
        return false;
      }
      this._value = value;
      return true;
    }
    reset() {
      const {
        done
      } = this;
      this.done = false;
      if (is.num(this._value)) {
        this.elapsedTime = 0;
        this.durationProgress = 0;
        this.lastPosition = this._value;
        if (done) this.lastVelocity = null;
        this.v0 = null;
      }
    }
  };
  __name(_AnimatedValue, "AnimatedValue");
  var AnimatedValue = _AnimatedValue;
  var _AnimatedString = class _AnimatedString extends AnimatedValue {
    constructor(value) {
      super(0);
      this._string = null;
      this._toString = void 0;
      this._toString = createInterpolator({
        output: [value, value]
      });
    }
    static create(value) {
      return new _AnimatedString(value);
    }
    getValue() {
      let value = this._string;
      return value == null ? this._string = this._toString(this._value) : value;
    }
    setValue(value) {
      if (is.str(value)) {
        if (value == this._string) {
          return false;
        }
        this._string = value;
        this._value = 1;
      } else if (super.setValue(value)) {
        this._string = null;
      } else {
        return false;
      }
      return true;
    }
    reset(goal) {
      if (goal) {
        this._toString = createInterpolator({
          output: [this.getValue(), goal]
        });
      }
      this._value = 0;
      super.reset();
    }
  };
  __name(_AnimatedString, "AnimatedString");
  var AnimatedString = _AnimatedString;
  var TreeContext = {
    dependencies: null
  };
  var _AnimatedObject = class _AnimatedObject extends Animated {
    constructor(source) {
      super();
      this.source = source;
      this.setValue(source);
    }
    getValue(animated3) {
      const values = {};
      eachProp(this.source, (source, key) => {
        if (isAnimated(source)) {
          values[key] = source.getValue(animated3);
        } else if (hasFluidValue(source)) {
          values[key] = getFluidValue(source);
        } else if (!animated3) {
          values[key] = source;
        }
      });
      return values;
    }
    setValue(source) {
      this.source = source;
      this.payload = this._makePayload(source);
    }
    reset() {
      if (this.payload) {
        each(this.payload, (node) => node.reset());
      }
    }
    _makePayload(source) {
      if (source) {
        const payload = /* @__PURE__ */ new Set();
        eachProp(source, this._addToPayload, payload);
        return Array.from(payload);
      }
    }
    _addToPayload(source) {
      if (TreeContext.dependencies && hasFluidValue(source)) {
        TreeContext.dependencies.add(source);
      }
      const payload = getPayload(source);
      if (payload) {
        each(payload, (node) => this.add(node));
      }
    }
  };
  __name(_AnimatedObject, "AnimatedObject");
  var AnimatedObject = _AnimatedObject;
  var _AnimatedArray = class _AnimatedArray extends AnimatedObject {
    constructor(source) {
      super(source);
    }
    static create(source) {
      return new _AnimatedArray(source);
    }
    getValue() {
      return this.source.map((node) => node.getValue());
    }
    setValue(source) {
      const payload = this.getPayload();
      if (source.length == payload.length) {
        return payload.map((node, i12) => node.setValue(source[i12])).some(Boolean);
      }
      super.setValue(source.map(makeAnimated));
      return true;
    }
  };
  __name(_AnimatedArray, "AnimatedArray");
  var AnimatedArray = _AnimatedArray;
  function makeAnimated(value) {
    const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
    return nodeType.create(value);
  }
  __name(makeAnimated, "makeAnimated");
  function getAnimatedType(value) {
    const parentNode = getAnimated(value);
    return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
  }
  __name(getAnimatedType, "getAnimatedType");
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i12 = 1; i12 < arguments.length; i12++) {
        var source = arguments[i12];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  __name(_extends2, "_extends");
  var withAnimated = /* @__PURE__ */ __name((Component2, host3) => {
    const hasInstance = !is.fun(Component2) || Component2.prototype && Component2.prototype.isReactComponent;
    return (0, import_react25.forwardRef)((givenProps, givenRef) => {
      const instanceRef = (0, import_react25.useRef)(null);
      const ref = hasInstance && (0, import_react25.useCallback)((value) => {
        instanceRef.current = updateRef(givenRef, value);
      }, [givenRef]);
      const [props, deps] = getAnimatedState(givenProps, host3);
      const forceUpdate = useForceUpdate();
      const callback = /* @__PURE__ */ __name(() => {
        const instance = instanceRef.current;
        if (hasInstance && !instance) {
          return;
        }
        const didUpdate = instance ? host3.applyAnimatedValues(instance, props.getValue(true)) : false;
        if (didUpdate === false) {
          forceUpdate();
        }
      }, "callback");
      const observer = new PropsObserver(callback, deps);
      const observerRef = (0, import_react25.useRef)();
      useLayoutEffect4(() => {
        const lastObserver = observerRef.current;
        observerRef.current = observer;
        each(deps, (dep) => addFluidObserver(dep, observer));
        if (lastObserver) {
          each(lastObserver.deps, (dep) => removeFluidObserver(dep, lastObserver));
          raf.cancel(lastObserver.update);
        }
      });
      (0, import_react25.useEffect)(callback, []);
      useOnce(() => () => {
        const observer2 = observerRef.current;
        each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
      });
      const usedProps = host3.getComponentProps(props.getValue());
      return React7.createElement(Component2, _extends2({}, usedProps, {
        ref
      }));
    });
  }, "withAnimated");
  var _PropsObserver = class _PropsObserver {
    constructor(update5, deps) {
      this.update = update5;
      this.deps = deps;
    }
    eventObserved(event) {
      if (event.type == "change") {
        raf.write(this.update);
      }
    }
  };
  __name(_PropsObserver, "PropsObserver");
  var PropsObserver = _PropsObserver;
  function getAnimatedState(props, host3) {
    const dependencies = /* @__PURE__ */ new Set();
    TreeContext.dependencies = dependencies;
    if (props.style) props = _extends2({}, props, {
      style: host3.createAnimatedStyle(props.style)
    });
    props = new AnimatedObject(props);
    TreeContext.dependencies = null;
    return [props, dependencies];
  }
  __name(getAnimatedState, "getAnimatedState");
  function updateRef(ref, value) {
    if (ref) {
      if (is.fun(ref)) ref(value);
      else ref.current = value;
    }
    return value;
  }
  __name(updateRef, "updateRef");
  var cacheKey = Symbol.for("AnimatedComponent");
  var createHost = /* @__PURE__ */ __name((components, {
    applyAnimatedValues: _applyAnimatedValues = /* @__PURE__ */ __name(() => false, "_applyAnimatedValues"),
    createAnimatedStyle: _createAnimatedStyle = /* @__PURE__ */ __name((style) => new AnimatedObject(style), "_createAnimatedStyle"),
    getComponentProps: _getComponentProps = /* @__PURE__ */ __name((props) => props, "_getComponentProps")
  } = {}) => {
    const hostConfig = {
      applyAnimatedValues: _applyAnimatedValues,
      createAnimatedStyle: _createAnimatedStyle,
      getComponentProps: _getComponentProps
    };
    const animated3 = /* @__PURE__ */ __name((Component2) => {
      const displayName = getDisplayName(Component2) || "Anonymous";
      if (is.str(Component2)) {
        Component2 = animated3[Component2] || (animated3[Component2] = withAnimated(Component2, hostConfig));
      } else {
        Component2 = Component2[cacheKey] || (Component2[cacheKey] = withAnimated(Component2, hostConfig));
      }
      Component2.displayName = `Animated(${displayName})`;
      return Component2;
    }, "animated");
    eachProp(components, (Component2, key) => {
      if (is.arr(components)) {
        key = getDisplayName(Component2);
      }
      animated3[key] = animated3(Component2);
    });
    return {
      animated: animated3
    };
  }, "createHost");
  var getDisplayName = /* @__PURE__ */ __name((arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null, "getDisplayName");

  // node_modules/@react-spring/core/dist/react-spring-core.esm.js
  function _extends3() {
    _extends3 = Object.assign || function(target) {
      for (var i12 = 1; i12 < arguments.length; i12++) {
        var source = arguments[i12];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  __name(_extends3, "_extends");
  var config = {
    default: {
      tension: 170,
      friction: 26
    },
    gentle: {
      tension: 120,
      friction: 14
    },
    wobbly: {
      tension: 180,
      friction: 12
    },
    stiff: {
      tension: 210,
      friction: 20
    },
    slow: {
      tension: 280,
      friction: 60
    },
    molasses: {
      tension: 280,
      friction: 120
    }
  };
  var linear = /* @__PURE__ */ __name((t21) => t21, "linear");
  var defaults = _extends3({}, config.default, {
    mass: 1,
    damping: 1,
    easing: linear,
    clamp: false
  });
  var isFrameValue = /* @__PURE__ */ __name((value) => value instanceof FrameValue, "isFrameValue");
  var nextId$1 = 1;
  var _FrameValue = class _FrameValue extends FluidValue {
    constructor(...args) {
      super(...args);
      this.id = nextId$1++;
      this.key = void 0;
      this._priority = 0;
    }
    get priority() {
      return this._priority;
    }
    set priority(priority3) {
      if (this._priority != priority3) {
        this._priority = priority3;
        this._onPriorityChange(priority3);
      }
    }
    get() {
      const node = getAnimated(this);
      return node && node.getValue();
    }
    to(...args) {
      return globals.to(this, args);
    }
    interpolate(...args) {
      deprecateInterpolate();
      return globals.to(this, args);
    }
    toJSON() {
      return this.get();
    }
    observerAdded(count) {
      if (count == 1) this._attach();
    }
    observerRemoved(count) {
      if (count == 0) this._detach();
    }
    _attach() {
    }
    _detach() {
    }
    _onChange(value, idle = false) {
      callFluidObservers(this, {
        type: "change",
        parent: this,
        value,
        idle
      });
    }
    _onPriorityChange(priority3) {
      if (!this.idle) {
        frameLoop.sort(this);
      }
      callFluidObservers(this, {
        type: "priority",
        parent: this,
        priority: priority3
      });
    }
  };
  __name(_FrameValue, "FrameValue");
  var FrameValue = _FrameValue;
  var $P = Symbol.for("SpringPhase");
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i12;
    for (i12 = 0; i12 < sourceKeys.length; i12++) {
      key = sourceKeys[i12];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  __name(_objectWithoutPropertiesLoose, "_objectWithoutPropertiesLoose");
  var _excluded$3 = ["children"];
  var SpringContext = /* @__PURE__ */ __name((_ref) => {
    let {
      children
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
    const inherited = (0, import_react26.useContext)(ctx);
    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
    props = useMemoOne(() => ({
      pause,
      immediate
    }), [pause, immediate]);
    const {
      Provider
    } = ctx;
    return React8.createElement(Provider, {
      value: props
    }, children);
  }, "SpringContext");
  var ctx = makeContext(SpringContext, {});
  SpringContext.Provider = ctx.Provider;
  SpringContext.Consumer = ctx.Consumer;
  function makeContext(target, init) {
    Object.assign(target, React8.createContext(init));
    target.Provider._context = target;
    target.Consumer._context = target;
    return target;
  }
  __name(makeContext, "makeContext");
  var TransitionPhase;
  (function(TransitionPhase3) {
    TransitionPhase3["MOUNT"] = "mount";
    TransitionPhase3["ENTER"] = "enter";
    TransitionPhase3["UPDATE"] = "update";
    TransitionPhase3["LEAVE"] = "leave";
  })(TransitionPhase || (TransitionPhase = {}));
  var _Interpolation = class _Interpolation extends FrameValue {
    constructor(source, args) {
      super();
      this.key = void 0;
      this.idle = true;
      this.calc = void 0;
      this._active = /* @__PURE__ */ new Set();
      this.source = source;
      this.calc = createInterpolator(...args);
      const value = this._get();
      const nodeType = getAnimatedType(value);
      setAnimated(this, nodeType.create(value));
    }
    advance(_dt) {
      const value = this._get();
      const oldValue = this.get();
      if (!isEqual2(value, oldValue)) {
        getAnimated(this).setValue(value);
        this._onChange(value, this.idle);
      }
      if (!this.idle && checkIdle(this._active)) {
        becomeIdle(this);
      }
    }
    _get() {
      const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
      return this.calc(...inputs);
    }
    _start() {
      if (this.idle && !checkIdle(this._active)) {
        this.idle = false;
        each(getPayload(this), (node) => {
          node.done = false;
        });
        if (globals.skipAnimation) {
          raf.batchedUpdates(() => this.advance());
          becomeIdle(this);
        } else {
          frameLoop.start(this);
        }
      }
    }
    _attach() {
      let priority3 = 1;
      each(toArray(this.source), (source) => {
        if (hasFluidValue(source)) {
          addFluidObserver(source, this);
        }
        if (isFrameValue(source)) {
          if (!source.idle) {
            this._active.add(source);
          }
          priority3 = Math.max(priority3, source.priority + 1);
        }
      });
      this.priority = priority3;
      this._start();
    }
    _detach() {
      each(toArray(this.source), (source) => {
        if (hasFluidValue(source)) {
          removeFluidObserver(source, this);
        }
      });
      this._active.clear();
      becomeIdle(this);
    }
    eventObserved(event) {
      if (event.type == "change") {
        if (event.idle) {
          this.advance();
        } else {
          this._active.add(event.parent);
          this._start();
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else if (event.type == "priority") {
        this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
      }
    }
  };
  __name(_Interpolation, "Interpolation");
  var Interpolation = _Interpolation;
  function isIdle(source) {
    return source.idle !== false;
  }
  __name(isIdle, "isIdle");
  function checkIdle(active) {
    return !active.size || Array.from(active).every(isIdle);
  }
  __name(checkIdle, "checkIdle");
  function becomeIdle(self2) {
    if (!self2.idle) {
      self2.idle = true;
      each(getPayload(self2), (node) => {
        node.done = true;
      });
      callFluidObservers(self2, {
        type: "idle",
        parent: self2
      });
    }
  }
  __name(becomeIdle, "becomeIdle");
  globals.assign({
    createStringInterpolator,
    to: /* @__PURE__ */ __name((source, args) => new Interpolation(source, args), "to")
  });
  var update2 = frameLoop.advance;

  // node_modules/@react-spring/web/dist/react-spring-web.esm.js
  var import_react_dom = __toESM(require_react_dom());
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i12;
    for (i12 = 0; i12 < sourceKeys.length; i12++) {
      key = sourceKeys[i12];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  __name(_objectWithoutPropertiesLoose2, "_objectWithoutPropertiesLoose");
  var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
  var isCustomPropRE = /^--/;
  function dangerousStyleValue(name, value) {
    if (value == null || typeof value === "boolean" || value === "") return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + "px";
    return ("" + value).trim();
  }
  __name(dangerousStyleValue, "dangerousStyleValue");
  var attributeCache = {};
  function applyAnimatedValues(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const _ref = props, {
      style,
      children,
      scrollTop,
      scrollLeft
    } = _ref, attributes = _objectWithoutPropertiesLoose2(_ref, _excluded$2);
    const values = Object.values(attributes);
    const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n21) => "-" + n21.toLowerCase())));
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (let name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue(name, style[name]);
        if (isCustomPropRE.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names.forEach((name, i12) => {
      instance.setAttribute(name, values[i12]);
    });
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
  }
  __name(applyAnimatedValues, "applyAnimatedValues");
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey = /* @__PURE__ */ __name((prefix3, key) => prefix3 + key.charAt(0).toUpperCase() + key.substring(1), "prefixKey");
  var prefixes = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
    prefixes.forEach((prefix3) => acc[prefixKey(prefix3, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber);
  var _excluded$1 = ["x", "y", "z"];
  var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms = /^(translate)/;
  var degTransforms = /^(rotate|skew)/;
  var addUnit = /* @__PURE__ */ __name((value, unit) => is.num(value) && value !== 0 ? value + unit : value, "addUnit");
  var isValueIdentity = /* @__PURE__ */ __name((value, id) => is.arr(value) ? value.every((v4) => isValueIdentity(v4, id)) : is.num(value) ? value === id : parseFloat(value) === id, "isValueIdentity");
  var _AnimatedStyle = class _AnimatedStyle extends AnimatedObject {
    constructor(_ref) {
      let {
        x,
        y: y2,
        z: z3
      } = _ref, style = _objectWithoutPropertiesLoose2(_ref, _excluded$1);
      const inputs = [];
      const transforms = [];
      if (x || y2 || z3) {
        inputs.push([x || 0, y2 || 0, z3 || 0]);
        transforms.push((xyz) => [`translate3d(${xyz.map((v4) => addUnit(v4, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
      }
      eachProp(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms.test(key)) {
          delete style[key];
          if (is.und(value)) return;
          const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
          inputs.push(toArray(value));
          transforms.push(key === "rotate3d" ? ([x2, y3, z4, deg]) => [`rotate3d(${x2},${y3},${z4},${addUnit(deg, unit)})`, isValueIdentity(deg, 0)] : (input) => [`${key}(${input.map((v4) => addUnit(v4, unit)).join(",")})`, isValueIdentity(input, key.startsWith("scale") ? 1 : 0)]);
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform(inputs, transforms);
      }
      super(style);
    }
  };
  __name(_AnimatedStyle, "AnimatedStyle");
  var AnimatedStyle = _AnimatedStyle;
  var _FluidTransform = class _FluidTransform extends FluidValue {
    constructor(inputs, transforms) {
      super();
      this._value = null;
      this.inputs = inputs;
      this.transforms = transforms;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity = true;
      each(this.inputs, (input, i12) => {
        const arg1 = getFluidValue(input[0]);
        const [t21, id] = this.transforms[i12](is.arr(arg1) ? arg1 : input.map(getFluidValue));
        transform += " " + t21;
        identity = identity && id;
      });
      return identity ? "none" : transform;
    }
    observerAdded(count) {
      if (count == 1) each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
    }
    observerRemoved(count) {
      if (count == 0) each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers(this, event);
    }
  };
  __name(_FluidTransform, "FluidTransform");
  var FluidTransform = _FluidTransform;
  var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
  var _excluded = ["scrollTop", "scrollLeft"];
  globals.assign({
    batchedUpdates: import_react_dom.unstable_batchedUpdates,
    createStringInterpolator,
    colors
  });
  var host = createHost(primitives, {
    applyAnimatedValues,
    createAnimatedStyle: /* @__PURE__ */ __name((style) => new AnimatedStyle(style), "createAnimatedStyle"),
    getComponentProps: /* @__PURE__ */ __name((_ref) => {
      let props = _objectWithoutPropertiesLoose2(_ref, _excluded);
      return props;
    }, "getComponentProps")
  });
  var animated = host.animated;

  // node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js
  var import_core8 = __toESM(require_core(), 1);
  var import_sha256 = __toESM(require_sha256(), 1);
  var import_enc_base64 = __toESM(require_enc_base64(), 1);
  var import_enc_utf8 = __toESM(require_enc_utf8(), 1);

  // node_modules/jwt-decode/build/jwt-decode.esm.js
  function e8(e18) {
    this.message = e18;
  }
  __name(e8, "e");
  e8.prototype = new Error(), e8.prototype.name = "InvalidCharacterError";
  var r13 = "undefined" != typeof window && window.atob && window.atob.bind(window) || function(r30) {
    var t21 = String(r30).replace(/=+$/, "");
    if (t21.length % 4 == 1) throw new e8("'atob' failed: The string to be decoded is not correctly encoded.");
    for (var n21, o18, a21 = 0, i12 = 0, c6 = ""; o18 = t21.charAt(i12++); ~o18 && (n21 = a21 % 4 ? 64 * n21 + o18 : o18, a21++ % 4) ? c6 += String.fromCharCode(255 & n21 >> (-2 * a21 & 6)) : 0) o18 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o18);
    return c6;
  };
  function n8(e18) {
    this.message = e18;
  }
  __name(n8, "n");
  n8.prototype = new Error(), n8.prototype.name = "InvalidTokenError";

  // node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js
  var nopLogger = {
    debug: /* @__PURE__ */ __name(() => void 0, "debug"),
    info: /* @__PURE__ */ __name(() => void 0, "info"),
    warn: /* @__PURE__ */ __name(() => void 0, "warn"),
    error: /* @__PURE__ */ __name(() => void 0, "error")
  };
  var level;
  var logger2;
  var Log = /* @__PURE__ */ ((Log22) => {
    Log22[Log22["NONE"] = 0] = "NONE";
    Log22[Log22["ERROR"] = 1] = "ERROR";
    Log22[Log22["WARN"] = 2] = "WARN";
    Log22[Log22["INFO"] = 3] = "INFO";
    Log22[Log22["DEBUG"] = 4] = "DEBUG";
    return Log22;
  })(Log || {});
  ((Log22) => {
    function reset() {
      level = 3;
      logger2 = nopLogger;
    }
    __name(reset, "reset");
    Log22.reset = reset;
    function setLevel(value) {
      if (!(0 <= value && value <= 4)) {
        throw new Error("Invalid log level");
      }
      level = value;
    }
    __name(setLevel, "setLevel");
    Log22.setLevel = setLevel;
    function setLogger(value) {
      logger2 = value;
    }
    __name(setLogger, "setLogger");
    Log22.setLogger = setLogger;
  })(Log || (Log = {}));
  Log.reset();
  var DefaultStaleStateAgeInSeconds = 60 * 15;
  var DefaultClockSkewInSeconds = 60 * 5;

  // node_modules/await-to-js/dist/await-to-js.es5.js
  function to2(promise, errorExt) {
    return promise.then(function(data) {
      return [null, data];
    }).catch(function(err) {
      if (errorExt) {
        Object.assign(err, errorExt);
      }
      return [err, void 0];
    });
  }
  __name(to2, "to");
  var await_to_js_es5_default = to2;

  // node_modules/hds-react/LoadingSpinner-9aaf23e5.js
  var import_react27 = __toESM(require_react());
  var import_lodash4 = __toESM(require_lodash());
  var c2 = "LoadingSpinner-module_notificationArea__1arIM";
  var m2 = "LoadingSpinner-module_loadingSpinner__2xHT_";
  var p2 = "LoadingSpinner-module_small__1McRk";
  var u4 = "LoadingSpinner-module_multicolor__1qbEF";
  e2(".LoadingSpinner-module_notificationArea__1arIM{border:0;clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.LoadingSpinner-module_loadingSpinner__2xHT_{--spinner-size:4rem;--spinner-color:var(--color-coat-of-arms);--spinner-thickness:0.5rem;--spinner-rotation-animation-duration:1.5s;--spinner-color-animation-duration:4.5s;--spinner-color-stage1:var(--color-coat-of-arms);--spinner-color-stage2:var(--color-copper);--spinner-color-stage3:var(--color-suomenlinna);border-top-color:var(--spinner-color);height:var(--spinner-size);position:relative;width:var(--spinner-size)}.LoadingSpinner-module_loadingSpinner__2xHT_ div{animation:LoadingSpinner-module_spinner-rotation-animation__PEk45 var(--spinner-rotation-animation-duration) cubic-bezier(.6,.2,.4,.8) infinite;border:var(--spinner-thickness) solid transparent;border-radius:50%;border-top-color:inherit;box-sizing:border-box;height:100%;position:absolute;width:100%}.LoadingSpinner-module_loadingSpinner__2xHT_ div:nth-child(2){animation-delay:-.15s}.LoadingSpinner-module_loadingSpinner__2xHT_ div:nth-child(3){animation-delay:-.3s}.LoadingSpinner-module_small__1McRk{--spinner-size:1.5rem;--spinner-thickness:0.1875rem}.LoadingSpinner-module_multicolor__1qbEF{animation:LoadingSpinner-module_spinner-color-animation__Yu7Cr var(--spinner-color-animation-duration) cubic-bezier(.6,.2,.4,.9) infinite;border-top-color:var(--spinner-color-stage1)}@keyframes LoadingSpinner-module_spinner-rotation-animation__PEk45{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes LoadingSpinner-module_spinner-color-animation__Yu7Cr{33.3%{border-top-color:var(--spinner-color-stage2)}66.6%{border-top-color:var(--spinner-color-stage3)}}");
  var _3 = "hds-loading-spinner-notification-area";
  var g = "data-active-spinners";
  var h2 = /* @__PURE__ */ __name(() => "undefined" == typeof document ? null : document.getElementById(_3) || (() => {
    const n21 = document.createElement("div");
    return n21.id = _3, n21.className = c2, n21.setAttribute("role", "status"), document.body.appendChild(n21), n21;
  })(), "h");
  var b3 = /* @__PURE__ */ __name((a21) => {
    var { className: c6, multicolor: _7 = false, small: b6 = false, theme: v4, loadingText: f2 = "Page is loading", loadingFinishedText: S2 = "Page has finished loading" } = a21, x = o(a21, ["className", "multicolor", "small", "theme", "loadingText", "loadingFinishedText"]);
    const L2 = d(m2, v4);
    return ((n21, e18) => {
      const [a22] = (0, import_react27.useState)((0, import_lodash4.uniqueId)()), [s21] = (0, import_react27.useState)(n21), [l19] = (0, import_react27.useState)(e18), c7 = (0, import_react27.useRef)(h2()), m6 = (0, import_react27.useCallback)(() => {
        null !== c7.current && (c7.current.textContent = s21);
      }, [c7, s21]), p5 = (0, import_react27.useCallback)(() => {
        c7.current.textContent = l19;
      }, [c7, l19]), u10 = (0, import_react27.useCallback)(() => (c7.current.getAttribute(g) || "").split(",").filter((n22) => "" !== n22), [c7]), _8 = (0, import_react27.useCallback)(() => {
        const n22 = u10();
        n22.push(a22), c7.current.setAttribute(g, n22.join(","));
      }, [u10, c7, a22]), b7 = (0, import_react27.useCallback)(() => {
        const n22 = u10().filter((n23) => n23 !== a22);
        c7.current.setAttribute(g, n22.join(","));
      }, [u10, c7, a22]), v5 = (0, import_react27.useCallback)(() => {
        0 === u10().length && (p5(), setTimeout(() => {
          0 === u10().length && c7.current.parentNode && c7.current.parentNode.removeChild(c7.current);
        }, 1e3));
      }, [u10, p5, c7]);
      (0, import_react27.useEffect)(() => null === c7.current ? () => null : (m6(), _8(), () => {
        b7(), v5();
      }), [m6, _8, b7, v5]);
    })(f2, S2), import_react27.default.createElement("div", Object.assign({ className: r(m2, b6 && p2, _7 && u4, L2, c6) }, x), import_react27.default.createElement("div", null), import_react27.default.createElement("div", null), import_react27.default.createElement("div", null));
  }, "b");

  // node_modules/hds-react/useSelectStorage-11dcba2c.js
  var import_lodash5 = __toESM(require_lodash());
  var import_react29 = __toESM(require_react());

  // node_modules/hds-react/getIsElementBlurred-d8289faa.js
  var r15 = /* @__PURE__ */ __name((r30) => r30.currentTarget.contains(r30.target) && (!r30.relatedTarget || !r30.currentTarget.contains(r30.relatedTarget)), "r");
  var t11 = /* @__PURE__ */ __name((r30) => !r30.currentTarget.contains(r30.relatedTarget), "t");

  // node_modules/hds-react/Tag-d0bc79a1.js
  var import_react28 = __toESM(require_react());
  var n9;
  var s7;
  var l6 = { tag: "Tag-module_tag__3bo5S tag_hds-tag__3MKf3", large: "Tag-module_large__1ZNIX tag_hds-tag--large__1bVs5", action: "Tag-module_action__4ky2K tag_hds-tag--action__Az-Fm", link: "Tag-module_link__3f99r tag_hds-tag--link__1470y", icon: "Tag-module_icon__or2kN tag_hds-tag__icon__2_xWY", multiline: "Tag-module_multiline__24sap tag_hds-tag--multiline__yHIcb" };
  e2(`.tag_hds-icon__2LFMT{background-color:currentcolor;display:inline-block;height:var(--icon-size);-webkit-mask-image:var(--mask-image);mask-image:var(--mask-image);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:auto;mask-size:auto;width:var(--icon-size)}.tag_hds-icon--size-xs__L1nV_{--icon-size:var(--spacing-layout-2-xs)}.tag_hds-icon--size-s__23CMA{--icon-size:var(--spacing-layout-xs)}.tag_hds-icon--size-m__2zCBY{--icon-size:var(--spacing-layout-s)}.tag_hds-icon--size-l__UuAMZ{--icon-size:var(--spacing-layout-m)}.tag_hds-icon--size-xl__2f_bT{--icon-size:var(--spacing-layout-l)}[class*=hds-icon-start--]:before{-webkit-mask-image:var(--mask-image-before);mask-image:var(--mask-image-before)}[class*=hds-icon-end--]:after,[class*=hds-icon-start--]:before{background-color:currentcolor;content:"";display:inline-flex;height:var(--icon-size,24px);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:contain;mask-size:contain;width:var(--icon-size,24px)}[class*=hds-icon-end--]:after{-webkit-mask-image:var(--mask-image-after);mask-image:var(--mask-image-after)}.tag_hds-icon--cross__2tq88{--mask-image-cross:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18 7.5L13.5 12l4.5 4.5-1.5 1.5-4.5-4.5L7.5 18 6 16.5l4.5-4.5L6 7.5 7.5 6l4.5 4.5L16.5 6 18 7.5z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-cross)}.tag_hds-icon-start--cross__Efj_S{--mask-image-before:var(--mask-image-cross)}.tag_hds-icon-end--cross__3_S2q{--mask-image-after:var(--mask-image-cross)}.tag_hds-tag__3MKf3{--computed-background-color:var(--background-color,var(--color-black-10));--computed-background-color-focus:var(--background-color-focus,var(--computed-background-color,transparent));--computed-background-color-hover:var(--background-color-hover,var(--computed-background-color-focus,transparent));--computed-background-color-active:var(--background-color-active,var(--computed-background-color-hover,transparent));--computed-border-color:var(--border-color,var(--computed-background-color));--computed-border-color-focus:var(--border-color-focus,var(--computed-border-color,transparent));--computed-border-color-hover:var(--border-color-hover,var(--computed-border-color-focus,transparent));--computed-border-color-active:var(--border-color-active,var(--computed-border-color-hover,transparent));--computed-color:var(--color,--color-black-90);--computed-color-focus:var(--color-focus,var(--computed-color,inherit));--computed-color-hover:var(--color-hover,var(--computed-color-focus,inherit));--computed-color-active:var(--color-active,var(--computed-color-hover,inherit));--computed-outline-color:var(--outline-color,transparent);--font-size:var(--fontsize-body-s);--gap:var(--spacing-3-xs);--height:32px;--icon-reposition:-4px;--icon-size:24px;--outline-width:2px;--padding-horizontal:12px;--padding-vertical:3px;align-items:center;background-color:var(--computed-background-color);border-radius:calc(var(--height) / 2);box-sizing:border-box;color:var(--computed-color,inherit);display:inline-flex;flex-direction:row;font-size:var(--font-size);font-weight:500;grid-gap:var(--gap);gap:var(--gap);justify-content:center;line-height:var(--lineheight-l);max-width:100%;min-height:var(--height);outline:none;outline-offset:2px;overflow:hidden;padding:var(--padding-vertical) var(--padding-horizontal)}.tag_hds-tag__3MKf3:after{flex-shrink:0;margin-right:var(--icon-reposition)}.tag_hds-tag__3MKf3:before{flex-shrink:0;margin-left:var(--icon-reposition)}.tag_hds-tag__3MKf3>span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tag_hds-tag--large__1bVs5{--font-size:var(--fontsize-body-m);--gap:var(--spacing-2-xs);--height:48px;--icon-reposition:-8px;--outline-width:3px;--padding-horizontal:20px;--padding-vertical:10px}.tag_hds-tag--action__Az-Fm{--border-color:var(--color-black-90);border:1px solid var(--computed-border-color);padding:calc(var(--padding-vertical) - 1px) calc(var(--padding-horizontal) - 1px)}.tag_hds-tag--multiline__yHIcb>span{-webkit-hyphens:auto;hyphens:auto;white-space:normal}.tag_hds-tag--link__1470y{text-decoration:underline}.tag_hds-tag--action__Az-Fm,.tag_hds-tag--link__1470y{--background-color-hover:var(--color-black-20);--outline-color:var(--color-focus-outline);cursor:pointer}.tag_hds-tag--action__Az-Fm.tag_focus-visible__2sNDw,.tag_hds-tag--action__Az-Fm:focus-visible,.tag_hds-tag--link__1470y.tag_focus-visible__2sNDw,.tag_hds-tag--link__1470y:focus-visible{background-color:var(--computed-background-color-focus);border-color:var(--computed-border-color-focus);color:var(--computed-color-focus)}.tag_hds-tag--action__Az-Fm:hover,.tag_hds-tag--link__1470y:hover{background-color:var(--computed-background-color-hover);border-color:var(--computed-border-color-hover);color:var(--computed-color-hover)}.tag_hds-tag--action__Az-Fm:active,.tag_hds-tag--link__1470y:active{background-color:var(--computed-background-color-active);border-color:var(--computed-border-color-active);color:var(--computed-color-active)}.tag_hds-tag--action__Az-Fm.tag_focus-visible__2sNDw,.tag_hds-tag--action__Az-Fm:active:hover,.tag_hds-tag--action__Az-Fm:focus-visible,.tag_hds-tag--link__1470y.tag_focus-visible__2sNDw,.tag_hds-tag--link__1470y:active:hover,.tag_hds-tag--link__1470y:focus-visible{box-shadow:none;outline:var(--outline-width) solid var(--computed-outline-color)}.tag_hds-icon__2LFMT.tag_hds-tag__icon__2_xWY,.tag_hds-tag__icon__2_xWY{flex-shrink:0;height:var(--icon-size);width:var(--icon-size)}.tag_hds-tag__icon__2_xWY:first-child{margin-left:var(--icon-reposition)}.tag_hds-tag__icon__2_xWY:last-child{margin-right:var(--icon-reposition)}`), function(o18) {
    o18.Action = "action", o18.Informative = "informative", o18.Link = "link";
  }(n9 || (n9 = {})), function(o18) {
    o18.Small = "small", o18.Large = "large";
  }(s7 || (s7 = {}));
  var d7 = (0, import_react28.forwardRef)((e18, r30) => {
    var { children: d16, className: g4, onClick: _7, onDelete: m6, size: u10 = s7.Small, theme: v4, href: h5, iconStart: p5, iconEnd: b6, multiline: k = false } = e18, f2 = o(e18, ["children", "className", "onClick", "onDelete", "size", "theme", "href", "iconStart", "iconEnd", "multiline"]);
    const z3 = !!m6, x = m6 || _7, w = !!x;
    let y2 = n9.Informative, E2 = null;
    x ? (y2 = n9.Action, E2 = "button") : h5 && (y2 = n9.Link);
    const A2 = d(l6.tag, v4), N3 = l6.large, F3 = r(l6.tag, u10 === s7.Large && N3, A2, g4, l6[y2], k && l6.multiline), j2 = p5 ? import_react28.default.createElement("div", { className: r(l6.icon), "aria-hidden": "true" }, p5) : null, L2 = b6 ? import_react28.default.createElement("div", { className: r(l6.icon), "aria-hidden": "true" }, b6) : null, T = /* @__PURE__ */ __name((o18) => {
      "Enter" !== o18.key && " " !== o18.key || x(o18);
    }, "T"), C2 = /* @__PURE__ */ __name((o18) => import_react28.default.createElement("a", Object.assign({ ref: r30, className: r(F3, l6.link), href: h5 }, f2), o18.children), "C"), M = /* @__PURE__ */ __name((o18) => import_react28.default.createElement("div", Object.assign({ className: F3, ref: r30 }, w && { tabIndex: 0, role: E2, onClick: x, onKeyDown: T }, f2), o18.children), "M"), I2 = import_react28.default.createElement(import_react28.default.Fragment, null, j2, import_react28.default.createElement("span", null, d16), L2, z3 && !L2 ? import_react28.default.createElement(s2, { className: l6.icon }) : null);
    return h5 ? import_react28.default.createElement(C2, null, I2) : import_react28.default.createElement(M, null, I2);
  });

  // node_modules/hds-react/useSelectStorage-11dcba2c.js
  var F = { selectedOptionsContainer: "Select-module_selectedOptionsContainer__16tlC", dropdownButton: "Select-module_dropdownButton__2-_Ec", screenReaderNotifications: "Select-module_screenReaderNotifications__2wzzH", searchAndFilterInfoContainer: "Select-module_searchAndFilterInfoContainer__3FsUa", screenReaderOnly: "Select-module_screenReaderOnly__1W8e8", visuallyHidden: "Select-module_visuallyHidden__2VgHH", withVisibleFocus: "Select-module_withVisibleFocus__3GTEv", selectAndListContainer: "Select-module_selectAndListContainer__vSJEv", root: "Select-module_root__-GjU5", listAndInputContainer: "Select-module_listAndInputContainer__2gZ6q", listContainer: "Select-module_listContainer__2PfQA", list: "Select-module_list__2iKlZ", groupLabel: "Select-module_groupLabel__35DbO", listItem: "Select-module_listItem__3BXr0", selected: "Select-module_selected__1wq2l", disabledOption: "Select-module_disabledOption__vG5Oz", open: "Select-module_open__3a03t", angleIcon: "Select-module_angleIcon__3A9li", invalid: "Select-module_invalid__9ZEr1", buttonIcon: "Select-module_buttonIcon__3O29i", labels: "Select-module_labels__2FlKK", count: "Select-module_count__ODB_U", arrowAndSpaceForClearButton: "Select-module_arrowAndSpaceForClearButton__3Fufw", singleSelect: "Select-module_singleSelect__3hwAT", clearable: "Select-module_clearable__14E9M", selectedOptions: "Select-module_selectedOptions__VmvqD", icon: "Select-module_icon__3AwlD", placeholder: "Select-module_placeholder__nKgDE", spaceForOneDigit: "Select-module_spaceForOneDigit__3puHv", spaceForTwoDigits: "Select-module_spaceForTwoDigits__1pg4o", spaceForThreeDigits: "Select-module_spaceForThreeDigits__kYlbR", spaceForFourDigits: "Select-module_spaceForFourDigits__27Gtl", disabledButton: "Select-module_disabledButton__3Iunx", hasHiddenItems: "Select-module_hasHiddenItems__33AsE", clearButton: "Select-module_clearButton__2ADgy", dropdownButtonOption: "Select-module_dropdownButtonOption__3Tfsz", lastVisible: "Select-module_lastVisible__2zaaS", singleSelectListItem: "Select-module_singleSelectListItem__3xGcj", singleSelectListItemLabel: "Select-module_singleSelectListItemLabel__uAJg8", multiSelectListItem: "Select-module_multiSelectListItem__1aUhM", checkboxContainer: "Select-module_checkboxContainer__Ahwyj", checkbox: "Select-module_checkbox__njDzB", selectableListItem: "Select-module_selectableListItem__1KNgo", focusableListItem: "Select-module_focusableListItem__3A4r6", shiftOptions: "Select-module_shiftOptions__22weq", listAndInputContainerVisible: "Select-module_listAndInputContainerVisible__3drG4", withSearchOrFilter: "Select-module_withSearchOrFilter__Cfpnd", searchOrFilterInput: "Select-module_searchOrFilterInput__qLE0Q", withErrorMessage: "Select-module_withErrorMessage__1EezM", tagListContainer: "Select-module_tagListContainer__1vSdM", tagList: "Select-module_tagList__3uMST", tag: "Select-module_tag__1I-nr", disabledTag: "Select-module_disabledTag__1cwLH", tagListExpanded: "Select-module_tagListExpanded__-176N", arrowIcon: "Select-module_arrowIcon__12Sjk", tagListButtons: "Select-module_tagListButtons__3vZyi", hiddenButton: "Select-module_hiddenButton__3DQ3q", showAllButton: "Select-module_showAllButton__2TTlK", clearAllButton: "Select-module_clearAllButton__2hs4_", errorText: "Select-module_errorText__2U8te text-input_hds-text-input__error-text__12P9W", assistiveText: "Select-module_assistiveText__iHdzn" };
  e2(`@keyframes text-input_fadeIn__e88RG{0%{opacity:0}to{opacity:1}}.text-input_hds-text-input__oq6gC{--border-width:2px;--outline-width:3px;--outline-offset-readonly:4px;--input-height:56px;--textarea-height:149px;--icon-size:var(--spacing-m);--icon-color:var(--color-black);--helper-color-default:var(--color-black-60);--helper-color-invalid:var(--color-black);--helper-background-color-invalid:var(--color-error-light);--helper-icon-color-invalid:var(--color-error);--helper-color-success:var(--color-black);--helper-background-color-success:var(--color-success-light);--helper-icon-color-success:var(--color-success);--helper-color-info:var(--color-black);--helper-background-color-info:var(--color-info-light);--helper-icon-color-info:var(--color-info);--input-background-default:var(--color-white);--input-background-disabled:var(--color-black-10);--input-border-color-default:var(--color-black-50);--input-border-color-hover:var(--color-black-90);--input-border-color-focus:var(--color-black-90);--input-border-color-invalid:var(--color-error);--input-border-color-disabled:var(--color-black-10);--input-border-color-success:var(--color-success);--input-color-default:var(--color-black-90);--input-color-disabled:var(--color-black-40);--label-color-default:var(--color-black-90);--label-color-invalid:var(--color-black-90);--placeholder-color:var(--color-black-60)}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5{-webkit-appearance:none;background-color:var(--input-background-default);border:var(--border-width) solid var(--input-border-color-default);border-radius:0;box-sizing:border-box;color:var(--input-color-default);font-family:inherit;font-size:1.125em;height:var(--input-height);line-height:normal;margin:0;padding:0 var(--spacing-s);width:100%;will-change:transform,box-shadow}.text-input_hds-text-input__input-clear__3fH_a::-webkit-search-cancel-button,.text-input_hds-text-input__oq6gC:not([data-hds-textinput-filled]) .text-input_hds-text-input__button-clear__12Fmy{display:none}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__button-clear__12Fmy>*{pointer-events:none}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5:hover{border-color:var(--input-border-color-hover);transition:border-color 85ms ease-out}.text-input_hds-text-input__input-wrapper__1rXc7:focus-within .text-input_hds-text-input__input__Wvij5{border-color:var(--input-border-color-focus);outline:none}.text-input_hds-text-input__oq6gC.text-input_hds-text-input--invalid__9tihR .text-input_hds-text-input__input__Wvij5{border-color:var(--input-border-color-invalid)}.text-input_hds-text-input__oq6gC.text-input_hds-text-input--success__1x9yB .text-input_hds-text-input__input__Wvij5{border-color:var(--input-border-color-success)}.text-input_hds-text-input__input-wrapper__1rXc7:focus-within .text-input_hds-text-input__input__Wvij5:not([readonly]){box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.text-input_hds-text-input__label__2Jzj_{color:var(--label-color-default);display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.text-input_hds-text-input--invalid__9tihR .text-input_hds-text-input__label__2Jzj_{color:var(--label-color-invalid);transition:color 85ms linear}.text-input_hds-text-input__required__1V4QI{display:inline-block;font-size:var(--fontsize-body-xl);line-height:1;margin-left:var(--spacing-2-xs);transform:translateY(var(--spacing-3-xs))}.text-input_hds-text-input__input-wrapper__1rXc7{display:flex;position:relative}.text-input_hds-text-input__oq6gC textarea.text-input_hds-text-input__input__Wvij5{font-family:inherit;height:var(--textarea-height);margin:0;min-height:var(--input-height);overflow:auto;padding:var(--spacing-s);resize:vertical}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5::-ms-reveal{display:none}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5::-moz-placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5::placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__helper-text__3hy4U{color:var(--helper-color-default);display:block;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-3-xs);white-space:pre-line}.text-input_hds-text-input__error-text__12P9W{background-color:var(--helper-background-color-invalid);border-left:8px solid var(--color-error);color:var(--helper-color-invalid);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);white-space:pre-line}.text-input_hds-text-input__error-text__12P9W:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__error-text__12P9W:before{animation:text-input_fadeIn__e88RG 85ms ease-out;background:var(--helper-icon-color-invalid);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__success-text__28bnR{background-color:var(--helper-background-color-success);border-left:8px solid var(--color-success);color:var(--helper-color-success);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative;white-space:pre-wrap}.text-input_hds-text-input__success-text__28bnR:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__success-text__28bnR:before{animation:text-input_fadeIn__e88RG 85ms ease-out;background:var(--helper-icon-color-success);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__info-text__2WOd2{background-color:var(--helper-background-color-info);border-left:8px solid var(--color-info);color:var(--helper-color-info);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.text-input_hds-text-input__info-text__2WOd2:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__info-text__2WOd2:before{animation:text-input_fadeIn__e88RG 85ms ease-out;background:var(--helper-icon-color-info);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5[disabled]{background-color:var(--input-background-disabled);border-color:var(--input-border-color-disabled);color:var(--input-color-disabled);cursor:not-allowed}.text-input_hds-text-input__oq6gC .text-input_hds-text-input__input__Wvij5[readonly]{background-color:transparent;border:0;color:var(--input-color-default);outline-offset:var(--outline-offset-readonly);padding:0;-webkit-text-fill-color:var(--input-color-default);transform:translateZ(0);transition:85ms ease-out;transition-property:outline,transform}.text-input_hds-text-input__input-wrapper__1rXc7:focus-within input.text-input_hds-text-input__input__Wvij5[readonly]{height:calc(var(--input-height) - 2 * var(--outline-offset-readonly));margin:var(--outline-offset-readonly) 0;outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__input-wrapper__1rXc7:focus-within textarea.text-input_hds-text-input__input__Wvij5[readonly]{outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__buttons__1nezR{align-items:center;bottom:0;display:flex;font-size:1rem;justify-content:center;margin-right:calc(var(--spacing-s) - var(--spacing-xs) / 2);position:absolute;right:0;top:0}.text-input_hds-text-input__button__138YJ{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;color:var(--icon-color);cursor:pointer;display:flex;font:inherit;outline:none;padding:var(--spacing-xs) calc(var(--spacing-xs) / 2)}.text-input_hds-text-input__button__138YJ:focus{outline:var(--outline-width) solid var(--color-focus-outline)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.Select-module_screenReaderNotifications__2wzzH,.Select-module_searchAndFilterInfoContainer__3FsUa.Select-module_screenReaderOnly__1W8e8,.Select-module_visuallyHidden__2VgHH{border:0;clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.Select-module_selectAndListContainer__vSJEv:focus-within,.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_withVisibleFocus__3GTEv:focus-visible{box-shadow:0 0 0 var(--computed-focus-outline-width) var(--computed-focus-outline-color)}.Select-module_root__-GjU5{--computed-border-width:var(--border-width,2px);--computed-divider-width:var(--divider-width,1px);--computed-focus-outline-width:var(--focus-outline-width,3px);--computed-dropdown-height:var(--spacing-3-xl);--default-menu-item-height:calc(var(--computed-dropdown-height) - var(--computed-border-width) * 2);--computed-menu-item-height:var(--menu-item-height,var(--default-menu-item-height));--computed-menu-z-index:var(--menu-z-index,10);--computed-assistive-color:var(--assistive-color,var(--color-black-90));--computed-focus-outline-color:var(--focus-outline-color,var(--color-focus-outline));--computed-placeholder-color:var(--placeholder-color,var(--color-black-60));--computed-border-color-invalid:var(--border-color-invalid,var(--color-error));--computed-icon-color:var(--icon-color,var(--color-black-90));--computed-icon-size:var(--icon-size,var(--spacing-m));--computed-dropdown-icon-color:var(--dropdown-icon-color,var(--color-black-90));--computed-dropdown-background-default:var(--dropdown-background-default,var(--color-white));--computed-dropdown-background-disabled:var(--dropdown-background-disabled,var(--color-black-10));--computed-dropdown-border-color-default:var(--dropdown-border-color-default,var(--color-black-50));--computed-dropdown-border-color-hover:var(--dropdown-border-color-hover,var(--color-black-90));--computed-dropdown-border-color-hover-invalid:var(--dropdown-border-color-hover-invalid,var(--color-error));--computed-dropdown-border-color-focus:var(--dropdown-border-color-focus,var(--color-black-90));--computed-dropdown-border-color-invalid:var(--dropdown-border-color-invalid,var(--color-error));--computed-dropdown-border-color-disabled:var(--dropdown-border-color-disabled,var(--color-black-10));--computed-dropdown-color-default:var(--dropdown-color-default,var(--color-black-90));--computed-dropdown-color-disabled:var(--dropdown-color-disabled,var(--color-black-40));--computed-menu-divider-color:var(--menu-divider-color,var(--color-black-20));--computed-menu-item-background-color-default:var(--menu-item-background-color-default,var(--color-white));--computed-menu-item-background-color-hover:var(--menu-item-background-color-hover,var(--color-bus-light));--computed-menu-item-background-color-selected:var(--menu-item-background-color-selected,transparent);--computed-menu-item-background-color-selected-hover:var(--menu-item-background-color-selected-hover,var(--color-bus-light));--computed-menu-item-background-color-disabled:var(--menu-item-background-color-disabled,var(--color-white));--computed-menu-item-background-color-disabled-hover:var(--menu-item-background-color-disabled-hover,transparent);--computed-menu-item-color-default:var(--menu-item-color-default,var(--color-black-90));--computed-menu-item-color-hover:var(--menu-item-color-hover,var(--color-black-90));--computed-menu-item-color-selected:var(--menu-item-color-selected,var(--color-black-90));--computed-menu-item-color-selected-hover:var(--menu-item-color-selected-hover,var(--color-black-90));--computed-menu-item-color-disabled:var(--menu-item-color-disabled,var(--color-black-40));--computed-menu-item-icon-color-selected:var(--menu-item-icon-color-selected,var(--color-white));--computed-menu-item-icon-color-disabled:var(--menu-item-icon-color-disabled,var(--color-black-40));--computed-menu-item-border-color-focus:var(--menu-item-border-color-focus,var(--color-coat-of-arms));--computed-menu-item-group-label-background-default:var(--menu-item-group-label-background-default,var(--color-black-5));--computed-menu-item-group-label-background-disabled:var(--menu-item-group-label-background-disabled,var(--color-black-5));--computed-menu-item-group-label-background-disabled-hover:var(--menu-item-group-label-background-disabled-hover,var(--color-black-5));--computed-menu-item-group-label-color-disabled:var(--menu-item-group-label-color-disabled,var(--color-black-90));--computed-error-text-color:var(--error-text-color,var(--color-black));--computed-error-icon-color:var(--error-icon-color,var(--color-error));--computed-error-background-color:var(--error-background-color,var(--color-error-light));--computed-error-border-color:var(--error-border-color,var(--color-error));position:relative}.Select-module_root__-GjU5 input{font-family:inherit;margin:0;overflow:auto}.Select-module_selectAndListContainer__vSJEv{background-color:var(--computed-dropdown-background-default);border:var(--computed-border-width) solid var(--computed-dropdown-border-color-default);box-sizing:border-box;min-height:var(--computed-dropdown-height);position:relative;width:100%}.Select-module_selectAndListContainer__vSJEv:focus-within{border-color:var(--computed-dropdown-border-color-focus)}.Select-module_selectAndListContainer__vSJEv:hover{border-color:var(--computed-dropdown-border-color-hover)}.Select-module_selectAndListContainer__vSJEv:focus-within,.Select-module_selectAndListContainer__vSJEv:hover{transition:border-color 85ms ease-out}.Select-module_listAndInputContainer__2gZ6q{border:solid var(--computed-dropdown-border-color-focus);border-top-color:var(--computed-menu-divider-color);border-width:var(--computed-divider-width) var(--computed-border-width) var(--computed-border-width);bottom:0;display:none;left:0;list-style:none;margin:0;outline:none;overflow-y:auto;padding:0;position:absolute;transform:translate(calc(var(--computed-border-width) * -1),100%);width:100%;z-index:var(--computed-menu-z-index)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_listItem__3BXr0{align-items:center;background-color:var(--computed-menu-item-background-color-default);box-sizing:border-box;color:var(--computed-menu-item-color-default);cursor:pointer;display:flex;font-size:var(--fontsize-body-l);justify-content:space-between;line-height:var(--lineheight-m);min-height:var(--computed-menu-item-height);padding:var(--spacing-xs) var(--spacing-s)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_selected__1wq2l.Select-module_groupLabel__35DbO,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_selected__1wq2l.Select-module_listItem__3BXr0{background-color:var(--computed-menu-item-background-color-selected);color:var(--computed-menu-item-color-selected)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_disabledOption__vG5Oz.Select-module_groupLabel__35DbO,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_disabledOption__vG5Oz.Select-module_listItem__3BXr0{background-color:var(--computed-menu-item-background-color-disabled);color:var(--computed-menu-item-color-disabled);cursor:not-allowed}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO:hover,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_listItem__3BXr0:hover{color:var(--computed-menu-item-color-hover)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO:hover.Select-module_selected__1wq2l,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_listItem__3BXr0:hover.Select-module_selected__1wq2l{background-color:var(--computed-menu-item-background-color-selected-hover);color:var(--computed-menu-item-color-selected-hover)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO:hover.Select-module_disabledOption__vG5Oz,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_listItem__3BXr0:hover.Select-module_disabledOption__vG5Oz{background-color:var(--computed-menu-item-background-color-disabled-hover);color:var(--computed-menu-item-color-disabled)}.Select-module_root__-GjU5{display:flex;flex-direction:column;max-width:420px}.Select-module_selectAndListContainer__vSJEv{margin-bottom:var(--spacing-2-xs)}.Select-module_selectAndListContainer__vSJEv.Select-module_open__3a03t .Select-module_angleIcon__3A9li{transform:rotateX(180deg)}.Select-module_selectAndListContainer__vSJEv.Select-module_invalid__9ZEr1{border-color:var(--computed-dropdown-border-color-invalid)}.Select-module_selectAndListContainer__vSJEv.Select-module_invalid__9ZEr1:hover{border-color:var(--computed-dropdown-border-color-hover-invalid)}.Select-module_selectedOptionsContainer__16tlC{box-sizing:border-box;display:flex;min-height:var(--computed-menu-item-height)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec{align-items:center;color:var(--computed-dropdown-color-default);display:flex;font-size:var(--fontsize-body-l);outline:none;padding:var(--spacing-xs);padding-right:var(--spacing-xs)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_withVisibleFocus__3GTEv{align-self:center;height:calc(var(--computed-dropdown-height) - 6px)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec .Select-module_buttonIcon__3O29i{color:var(--computed-icon-color)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec .Select-module_labels__2FlKK{box-sizing:border-box;display:flex;flex-flow:wrap;flex-grow:1;height:calc(var(--fontsize-body-l) * var(--lineheight-l) + 1px);overflow:hidden;padding-left:var(--spacing-3-xs)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec .Select-module_count__ODB_U.Select-module_count__ODB_U{display:none;font-weight:700;padding:0;position:relative;width:1px}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec .Select-module_count__ODB_U.Select-module_count__ODB_U:after{content:"\\A0";display:inline-block}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec .Select-module_count__ODB_U.Select-module_count__ODB_U span{background-color:var(--computed-dropdown-background-default);color:var(--computed-dropdown-color-default);position:absolute;right:2px;top:0}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec .Select-module_arrowAndSpaceForClearButton__3Fufw{align-items:center;color:var(--computed-dropdown-icon-color);display:flex;flex-shrink:1;padding-left:calc(var(--clear-button-size) + var(--spacing-2-xs) + var(--spacing-xs));--clear-button-size:calc(var(--computed-icon-size) + var(--spacing-xs) + var(--spacing-xs))}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_singleSelect__3hwAT .Select-module_arrowAndSpaceForClearButton__3Fufw{padding-left:calc(var(--clear-button-size) + var(--spacing-3-xs) + var(--spacing-xs))}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec:not(.Select-module_clearable__14E9M) .Select-module_arrowAndSpaceForClearButton__3Fufw{padding-left:var(--spacing-xs)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_selectedOptions__VmvqD{flex-grow:1;overflow:hidden}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_selectedOptions__VmvqD>span:first-child{display:flex;padding-right:var(--spacing-3-xs)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_icon__3AwlD{color:var(--computed-dropdown-icon-color);flex-shrink:1;padding-left:var(--spacing-xs);padding-right:var(--spacing-xs)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_placeholder__nKgDE{background-color:inherit;color:var(--computed-placeholder-color)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_placeholder__nKgDE .Select-module_arrowAndSpaceForClearButton__3Fufw{padding-left:var(--spacing-xs)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_spaceForOneDigit__3puHv .Select-module_labels__2FlKK{padding-right:24px}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_spaceForTwoDigits__1pg4o .Select-module_labels__2FlKK{padding-right:34px}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_spaceForThreeDigits__kYlbR .Select-module_labels__2FlKK{padding-right:44px}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_spaceForFourDigits__27Gtl .Select-module_labels__2FlKK{padding-right:54px}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_disabledButton__3Iunx{background-color:var(--computed-dropdown-background-disabled);border-color:var(--computed-dropdown-border-color-disabled);color:var(--computed-dropdown-color-disabled)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_disabledButton__3Iunx.Select-module_icon__3AwlD{color:var(--computed-menu-item-icon-color-disabled)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_disabledButton__3Iunx .Select-module_count__ODB_U.Select-module_count__ODB_U span{background-color:var(--computed-dropdown-background-disabled);color:var(--computed-dropdown-color-disabled)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_disabledButton__3Iunx .Select-module_arrowAndSpaceForClearButton__3Fufw,.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_disabledButton__3Iunx .Select-module_buttonIcon__3O29i,.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_disabledButton__3Iunx.Select-module_placeholder__nKgDE{color:var(--computed-dropdown-color-disabled)}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButton__2-_Ec.Select-module_hasHiddenItems__33AsE .Select-module_count__ODB_U{display:block}.Select-module_selectedOptionsContainer__16tlC .Select-module_clearButton__2ADgy{position:absolute;right:calc(var(--computed-icon-size) + var(--spacing-xs) + var(--spacing-xs))}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButtonOption__3Tfsz{max-width:100%;overflow:hidden;padding:0 var(--spacing-2-xs) 0 0;position:relative;text-overflow:ellipsis;white-space:nowrap}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButtonOption__3Tfsz:not(:last-child):after{content:",";display:inline-block;position:absolute;right:var(--spacing-3-xs);top:0}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButtonOption__3Tfsz:last-child{margin-right:0}.Select-module_selectedOptionsContainer__16tlC .Select-module_dropdownButtonOption__3Tfsz.Select-module_lastVisible__2zaaS:after{content:""}.Select-module_listAndInputContainer__2gZ6q{background-color:var(--computed-dropdown-background-default)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA{display:flex;flex-direction:column;max-height:238px;overflow-y:auto}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ{display:flex;flex-direction:column;margin:0;padding:0;position:relative}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_listItem__3BXr0.Select-module_disabledOption__vG5Oz.Select-module_disabledOption__vG5Oz{cursor:not-allowed}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_singleSelectListItem__3xGcj{--computed-menu-item-background-color-hover:var(--menu-item-background-color-hover,var(--color-bus-light));--computed-menu-item-background-color-selected:var(--menu-item-background-color-selected,var(--color-bus));--computed-menu-item-background-color-selected-hover:var(--menu-item-background-color-selected-hover,var(--color-bus-dark));--computed-menu-item-color-selected:var(--menu-item-color-selected,var(--color-white));--computed-menu-item-color-selected-hover:var(--menu-item-color-selected-hover,var(--color-white))}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_singleSelectListItem__3xGcj .Select-module_singleSelectListItemLabel__uAJg8{align-items:center;display:flex;flex-grow:1;justify-content:space-between}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_singleSelectListItem__3xGcj .Select-module_singleSelectListItemLabel__uAJg8>span{color:var(--computed-menu-item-icon-color-selected);height:24px;width:24px}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_singleSelectListItem__3xGcj.Select-module_disabledOption__vG5Oz .Select-module_singleSelectListItemLabel__uAJg8>span{color:var(--computed-menu-item-icon-color-disabled)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_multiSelectListItem__1aUhM{position:relative}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_multiSelectListItem__1aUhM .Select-module_checkboxContainer__Ahwyj{display:flex;flex-direction:row}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_multiSelectListItem__1aUhM .Select-module_checkboxContainer__Ahwyj>div{flex-shrink:0;pointer-events:none;width:24px;--background-unselected:var(--background-default,var(--color-white))}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_multiSelectListItem__1aUhM .Select-module_checkboxContainer__Ahwyj label{cursor:pointer;flex-grow:1;padding-left:var(--spacing-xs)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_multiSelectListItem__1aUhM .Select-module_checkboxContainer__Ahwyj label:after{content:"";inset:0;position:absolute}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_multiSelectListItem__1aUhM.Select-module_disabledOption__vG5Oz.Select-module_disabledOption__vG5Oz label{cursor:not-allowed}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO{background-color:var(--computed-menu-item-group-label-background-default);font-weight:700}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO.Select-module_disabledOption__vG5Oz.Select-module_disabledOption__vG5Oz{background-color:var(--computed-menu-item-group-label-background-disabled);color:var(--computed-menu-item-group-label-color-disabled)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_groupLabel__35DbO.Select-module_disabledOption__vG5Oz.Select-module_disabledOption__vG5Oz:hover{background-color:var(--computed-menu-item-group-label-background-disabled-hover)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_selectableListItem__1KNgo:not(.Select-module_selected__1wq2l):hover{background-color:var(--computed-menu-item-background-color-hover)}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_focusableListItem__3A4r6{outline:none}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_focusableListItem__3A4r6:focus,.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ .Select-module_focusableListItem__3A4r6:focus-within{box-shadow:0 0 0 2px var(--computed-menu-item-border-color-focus) inset;outline:none}.Select-module_listAndInputContainer__2gZ6q .Select-module_listContainer__2PfQA .Select-module_list__2iKlZ.Select-module_shiftOptions__22weq .Select-module_listItem__3BXr0:not(.Select-module_groupLabel__35DbO){padding-left:var(--spacing-layout-s)}.Select-module_listAndInputContainer__2gZ6q.Select-module_listAndInputContainerVisible__3drG4{display:block}.Select-module_listAndInputContainer__2gZ6q.Select-module_withSearchOrFilter__Cfpnd .Select-module_listContainer__2PfQA{border-top:1px solid var(--computed-menu-divider-color)}.Select-module_searchOrFilterInput__qLE0Q{padding:var(--spacing-2-xs)}.Select-module_searchAndFilterInfoContainer__3FsUa{align-items:center;color:var(--computed-dropdown-color-default);display:flex;flex-direction:column;padding:var(--spacing-l)}.Select-module_searchAndFilterInfoContainer__3FsUa>span{padding-top:var(--spacing-2-xs);text-align:center}.Select-module_searchAndFilterInfoContainer__3FsUa>svg{padding:var(--spacing-s) 0 var(--spacing-xs)}.Select-module_searchAndFilterInfoContainer__3FsUa.Select-module_withErrorMessage__1EezM,.Select-module_searchAndFilterInfoContainer__3FsUa.Select-module_withErrorMessage__1EezM>span:first-of-type{padding-top:0}.Select-module_tagListContainer__1vSdM{display:flex;flex-direction:column}.Select-module_tagListContainer__1vSdM .Select-module_tagList__3uMST{display:flex;flex-flow:row wrap;margin:0 -4px;max-height:80px;overflow:hidden;padding:var(--spacing-3-xs) 4px 0}.Select-module_tagListContainer__1vSdM .Select-module_tagList__3uMST .Select-module_tag__1I-nr{margin-bottom:var(--spacing-xs);margin-right:var(--spacing-xs)}.Select-module_tagListContainer__1vSdM .Select-module_tagList__3uMST .Select-module_tag__1I-nr.Select-module_disabledTag__1cwLH{pointer-events:none}.Select-module_tagListContainer__1vSdM.Select-module_tagListExpanded__-176N .Select-module_tagList__3uMST{max-height:unset}.Select-module_tagListContainer__1vSdM.Select-module_tagListExpanded__-176N .Select-module_arrowIcon__12Sjk{transform:rotateX(180deg)}.Select-module_tagListContainer__1vSdM .Select-module_tagListButtons__3vZyi{display:flex;flex-direction:row;margin-top:var(--spacing-xs)}.Select-module_tagListContainer__1vSdM .Select-module_tagListButtons__3vZyi>button:first-child{margin-right:var(--spacing-xs)}.Select-module_tagListContainer__1vSdM .Select-module_tagListButtons__3vZyi .Select-module_hiddenButton__3DQ3q{display:none}.Select-module_tagListContainer__1vSdM .Select-module_tagListButtons__3vZyi .Select-module_clearAllButton__2hs4_{--background-color-hover:var(--color-error-light);--background-color:var(--color-white);--border-color:var(--color-error);--border-color-hover:var(--color-error);--border-color-focus:var(--color-error);--border-color-hover-focus:var(--color-error);--color:var(--color-error);--color-hover:var(--color-error);--color-focus:var(--color-error);--color-hover-focus:var(--color-error)}.Select-module_errorText__2U8te{margin-bottom:var(--spacing-2-xs);--icon-size:var(--computed-icon-size);--helper-color-invalid:var(--computed-error-text-color);--helper-icon-color-invalid:var(--computed-error-icon-color);--helper-background-color-invalid:var(--computed-error-background-color);--color-error:var(--computed-error-border-color)}.Select-module_assistiveText__iHdzn{color:var(--computed-assistive-color);margin-bottom:var(--spacing-2-xs)}`);
  var z = { selectedOptions: "selectedOptions", listItem: "listItem", listGroup: "listGroup", clearButton: "clearButton", clearAllButton: "clearAllButton", showAllButton: "showAllButton", tag: "tag", generic: "generic", filter: "filter", search: "search", searchResult: "searchResult", assistive: "assistive", error: "error" };
  var R = { click: "click", outSideClick: "outSideClick", change: "change", error: "error", cancelled: "cancelled", blur: "blur", focus: "focus", focusMovedToNonListElement: "focusMovedToNonListElement", close: "close", success: "success" };
  var q = /* @__PURE__ */ __name((e18) => e18 === z.tag, "q");
  var G = /* @__PURE__ */ __name((e18) => e18 === R.click, "G");
  var Z = /* @__PURE__ */ __name((e18) => e18 === R.change, "Z");
  var N = /* @__PURE__ */ __name((e18) => e18 === z.generic, "N");
  var $ = /* @__PURE__ */ __name((e18, t21) => G(t21) && ((e19) => e19 === z.selectedOptions)(e18), "$");
  var P = /* @__PURE__ */ __name((e18, t21) => G(t21) && ((e19) => e19 === z.listItem || q(e19))(e18), "P");
  var K = /* @__PURE__ */ __name((e18, t21) => G(t21) && ((e19) => e19 === z.clearAllButton || e19 === z.clearButton)(e18), "K");
  var W = /* @__PURE__ */ __name((e18, t21) => ((e19) => e19 === R.error)(t21) && e18 === z.searchResult, "W");
  var H = /* @__PURE__ */ __name((e18, t21) => N(e18) && ((e19) => e19 === R.blur)(t21), "H");
  function V(e18) {
    let t21 = Object.assign({}, e18);
    return { get: /* @__PURE__ */ __name(() => t21, "get"), set: /* @__PURE__ */ __name((e19) => (t21 = Object.assign(Object.assign({}, t21), e19), t21), "set") };
  }
  __name(V, "V");
  var Q = V({});
  var U = /* @__PURE__ */ __name((e18, t21) => ({ getData: /* @__PURE__ */ __name(() => e18.get(), "getData"), updateData: /* @__PURE__ */ __name((t22) => e18.set(t22), "updateData"), getMetaData: /* @__PURE__ */ __name(() => t21.get(), "getMetaData"), updateMetaData: /* @__PURE__ */ __name((e19) => t21.set(e19), "updateMetaData"), asyncRequestWithTrigger: /* @__PURE__ */ __name(() => ({}), "asyncRequestWithTrigger"), trigger: /* @__PURE__ */ __name(() => ({}), "trigger") }), "U");
  var J = (0, import_react29.createContext)({ dataStorage: Q, metaDataStorage: Q, dataHandlers: U(Q, Q) });
  function X() {
    return (0, import_react29.useContext)(J).dataHandlers;
  }
  __name(X, "X");
  function Y() {
    return X();
  }
  __name(Y, "Y");
  function ee(e18) {
    const { id: t21, type: o18 = R.click, trigger: l19 } = e18;
    return { onClick: /* @__PURE__ */ __name((e19) => {
      l19({ id: t21, type: o18, payload: { originalEvent: e19 } });
    }, "onClick") };
  }
  __name(ee, "ee");
  function te(e18, t21) {
    return e18.findIndex(({ value: e19, isGroupLabel: o18 }) => e19 === t21.value && !!o18 == !!t21.isGroupLabel);
  }
  __name(te, "te");
  function oe(e18, t21) {
    return 0 === e18.length ? -1 : 1 === e18.length ? 0 : e18.findIndex(({ options: e19 }) => te(e19, t21) > -1);
  }
  __name(oe, "oe");
  function le(e18, t21) {
    return e18.map((e19, o18) => ({ options: e19.options.map((l19, n21) => t21(l19, e19, n21, o18) || Object.assign({}, l19)) }));
  }
  __name(le, "le");
  function ne(e18, t21 = 0) {
    const o18 = e18.options.length - 1;
    return o18 ? (e18.options.filter((e19) => !e19.isGroupLabel && e19.selected).length + t21) / o18 : 0;
  }
  __name(ne, "ne");
  function re(e18) {
    return e18.forEach((e19) => {
      e19.options[0].selected = 1 === ne(e19);
    }), e18;
  }
  __name(re, "re");
  function ie(e18, t21, o18) {
    return t21.forEach((t22) => {
      if (!t22.value) return;
      const o19 = oe(e18, Object.assign(Object.assign({}, t22), { isGroupLabel: !!t22.isGroupLabel }));
      if (o19 < 0) return;
      const l19 = e18[o19], n21 = te(l19.options, t22), r30 = n21 > -1 ? l19.options[n21] : void 0;
      r30 && (l19.options[n21] = Object.assign(Object.assign({}, r30), t22));
    }), o18 && re(e18), e18;
  }
  __name(ie, "ie");
  function ae(e18, t21, o18) {
    if (t21.isGroupLabel) throw new Error("Use updateGroupLabelAndOptions to update groupLabel and its related options");
    return ie(le(e18, (e19) => o18 || e19.isGroupLabel || !t21.selected ? Object.assign({}, e19) : Object.assign(Object.assign({}, e19), { selected: false })), [Object.assign(Object.assign({}, t21), { selected: !!t21.selected })], o18);
  }
  __name(ae, "ae");
  function ce(e18, t21 = true) {
    return le(e18, (e19) => Object.assign(Object.assign({}, e19), { selected: !(!e19.disabled || !t21) && e19.selected }));
  }
  __name(ce, "ce");
  function se(e18, t21 = true) {
    const o18 = [];
    return e18.forEach((e19) => {
      e19.options.forEach((e20) => {
        t21 && e20.isGroupLabel || o18.push(e20);
      });
    }), o18;
  }
  __name(se, "se");
  function ue(e18) {
    return e18.map((e19) => e19.options[0]).filter((e19) => e19 && e19.label && e19.visible);
  }
  __name(ue, "ue");
  function de(e18) {
    return se(e18).filter((e19) => !!e19.selected);
  }
  __name(de, "de");
  function pe(e18) {
    if ("string" == typeof e18) return { value: e18, label: e18, selected: false, isGroupLabel: false, visible: true, disabled: false };
    const t21 = e18.label || e18.value || "";
    return { label: t21, value: e18.value || t21, selected: !!e18.selected, isGroupLabel: false, visible: "boolean" != typeof e18.visible || e18.visible, disabled: "boolean" == typeof e18.disabled && e18.disabled };
  }
  __name(pe, "pe");
  function _e(e18) {
    return Object.assign(Object.assign({}, pe(String(e18))), { isGroupLabel: true, visible: !!e18, disabled: false });
  }
  __name(_e, "_e");
  function me(e18) {
    if (e18.groups || e18.options) {
      if (e18.groups) return e18.groups.map((e19) => {
        const t21 = !!xe(e19), o18 = e19.options.map(pe);
        if (t21) return { options: [e19.options[0], ...o18.slice(1)] };
        return { options: [_e(e19.label), ...o18] };
      });
      if (e18.options) {
        const t21 = e18.options[0];
        if (t21 && t21.isGroupLabel) return [e18];
      }
      return [{ options: [_e(""), ...(e18.options || []).map(pe)] }];
    }
  }
  __name(me, "me");
  function ge(e18, t21) {
    return e18.label.toLowerCase().indexOf(t21.toLowerCase()) > -1;
  }
  __name(ge, "ge");
  function he(e18, t21, o18) {
    const l19 = le(e18, (e19) => e19.isGroupLabel ? Object.assign({}, e19) : Object.assign(Object.assign({}, e19), { visible: !t21 || o18(e19, t21) }));
    return l19.forEach((e19) => {
      const t22 = xe(e19);
      t22 && (t22.visible = !!t22.label && e19.options.findIndex((e20) => !e20.isGroupLabel && e20.visible) > -1);
    }), l19;
  }
  __name(he, "he");
  function be(e18, t21) {
    const o18 = me(e18) || [], l19 = se(o18), n21 = de(t21).filter((e19) => {
      const t22 = l19.findIndex((t23) => t23.value === e19.value);
      return !(t22 > -1) || (l19[t22].selected = true, false);
    });
    return [...n21.length ? [{ options: n21.map((e19) => Object.assign(Object.assign({}, e19), { visible: false })) }] : [], ...o18];
  }
  __name(be, "be");
  function ve(e18, t21) {
    const o18 = de(t21), l19 = new Set(o18.map((e19) => e19.value)), n21 = e18.filter((e19) => l19.has(e19.value)), r30 = new Set(n21.map((e19) => e19.value));
    return [...n21, ...o18.filter((e19) => !r30.has(e19.value))];
  }
  __name(ve, "ve");
  function fe(e18) {
    return { container: e18, button: `${e18}-main-button`, list: `${e18}-list`, clearButton: `${e18}-clear-button`, label: `${e18}-label`, selectionsAndListsContainer: `${e18}-sl-container`, tagList: `${e18}-tag-list`, searchOrFilterInput: `${e18}-input-element`, searchOrFilterInputLabel: `${e18}-input-element-label`, clearAllButton: `${e18}-clear-all-button`, showAllButton: `${e18}-show-all-button` };
  }
  __name(fe, "fe");
  function Se(e18) {
    let t21 = 0;
    return e18.forEach((e19) => {
      e19.options.forEach((e20) => {
        !e20.isGroupLabel && e20.visible && (t21 += 1);
      });
    }), t21;
  }
  __name(Se, "Se");
  function xe(e18) {
    const t21 = e18.options[0];
    return t21 && t21.isGroupLabel ? t21 : void 0;
  }
  __name(xe, "xe");
  function Ce(e18, t21, o18 = 0) {
    return { type: e18, content: t21, delay: o18, showTime: 0, addTime: Date.now() };
  }
  __name(Ce, "Ce");
  function we(e18, t21) {
    const { screenReaderNotifications: o18 } = t21.getMetaData(), l19 = o18.findIndex((t22) => t22.type === e18.type);
    if (l19 > -1) {
      const n22 = [...o18];
      return n22[l19].content === e18.content || (n22[l19] = e18, t21.updateMetaData({ screenReaderNotifications: n22 })), false;
    }
    const n21 = [...o18, e18];
    return t21.updateMetaData({ screenReaderNotifications: n21 }), true;
  }
  __name(we, "we");
  function Oe(e18, t21, o18, l19) {
    return se(e18, !l19).filter((e19) => o18(e19, t21));
  }
  __name(Oe, "Oe");
  function Ae(e18, t21) {
    if (void 0 === t21) return e18;
    const o18 = ("string" == typeof t21 ? [t21] : t21).map((e19) => {
      const { value: t22 } = pe(e19);
      return { value: t22, selected: true };
    }), l19 = le(e18, (e19) => {
      const t22 = "string" == typeof e19 ? pe(e19) : e19;
      return Object.assign(Object.assign({}, t22), { selected: false });
    });
    return e18.forEach((e19, t22) => {
      e19.label && (l19[t22].label = e19.label);
    }), ie(l19, o18, false);
  }
  __name(Ae, "Ae");
  function Ee({ groups: e18, options: t21, value: o18, children: l19 }) {
    const n21 = me({ options: t21, groups: e18 });
    if (n21) {
      if (o18) {
        return de(n21).length > 0 ? (console.warn("HDS Select component has both selected options and value set. Value is discarded"), n21) : Ae(n21, o18);
      }
      return n21;
    }
    return function(e19) {
      if (!e19 || "object" != typeof e19) return;
      const t22 = o7(e19);
      if (!t22.length) return [{ options: [] }];
      const o19 = "optgroup" === t22[0].type, l20 = /* @__PURE__ */ __name((e20) => {
        const t23 = e20 && "object" == typeof e20 ? e20.props : {};
        return pe({ label: String(t23.children), value: t23 && String(t23.value), selected: !(!t23 || !t23.selected), disabled: !(!t23 || !t23.disabled) });
      }, "l");
      return o19 ? t22.map((e20) => {
        const t23 = e20.props.children, o20 = t23 ? o7(t23).map(l20) : [], n22 = _e(String(e20.props.label));
        return o20.unshift(n22), { options: o20 };
      }) : [{ options: [_e(""), ...t22.map(l20)] }];
    }(l19) || [];
  }
  __name(Ee, "Ee");
  function Le(e18, t21, o18) {
    return { selectedOptions: ve(t21, e18), lastClickedOption: o18, textContent: void 0 };
  }
  __name(Le, "Le");
  var ye = `li[role="presentation"].${F.groupLabel}`;
  function je(t21) {
    const o18 = (({ option: e18, getOptionId: t22 }) => {
      const { label: o19 } = e18;
      return { className: r(F.listItem, F.groupLabel, F.focusableListItem), children: o19, tabIndex: -1, id: t22(e18), role: "presentation" };
    })(t21), { children: l19 } = o18, n21 = o(o18, ["children"]);
    return import_react29.default.createElement("li", Object.assign({}, n21), l19);
  }
  __name(je, "je");
  var De = `.${F.multiSelectListItem}:not(.${F.groupLabel})`;
  var Be = `div${De},li${De}`;
  function Te({ checkboxProps: e18, label: t21, checkboxId: o18 }) {
    return import_react29.default.createElement("div", { "aria-hidden": true, className: F.checkboxContainer }, import_react29.default.createElement(v, Object.assign({}, e18)), import_react29.default.createElement("label", { htmlFor: o18 }, t21));
  }
  __name(Te, "Te");
  function Me(t21) {
    const { label: o18, disabled: l19, checked: n21, indeterminate: i12, isInGroup: a21 } = t21, c6 = o(t21, ["label", "disabled", "checked", "indeterminate", "isInGroup"]), s21 = `${c6.id}-checkbox`, u10 = { indeterminate: i12, disabled: l19, id: s21, onChange: /* @__PURE__ */ __name((e18) => {
      e18.preventDefault();
    }, "onChange"), checked: n21, tabIndex: -1, className: F.checkbox };
    return a21 ? import_react29.default.createElement("div", Object.assign({}, c6, { key: o18 }), import_react29.default.createElement(Te, { checkboxProps: u10, checkboxId: s21, label: o18 })) : import_react29.default.createElement("li", Object.assign({}, c6), import_react29.default.createElement(Te, { checkboxProps: u10, checkboxId: s21, label: o18 }));
  }
  __name(Me, "Me");
  function Fe(e18) {
    const t21 = (({ option: e19, trigger: t22, getOptionId: o18, isInGroup: l19 }) => {
      const { label: n21, selected: r30, disabled: i12 } = e19;
      return Object.assign(Object.assign({ className: r(F.listItem, !i12 && F.selectableListItem, F.focusableListItem, F.multiSelectListItem, r30 && F.selected, i12 && F.disabledOption), children: null, disabled: i12, label: n21, checked: r30 }, l19 ? { role: "checkbox", "aria-checked": r30 } : { role: "option", "aria-selected": r30 }), { "aria-label": n21, "aria-disabled": i12, tabIndex: -1, onClick: /* @__PURE__ */ __name((o19) => {
        i12 || (o19.preventDefault(), t22({ id: z.listItem, type: R.click, payload: { originalEvent: o19, value: e19 } }));
      }, "onClick"), isInGroup: l19, id: o18(e19) });
    })(e18);
    return import_react29.default.createElement(Me, Object.assign({}, t21, { key: t21.label }));
  }
  __name(Fe, "Fe");
  var ze = (0, import_react29.memo)(Fe, ({ option: e18, trigger: t21 }, { option: o18, trigger: l19 }) => e18.selected === o18.selected && e18.disabled === o18.disabled && e18.label === o18.label && t21 === l19);
  var Re = { en: { assistive: "", clearButtonAriaLabel_one: 'Remove current selection "{{label}}".', clearButtonAriaLabel_multiple: "Remove all {{selectionCount}} selections.", error: "", label: "", noSelectedOptions: "0 selected options", placeholder: "Choose one", required: "Required.", selectedOptionsCount_zero: "{{selectionCount}} selected options", selectedOptionsCount_one: "{{selectionCount}} selected option", selectedOptionsCount_multiple: "{{selectionCount}} selected options", dropdownButtonAriaLabel: "", multiSelectGroupAriaLabel: "{{label}} (choose all)", tagsClearAllButton: "Clear all", tagsClearAllButtonAriaLabel_one: 'Clear the selected option "{{label}}".', tagsClearAllButtonAriaLabel_multiple: "Clear all {{selectionCount}} selected options.", tagsRemaining_one: "There is one selection remaining.", tagsRemaining_multiple: "There are {{selectionCount}} selections remaining.", tagRemoved: 'Selected option "{{value}}" removed.', tagRemoveSelectionAriaLabel: 'Remove selection "{{label}}".', tagsPartiallyHidden: "Some selected options are now hidden.", tagsShowAllButton: "Show all ({{selectionCount}})", tagsShowLessButton: "Show less", tagsShowAllButtonAriaLabel: "Show all {{selectionCount}} selected options.", tagsShowLessButtonAriaLabel: "Show less options.", filterLabel: "Filter", filterPlaceholder: "Type text to filter results with", filterClearButtonAriaLabel: "Clear filter", filteredWithoutResultsInfo: 'No options found for "{{value}}".', filterWithAnotherTerm: "Try a different term.", filterResults: 'Filtered results for "{{value}}".', filterResultsCount_one: "Found 1 option.", filterResultsCount_multiple: "Found {{numberIndicator}} options.", choiceCount_one: "One choice.", choiceCount_multiple: "{{numberIndicator}} choices.", searchLabel: "Search", searchPlaceholder: "Type text to search results with", searchClearButtonAriaLabel: "Clear search", searchedWithoutResultsInfo: 'No options found for "{{value}}".', searchWithAnotherTerm: "Try a different term.", searchErrorTitle: "We couldn't load the options.", searchErrorText: "Try again or if the problem persists contact support.", searching: 'Searching for "{{value}}".', searchResults_one: 'Found one option for search term "{{value}}".', searchResults_multiple: 'Found {{numberIndicator}} options for search term "{{value}}".' }, fi: { assistive: "", clearButtonAriaLabel_one: 'Poista nykyinen valinta "{{label}}".', clearButtonAriaLabel_multiple: "Poista kaikki {{selectionCount}} valintaa.", error: "", label: "", noSelectedOptions: "0 valittua vaihtoehtoa", placeholder: "Valitse yksi", required: "Pakollinen.", selectedOptionsCount_zero: "Ei yhtään valittua valittua", selectedOptionsCount_one: "{{selectionCount}} valittu vaihtoehto", selectedOptionsCount_multiple: "{{selectionCount}} valittua vaihtoehtoa", dropdownButtonAriaLabel: "", multiSelectGroupAriaLabel: "{{label}} (valitse kaikki)", tagsClearAllButton: "Tyhjennä kaikki", tagsClearAllButtonAriaLabel_one: 'Tyhjennä valittu vaihtoehto "{{label}}".', tagsClearAllButtonAriaLabel_multiple: "Tyhjennä kaikki {{selectionCount}} valitut vaihtoehdot.", tagsRemaining_one: "Yksi valinta jäljellä.", tagsRemaining_multiple: "Jäljellä on {{selectionCount}} valintoja.", tagRemoved: 'Valittu vaihtoehto "{{value}}" poistettu.', tagRemoveSelectionAriaLabel: 'Poista valinta "{{label}}".', tagsPartiallyHidden: "Jotkin valitut vaihtoehdot on nyt piilotettu.", tagsShowAllButton: "Näytä kaikki ({{selectionCount}})", tagsShowLessButton: "Näytä vähemmän", tagsShowAllButtonAriaLabel: "Näytä kaikki {{selectionCount}} valitut vaihtoehdot.", tagsShowLessButtonAriaLabel: "Näytä vähemmän vaihtoehtoja.", filterLabel: "Suodata", filterPlaceholder: "Anna teksti suodatusta varten", filterClearButtonAriaLabel: "Tyhjennä suodatukset", filteredWithoutResultsInfo: 'Vaihtoehtoja ei löytynyt suodatukselle "{{value}}".', filterWithAnotherTerm: "Kokeile toisia sanoja.", filterResults: 'Suodatetut tulokset termille "{{value}}".', filterResultsCount_one: "Löytyi 1 vaihtoehto.", filterResultsCount_multiple: "Löytyi {{numberIndicator}} vaihtoehtoa.", choiceCount_one: "Yksi vaihtoehto.", choiceCount_multiple: "{{numberIndicator}} vaihtoehtoa.", searchLabel: "Hae", searchPlaceholder: "Anna teksti hakua varten", searchClearButtonAriaLabel: "Tyhjennä haku", searchedWithoutResultsInfo: 'Vaihtoehtoja ei löytynyt haulla "{{value}}".', searchWithAnotherTerm: "Kokeile toisia hakusanoja.", searchErrorTitle: "Emme voineet ladata hakutuloksia.", searchErrorText: "Yritä uudelleen tai, jos ongelma jatkuu, ota yhteyttä asiakaspalveluun.", searching: 'Etsitään haulla "{{value}}".', searchResults_one: 'Löytyi yksi vaihtoehto hakusanalle "{{value}}".', searchResults_multiple: 'Löytyi {{numberIndicator}} vaihtoehtoa hakusanalle "{{value}}".' }, sv: { assistive: "", clearButtonAriaLabel_one: "Ta bort aktuellt val '{{label}}'.", clearButtonAriaLabel_multiple: "Ta bort alla {{selectionCount}} val.", error: "", label: "", noSelectedOptions: "0 valda alternativ", placeholder: "Välj ett", required: "Obligatoriskt.", selectedOptionsCount_zero: "{{selectionCount}} valda alternativ", selectedOptionsCount_one: "{{selectionCount}} valt alternativ", selectedOptionsCount_multiple: "{{selectionCount}} valda alternativ", dropdownButtonAriaLabel: "", multiSelectGroupAriaLabel: "{{etikett}} (välj alla)", tagsClearAllButton: "Rensa alla", tagsClearAllButtonAriaLabel_one: 'Rensa det valda alternativet "{{label}}".', tagsClearAllButtonAriaLabel_multiple: "Rensa alla {{selectionCount}} valda alternativ.", tagsRemaining_one: "Det finns ett val kvar.", tagsRemaining_multiple: "Det finns {{selectionCount}} val kvar.", tagRemoved: "Det valda alternativet '{{value}}' har tagits bort.", tagRemoveSelectionAriaLabel: "Ta bort valet '{{label}}'.", tagsPartiallyHidden: "Vissa valda alternativ är nu dolda.", tagsShowAllButton: "Visa alla ({{selectionCount}})", tagsShowLessButton: "Visa mindre", tagsShowAllButtonAriaLabel: "Visa alla {{selectionCount}} valda alternativ.", tagsShowLessButtonAriaLabel: "Visa färre alternativ.", filterLabel: "Filtrera", filterPlaceholder: "Skriv text för att filtrera resultat med", filterClearButtonAriaLabel: "Rensa filter", filteredWithoutResultsInfo: "Inga alternativ hittades för '{{value}}'.", filterWithAnotherTerm: "Försök med en annan term.", filterResults: 'Filtrerade resultat för "{{value}}".', filterResultsCount_one: "Hittade 1 alternativ.", filterResultsCount_multiple: "Hittade {{numberIndicator}} alternativ.", choiceCount_one: "Ett val.", choiceCount_multiple: "{{antalIndikator}} val.", searchLabel: "Sök", searchPlaceholder: "Skriv text för att söka resultat med", searchClearButtonAriaLabel: "Rensa sökning", searchedWithoutResultsInfo: "Inga alternativ hittades för '{{value}}'.", searchWithAnotherTerm: "Försök med en annan term.", searchErrorTitle: "Vi kunde inte ladda alternativen.", searchErrorText: "Försök igen eller kontakta support om problemet kvarstår.", searching: "Söker efter '{{value}}'.", searchResults_one: 'Hittade ett alternativ för söktermen "{{value}}".', searchResults_multiple: 'Hittade {{numberIndicator}} alternativ för söktermen "{{value}}".' } };
  var qe = /* @__PURE__ */ __name((e18, t21) => e18 ? -1 === e18.indexOf("{{") ? e18 : ((e19, t22) => e19.replace(/\{{(.*?)}}/g, (e20, o18) => {
    const l19 = o18 ? o18.trim() : "";
    return l19 ? t22[l19] : "";
  }))(e18, t21) : "", "qe");
  var Ge = /* @__PURE__ */ __name((e18) => ({ selectionCount: e18.selectedOptions.length, numberIndicator: "", label: "", value: "" }), "Ge");
  var Ze = /* @__PURE__ */ __name((e18) => "function" == typeof e18 ? e18 : ((e19) => {
    const t21 = e19.language || "fi", o18 = Object.assign(Object.assign({}, Re[t21]), e19);
    return (e20, t22) => {
      const l19 = o18[e20];
      return qe(l19, t22);
    };
  })(e18 || {}), "Ze");
  var Ne = /* @__PURE__ */ __name((e18, t21) => {
    const o18 = Object.assign({}, e18), l19 = t21.textProvider;
    t21.textProvider = (e19, t22) => {
      const n21 = o18[e19];
      return void 0 !== n21 ? qe(n21, t22) : l19(e19, t22);
    };
  }, "Ne");
  var $e = /* @__PURE__ */ __name((e18, t21, o18) => {
    t21.textContent || (t21.textContent = Ge(t21));
    const { textProvider: l19 } = t21;
    return l19(e18, Object.assign(Object.assign({}, t21.textContent), o18));
  }, "$e");
  var Pe = /* @__PURE__ */ __name((e18, t21, o18, l19) => {
    t21.textContent || (t21.textContent = Ge(t21));
    const n21 = Object.assign(Object.assign({}, t21.textContent), l19), r30 = ["_zero", "_one", "_multiple"], i12 = r30[n21[o18] || 0] || r30[2], { textProvider: a21 } = t21;
    return a21(`${e18}${i12}`, n21);
  }, "Pe");
  var Ke = /* @__PURE__ */ __name((e18, t21) => $e(e18, t21), "Ke");
  var We = /* @__PURE__ */ __name((e18, t21) => Ke(e18, t21.getMetaData()), "We");
  var He = `.${F.multiSelectListItem}.${F.groupLabel}`;
  var Ve = `div${He},li${He}`;
  function Qe(e18) {
    const t21 = (({ option: e19, trigger: t22, getOptionId: o18, isIntermediate: l19, isGroupDisabled: n21 }, r30) => {
      const { label: i12, disabled: a21 } = e19, c6 = $e("multiSelectGroupAriaLabel", r30.getMetaData(), { label: i12 });
      return { className: r(F.listItem, F.groupLabel, F.focusableListItem, F.selectableListItem, F.multiSelectListItem, n21 && F.disabledOption), label: i12, disabled: a21 || n21, indeterminate: l19, checked: e19.selected, "aria-checked": l19 ? "mixed" : e19.selected, role: "checkbox", "aria-disabled": a21 || n21, "aria-label": c6, tabIndex: -1, isInGroup: true, onClick: /* @__PURE__ */ __name((o19) => {
        o19.preventDefault(), n21 || t22({ id: z.listGroup, type: R.click, payload: { originalEvent: o19, value: e19 } });
      }, "onClick"), id: o18(e19) };
    })(e18, Y());
    return import_react29.default.createElement(Me, Object.assign({}, t21, { isInGroup: true }));
  }
  __name(Qe, "Qe");
  var Ue = `li.${F.singleSelectListItem}`;
  var Je = /* @__PURE__ */ __name(({ text: e18, selected: t21 }) => import_react29.default.createElement("span", { className: F.singleSelectListItemLabel }, e18, t21 ? import_react29.default.createElement("span", null, import_react29.default.createElement(s, { "aria-hidden": true })) : ""), "Je");
  function Xe(t21) {
    const o18 = (({ option: e18, trigger: t22, getOptionId: o19 }) => {
      const { label: l20, selected: n22, disabled: i12 } = e18;
      return { className: r(F.listItem, F.selectableListItem, F.singleSelectListItem, F.focusableListItem, n22 && F.selected, i12 && F.disabledOption), children: import_react29.default.createElement(Je, { text: l20, selected: n22 }), onClick: /* @__PURE__ */ __name((o20) => {
        e18.selected || t22({ id: z.listItem, type: R.click, payload: { originalEvent: o20, value: e18 } });
      }, "onClick"), role: "option", "aria-selected": n22, "aria-disabled": i12, tabIndex: -1, id: o19(e18) };
    })(t21), { children: l19 } = o18, n21 = o(o18, ["children"]);
    return import_react29.default.createElement("li", Object.assign({}, n21), l19);
  }
  __name(Xe, "Xe");
  var Ye = (0, import_react29.memo)(Xe, ({ option: e18, trigger: t21 }, { option: o18, trigger: l19 }) => e18.selected === o18.selected && e18.disabled === o18.disabled && e18.label === o18.label && t21 === l19);
  var et = /* @__PURE__ */ __name((e18, t21) => {
    const o18 = e18.getAttribute(t21);
    return !!o18 || "" === o18;
  }, "et");
  var tt = /* @__PURE__ */ __name((e18) => et(e18, "checked") || et(e18, "selected") || et(e18, "aria-checked") || et(e18, "aria-selected"), "tt");
  var ot = /* @__PURE__ */ __name((e18) => e18.getAttribute("id"), "ot");
  var lt = /* @__PURE__ */ __name((e18, t21) => !(!e18 || !t21) && (e18 !== t21 && e18.contains(t21)), "lt");
  var nt = /* @__PURE__ */ __name((e18, t21) => !(!t21 || !e18) && e18.parentElement === t21, "nt");
  var rt = /* @__PURE__ */ __name((e18, t21, o18 = true, l19 = false, n21) => {
    const r30 = n21 || (e18.children ? [...e18.children] : []), i12 = t21 ? r30.indexOf(t21) : -1, a21 = /* @__PURE__ */ __name((e19) => {
      const t22 = i12 + e19;
      return t22 < 0 ? o18 ? r30.length - 1 : 0 : t22 >= r30.length ? o18 ? 0 : r30.length - 1 : t22;
    }, "a"), c6 = a21(-1), s21 = a21(1);
    return { prev: l19 || c6 !== i12 ? r30[c6] : null, next: l19 || s21 !== i12 ? r30[s21] : null };
  }, "rt");
  var it = /* @__PURE__ */ __name((e18) => (0, import_lodash5.isElement)(e18) ? e18 : e18.nativeEvent instanceof Event ? e18.target : null, "it");
  function at() {
    const { getMetaData: e18 } = Y(), { refs: t21, elementIds: o18, listInputType: l19 } = e18(), n21 = !!l19, r30 = Object.entries(o18), i12 = /* @__PURE__ */ __name((e19) => {
      const t22 = o18[e19];
      return t22 ? document.getElementById(t22) : null;
    }, "i"), a21 = /* @__PURE__ */ __name((e19) => {
      const t22 = ot(e19);
      if (!t22) return null;
      const o19 = r30.findIndex(([, e20]) => e20 === t22);
      return o19 > -1 ? r30[o19][0] : null;
    }, "a"), c6 = /* @__PURE__ */ __name((e19) => {
      return o19 = t21.tagList, l20 = e19, !!(o19 && o19.current && l20) && lt(o19.current, l20);
      var o19, l20;
    }, "c"), s21 = /* @__PURE__ */ __name((e19) => {
      const o19 = t21.tagList.current;
      return nt(o19, e19) ? e19 : [...o19.children].find((t22) => t22 === e19 || lt(t22, e19)) || null;
    }, "s"), u10 = /* @__PURE__ */ __name(() => t21.list.current, "u"), d16 = /* @__PURE__ */ __name(() => {
      const e19 = `${ye},${Ue},${Be},${Ve}`;
      return [...u10().querySelectorAll(e19)];
    }, "d"), p5 = /* @__PURE__ */ __name(() => d16().filter(tt), "p"), _7 = /* @__PURE__ */ __name((e19) => {
      const t22 = Array.from((() => {
        const e20 = i12("list");
        if (!e20) return new NodeList();
        const t23 = `${ye},${Ve}`;
        return e20.querySelectorAll(t23);
      })());
      return !!t22.includes(e19) || t22.findIndex((t23) => t23.contains(e19)) > -1;
    }, "_"), m6 = { element: null, id: null }, g4 = /* @__PURE__ */ __name((e19, t22) => "list" === t22 && _7(e19) ? "listGroupLabel" : "list" === t22 && ((e20) => {
      if (!i12("list")) return false;
      const t23 = Array.from(d16());
      return !!t23.includes(e20) || t23.findIndex((t24) => t24.contains(e20)) > -1;
    })(e19) ? "listItem" : "tagList" === t22 && c6(e19) ? "tag" : t22, "g"), h5 = /* @__PURE__ */ __name((e19) => {
      if (m6.element === e19) return m6.id;
      const t22 = g4(e19, ((e20) => {
        let t23 = e20;
        for (; t23; ) {
          const e21 = a21(t23);
          if (e21) return t23 = null, e21;
          t23 = t23.parentElement;
        }
        return null;
      })(e19));
      return t22 ? (m6.element = e19, m6.id = t22, t22) : (m6.element = null, m6.id = null, null);
    }, "h");
    return { getEventElementType: /* @__PURE__ */ __name((e19) => {
      const t22 = it(e19), o19 = t22 ? h5(t22) : null;
      return { element: t22 && "tag" === o19 ? s21(t22) : t22, type: o19 };
    }, "getEventElementType"), getElementType: h5, getSelectableListItemSiblings: /* @__PURE__ */ __name((e19, t22 = true) => {
      const o19 = p5();
      return rt(u10(), e19, t22, false, o19);
    }, "getSelectableListItemSiblings"), getTagSiblings: /* @__PURE__ */ __name((e19, o19 = true) => {
      const l20 = t21.tagList.current;
      return rt(l20, e19, o19);
    }, "getTagSiblings"), getElementUsingActiveDescendant: /* @__PURE__ */ __name(() => i12(n21 ? "searchOrFilterInput" : "button"), "getElementUsingActiveDescendant"), getElementByKnownType: i12, getElementId: ot, getOptionListItem: /* @__PURE__ */ __name((e19, o19, l20) => {
      const n22 = function(e20, t22, o20) {
        return se(e20, !o20).findIndex(t22);
      }(e19, (e20) => e20.value === o19.value, l20);
      return -1 !== n22 && t21.list.current && d16()[n22] || null;
    }, "getOptionListItem"), getListItems: d16, getSelectableListItems: p5 };
  }
  __name(at, "at");
  var ct = /* @__PURE__ */ __name((e18) => /* @__PURE__ */ ((e19) => "button" === e19)(e18) || /* @__PURE__ */ ((e19) => "clearButton" === e19)(e18), "ct");
  var st = /* @__PURE__ */ __name((e18) => "list" === e18, "st");
  var ut = /* @__PURE__ */ __name((e18) => /* @__PURE__ */ ((e19) => "listItem" === e19)(e18) || /* @__PURE__ */ ((e19) => "listGroupLabel" === e19)(e18), "ut");
  var dt = "> div";
  var pt = /* @__PURE__ */ __name(({ option: e18, trigger: t21, disabled: o18 }, { getMetaData: l19 }) => {
    const n21 = o18 || e18.disabled;
    return { "aria-label": $e("tagRemoveSelectionAriaLabel", l19(), { label: e18.label }), className: r(F.tag, n21 && F.disabledTag), onClick: /* @__PURE__ */ __name((e19) => {
      e19.stopPropagation();
    }, "onClick"), multiline: true, onDelete: n21 ? void 0 : (o19) => {
      o19.stopPropagation(), t21({ id: z.tag, type: R.click, payload: { value: e18 } });
    }, children: e18.label };
  }, "pt");
  function _t(t21) {
    const o18 = pt(t21, Y()), { children: l19 } = o18, n21 = o(o18, ["children"]);
    return import_react29.default.createElement(d7, Object.assign({}, n21), l19);
  }
  __name(_t, "_t");
  function mt() {
    const { getMetaData: e18, updateMetaData: t21, getData: o18, trigger: l19 } = Y(), { getEventElementType: n21, getSelectableListItemSiblings: r30, getElementUsingActiveDescendant: i12, getElementId: a21, getElementType: c6 } = at(), d16 = ["tag", "tagList", "clearAllButton", "showAllButton"], p5 = (0, import_react29.useCallback)((e19, s21) => {
      const { onFocus: u10, onBlur: p6, open: _8 } = o18(), m6 = /* @__PURE__ */ __name((e20) => {
        const o19 = e20 && a21(e20) || "";
        t21({ activeDescendant: o19 });
        const l20 = i12();
        l20 && void 0 !== l20.getAttribute("aria-activedescendant") && l20.setAttribute("aria-activedescendant", o19);
      }, "m");
      if (e19 === R.blur && t11(s21) && (p6 && (p6(), l19({ id: z.generic, type: R.blur })), m6(null)), e19 === R.focus && r15(s21) && u10 && u10(), e19 === R.focus) {
        const { type: e20, element: o19 } = n21(s21);
        "list" === e20 ? (() => {
          const e21 = r30(void 0, false);
          e21.next && (m6(e21.next), e21.next.focus());
        })() : m6("listItem" === e20 || "listGroupLabel" === e20 ? o19 : null), e20 && d16.includes(e20) && _8 && ("tag" !== e20 && "tagList" !== e20 || t21({ focusTarget: "tag" }), l19({ id: z.generic, type: R.blur }));
      } else if (e19 === R.blur && _8) {
        const e20 = ((e21) => e21.relatedTarget ? e21.relatedTarget : null)(s21);
        (e20 ? c6(e20) : null) || l19({ id: z.generic, type: R.focusMovedToNonListElement });
      }
    }, [e18, t21, o18, l19]), _7 = (0, import_react29.useCallback)(() => {
      const { refs: o19, focusTarget: l20, activeDescendant: n22 } = e18(), r31 = /* @__PURE__ */ __name((e19) => {
        e19 && e19.current && e19.current.focus && e19.current.focus();
      }, "r");
      if (l20) {
        if ("tag" === l20) {
          r31({ current: o19.tagList.current && o19.tagList.current.querySelectorAll(`* ${dt}`)[0] });
        } else r31(o19[l20]);
        t21({ focusTarget: void 0 });
      }
      if (n22) {
        const e19 = document.getElementById(n22);
        e19 && e19 !== document.activeElement && e19.focus();
      }
    }, [e18, t21]);
    return (0, import_react29.useEffect)(() => {
      _7();
    }), { onFocus: /* @__PURE__ */ __name((e19) => {
      p5(R.focus, e19);
    }, "onFocus"), onBlur: /* @__PURE__ */ __name((e19) => {
      p5(R.blur, e19);
    }, "onBlur"), tabIndex: -1, ref: e18().refs.container };
  }
  __name(mt, "mt");
  var gt = /[a-z0-9äöå]/i;
  var ht = /* @__PURE__ */ __name((e18) => "Backspace" === e18.key, "ht");
  var bt = /* @__PURE__ */ __name((e18) => ["Enter", " "].includes(e18.key), "bt");
  function vt() {
    const { getEventElementType: e18, getSelectableListItemSiblings: t21, getOptionListItem: o18, getSelectableListItems: l19 } = at(), { trigger: n21, getData: r30, getMetaData: i12, updateMetaData: a21 } = Y(), c6 = (0, import_react29.useMemo)(() => /* @__PURE__ */ (() => {
      let e19 = "", t22 = 0, o19 = false;
      const l20 = /* @__PURE__ */ __name(() => (o19 = false, e19), "l"), n22 = /* @__PURE__ */ __name(() => t22 && Date.now() - t22 >= 300, "n"), r31 = /* @__PURE__ */ __name((l21) => {
        e19 = l21, t22 = Date.now(), o19 = false;
      }, "r"), i13 = /* @__PURE__ */ __name(() => {
        e19 = "", t22 = 0, o19 = false;
      }, "i"), a22 = /* @__PURE__ */ __name((e20, t23) => !!t23 && !!(ct(e20) || st(e20) || ut(e20)), "a");
      return { getValue: l20, update: r31, append: /* @__PURE__ */ __name((e20) => {
        r31(l20() + e20);
      }, "append"), clear: i13, clearIfNeeded: /* @__PURE__ */ __name((e20, t23) => {
        n22() && i13(), a22(e20, t23) || i13();
      }, "clearIfNeeded"), isExpired: n22, shouldUseInput: a22, hasPendingInput: /* @__PURE__ */ __name(() => !!o19 && (o19 = false, true), "hasPendingInput"), markPendingInput: /* @__PURE__ */ __name(() => {
        o19 = true;
      }, "markPendingInput") };
    })(), []), _7 = (0, import_react29.useRef)(null), m6 = (0, import_react29.useCallback)(() => {
      document.activeElement && document.activeElement.scrollIntoView({ block: "center" });
    }, []), g4 = (0, import_react29.useCallback)((e19) => {
      const { groups: t22, filterFunction: l20, multiSelect: n22 } = r30(), i13 = e19 ? Oe(t22, e19, l20 || ge, n22) : [];
      if (i13[0]) {
        const e20 = o18(t22, i13[0], n22);
        e20 && e20.focus && (e20.focus(), m6());
      }
    }, [m6, o18, ge, r30, Oe]), h5 = (0, import_react29.useCallback)((o19) => {
      const { type: s21, element: u10 } = e18(o19);
      if (!s21) return;
      if (_7.current && s21 !== _7.current) return o19.preventDefault(), void (_7.current = null);
      const d16 = /* @__PURE__ */ __name(() => {
        const e19 = l19()[0];
        e19 && (e19.focus(), m6());
      }, "d"), p5 = ((e19) => "ArrowDown" === e19.key)(o19), h6 = ((e19) => !(e19.key.length > 1) && gt.test(e19.key))(o19), b7 = !p5 && ((e19) => "ArrowUp" === e19.key)(o19), v4 = !b7 && !p5 && bt(o19), { listInputType: f2, refs: S2 } = i12(), x = !!f2, C2 = r30().open;
      c6.clearIfNeeded(s21, h6);
      if (!p5 && !b7 || !(ct(s21) || st(s21) || ut(s21)) || o19.preventDefault(), ((e19) => "Escape" === e19.key)(o19) && C2) n21({ id: z.generic, type: R.close });
      else if (((e19) => "Home" === e19.key)(o19) && C2) d16();
      else if (((e19) => "End" === e19.key)(o19) && C2) (() => {
        const e19 = l19().pop();
        e19 && (e19.focus(), m6());
      })();
      else if ("searchOrFilterInput" === s21 && p5) d16();
      else {
        if (ut(s21) && (p5 || b7)) {
          const e19 = t21(u10);
          return p5 && e19.next ? e19.next.focus() : b7 && e19.prev && e19.prev.focus(), void m6();
        }
        if (ut(s21) && v4 && u10) return u10.click(), void m6();
        if (st(s21) && p5 && x) d16();
        else if (x && (st(s21) || ut(s21)) && (h6 || ht(o19))) {
          const e19 = S2.searchOrFilterInput;
          e19 && e19.current && (ht(o19) || (e19.current.value = o19.key), e19.current.focus());
        } else {
          if (ct(s21)) {
            if (p5 && !C2) return void n21({ id: z.selectedOptions, type: R.click });
            if (h6 && (C2 || n21({ id: z.selectedOptions, type: R.click }), f2)) return c6.append(o19.key), void a21({ [f2]: c6.getValue() });
          }
          if (c6.shouldUseInput(s21, h6) && !x) {
            if (c6.append(o19.key), !C2) return void c6.markPendingInput();
            g4(c6.getValue());
          }
        }
      }
    }, [n21, r30, i12, a21]), b6 = (0, import_react29.useCallback)((t22) => {
      const { type: o19 } = e18(t22);
      _7.current = o19, o19 && ut(o19) && bt(t22) && t22.preventDefault();
    }, [e18]);
    return (0, import_react29.useEffect)(() => {
      r30().open && c6.hasPendingInput() && g4(c6.getValue());
    }), { onKeyUp: h5, onKeyDown: b6 };
  }
  __name(vt, "vt");
  function ft(e18) {
    const t21 = "--checkbox-", o18 = "--text-", l19 = "--tag-", n21 = "--show-all-", r30 = "--clear-all-", i12 = e18 ? Object.keys(e18) : [], a21 = { root: void 0, checkbox: void 0, textInput: void 0, tag: void 0, showAllButton: void 0, clearAllButton: void 0 };
    if (!i12.length) return a21;
    return i12.forEach((i13) => {
      const [c6, s21] = ((e19) => e19.startsWith(t21) ? ["checkbox", t21] : e19.startsWith(o18) ? ["textInput", o18] : e19.startsWith(l19) ? ["tag", l19] : e19.startsWith(n21) ? ["showAllButton", n21] : e19.startsWith(r30) ? ["clearAllButton", r30] : ["root", void 0])(i13);
      ((t22, o19, l20) => {
        a21[t22] || (a21[t22] = {});
        const n22 = l20 ? o19.replace(l20, "--") : o19;
        a21[t22][n22] = `${e18[o19]}`;
      })(c6, i13, s21);
    }), a21;
  }
  __name(ft, "ft");
  var St = /* @__PURE__ */ __name((t21) => {
    const { theme: o18 } = t21, l19 = o(t21, ["theme"]);
    !function(e18) {
      const { updateMetaData: t22 } = Y(), o19 = ft(e18), l20 = d(F.root, o19 ? o19.root : void 0), n22 = d(F.root, o19 ? o19.checkbox : void 0, ` .${F.checkbox}`), r30 = d(F.root, o19 ? o19.textInput : void 0, ` .${F.searchOrFilterInput}`), i13 = d(F.root, o19 ? o19.tag : void 0, ` .${F.tag}`), a22 = d(F.root, o19 ? o19.clearAllButton : void 0, ` .${F.clearAllButton}`), c7 = { root: l20, checkbox: n22, tag: i13, textInput: r30, showAllButton: d(F.root, o19 ? o19.showAllButton : void 0, ` .${F.showAllButton}`), clearAllButton: a22 };
      t22({ themes: c7 });
    }(o18);
    const n21 = Y(), i12 = mt(), a21 = vt(), c6 = function(e18, { getMetaData: t22 }) {
      const { elementIds: o19, themes: l20 } = t22(), n22 = l20.root, r30 = l20.checkbox, i13 = l20.tag, a22 = l20.textInput, c7 = l20.showAllButton, s22 = l20.clearAllButton;
      return Object.assign(Object.assign({}, e18), { id: o19.container, className: r(e18.className, F.wrapper, F.root, n22, r30, i13, a22, c7, s22) });
    }(l19, n21), { children: s21 } = c6, u10 = o(c6, ["children"]);
    return import_react29.default.createElement("div", Object.assign({}, u10, i12, a21), s21);
  }, "St");
  var xt = /* @__PURE__ */ __name(() => {
    const e18 = ((e19) => {
      const { getData: t21, getMetaData: o18 } = e19, { required: l19 } = t21(), { elementIds: n21, tooltip: r30 } = o18();
      return { required: l19, label: We("label", e19), inputId: n21.button, id: n21.label, tooltip: r30 };
    })(Y());
    return e18.label ? import_react29.default.createElement(n5, Object.assign({}, e18)) : null;
  }, "xt");
  var Ct = /* @__PURE__ */ __name((e18, t21) => {
    const { id: o18, type: l19, payload: n21 } = e18, r30 = t21.getData(), i12 = { didSearchChange: false, didSelectionsChange: false, didDataChange: false };
    if (r30.disabled) return i12;
    const a21 = /* @__PURE__ */ __name((e19) => {
      if (r30.open === e19) return false;
      const o19 = Date.now();
      return !(o19 - t21.getMetaData().lastToggleCommand < 200) && (t21.updateData({ open: e19 }), t21.updateMetaData({ lastToggleCommand: o19 }), e19 || t21.updateMetaData({ activeDescendant: void 0 }), true);
    }, "a"), c6 = /* @__PURE__ */ __name((e19) => {
      t21.updateMetaData({ focusTarget: e19 });
    }, "c"), s21 = /* @__PURE__ */ __name((e19, o19) => {
      t21.updateData({ groups: e19 }), t21.updateMetaData(Le(e19, t21.getMetaData().selectedOptions, o19));
    }, "s");
    if ($(o18, l19)) {
      const e19 = !r30.open, o19 = a21(e19);
      return o19 && e19 && c6(t21.getMetaData().listInputType ? "searchOrFilterInput" : "list"), Object.assign(Object.assign({}, i12), { didDataChange: o19 });
    }
    if (P(o18, l19)) {
      const e19 = n21 && n21.value;
      if (!e19) return i12;
      if (s21(ae(r30.groups, Object.assign(Object.assign({}, e19), { selected: !e19.selected }), r30.multiSelect), e19), a21(o18 !== z.tag && r30.multiSelect), o18 !== z.listItem || r30.multiSelect) {
        if (q(o18)) {
          const o19 = t21.getMetaData();
          c6(!!o19.selectedOptions.length ? "tag" : "button");
          const l20 = $e("tagRemoved", o19, { value: e19.label }), n22 = Pe("tagsRemaining", o19, "selectionCount");
          we(Ce(z.tag, `${l20} ${n22}`), t21);
        }
      } else c6("button");
      return Object.assign(Object.assign({}, i12), { didSelectionsChange: true, didDataChange: true });
    }
    if (u10 = o18, G(l19) && u10 === z.listGroup) {
      const e19 = n21 && n21.value;
      if (!e19) return i12;
      const t22 = Object.assign(Object.assign({}, e19), { selected: !e19.selected }), o19 = function(e20, t23) {
        if (!t23.isGroupLabel) throw new Error("Use updateOptionInGroup to update non-groupLabel options.");
        if (!t23.visible) throw new Error("Cannot click an group label that is not visible (without a label)");
        const o20 = oe(e20, t23);
        return o20 < 0 ? e20 : le(e20, (e21, l20, n22, r31) => r31 !== o20 ? Object.assign({}, e21) : e21.visible && !e21.disabled ? Object.assign(Object.assign({}, e21), { selected: t23.selected }) : Object.assign({}, e21));
      }(r30.groups, t22);
      return s21(o19, e19), Object.assign(Object.assign({}, i12), { didSelectionsChange: true, didDataChange: true });
    }
    var u10;
    if (K(o18, l19)) {
      return s21(ce(r30.groups)), c6("button"), Object.assign(Object.assign({}, i12), { didSelectionsChange: true, didDataChange: true });
    }
    if (((e19, t22) => Z(t22) && e19 === z.filter)(o18, l19)) {
      const e19 = n21 && n21.value || "";
      return t21.updateMetaData({ filter: e19 }), t21.updateData({ groups: he(r30.groups, e19, r30.filterFunction) }), Object.assign(Object.assign({}, i12), { didDataChange: true });
    }
    if (((e19, t22) => G(t22) && e19 === z.showAllButton)(o18, l19)) {
      const { showAllTags: e19 } = t21.getMetaData();
      if (t21.updateMetaData({ showAllTags: !e19 }), e19) {
        we(Ce(z.tag, $e("tagsPartiallyHidden", t21.getMetaData())), t21);
      } else c6("tag");
      return Object.assign(Object.assign({}, i12), { didDataChange: true });
    }
    if ((((e19, t22) => N(e19) && t22 === R.outSideClick)(o18, l19) || ((e19, t22) => N(e19) && t22 === R.close)(o18, l19)) && a21(false)) return c6("button"), Object.assign(Object.assign({}, i12), { didDataChange: true });
    if (((e19, t22) => N(e19) && t22 === R.focusMovedToNonListElement)(o18, l19) && r30.open) return Object.assign(Object.assign({}, i12), { didDataChange: a21(false) });
    if (((e19, t22) => e19 === z.searchResult && t22 === R.success)(o18, l19)) return t21.updateMetaData({ isSearching: false, hasSearchError: false }), t21.updateData({ groups: be(null == n21 ? void 0 : n21.value, r30.groups) }), Object.assign(Object.assign({}, i12), { didDataChange: true });
    if (((e19, t22) => Z(t22) && e19 === z.search)(o18, l19)) {
      const e19 = n21 && n21.value || "";
      return t21.updateMetaData({ search: e19, hasSearchError: false }), e19 || t21.updateData({ groups: be({}, r30.groups) }), Object.assign(Object.assign({}, i12), { didSearchChange: true, didDataChange: true });
    }
    return W(o18, l19) ? (t21.updateMetaData({ isSearching: false, hasSearchError: true }), t21.updateData({ groups: be({}, r30.groups) }), Object.assign(Object.assign({}, i12), { didDataChange: true })) : H(o18, l19) && r30.open ? Object.assign(Object.assign({}, i12), { didDataChange: a21(false) }) : i12;
  }, "Ct");
  var wt = (0, import_lodash5.debounce)((e18, t21) => {
    if (!t21) return;
    const { cancelCurrentSearch: o18, search: l19, selectedOptions: n21 } = e18.getMetaData();
    if (o18 && o18(), !l19) return;
    const [r30, i12] = ((e19, t22, o19, l20) => {
      let n22 = false;
      return [() => {
        n22 = true;
      }, new Promise((r31) => {
        e19(t22, o19, l20).then((e20) => {
          r31(n22 ? { id: z.searchResult, type: R.cancelled } : { id: z.searchResult, type: R.success, payload: { value: e20 } });
        }).catch(() => {
          r31({ id: z.searchResult, type: R.error });
        });
      })];
    })(t21, l19, n21, e18.getData());
    e18.updateMetaData({ cancelCurrentSearch: r30 }), e18.asyncRequestWithTrigger(i12);
  }, 300);
  var Ot = /* @__PURE__ */ __name((e18, t21) => {
    const { updateData: o18, updateMetaData: l19, getData: n21, getMetaData: r30 } = t21, { didSearchChange: i12, didSelectionsChange: a21, didDataChange: c6 } = Ct(e18, t21), s21 = n21(), { onSearch: u10, onChange: d16, onClose: p5, multiSelect: _7, open: m6 } = s21, g4 = _7 && ((e19) => {
      const t22 = ["cancelled", "close", "clearButton", "clearAllButton", "tag", "selectedOptions", "focusMovedToNonListElement"];
      return t22.includes(e19.type || "") || t22.includes(e19.id || "");
    })(e18) && !m6;
    let h5 = false;
    if (g4 && p5) {
      const e19 = p5(de(s21.groups), void 0, s21);
      if (e19) {
        const { groups: n22, options: i13, invalid: a22, texts: c7 } = e19;
        if (n22 || i13) {
          const n23 = me(e19) || [];
          o18({ groups: n23 }), l19(Le(n23, t21.getMetaData().selectedOptions, void 0));
        }
        void 0 !== a22 && a22 !== s21.invalid && (o18({ invalid: a22 }), h5 = true), c7 && (Ne(c7, r30()), h5 = true);
      }
    }
    if (i12 && u10 && (t21.updateMetaData({ isSearching: !!r30().search }), wt(t21, u10)), a21) {
      const { lastClickedOption: e19 } = r30(), n22 = null == d16 ? void 0 : d16(de(s21.groups), e19, s21);
      let i13 = false;
      if (n22) {
        const { groups: a22, options: c7, invalid: u11, texts: d17 } = n22;
        if (a22 || c7) {
          const r31 = me(n22) || [];
          o18({ groups: r31 }), l19(Le(r31, t21.getMetaData().selectedOptions, e19)), i13 = true;
        }
        void 0 !== u11 && u11 !== s21.invalid && (o18({ invalid: u11 }), i13 = true), d17 && (Ne(d17, r30()), i13 = true);
      }
      if (i13) return true;
    }
    return c6 || h5;
  }, "Ot");
  function kt(o18) {
    var { children: l19 } = o18, n21 = o(o18, ["children"]);
    const { initialData: i12, metaData: a21, onChange: c6, onReset: _7 } = n21, m6 = (0, import_react29.useMemo)(() => c6, []), g4 = (0, import_react29.useRef)({ dataStorage: void 0, metaDataStorage: void 0 }), h5 = (0, import_react29.useCallback)((e18) => {
      const t21 = e18 ? g4.current && g4.current.dataStorage : g4.current && g4.current.metaDataStorage;
      return t21 ? t21.get() : void 0;
    }, []), b6 = (0, import_react29.useMemo)(() => {
      const e18 = h5(true);
      return V(_7 && e18 ? _7({ previousData: e18, currentData: i12 }) : i12);
    }, [i12]), v4 = (0, import_react29.useMemo)(() => {
      const e18 = h5(false);
      return V(_7 && e18 ? _7({ previousMetaData: e18, currentMetaData: a21 }) : a21);
    }, [a21]);
    g4.current = _7 ? { dataStorage: b6, metaDataStorage: v4 } : void 0;
    const f2 = o6(), S2 = (0, import_react29.useRef)(false), x = (0, import_react29.useMemo)(() => {
      const e18 = U(b6, v4);
      return e18.trigger = (t21) => {
        m6(t21, e18) && f2();
      }, e18.asyncRequestWithTrigger = (o19) => e(this, void 0, void 0, function* () {
        const [t21, l20] = yield await_to_js_es5_default(o19);
        t21 || S2.current || e18.trigger(l20);
      }), e18;
    }, [b6, v4, f2, m6]);
    return (0, import_react29.useEffect)(() => () => {
      S2.current = true;
    }, []), import_react29.default.createElement(J.Provider, { value: { dataStorage: b6, metaDataStorage: v4, dataHandlers: x } }, l19);
  }
  __name(kt, "kt");
  var It = /* @__PURE__ */ __name((e18, t21 = 200) => {
    const o18 = (0, import_react29.useRef)(null), n21 = (0, import_react29.useRef)(null), r30 = (0, import_react29.useMemo)(() => (0, import_lodash5.debounce)((t22) => e18(t22[0]), t21), [e18, t21]), i12 = (0, import_react29.useCallback)(() => {
      o18.current && (o18.current.disconnect(), o18.current = null), r30.cancel();
    }, [o18]), a21 = (0, import_react29.useCallback)((e19) => {
      i12(), o18.current = new ResizeObserver(r30), o18.current.observe(e19);
    }, [i12, o18, r30]), c6 = (0, import_react29.useCallback)((e19) => (n21.current !== e19 && (e19 ? a21(e19) : i12(), n21.current = e19), n21), [i12, n21, a21]);
    return (0, import_react29.useEffect)(() => () => {
      i12();
    }, [i12]), [c6, i12];
  }, "It");
  var At = /* @__PURE__ */ __name((e18, t21 = "both") => {
    const o18 = e18.getBoundingClientRect(), l19 = /* @__PURE__ */ __name((e19) => e19.top >= o18.top && e19.bottom <= o18.bottom, "l"), n21 = /* @__PURE__ */ __name((e19) => e19.left >= o18.left && e19.right <= o18.right, "n"), r30 = /* @__PURE__ */ __name((e19) => "vertical" === t21 ? l19(e19) : ("horizontal" === t21 || l19(e19)) && n21(e19), "r");
    let i12 = e18.lastElementChild, a21 = e18.children.length - 1;
    for (; i12 && a21 >= 0; ) {
      if (r30(i12.getBoundingClientRect())) break;
      i12 = i12.previousElementSibling, a21 -= 1;
    }
    return a21;
  }, "At");
  var Et = /* @__PURE__ */ __name((e18) => {
    const { getData: t21, getMetaData: o18, trigger: l19 } = e18, { disabled: n21, open: r30, invalid: i12, multiSelect: a21, groups: c6, clearable: s21, required: u10 } = t21(), d16 = o18(), { icon: p5, refs: _7, elementIds: m6, selectedOptions: g4, listInputType: h5, activeDescendant: b6 } = d16, { placeholder: v4, label: S2, ariaLabel: x, errorText: C2, assistiveText: w, noSelectedOptions: O2, selectedOptionsCount: k, requiredText: I2 } = ((e19) => {
      const t22 = /* @__PURE__ */ __name((t23) => "selectedOptionsCount" === t23 ? Pe(t23, e19, "selectionCount") : $e(t23, e19), "t");
      return { placeholder: t22("placeholder") || "", label: t22("label"), ariaLabel: t22("dropdownButtonAriaLabel"), assistiveText: t22("assistive"), errorText: t22("error"), noSelectedOptionsText: t22("noSelectedOptions"), selectedOptionsCount: t22("selectedOptionsCount"), noSelectedOptions: t22("noSelectedOptions"), requiredText: t22("required") };
    })(d16), A2 = !!h5;
    return Object.assign(Object.assign({ "aria-controls": m6.selectionsAndListsContainer, "aria-expanded": r30, "aria-haspopup": "listbox", "aria-invalid": i12, "aria-label": (() => {
      const e19 = S2 || x, t22 = e19 ? [`${e19}.`] : [], { length: o19 } = g4;
      return o19 ? (t22.push(k), g4[0] && t22.push(`"${g4[0].label}"`), g4[1] && t22.push(`and "${g4[1].label}"`), o19 > 2 && t22.push(`and ${o19 - 2} other options.`)) : t22.push(`${v4}. ${O2}.`), u10 && t22.push(I2), w && t22.push(w), i12 && C2 && t22.push(C2), t22.map((e20) => "." === e20.charAt(e20.length - 1) ? e20 : `${e20}.`).join(" ");
    })(), "aria-activedescendant": A2 ? void 0 : b6, buttonRef: _7.button, className: r(F.dropdownButton, F.selectedOptions, !g4.length && F.placeholder, n21 && F.disabledButton, !a21 && F.singleSelect, s21 && F.clearable), "aria-disabled": n21, icon: p5, id: m6.button, options: g4, optionClassName: F.dropdownButtonOption, placeholder: v4 }, ee({ id: z.selectedOptions, type: R.click, trigger: l19 })), (() => {
      if (A2) return { role: void 0, "aria-controls": m6.searchOrFilterInput, "aria-haspopup": "dialog" };
      const e19 = ue(c6).length > 0, t22 = a21 && e19;
      return { role: "combobox", "aria-controls": m6.list, "aria-haspopup": t22 ? "dialog" : "listbox" };
    })());
  }, "Et");
  function Lt() {
    const t21 = Y(), { multiSelect: o18 } = t21.getData(), l19 = Et(t21), { options: n21, placeholder: i12, buttonRef: a21, optionClassName: c6, icon: u10 } = l19, d16 = o(l19, ["options", "placeholder", "buttonRef", "optionClassName", "icon"]), p5 = (0, import_react29.useCallback)(() => {
      o18 && function(e18) {
        const t22 = e18.current, o19 = [F.spaceForOneDigit, F.spaceForTwoDigits, F.spaceForThreeDigits, F.spaceForFourDigits], l20 = t22 && t22.querySelector("* > div");
        if (l20) {
          l20.childNodes.forEach((e20) => e20 && e20.classList && e20.classList.remove(F.lastVisible));
          const e19 = l20.childNodes.length, n22 = String(e19 - 1).length;
          t22.classList.remove(...o19), e19 > 1 && t22.classList.add(o19[n22 - 1]);
          const r30 = At(l20, "vertical"), i13 = l20.children.length - 1 - r30;
          if (i13 < 1 || -1 === r30) t22.classList.remove(F.hasHiddenItems);
          else {
            t22.classList.add(F.hasHiddenItems);
            const e20 = t22.querySelector("span.count");
            e20 && (e20.innerHTML = `+${i13}`), l20.childNodes[r30].classList.add(F.lastVisible);
          }
        }
      }(a21);
    }, [a21, o18]), [m6] = It(p5);
    (0, import_react29.useLayoutEffect)(() => {
      p5();
    });
    const g4 = n21.length ? n21.map((e18) => import_react29.default.createElement("span", { className: c6, key: e18.value }, e18.label)) : import_react29.default.createElement("span", { className: c6, "data-testid": "placeholder" }, i12);
    return import_react29.default.createElement("button", Object.assign({ type: "button" }, d16, { ref: a21 }), u10 && import_react29.default.createElement("span", { key: "icon", className: F.buttonIcon }, u10), import_react29.default.createElement("div", { className: F.labels, key: "labels", "aria-hidden": true, ref: m6 }, g4), n21.length > 1 && import_react29.default.createElement("span", { className: F.count, key: "count", "aria-hidden": true }, import_react29.default.createElement("span", { className: "count", key: "number" }, "+1")), import_react29.default.createElement("div", { className: r(F.arrowAndSpaceForClearButton, F.icon) }, import_react29.default.createElement(o2, { className: F.angleIcon, "aria-hidden": true })));
  }
  __name(Lt, "Lt");
  var yt = /* @__PURE__ */ __name(({ getData: e18, getMetaData: t21, trigger: o18 }) => {
    const l19 = t21(), { elementIds: n21, selectedOptions: r30 } = l19, { disabled: i12, clearable: a21 } = e18();
    return r30.length && a21 ? Object.assign(Object.assign({ className: r(F.dropdownButton, F.withVisibleFocus, F.icon, F.clearButton, i12 && F.disabledButton) }, ee({ id: z.clearButton, type: R.click, trigger: o18 })), { id: n21.clearButton, disabled: i12, "aria-label": Pe("clearButtonAriaLabel", l19, "selectionCount", { label: r30[0].label }) }) : null;
  }, "yt");
  function jt() {
    const e18 = yt(Y());
    return e18 ? import_react29.default.createElement("button", Object.assign({ type: "button" }, e18), import_react29.default.createElement(s3, { className: F.angleIcon, "aria-hidden": true })) : null;
  }
  __name(jt, "jt");
  function Dt(e18) {
    const t21 = function(e19) {
      return Object.assign(Object.assign({}, e19), { className: r(F.selectedOptionsContainer) });
    }(e18);
    return import_react29.default.createElement("div", Object.assign({}, t21), import_react29.default.createElement(Lt, null), import_react29.default.createElement(jt, null));
  }
  __name(Dt, "Dt");
  var Bt = /* @__PURE__ */ __name((t21) => {
    const o18 = function(e18, { getData: t22, getMetaData: o19 }) {
      const { invalid: l20, open: n22 } = t22(), { refs: r30 } = o19();
      return Object.assign(Object.assign({}, e18), { ref: r30.selectionsAndListsContainer, className: r(F.selectAndListContainer, l20 && F.invalid, n22 && F.open) });
    }(t21, Y()), { children: l19 } = o18, n21 = o(o18, ["children"]);
    return import_react29.default.createElement("div", Object.assign({}, n21), l19);
  }, "Bt");
  var Tt = /* @__PURE__ */ __name((e18) => {
    const t21 = ne(e18);
    return t21 < 1 && t21 > 0;
  }, "Tt");
  function Mt(t21) {
    const { children: o18 } = t21, l19 = o(t21, ["children"]);
    return import_react29.default.createElement("div", Object.assign({}, l19), o18);
  }
  __name(Mt, "Mt");
  var Ft = /* @__PURE__ */ __name((e18) => {
    const t21 = xe(e18);
    return { role: "group", "aria-label": t21 && t21.label || "", key: t21 && t21.label };
  }, "Ft");
  var zt = /* @__PURE__ */ __name(({ groups: e18, getOptionId: t21, trigger: o18 }) => e18.map((e19) => {
    const l19 = Ft(e19), n21 = ((e20, { trigger: t22, getOptionId: o19 }) => e20.options.map((l20) => {
      return l20.visible ? l20.isGroupLabel ? import_react29.default.createElement(Qe, { option: l20, trigger: t22, getOptionId: o19, isIntermediate: Tt(e20), isGroupDisabled: (n22 = e20, !n22.options.some((e21) => !e21.isGroupLabel && !e21.disabled)), key: l20.value }) : import_react29.default.createElement(ze, { option: l20, trigger: t22, isInGroup: true, key: l20.value, getOptionId: o19 }) : null;
      var n22;
    }).filter((e21) => !!e21))(e19, { trigger: o18, getOptionId: t21 });
    return n21.length ? import_react29.default.createElement(Mt, Object.assign({}, l19, { key: l19["aria-label"] }), n21) : null;
  }), "zt");
  var Rt = /* @__PURE__ */ __name((e18) => {
    const { getData: t21, getMetaData: o18 } = e18, { groups: l19 } = t21(), n21 = o18(), { elementIds: r30, refs: i12, listInputType: a21 } = n21, c6 = !!a21, s21 = ue(l19).length > 0, u10 = c6 || s21, d16 = !c6 && s21, p5 = Se(l19), _7 = We("label", e18);
    return { "aria-label": (() => {
      if (d16) return;
      const e19 = Pe("choiceCount", n21, "numberIndicator", { numberIndicator: p5 });
      return u10 ? e19 : `${_7}. ${e19}`;
    })(), id: r30.list, className: r(F.list, F.shiftOptions, F.multiSelectList), ref: i12.list, role: (() => {
      if (!d16) return u10 ? "dialog" : "listbox";
    })(), tabIndex: -1 };
  }, "Rt");
  function qt() {
    const e18 = Y(), { getData: t21, getMetaData: o18, trigger: l19 } = e18, { open: n21, groups: i12 } = t21(), { isSearching: a21, getOptionId: c6 } = o18(), s21 = Rt(e18), u10 = n21 && !a21 ? zt({ groups: i12, getOptionId: c6, trigger: l19 }) : [];
    return import_react29.default.createElement("div", Object.assign({}, s21), n21 ? u10 : null);
  }
  __name(qt, "qt");
  var Gt = /* @__PURE__ */ __name(({ groups: e18, multiSelect: t21, getOptionId: o18, trigger: l19 }) => se(e18, false).map((e19) => {
    if (!e19.visible) return null;
    const n21 = { option: e19, trigger: l19, key: e19.value, getOptionId: o18 };
    return t21 ? import_react29.default.createElement(ze, Object.assign({}, n21, { isInGroup: false })) : e19.isGroupLabel ? import_react29.default.createElement(je, Object.assign({}, n21)) : import_react29.default.createElement(Ye, Object.assign({}, n21));
  }).filter((e19) => !!e19), "Gt");
  function Zt({ refs: e18, elementIds: t21, multiSelect: o18 }) {
    return { className: r(F.list), ref: e18.list, id: t21.list, role: "listbox", "aria-multiselectable": o18, tabIndex: -1 };
  }
  __name(Zt, "Zt");
  function Nt() {
    const { getData: e18, trigger: t21, getMetaData: o18 } = Y(), { open: l19, groups: n21, multiSelect: i12 } = e18(), { isSearching: a21, getOptionId: c6, refs: s21, elementIds: u10 } = o18(), d16 = Zt({ refs: s21, elementIds: u10, multiSelect: i12 }), p5 = l19 && !a21 ? Gt({ groups: n21, trigger: t21, multiSelect: i12, getOptionId: c6 }) : null;
    return import_react29.default.createElement("ul", Object.assign({}, d16), p5);
  }
  __name(Nt, "Nt");
  function $t() {
    const { getData: e18, trigger: t21, getMetaData: o18 } = Y(), { open: l19, groups: n21, multiSelect: i12 } = e18(), { isSearching: a21, getOptionId: c6, refs: s21, elementIds: u10 } = o18(), d16 = Zt({ refs: s21, elementIds: u10, multiSelect: i12 }), p5 = l19 && !a21 ? (({ groups: e19, getOptionId: t22, trigger: o19 }) => e19.map((e20) => {
      const l20 = Object.assign(Object.assign({}, Ft(e20)), { className: r(F.list, F.shiftOptions) }), n22 = Gt({ groups: [e20], trigger: o19, getOptionId: t22, multiSelect: false });
      return import_react29.default.createElement("ul", Object.assign({}, l20, { key: l20["aria-label"] }), n22);
    }))({ groups: n21, trigger: t21, getOptionId: c6 }) : null;
    return import_react29.default.createElement("div", Object.assign({}, d16), p5);
  }
  __name($t, "$t");
  var Pt = /* @__PURE__ */ __name(({ forMultiSelectWithGroups: e18 }) => {
    const t21 = Y(), { getData: o18, getMetaData: l19, trigger: n21 } = t21, { open: i12, groups: a21, multiSelect: c6 } = o18(), { isSearching: p5, getOptionId: _7, refs: m6, elementIds: g4 } = l19(), h5 = se(a21), b6 = i12 && !p5, v4 = function(e19) {
      const t22 = o6(), o19 = Array.isArray(e19) ? e19.length : 0, l20 = (0, import_react29.useMemo)(() => ({ max: o19, pos: 100, chunkSize: 100 }), [o19]), n22 = o19 ? e19.slice(0, l20.pos) : [], r30 = (0, import_react29.useCallback)(() => {
        const { max: e20, pos: o20, chunkSize: n23 } = l20;
        o20 >= e20 || (l20.pos = Math.min(o20 + n23, e20), window.requestAnimationFrame(t22));
      }, [l20]);
      return (0, import_react29.useEffect)(() => () => {
        l20.max = 0;
      }, []), (0, import_react29.useEffect)(() => {
        r30();
      }), n22;
    }(b6 ? h5 : []), f2 = /* @__PURE__ */ __name(() => {
      let e19 = v4.length;
      return b6 ? a21.map((t22) => {
        const o19 = t22.options.filter((e20) => e20.visible), l20 = Math.min(o19.length, e19);
        return e19 -= l20, { options: l20 > 0 ? o19.slice(0, l20 - 1) : [] };
      }) : [];
    }, "f");
    if (e18) {
      const e19 = Rt(t21), o19 = b6 ? zt({ groups: f2(), getOptionId: _7, trigger: n21 }) : null;
      return import_react29.default.createElement("div", Object.assign({}, e19), o19);
    }
    const S2 = Zt({ refs: m6, elementIds: g4, multiSelect: c6 }), x = b6 ? Gt({ groups: f2(), trigger: n21, multiSelect: c6, getOptionId: _7 }) : null;
    return import_react29.default.createElement("ul", Object.assign({}, S2), x);
  }, "Pt");
  var Kt = /* @__PURE__ */ __name(({ virtualize: e18, multiSelect: t21, isMultiSelectAndHasGroupLabels: o18, hasVisibleGroupLabels: l19 }) => e18 ? import_react29.default.createElement(Pt, { forMultiSelectWithGroups: o18 }) : t21 ? o18 ? import_react29.default.createElement(qt, null) : import_react29.default.createElement(Nt, null) : l19 ? import_react29.default.createElement($t, null) : import_react29.default.createElement(Nt, null), "Kt");
  var Wt = /* @__PURE__ */ __name(() => {
    const e18 = Y(), { getData: t21, getMetaData: o18 } = e18, { open: l19, groups: n21, multiSelect: i12, visibleOptions: a21, virtualize: c6 } = t21(), { isSearching: s21 } = o18(), d16 = l19 && !s21, p5 = r(F.listContainer, !d16 && F.hidden), _7 = { maxHeight: 52 * a21 }, m6 = ue(n21).length > 0, g4 = i12 && m6;
    return (0, import_react29.useEffect)(() => {
      const e19 = /* @__PURE__ */ __name((e20) => {
        ["ArrowUp", "ArrowDown"].includes(e20.code) && e20.preventDefault();
      }, "e");
      return d16 ? window.addEventListener("keydown", e19) : window.removeEventListener("keydown", e19), () => {
        window.removeEventListener("keydown", e19);
      };
    }, [d16]), import_react29.default.createElement("div", { className: p5, style: _7 }, import_react29.default.createElement(Kt, { multiSelect: i12, isMultiSelectAndHasGroupLabels: g4, virtualize: c6, hasVisibleGroupLabels: m6 }));
  }, "Wt");
  var Ht = /* @__PURE__ */ __name((t21) => {
    const o18 = ((e18, t22) => {
      const { getData: o19, getMetaData: l20, trigger: n22 } = t22, { open: r30, groups: i13, multiSelect: a21 } = o19(), c6 = l20(), { refs: u10, elementIds: d16, listInputType: p5 } = c6, _7 = ue(i13).length > 0, m6 = !!p5, g4 = We("label", t22), h5 = a21 && _7 && !m6 ? `${g4}. ${Pe("choiceCount", c6, "numberIndicator", { numberIndicator: Se(i13) })}` : g4, b6 = (0, import_react29.useCallback)(() => {
        r30 && n22({ id: z.generic, type: R.outSideClick });
      }, [r30, n22]);
      return Object.assign(Object.assign(Object.assign({}, e18), { className: r(F.listAndInputContainer, r30 && F.listAndInputContainerVisible, m6 && F.withSearchOrFilter), ref: u10.listContainer, outsideClickTrigger: b6, id: d16.selectionsAndListsContainer, "aria-hidden": !r30 }), (m6 || a21 && _7) && { role: "dialog", "aria-label": h5 });
    })(t21, Y()), { children: l19, outsideClickTrigger: n21 } = o18, i12 = o(o18, ["children", "outsideClickTrigger"]);
    return function(e18) {
      const t22 = (0, import_react29.useCallback)((t23) => {
        const { ref: o19, callback: l20 } = e18;
        o19 && o19.current && !o19.current.contains(t23.target) && l20();
      }, [e18.callback, e18.ref]);
      (0, import_react29.useEffect)(() => (window.addEventListener("click", t22, true), () => {
        window.removeEventListener("click", t22, true);
      }), [t22]);
    }({ ref: i12.ref, callback: /* @__PURE__ */ __name(() => {
      n21();
    }, "callback") }), import_react29.default.createElement("div", Object.assign({}, i12), l19);
  }, "Ht");
  var Vt = "{{type}}";
  var Qt = /* @__PURE__ */ __name((e18, t21) => {
    const o18 = t21 ? "search" : "filter";
    return e18.replace(Vt, o18);
  }, "Qt");
  var Ut = /* @__PURE__ */ __name(({ getMetaData: e18, trigger: t21, getData: o18 }, l19) => {
    const n21 = e18(), { filter: r30, elementIds: i12, refs: a21, search: c6, activeDescendant: s21 } = n21, { multiSelect: u10, groups: d16 } = o18(), p5 = ue(d16).length > 0, _7 = "search" === l19, m6 = _7 ? c6 : r30, g4 = $e(Qt(`${Vt}Label`, _7), n21), h5 = $e(Qt(`${Vt}ClearButtonAriaLabel`, _7), n21), b6 = $e(Qt(`${Vt}Placeholder`, _7), n21);
    return Object.assign(Object.assign({ className: r(F.searchOrFilterInput) }, function(e19) {
      const { id: t22, type: o19 = R.change, trigger: l20 } = e19;
      return { onChange: /* @__PURE__ */ __name((e20) => {
        l20({ id: t22, type: o19, payload: { value: e20.currentTarget.value, originalEvent: e20 } });
      }, "onChange") };
    }({ id: z[l19], trigger: t21 })), { onButtonClick: /* @__PURE__ */ __name((e19) => {
      e19.preventDefault();
    }, "onButtonClick"), id: i12.searchOrFilterInput, key: i12.searchOrFilterInput, clearButton: true, clearButtonAriaLabel: h5, label: g4, value: m6, placeholder: b6, ref: a21.searchOrFilterInput, "aria-activedescendant": s21 || "", "aria-controls": i12.list, "aria-expanded": true, "aria-labelledby": `${i12.searchOrFilterInputLabel} ${i12.label}`, "aria-haspopup": u10 && p5 ? "dialog" : "listbox", role: "combobox", labelId: i12.searchOrFilterInputLabel });
  }, "Ut");
  function Jt() {
    const e18 = Y(), { getMetaData: t21 } = e18, { listInputType: o18 } = t21();
    if (!o18) return null;
    const l19 = Ut(e18, o18);
    return import_react29.default.createElement(n6, Object.assign({}, l19));
  }
  __name(Jt, "Jt");
  function Xt() {
    const e18 = Y(), { getData: t21, getMetaData: o18 } = e18, l19 = (0, import_react29.useRef)(false), n21 = t21(), { groups: i12, open: a21 } = n21, c6 = o18(), { isSearching: s21, hasSearchError: u10, search: d16, filter: _7, listInputType: m6 } = c6, g4 = Se(i12), h5 = /* @__PURE__ */ __name(() => `${d16} ${_7} ${g4} ${u10 ? "error" : ""} ${s21 ? "searching" : ""}`, "h"), b6 = (0, import_react29.useRef)(h5()), v4 = h5(), S2 = b6.current !== v4;
    if (b6.current = v4, l19.current || !s21 && !_7 || (l19.current = true), S2) {
      const t22 = function(e19, t23) {
        const { groups: o19, open: l20 } = e19, { isSearching: n22, search: r30, filter: i13, hasSearchError: a22 } = t23, c7 = Se(o19), s22 = r30 || i13, u11 = "searchAndFilter", d17 = { value: s22, numberIndicator: c7 };
        return l20 ? Ce(u11, (() => {
          if (n22) return $e("searching", t23, { value: s22 });
          if (s22) {
            const e20 = !!r30;
            if (a22) return `${$e("searchErrorTitle", t23)} ${$e("searchErrorText", t23)}`;
            if (0 === c7) {
              const o20 = Qt(`${Vt}edWithoutResultsInfo`, e20), l21 = Qt(`${Vt}WithAnotherTerm`, e20);
              return `${$e(o20, t23, d17)} ${$e(l21, t23, d17)}`;
            }
            return e20 ? Pe("searchResults", t23, "numberIndicator", d17) : `${$e("filterResults", t23, d17)} ${Pe("filterResultsCount", t23, "numberIndicator", d17)}`;
          }
          return "";
        })() || "", n22 || i13 ? 800 : 0) : Ce(u11, "");
      }(n21, c6);
      t22.content ? we(t22, e18) : function(e19, t23) {
        const { screenReaderNotifications: o19 } = t23.getMetaData(), l20 = o19.findIndex((t24) => {
          const o20 = !e19.type || t24.type === e19.type, l21 = !e19.content || t24.content === e19.content;
          return o20 && l21;
        });
        l20 > -1 && (o19.splice(l20, 1), t23.updateMetaData({ screenReaderNotifications: o19 }));
      }(t22, e18);
    }
    const x = "search" === m6, C2 = !s21 && !g4 && (d16 || _7), w = s21 ? $e("searching", c6, { value: d16 }) : "";
    if (!a21 || !m6 || !C2 && !w) return null;
    const O2 = (k = u10, { className: r(F.searchAndFilterInfoContainer, k && F.withErrorMessage), "data-testid": "hds-select-search-and-filter-info" });
    var k;
    return import_react29.default.createElement("div", Object.assign({}, O2), w && import_react29.default.createElement(import_react29.default.Fragment, null, import_react29.default.createElement(b3, { small: true, loadingText: "", loadingFinishedText: "" }), import_react29.default.createElement("span", { "data-testid": "hds-select-searching-text" }, w)), C2 && !u10 && import_react29.default.createElement(import_react29.default.Fragment, null, import_react29.default.createElement("span", { "data-testid": "hds-select-no-results" }, $e(Qt(`${Vt}edWithoutResultsInfo`, x), c6, { value: _7 || d16 })), import_react29.default.createElement("span", null, $e(Qt(`${Vt}WithAnotherTerm`, x), c6))), u10 && import_react29.default.createElement(import_react29.default.Fragment, null, import_react29.default.createElement(o3, { color: "var(--color-error)" }), import_react29.default.createElement("span", { "data-testid": "hds-select-searching-error" }, $e("searchErrorTitle", c6)), import_react29.default.createElement("span", null, $e("searchErrorText", c6))));
  }
  __name(Xt, "Xt");
  function Yt() {
    const { getData: e18, getMetaData: t21, trigger: o18 } = Y(), { disabled: l19 } = e18(), { refs: n21, elementIds: i12, selectedOptions: a21 } = t21();
    return import_react29.default.createElement("div", { id: i12.tagList, className: r(F.tagList), ref: n21.tagList }, a21.map((e19) => import_react29.default.createElement(_t, { option: e19, trigger: o18, key: e19.value, disabled: l19 })));
  }
  __name(Yt, "Yt");
  var eo = /* @__PURE__ */ __name((e18, t21 = -1) => {
    const o18 = [], l19 = [];
    let n21 = -1;
    const r30 = /* @__PURE__ */ __name((e19, t22) => {
      n21 += 1;
      const { top: r31, bottom: i13, left: a22, right: c7 } = e19;
      o18[n21] = { top: r31, bottom: i13, left: a22, right: c7 }, l19[n21] = [], l19[n21].push(t22);
    }, "r"), i12 = /* @__PURE__ */ __name((e19, t22) => {
      const r31 = o18[n21];
      r31.top = Math.min(r31.top, e19.top), r31.bottom = Math.max(r31.bottom, e19.bottom), r31.left = Math.min(r31.left, e19.left), r31.right = Math.max(r31.right, e19.right), l19[n21].push(t22);
    }, "i"), a21 = /* @__PURE__ */ __name((e19) => {
      const t22 = o18[n21];
      return !t22 || (e19.left === t22.left || e19.right < t22.right) && e19.top >= t22.bottom;
    }, "a");
    let c6 = e18.firstElementChild;
    for (; c6; ) {
      const e19 = c6.getBoundingClientRect();
      if (a21(e19)) {
        if (t21 > 0 && l19.length >= t21) break;
        r30(e19, c6);
      } else i12(e19, c6);
      c6 = c6.nextElementSibling;
    }
    return l19;
  }, "eo");
  var to3 = /* @__PURE__ */ __name(({ getData: e18, trigger: t21, getMetaData: o18 }) => {
    const { disabled: l19 } = e18(), n21 = o18(), { elementIds: r30, selectedOptions: i12 } = n21, a21 = Ke("tagsClearAllButton", n21), c6 = Pe("tagsClearAllButtonAriaLabel", n21, "selectionCount", { label: i12.length > 0 ? i12[0].label : "" });
    return Object.assign(Object.assign({}, ee({ id: z.clearAllButton, trigger: t21 })), { children: a21, variant: n3.Secondary, className: F.clearAllButton, disabled: l19, id: r30.clearAllButton, "aria-label": c6 });
  }, "to");
  function oo() {
    const t21 = to3(Y()), { children: o18 } = t21, l19 = o(t21, ["children"]);
    return import_react29.default.createElement(u, Object.assign({}, l19, { iconEnd: import_react29.default.createElement(s4, null) }), o18);
  }
  __name(oo, "oo");
  var lo = /* @__PURE__ */ __name((e18) => {
    const { getMetaData: t21, getData: o18, trigger: l19 } = e18, { disabled: n21 } = o18(), r30 = t21(), { showAllTags: i12, refs: a21, elementIds: c6 } = r30, s21 = Ke(i12 ? "tagsShowLessButton" : "tagsShowAllButton", r30), u10 = Ke(i12 ? "tagsShowLessButtonAriaLabel" : "tagsShowAllButtonAriaLabel", r30);
    return Object.assign(Object.assign({}, ee({ id: z.showAllButton, trigger: l19 })), { children: s21, variant: n3.Secondary, buttonRef: a21.showAllButton, disabled: n21, id: c6.showAllButton, "aria-label": u10, className: F.showAllButton });
  }, "lo");
  function no() {
    const t21 = Y(), o18 = lo(t21), { children: l19, buttonRef: n21 } = o18, i12 = o(o18, ["children", "buttonRef"]);
    return import_react29.default.createElement(u, Object.assign({}, i12, { ref: n21, iconEnd: import_react29.default.createElement(o2, { className: F.arrowIcon }) }), l19);
  }
  __name(no, "no");
  function ro() {
    const { getData: e18 } = Y(), { clearable: t21 } = e18();
    return import_react29.default.createElement("div", { className: F.tagListButtons }, import_react29.default.createElement(no, null), t21 && import_react29.default.createElement(oo, null));
  }
  __name(ro, "ro");
  function io() {
    const { getData: e18, getMetaData: t21 } = Y(), { multiSelect: o18, noTags: l19 } = e18(), { showAllTags: n21, selectedOptions: i12, refs: a21 } = t21(), c6 = a21.tagList, u10 = a21.showAllButton, d16 = o18 ? i12 : [], p5 = (0, import_react29.useCallback)(() => {
      const e19 = function(e20, t22) {
        const o19 = e20.current;
        if (o19) {
          const e21 = eo(o19), l20 = t22 ? e21[e21.length - 1] : e21[1], n22 = l20 && l20[0], r30 = o19.getBoundingClientRect().top, i13 = n22 ? n22.getBoundingClientRect().bottom - r30 + "px" : void 0;
          return o19.style.maxHeight = i13, e21;
        }
        return [];
      }(c6, n21);
      !function(e20, t22) {
        const o19 = e20.current;
        o19 && (t22 <= 2 ? o19.classList.add(F.hiddenButton) : o19.classList.remove(F.hiddenButton));
      }(u10, e19.length), function(e20) {
        const t22 = e20.current, o19 = t22 && t22.querySelectorAll(`* ${dt}`);
        if (o19) {
          const e21 = At(t22, "vertical"), l20 = e21 > -1 ? e21 + 1 : -1;
          let n22 = 0;
          o19.forEach((e22) => {
            e22 && e22.setAttribute && (e22.setAttribute("tabindex", n22 < l20 ? "0" : "-1"), e22.setAttribute("aria-hidden", n22 < l20 ? "false" : "true")), n22 += 1;
          });
        }
      }(c6);
    }, [c6, u10, n21]), [m6] = It(p5);
    return (0, import_react29.useLayoutEffect)(() => {
      p5();
    }), !d16.length || l19 ? null : import_react29.default.createElement("div", Object.assign({}, function(e19) {
      return { className: r(F.tagListContainer, e19 && F.tagListExpanded) };
    }(n21), { ref: m6 }), import_react29.default.createElement(Yt, null), import_react29.default.createElement(ro, null));
  }
  __name(io, "io");
  function ao(e18) {
    return We(e18, Y()) || "";
  }
  __name(ao, "ao");
  function co() {
    const t21 = Y(), o18 = function({ getData: e18 }) {
      const { invalid: t22 } = e18(), o19 = ao("error");
      return { children: t22 && o19 ? o19 : null, className: F.errorText };
    }(t21), { children: l19 } = o18, n21 = o(o18, ["children"]), i12 = (0, import_react29.useRef)(l19);
    return l19 && l19 !== i12.current && (we(Ce(z.error, l19), t21), i12.current = l19), l19 ? import_react29.default.createElement("div", Object.assign({}, n21), l19) : null;
  }
  __name(co, "co");
  function so() {
    const t21 = function() {
      const e18 = ao("assistive");
      return { className: F.assistiveText, children: e18 || null };
    }(), { children: o18 } = t21, l19 = o(t21, ["children"]), n21 = Y(), i12 = (0, import_react29.useRef)(o18);
    return o18 && o18 !== i12.current && (we(Ce(z.assistive, o18), n21), i12.current = o18), o18 ? import_react29.default.createElement("div", Object.assign({}, l19), o18) : null;
  }
  __name(so, "so");
  function uo() {
    const { getMetaData: e18, updateMetaData: t21 } = Y(), o18 = (0, import_react29.useRef)(0);
    o18.current || (o18.current = Date.now());
    const l19 = o6(), n21 = (0, import_react29.useRef)(null), i12 = (0, import_react29.useRef)(""), a21 = /* @__PURE__ */ __name((e19) => e19.map((e20) => e20.content).join(" "), "a"), c6 = (0, import_react29.useCallback)(() => {
      const l20 = Date.now(), n22 = /* @__PURE__ */ __name((e19) => !e19.content || e19.showTime > 0 && e19.showTime + 2e3 <= l20, "n");
      if (l20 - o18.current > 2e4) {
        const l21 = e18().screenReaderNotifications.filter((e19) => !n22(e19));
        t21({ screenReaderNotifications: l21 }), o18.current = Date.now();
      }
      return e18().screenReaderNotifications.filter((e19) => !n22(e19) && (!e19.delay || e19.addTime + e19.delay <= l20));
    }, [e18]), d16 = (0, import_react29.useCallback)(() => {
      i12.current !== a21(c6()) && l19();
    }, [e18]);
    n21.current || (n21.current = setInterval(d16, 200)), (0, import_react29.useEffect)(() => () => {
      n21.current && (clearInterval(n21.current), n21.current = null);
    }, []);
    const _7 = c6(), m6 = Date.now();
    return i12.current = a21(_7), import_react29.default.createElement("div", { "aria-live": "polite", className: F.screenReaderNotifications, "data-testid": "hds-select-screen-reader-notifications" }, _7.map((e19) => (e19.showTime || (e19.showTime = m6), import_react29.default.createElement("span", { key: e19.content }, e19.content))));
  }
  __name(uo, "uo");
  var po = (0, import_react29.forwardRef)((t21, o18) => {
    var { options: l19, open: i12, groups: a21, icon: c6, required: p5, onChange: _7, children: m6, id: h5, onFocus: b6, onBlur: v4, onClose: f2, disabled: S2, texts: x, invalid: C2, multiSelect: w, noTags: O2, visibleOptions: k, virtualize: I2, filter: A2, onSearch: E2, value: L2, theme: y2, clearable: j2, tooltip: D } = t21, B2 = o(t21, ["options", "open", "groups", "icon", "required", "onChange", "children", "id", "onFocus", "onBlur", "onClose", "disabled", "texts", "invalid", "multiSelect", "noTags", "visibleOptions", "virtualize", "filter", "onSearch", "value", "theme", "clearable", "tooltip"]);
    const T = (0, import_react29.useMemo)(() => {
      const e18 = { groups: Ee({ options: l19, groups: a21, value: L2, children: m6 }), open: !!i12, required: !!p5, invalid: !!C2, disabled: !!S2, multiSelect: !!w, noTags: !!O2, visibleOptions: k || 5.5, virtualize: !!I2, onChange: _7, onFocus: b6, onBlur: v4, onClose: f2, filterFunction: A2, onSearch: E2, clearable: !!j2, initialOpenValue: i12 };
      return e18.multiSelect && re(e18.groups), e18;
    }, [l19, i12, a21, _7, S2, C2, p5, O2, I2, k, E2, b6, v4, f2, L2, m6, j2]), M = (0, import_react29.useMemo)(() => {
      const e18 = `${h5 || (0, import_lodash5.uniqueId)("hds-select-")}`, t22 = /* @__PURE__ */ new Map();
      let l20 = 0;
      const r30 = /* @__PURE__ */ __name(() => {
        if (T.onSearch || T.filterFunction) return T.onSearch ? z.search : z.filter;
      }, "r");
      return { lastToggleCommand: 0, lastClickedOption: void 0, showAllTags: false, icon: c6, activeDescendant: void 0, focusTarget: void 0, refs: { button: "function" == typeof o18 ? (0, import_react29.createRef)() : o18 || (0, import_react29.createRef)(), listContainer: (0, import_react29.createRef)(), list: (0, import_react29.createRef)(), selectionsAndListsContainer: (0, import_react29.createRef)(), tagList: (0, import_react29.createRef)(), showAllButton: (0, import_react29.createRef)(), searchOrFilterInput: (0, import_react29.createRef)(), container: (0, import_react29.createRef)() }, selectedOptions: de(T.groups), elementIds: fe(e18), textProvider: Ze(x), getOptionId: /* @__PURE__ */ __name((o19) => {
        const n21 = o19.isGroupLabel ? `hds-group-${o19.label}` : o19.value, r31 = t22.get(n21);
        if (!r31) {
          const o20 = `${e18}-option-${l20}`;
          return l20 += 1, t22.set(n21, o20), o20;
        }
        return r31;
      }, "getOptionId"), listInputType: r30(), hasListInput: !!r30(), filter: "", search: "", isSearching: false, hasSearchError: false, cancelCurrentSearch: void 0, screenReaderNotifications: [], tooltip: D };
    }, [h5, T.groups, T.filterFunction, T.onSearch, x, o18]);
    (0, import_react29.useEffect)(() => () => {
      M.cancelCurrentSearch && M.cancelCurrentSearch();
    }, []);
    const F3 = (0, import_react29.useCallback)(({ previousData: e18, currentData: t22, currentMetaData: o19 }) => {
      if (t22) {
        if (e18) {
          if (void 0 !== t22.initialOpenValue && e18.initialOpenValue !== t22.initialOpenValue) return Object.assign(Object.assign({}, t22), { open: t22.initialOpenValue });
          if (e18.open) return Object.assign(Object.assign({}, t22), { open: true });
        }
        return t22;
      }
      return o19;
    }, []);
    return import_react29.default.createElement(kt, { initialData: T, metaData: M, onChange: Ot, onReset: F3 }, import_react29.default.createElement(St, Object.assign({}, B2, { theme: y2 }), import_react29.default.createElement(xt, null), import_react29.default.createElement(Bt, null, import_react29.default.createElement(Dt, null), import_react29.default.createElement(Ht, null, import_react29.default.createElement(Jt, null), import_react29.default.createElement(Wt, null), import_react29.default.createElement(Xt, null))), import_react29.default.createElement(co, null), import_react29.default.createElement(so, null), import_react29.default.createElement(io, null), import_react29.default.createElement(uo, null)));
  });

  // node_modules/hds-react/index.js
  var import_crc_32 = __toESM(require_crc32());
  var import_react30 = __toESM(require_react());
  var import_lodash6 = __toESM(require_lodash());
  var import_cookie = __toESM(require_cookie());
  var import_react_dom2 = __toESM(require_react_dom());

  // src/js/react/apps/allu-decisions-search/containers/FormContainer.tsx
  var import_react68 = __toESM(require_react());

  // node_modules/luxon/src/errors.js
  var _LuxonError = class _LuxonError extends Error {
  };
  __name(_LuxonError, "LuxonError");
  var LuxonError = _LuxonError;
  var _InvalidDateTimeError = class _InvalidDateTimeError extends LuxonError {
    constructor(reason) {
      super(`Invalid DateTime: ${reason.toMessage()}`);
    }
  };
  __name(_InvalidDateTimeError, "InvalidDateTimeError");
  var InvalidDateTimeError = _InvalidDateTimeError;
  var _InvalidIntervalError = class _InvalidIntervalError extends LuxonError {
    constructor(reason) {
      super(`Invalid Interval: ${reason.toMessage()}`);
    }
  };
  __name(_InvalidIntervalError, "InvalidIntervalError");
  var InvalidIntervalError = _InvalidIntervalError;
  var _InvalidDurationError = class _InvalidDurationError extends LuxonError {
    constructor(reason) {
      super(`Invalid Duration: ${reason.toMessage()}`);
    }
  };
  __name(_InvalidDurationError, "InvalidDurationError");
  var InvalidDurationError = _InvalidDurationError;
  var _ConflictingSpecificationError = class _ConflictingSpecificationError extends LuxonError {
  };
  __name(_ConflictingSpecificationError, "ConflictingSpecificationError");
  var ConflictingSpecificationError = _ConflictingSpecificationError;
  var _InvalidUnitError = class _InvalidUnitError extends LuxonError {
    constructor(unit) {
      super(`Invalid unit ${unit}`);
    }
  };
  __name(_InvalidUnitError, "InvalidUnitError");
  var InvalidUnitError = _InvalidUnitError;
  var _InvalidArgumentError = class _InvalidArgumentError extends LuxonError {
  };
  __name(_InvalidArgumentError, "InvalidArgumentError");
  var InvalidArgumentError = _InvalidArgumentError;
  var _ZoneIsAbstractError = class _ZoneIsAbstractError extends LuxonError {
    constructor() {
      super("Zone is an abstract class");
    }
  };
  __name(_ZoneIsAbstractError, "ZoneIsAbstractError");
  var ZoneIsAbstractError = _ZoneIsAbstractError;

  // node_modules/luxon/src/impl/formats.js
  var n11 = "numeric";
  var s9 = "short";
  var l8 = "long";
  var DATE_SHORT = {
    year: n11,
    month: n11,
    day: n11
  };
  var DATE_MED = {
    year: n11,
    month: s9,
    day: n11
  };
  var DATE_MED_WITH_WEEKDAY = {
    year: n11,
    month: s9,
    day: n11,
    weekday: s9
  };
  var DATE_FULL = {
    year: n11,
    month: l8,
    day: n11
  };
  var DATE_HUGE = {
    year: n11,
    month: l8,
    day: n11,
    weekday: l8
  };
  var TIME_SIMPLE = {
    hour: n11,
    minute: n11
  };
  var TIME_WITH_SECONDS = {
    hour: n11,
    minute: n11,
    second: n11
  };
  var TIME_WITH_SHORT_OFFSET = {
    hour: n11,
    minute: n11,
    second: n11,
    timeZoneName: s9
  };
  var TIME_WITH_LONG_OFFSET = {
    hour: n11,
    minute: n11,
    second: n11,
    timeZoneName: l8
  };
  var TIME_24_SIMPLE = {
    hour: n11,
    minute: n11,
    hourCycle: "h23"
  };
  var TIME_24_WITH_SECONDS = {
    hour: n11,
    minute: n11,
    second: n11,
    hourCycle: "h23"
  };
  var TIME_24_WITH_SHORT_OFFSET = {
    hour: n11,
    minute: n11,
    second: n11,
    hourCycle: "h23",
    timeZoneName: s9
  };
  var TIME_24_WITH_LONG_OFFSET = {
    hour: n11,
    minute: n11,
    second: n11,
    hourCycle: "h23",
    timeZoneName: l8
  };
  var DATETIME_SHORT = {
    year: n11,
    month: n11,
    day: n11,
    hour: n11,
    minute: n11
  };
  var DATETIME_SHORT_WITH_SECONDS = {
    year: n11,
    month: n11,
    day: n11,
    hour: n11,
    minute: n11,
    second: n11
  };
  var DATETIME_MED = {
    year: n11,
    month: s9,
    day: n11,
    hour: n11,
    minute: n11
  };
  var DATETIME_MED_WITH_SECONDS = {
    year: n11,
    month: s9,
    day: n11,
    hour: n11,
    minute: n11,
    second: n11
  };
  var DATETIME_MED_WITH_WEEKDAY = {
    year: n11,
    month: s9,
    day: n11,
    weekday: s9,
    hour: n11,
    minute: n11
  };
  var DATETIME_FULL = {
    year: n11,
    month: l8,
    day: n11,
    hour: n11,
    minute: n11,
    timeZoneName: s9
  };
  var DATETIME_FULL_WITH_SECONDS = {
    year: n11,
    month: l8,
    day: n11,
    hour: n11,
    minute: n11,
    second: n11,
    timeZoneName: s9
  };
  var DATETIME_HUGE = {
    year: n11,
    month: l8,
    day: n11,
    weekday: l8,
    hour: n11,
    minute: n11,
    timeZoneName: l8
  };
  var DATETIME_HUGE_WITH_SECONDS = {
    year: n11,
    month: l8,
    day: n11,
    weekday: l8,
    hour: n11,
    minute: n11,
    second: n11,
    timeZoneName: l8
  };

  // node_modules/luxon/src/zone.js
  var _Zone = class _Zone {
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get type() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */
    get name() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The IANA name of this zone.
     * Defaults to `name` if not overwritten by a subclass.
     * @abstract
     * @type {string}
     */
    get ianaName() {
      return this.name;
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */
    get isUniversal() {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts3, opts) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns the offset's value as a string
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts3, format4) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts3) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Return whether this Zone is equal to another zone
     * @abstract
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Return whether this Zone is valid.
     * @abstract
     * @type {boolean}
     */
    get isValid() {
      throw new ZoneIsAbstractError();
    }
  };
  __name(_Zone, "Zone");
  var Zone = _Zone;

  // node_modules/luxon/src/zones/systemZone.js
  var singleton = null;
  var _SystemZone = class _SystemZone extends Zone {
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    static get instance() {
      if (singleton === null) {
        singleton = new _SystemZone();
      }
      return singleton;
    }
    /** @override **/
    get type() {
      return "system";
    }
    /** @override **/
    get name() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName(ts3, { format: format4, locale: locale2 }) {
      return parseZoneInfo(ts3, format4, locale2);
    }
    /** @override **/
    formatOffset(ts3, format4) {
      return formatOffset(this.offset(ts3), format4);
    }
    /** @override **/
    offset(ts3) {
      return -new Date(ts3).getTimezoneOffset();
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "system";
    }
    /** @override **/
    get isValid() {
      return true;
    }
  };
  __name(_SystemZone, "SystemZone");
  var SystemZone = _SystemZone;

  // node_modules/luxon/src/zones/IANAZone.js
  var dtfCache = /* @__PURE__ */ new Map();
  function makeDTF(zoneName) {
    let dtf = dtfCache.get(zoneName);
    if (dtf === void 0) {
      dtf = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zoneName,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        era: "short"
      });
      dtfCache.set(zoneName, dtf);
    }
    return dtf;
  }
  __name(makeDTF, "makeDTF");
  var typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
  };
  function hackyOffset(dtf, date) {
    const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
    return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
  }
  __name(hackyOffset, "hackyOffset");
  function partsOffset(dtf, date) {
    const formatted = dtf.formatToParts(date);
    const filled = [];
    for (let i12 = 0; i12 < formatted.length; i12++) {
      const { type, value } = formatted[i12];
      const pos = typeToPos[type];
      if (type === "era") {
        filled[pos] = value;
      } else if (!isUndefined2(pos)) {
        filled[pos] = parseInt(value, 10);
      }
    }
    return filled;
  }
  __name(partsOffset, "partsOffset");
  var ianaZoneCache = /* @__PURE__ */ new Map();
  var _IANAZone = class _IANAZone extends Zone {
    /**
     * @param {string} name - Zone name
     * @return {IANAZone}
     */
    static create(name) {
      let zone = ianaZoneCache.get(name);
      if (zone === void 0) {
        ianaZoneCache.set(name, zone = new _IANAZone(name));
      }
      return zone;
    }
    /**
     * Reset local caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCache() {
      ianaZoneCache.clear();
      dtfCache.clear();
    }
    /**
     * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
     * @param {string} s - The string to check validity on
     * @example IANAZone.isValidSpecifier("America/New_York") //=> true
     * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
     * @deprecated For backward compatibility, this forwards to isValidZone, better use `isValidZone()` directly instead.
     * @return {boolean}
     */
    static isValidSpecifier(s21) {
      return this.isValidZone(s21);
    }
    /**
     * Returns whether the provided string identifies a real zone
     * @param {string} zone - The string to check
     * @example IANAZone.isValidZone("America/New_York") //=> true
     * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
     * @example IANAZone.isValidZone("Sport~~blorp") //=> false
     * @return {boolean}
     */
    static isValidZone(zone) {
      if (!zone) {
        return false;
      }
      try {
        new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
        return true;
      } catch (e18) {
        return false;
      }
    }
    constructor(name) {
      super();
      this.zoneName = name;
      this.valid = _IANAZone.isValidZone(name);
    }
    /**
     * The type of zone. `iana` for all instances of `IANAZone`.
     * @override
     * @type {string}
     */
    get type() {
      return "iana";
    }
    /**
     * The name of this zone (i.e. the IANA zone name).
     * @override
     * @type {string}
     */
    get name() {
      return this.zoneName;
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year:
     * Always returns false for all IANA zones.
     * @override
     * @type {boolean}
     */
    get isUniversal() {
      return false;
    }
    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts3, { format: format4, locale: locale2 }) {
      return parseZoneInfo(ts3, format4, locale2, this.name);
    }
    /**
     * Returns the offset's value as a string
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts3, format4) {
      return formatOffset(this.offset(ts3), format4);
    }
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @override
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts3) {
      if (!this.valid) return NaN;
      const date = new Date(ts3);
      if (isNaN(date)) return NaN;
      const dtf = makeDTF(this.name);
      let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
      if (adOrBc === "BC") {
        year = -Math.abs(year) + 1;
      }
      const adjustedHour = hour === 24 ? 0 : hour;
      const asUTC = objToLocalTS({
        year,
        month,
        day,
        hour: adjustedHour,
        minute,
        second,
        millisecond: 0
      });
      let asTS = +date;
      const over = asTS % 1e3;
      asTS -= over >= 0 ? over : 1e3 + over;
      return (asUTC - asTS) / (60 * 1e3);
    }
    /**
     * Return whether this Zone is equal to another zone
     * @override
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      return otherZone.type === "iana" && otherZone.name === this.name;
    }
    /**
     * Return whether this Zone is valid.
     * @override
     * @type {boolean}
     */
    get isValid() {
      return this.valid;
    }
  };
  __name(_IANAZone, "IANAZone");
  var IANAZone = _IANAZone;

  // node_modules/luxon/src/impl/locale.js
  var intlLFCache = {};
  function getCachedLF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlLFCache[key];
    if (!dtf) {
      dtf = new Intl.ListFormat(locString, opts);
      intlLFCache[key] = dtf;
    }
    return dtf;
  }
  __name(getCachedLF, "getCachedLF");
  var intlDTCache = /* @__PURE__ */ new Map();
  function getCachedDTF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlDTCache.get(key);
    if (dtf === void 0) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache.set(key, dtf);
    }
    return dtf;
  }
  __name(getCachedDTF, "getCachedDTF");
  var intlNumCache = /* @__PURE__ */ new Map();
  function getCachedINF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let inf = intlNumCache.get(key);
    if (inf === void 0) {
      inf = new Intl.NumberFormat(locString, opts);
      intlNumCache.set(key, inf);
    }
    return inf;
  }
  __name(getCachedINF, "getCachedINF");
  var intlRelCache = /* @__PURE__ */ new Map();
  function getCachedRTF(locString, opts = {}) {
    const { base, ...cacheKeyOpts } = opts;
    const key = JSON.stringify([locString, cacheKeyOpts]);
    let inf = intlRelCache.get(key);
    if (inf === void 0) {
      inf = new Intl.RelativeTimeFormat(locString, opts);
      intlRelCache.set(key, inf);
    }
    return inf;
  }
  __name(getCachedRTF, "getCachedRTF");
  var sysLocaleCache = null;
  function systemLocale() {
    if (sysLocaleCache) {
      return sysLocaleCache;
    } else {
      sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
      return sysLocaleCache;
    }
  }
  __name(systemLocale, "systemLocale");
  var intlResolvedOptionsCache = /* @__PURE__ */ new Map();
  function getCachedIntResolvedOptions(locString) {
    let opts = intlResolvedOptionsCache.get(locString);
    if (opts === void 0) {
      opts = new Intl.DateTimeFormat(locString).resolvedOptions();
      intlResolvedOptionsCache.set(locString, opts);
    }
    return opts;
  }
  __name(getCachedIntResolvedOptions, "getCachedIntResolvedOptions");
  var weekInfoCache = /* @__PURE__ */ new Map();
  function getCachedWeekInfo(locString) {
    let data = weekInfoCache.get(locString);
    if (!data) {
      const locale2 = new Intl.Locale(locString);
      data = "getWeekInfo" in locale2 ? locale2.getWeekInfo() : locale2.weekInfo;
      if (!("minimalDays" in data)) {
        data = { ...fallbackWeekSettings, ...data };
      }
      weekInfoCache.set(locString, data);
    }
    return data;
  }
  __name(getCachedWeekInfo, "getCachedWeekInfo");
  function parseLocaleString(localeStr) {
    const xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) {
      localeStr = localeStr.substring(0, xIndex);
    }
    const uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
      return [localeStr];
    } else {
      let options;
      let selectedStr;
      try {
        options = getCachedDTF(localeStr).resolvedOptions();
        selectedStr = localeStr;
      } catch (e18) {
        const smaller = localeStr.substring(0, uIndex);
        options = getCachedDTF(smaller).resolvedOptions();
        selectedStr = smaller;
      }
      const { numberingSystem, calendar } = options;
      return [selectedStr, numberingSystem, calendar];
    }
  }
  __name(parseLocaleString, "parseLocaleString");
  function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
      if (!localeStr.includes("-u-")) {
        localeStr += "-u";
      }
      if (outputCalendar) {
        localeStr += `-ca-${outputCalendar}`;
      }
      if (numberingSystem) {
        localeStr += `-nu-${numberingSystem}`;
      }
      return localeStr;
    } else {
      return localeStr;
    }
  }
  __name(intlConfigString, "intlConfigString");
  function mapMonths(f2) {
    const ms = [];
    for (let i12 = 1; i12 <= 12; i12++) {
      const dt3 = DateTime.utc(2009, i12, 1);
      ms.push(f2(dt3));
    }
    return ms;
  }
  __name(mapMonths, "mapMonths");
  function mapWeekdays(f2) {
    const ms = [];
    for (let i12 = 1; i12 <= 7; i12++) {
      const dt3 = DateTime.utc(2016, 11, 13 + i12);
      ms.push(f2(dt3));
    }
    return ms;
  }
  __name(mapWeekdays, "mapWeekdays");
  function listStuff(loc, length, englishFn, intlFn) {
    const mode = loc.listingMode();
    if (mode === "error") {
      return null;
    } else if (mode === "en") {
      return englishFn(length);
    } else {
      return intlFn(length);
    }
  }
  __name(listStuff, "listStuff");
  function supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
      return false;
    } else {
      return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || getCachedIntResolvedOptions(loc.locale).numberingSystem === "latn";
    }
  }
  __name(supportsFastNumbers, "supportsFastNumbers");
  var _PolyNumberFormatter = class _PolyNumberFormatter {
    constructor(intl, forceSimple, opts) {
      this.padTo = opts.padTo || 0;
      this.floor = opts.floor || false;
      const { padTo, floor, ...otherOpts } = opts;
      if (!forceSimple || Object.keys(otherOpts).length > 0) {
        const intlOpts = { useGrouping: false, ...opts };
        if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
        this.inf = getCachedINF(intl, intlOpts);
      }
    }
    format(i12) {
      if (this.inf) {
        const fixed = this.floor ? Math.floor(i12) : i12;
        return this.inf.format(fixed);
      } else {
        const fixed = this.floor ? Math.floor(i12) : roundTo(i12, 3);
        return padStart(fixed, this.padTo);
      }
    }
  };
  __name(_PolyNumberFormatter, "PolyNumberFormatter");
  var PolyNumberFormatter = _PolyNumberFormatter;
  var _PolyDateFormatter = class _PolyDateFormatter {
    constructor(dt3, intl, opts) {
      this.opts = opts;
      this.originalZone = void 0;
      let z3 = void 0;
      if (this.opts.timeZone) {
        this.dt = dt3;
      } else if (dt3.zone.type === "fixed") {
        const gmtOffset = -1 * (dt3.offset / 60);
        const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
        if (dt3.offset !== 0 && IANAZone.create(offsetZ).valid) {
          z3 = offsetZ;
          this.dt = dt3;
        } else {
          z3 = "UTC";
          this.dt = dt3.offset === 0 ? dt3 : dt3.setZone("UTC").plus({ minutes: dt3.offset });
          this.originalZone = dt3.zone;
        }
      } else if (dt3.zone.type === "system") {
        this.dt = dt3;
      } else if (dt3.zone.type === "iana") {
        this.dt = dt3;
        z3 = dt3.zone.name;
      } else {
        z3 = "UTC";
        this.dt = dt3.setZone("UTC").plus({ minutes: dt3.offset });
        this.originalZone = dt3.zone;
      }
      const intlOpts = { ...this.opts };
      intlOpts.timeZone = intlOpts.timeZone || z3;
      this.dtf = getCachedDTF(intl, intlOpts);
    }
    format() {
      if (this.originalZone) {
        return this.formatToParts().map(({ value }) => value).join("");
      }
      return this.dtf.format(this.dt.toJSDate());
    }
    formatToParts() {
      const parts = this.dtf.formatToParts(this.dt.toJSDate());
      if (this.originalZone) {
        return parts.map((part) => {
          if (part.type === "timeZoneName") {
            const offsetName = this.originalZone.offsetName(this.dt.ts, {
              locale: this.dt.locale,
              format: this.opts.timeZoneName
            });
            return {
              ...part,
              value: offsetName
            };
          } else {
            return part;
          }
        });
      }
      return parts;
    }
    resolvedOptions() {
      return this.dtf.resolvedOptions();
    }
  };
  __name(_PolyDateFormatter, "PolyDateFormatter");
  var PolyDateFormatter = _PolyDateFormatter;
  var _PolyRelFormatter = class _PolyRelFormatter {
    constructor(intl, isEnglish, opts) {
      this.opts = { style: "long", ...opts };
      if (!isEnglish && hasRelative()) {
        this.rtf = getCachedRTF(intl, opts);
      }
    }
    format(count, unit) {
      if (this.rtf) {
        return this.rtf.format(count, unit);
      } else {
        return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
      }
    }
    formatToParts(count, unit) {
      if (this.rtf) {
        return this.rtf.formatToParts(count, unit);
      } else {
        return [];
      }
    }
  };
  __name(_PolyRelFormatter, "PolyRelFormatter");
  var PolyRelFormatter = _PolyRelFormatter;
  var fallbackWeekSettings = {
    firstDay: 1,
    minimalDays: 4,
    weekend: [6, 7]
  };
  var _Locale = class _Locale {
    static fromOpts(opts) {
      return _Locale.create(
        opts.locale,
        opts.numberingSystem,
        opts.outputCalendar,
        opts.weekSettings,
        opts.defaultToEN
      );
    }
    static create(locale2, numberingSystem, outputCalendar, weekSettings, defaultToEN = false) {
      const specifiedLocale = locale2 || Settings.defaultLocale;
      const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
      const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
      const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
      const weekSettingsR = validateWeekSettings(weekSettings) || Settings.defaultWeekSettings;
      return new _Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
    }
    static resetCache() {
      sysLocaleCache = null;
      intlDTCache.clear();
      intlNumCache.clear();
      intlRelCache.clear();
      intlResolvedOptionsCache.clear();
      weekInfoCache.clear();
    }
    static fromObject({ locale: locale2, numberingSystem, outputCalendar, weekSettings } = {}) {
      return _Locale.create(locale2, numberingSystem, outputCalendar, weekSettings);
    }
    constructor(locale2, numbering, outputCalendar, weekSettings, specifiedLocale) {
      const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale2);
      this.locale = parsedLocale;
      this.numberingSystem = numbering || parsedNumberingSystem || null;
      this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
      this.weekSettings = weekSettings;
      this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
      this.weekdaysCache = { format: {}, standalone: {} };
      this.monthsCache = { format: {}, standalone: {} };
      this.meridiemCache = null;
      this.eraCache = {};
      this.specifiedLocale = specifiedLocale;
      this.fastNumbersCached = null;
    }
    get fastNumbers() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }
      return this.fastNumbersCached;
    }
    listingMode() {
      const isActuallyEn = this.isEnglish();
      const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
      return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    }
    clone(alts) {
      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
        return this;
      } else {
        return _Locale.create(
          alts.locale || this.specifiedLocale,
          alts.numberingSystem || this.numberingSystem,
          alts.outputCalendar || this.outputCalendar,
          validateWeekSettings(alts.weekSettings) || this.weekSettings,
          alts.defaultToEN || false
        );
      }
    }
    redefaultToEN(alts = {}) {
      return this.clone({ ...alts, defaultToEN: true });
    }
    redefaultToSystem(alts = {}) {
      return this.clone({ ...alts, defaultToEN: false });
    }
    months(length, format4 = false) {
      return listStuff(this, length, months, () => {
        const monthSpecialCase = this.intl === "ja" || this.intl.startsWith("ja-");
        format4 &= !monthSpecialCase;
        const intl = format4 ? { month: length, day: "numeric" } : { month: length }, formatStr = format4 ? "format" : "standalone";
        if (!this.monthsCache[formatStr][length]) {
          const mapper = !monthSpecialCase ? (dt3) => this.extract(dt3, intl, "month") : (dt3) => this.dtFormatter(dt3, intl).format();
          this.monthsCache[formatStr][length] = mapMonths(mapper);
        }
        return this.monthsCache[formatStr][length];
      });
    }
    weekdays(length, format4 = false) {
      return listStuff(this, length, weekdays, () => {
        const intl = format4 ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format4 ? "format" : "standalone";
        if (!this.weekdaysCache[formatStr][length]) {
          this.weekdaysCache[formatStr][length] = mapWeekdays(
            (dt3) => this.extract(dt3, intl, "weekday")
          );
        }
        return this.weekdaysCache[formatStr][length];
      });
    }
    meridiems() {
      return listStuff(
        this,
        void 0,
        () => meridiems,
        () => {
          if (!this.meridiemCache) {
            const intl = { hour: "numeric", hourCycle: "h12" };
            this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
              (dt3) => this.extract(dt3, intl, "dayperiod")
            );
          }
          return this.meridiemCache;
        }
      );
    }
    eras(length) {
      return listStuff(this, length, eras, () => {
        const intl = { era: length };
        if (!this.eraCache[length]) {
          this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(
            (dt3) => this.extract(dt3, intl, "era")
          );
        }
        return this.eraCache[length];
      });
    }
    extract(dt3, intlOpts, field) {
      const df = this.dtFormatter(dt3, intlOpts), results = df.formatToParts(), matching = results.find((m6) => m6.type.toLowerCase() === field);
      return matching ? matching.value : null;
    }
    numberFormatter(opts = {}) {
      return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
    }
    dtFormatter(dt3, intlOpts = {}) {
      return new PolyDateFormatter(dt3, this.intl, intlOpts);
    }
    relFormatter(opts = {}) {
      return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
    }
    listFormatter(opts = {}) {
      return getCachedLF(this.intl, opts);
    }
    isEnglish() {
      return this.locale === "en" || this.locale.toLowerCase() === "en-us" || getCachedIntResolvedOptions(this.intl).locale.startsWith("en-us");
    }
    getWeekSettings() {
      if (this.weekSettings) {
        return this.weekSettings;
      } else if (!hasLocaleWeekInfo()) {
        return fallbackWeekSettings;
      } else {
        return getCachedWeekInfo(this.locale);
      }
    }
    getStartOfWeek() {
      return this.getWeekSettings().firstDay;
    }
    getMinDaysInFirstWeek() {
      return this.getWeekSettings().minimalDays;
    }
    getWeekendDays() {
      return this.getWeekSettings().weekend;
    }
    equals(other) {
      return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
    }
    toString() {
      return `Locale(${this.locale}, ${this.numberingSystem}, ${this.outputCalendar})`;
    }
  };
  __name(_Locale, "Locale");
  var Locale = _Locale;

  // node_modules/luxon/src/zones/fixedOffsetZone.js
  var singleton2 = null;
  var _FixedOffsetZone = class _FixedOffsetZone extends Zone {
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    static get utcInstance() {
      if (singleton2 === null) {
        singleton2 = new _FixedOffsetZone(0);
      }
      return singleton2;
    }
    /**
     * Get an instance with a specified offset
     * @param {number} offset - The offset in minutes
     * @return {FixedOffsetZone}
     */
    static instance(offset5) {
      return offset5 === 0 ? _FixedOffsetZone.utcInstance : new _FixedOffsetZone(offset5);
    }
    /**
     * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
     * @param {string} s - The offset string to parse
     * @example FixedOffsetZone.parseSpecifier("UTC+6")
     * @example FixedOffsetZone.parseSpecifier("UTC+06")
     * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
     * @return {FixedOffsetZone}
     */
    static parseSpecifier(s21) {
      if (s21) {
        const r30 = s21.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
        if (r30) {
          return new _FixedOffsetZone(signedOffset(r30[1], r30[2]));
        }
      }
      return null;
    }
    constructor(offset5) {
      super();
      this.fixed = offset5;
    }
    /**
     * The type of zone. `fixed` for all instances of `FixedOffsetZone`.
     * @override
     * @type {string}
     */
    get type() {
      return "fixed";
    }
    /**
     * The name of this zone.
     * All fixed zones' names always start with "UTC" (plus optional offset)
     * @override
     * @type {string}
     */
    get name() {
      return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
    }
    /**
     * The IANA name of this zone, i.e. `Etc/UTC` or `Etc/GMT+/-nn`
     *
     * @override
     * @type {string}
     */
    get ianaName() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
      }
    }
    /**
     * Returns the offset's common name at the specified timestamp.
     *
     * For fixed offset zones this equals to the zone name.
     * @override
     */
    offsetName() {
      return this.name;
    }
    /**
     * Returns the offset's value as a string
     * @override
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts3, format4) {
      return formatOffset(this.fixed, format4);
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year:
     * Always returns true for all fixed offset zones.
     * @override
     * @type {boolean}
     */
    get isUniversal() {
      return true;
    }
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     *
     * For fixed offset zones, this is constant and does not depend on a timestamp.
     * @override
     * @return {number}
     */
    offset() {
      return this.fixed;
    }
    /**
     * Return whether this Zone is equal to another zone (i.e. also fixed and same offset)
     * @override
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    }
    /**
     * Return whether this Zone is valid:
     * All fixed offset zones are valid.
     * @override
     * @type {boolean}
     */
    get isValid() {
      return true;
    }
  };
  __name(_FixedOffsetZone, "FixedOffsetZone");
  var FixedOffsetZone = _FixedOffsetZone;

  // node_modules/luxon/src/zones/invalidZone.js
  var _InvalidZone = class _InvalidZone extends Zone {
    constructor(zoneName) {
      super();
      this.zoneName = zoneName;
    }
    /** @override **/
    get type() {
      return "invalid";
    }
    /** @override **/
    get name() {
      return this.zoneName;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName() {
      return null;
    }
    /** @override **/
    formatOffset() {
      return "";
    }
    /** @override **/
    offset() {
      return NaN;
    }
    /** @override **/
    equals() {
      return false;
    }
    /** @override **/
    get isValid() {
      return false;
    }
  };
  __name(_InvalidZone, "InvalidZone");
  var InvalidZone = _InvalidZone;

  // node_modules/luxon/src/impl/zoneUtil.js
  function normalizeZone(input, defaultZone3) {
    let offset5;
    if (isUndefined2(input) || input === null) {
      return defaultZone3;
    } else if (input instanceof Zone) {
      return input;
    } else if (isString2(input)) {
      const lowered = input.toLowerCase();
      if (lowered === "default") return defaultZone3;
      else if (lowered === "local" || lowered === "system") return SystemZone.instance;
      else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
      else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
    } else if (isNumber(input)) {
      return FixedOffsetZone.instance(input);
    } else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") {
      return input;
    } else {
      return new InvalidZone(input);
    }
  }
  __name(normalizeZone, "normalizeZone");

  // node_modules/luxon/src/impl/digits.js
  var numberingSystems = {
    arab: "[٠-٩]",
    arabext: "[۰-۹]",
    bali: "[᭐-᭙]",
    beng: "[০-৯]",
    deva: "[०-९]",
    fullwide: "[０-９]",
    gujr: "[૦-૯]",
    hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
    khmr: "[០-៩]",
    knda: "[೦-೯]",
    laoo: "[໐-໙]",
    limb: "[᥆-᥏]",
    mlym: "[൦-൯]",
    mong: "[᠐-᠙]",
    mymr: "[၀-၉]",
    orya: "[୦-୯]",
    tamldec: "[௦-௯]",
    telu: "[౦-౯]",
    thai: "[๐-๙]",
    tibt: "[༠-༩]",
    latn: "\\d"
  };
  var numberingSystemsUTF16 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881]
  };
  var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
  function parseDigits(str) {
    let value = parseInt(str, 10);
    if (isNaN(value)) {
      value = "";
      for (let i12 = 0; i12 < str.length; i12++) {
        const code = str.charCodeAt(i12);
        if (str[i12].search(numberingSystems.hanidec) !== -1) {
          value += hanidecChars.indexOf(str[i12]);
        } else {
          for (const key in numberingSystemsUTF16) {
            const [min3, max3] = numberingSystemsUTF16[key];
            if (code >= min3 && code <= max3) {
              value += code - min3;
            }
          }
        }
      }
      return parseInt(value, 10);
    } else {
      return value;
    }
  }
  __name(parseDigits, "parseDigits");
  var digitRegexCache = /* @__PURE__ */ new Map();
  function resetDigitRegexCache() {
    digitRegexCache.clear();
  }
  __name(resetDigitRegexCache, "resetDigitRegexCache");
  function digitRegex({ numberingSystem }, append = "") {
    const ns = numberingSystem || "latn";
    let appendCache = digitRegexCache.get(ns);
    if (appendCache === void 0) {
      appendCache = /* @__PURE__ */ new Map();
      digitRegexCache.set(ns, appendCache);
    }
    let regex = appendCache.get(append);
    if (regex === void 0) {
      regex = new RegExp(`${numberingSystems[ns]}${append}`);
      appendCache.set(append, regex);
    }
    return regex;
  }
  __name(digitRegex, "digitRegex");

  // node_modules/luxon/src/settings.js
  var now = /* @__PURE__ */ __name(() => Date.now(), "now");
  var defaultZone = "system";
  var defaultLocale = null;
  var defaultNumberingSystem = null;
  var defaultOutputCalendar = null;
  var twoDigitCutoffYear = 60;
  var throwOnInvalid;
  var defaultWeekSettings = null;
  var _Settings = class _Settings {
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    static get now() {
      return now;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    static set now(n21) {
      now = n21;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */
    static set defaultZone(zone) {
      defaultZone = zone;
    }
    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    static get defaultZone() {
      return normalizeZone(defaultZone, SystemZone.instance);
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultLocale() {
      return defaultLocale;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultLocale(locale2) {
      defaultLocale = locale2;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultNumberingSystem() {
      return defaultNumberingSystem;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultNumberingSystem(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultOutputCalendar() {
      return defaultOutputCalendar;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultOutputCalendar(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }
    /**
     * @typedef {Object} WeekSettings
     * @property {number} firstDay
     * @property {number} minimalDays
     * @property {number[]} weekend
     */
    /**
     * @return {WeekSettings|null}
     */
    static get defaultWeekSettings() {
      return defaultWeekSettings;
    }
    /**
     * Allows overriding the default locale week settings, i.e. the start of the week, the weekend and
     * how many days are required in the first week of a year.
     * Does not affect existing instances.
     *
     * @param {WeekSettings|null} weekSettings
     */
    static set defaultWeekSettings(weekSettings) {
      defaultWeekSettings = validateWeekSettings(weekSettings);
    }
    /**
     * Get the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
     * @type {number}
     */
    static get twoDigitCutoffYear() {
      return twoDigitCutoffYear;
    }
    /**
     * Set the cutoff year for whether a 2-digit year string is interpreted in the current or previous century. Numbers higher than the cutoff will be considered to mean 19xx and numbers lower or equal to the cutoff will be considered 20xx.
     * @type {number}
     * @example Settings.twoDigitCutoffYear = 0 // all 'yy' are interpreted as 20th century
     * @example Settings.twoDigitCutoffYear = 99 // all 'yy' are interpreted as 21st century
     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 2049; '50' -> 1950
     * @example Settings.twoDigitCutoffYear = 1950 // interpreted as 50
     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpreted as 50
     */
    static set twoDigitCutoffYear(cutoffYear) {
      twoDigitCutoffYear = cutoffYear % 100;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static get throwOnInvalid() {
      return throwOnInvalid;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static set throwOnInvalid(t21) {
      throwOnInvalid = t21;
    }
    /**
     * Reset Luxon's global caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCaches() {
      Locale.resetCache();
      IANAZone.resetCache();
      DateTime.resetCache();
      resetDigitRegexCache();
    }
  };
  __name(_Settings, "Settings");
  var Settings = _Settings;

  // node_modules/luxon/src/impl/invalid.js
  var _Invalid = class _Invalid {
    constructor(reason, explanation) {
      this.reason = reason;
      this.explanation = explanation;
    }
    toMessage() {
      if (this.explanation) {
        return `${this.reason}: ${this.explanation}`;
      } else {
        return this.reason;
      }
    }
  };
  __name(_Invalid, "Invalid");
  var Invalid = _Invalid;

  // node_modules/luxon/src/impl/conversions.js
  var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
  var leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
  function unitOutOfRange(unit, value) {
    return new Invalid(
      "unit out of range",
      `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
    );
  }
  __name(unitOutOfRange, "unitOutOfRange");
  function dayOfWeek(year, month, day) {
    const d16 = new Date(Date.UTC(year, month - 1, day));
    if (year < 100 && year >= 0) {
      d16.setUTCFullYear(d16.getUTCFullYear() - 1900);
    }
    const js = d16.getUTCDay();
    return js === 0 ? 7 : js;
  }
  __name(dayOfWeek, "dayOfWeek");
  function computeOrdinal(year, month, day) {
    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
  }
  __name(computeOrdinal, "computeOrdinal");
  function uncomputeOrdinal(year, ordinal) {
    const table2 = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table2.findIndex((i12) => i12 < ordinal), day = ordinal - table2[month0];
    return { month: month0 + 1, day };
  }
  __name(uncomputeOrdinal, "uncomputeOrdinal");
  function isoWeekdayToLocal(isoWeekday, startOfWeek) {
    return (isoWeekday - startOfWeek + 7) % 7 + 1;
  }
  __name(isoWeekdayToLocal, "isoWeekdayToLocal");
  function gregorianToWeek(gregObj, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = isoWeekdayToLocal(dayOfWeek(year, month, day), startOfWeek);
    let weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
    if (weekNumber < 1) {
      weekYear = year - 1;
      weekNumber = weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
    } else if (weekNumber > weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
      weekYear = year + 1;
      weekNumber = 1;
    } else {
      weekYear = year;
    }
    return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
  }
  __name(gregorianToWeek, "gregorianToWeek");
  function weekToGregorian(weekData, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = isoWeekdayToLocal(dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = daysInYear(weekYear);
    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
    if (ordinal < 1) {
      year = weekYear - 1;
      ordinal += daysInYear(year);
    } else if (ordinal > yearInDays) {
      year = weekYear + 1;
      ordinal -= daysInYear(weekYear);
    } else {
      year = weekYear;
    }
    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(weekData) };
  }
  __name(weekToGregorian, "weekToGregorian");
  function gregorianToOrdinal(gregData) {
    const { year, month, day } = gregData;
    const ordinal = computeOrdinal(year, month, day);
    return { year, ordinal, ...timeObject(gregData) };
  }
  __name(gregorianToOrdinal, "gregorianToOrdinal");
  function ordinalToGregorian(ordinalData) {
    const { year, ordinal } = ordinalData;
    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(ordinalData) };
  }
  __name(ordinalToGregorian, "ordinalToGregorian");
  function usesLocalWeekValues(obj, loc) {
    const hasLocaleWeekData = !isUndefined2(obj.localWeekday) || !isUndefined2(obj.localWeekNumber) || !isUndefined2(obj.localWeekYear);
    if (hasLocaleWeekData) {
      const hasIsoWeekData = !isUndefined2(obj.weekday) || !isUndefined2(obj.weekNumber) || !isUndefined2(obj.weekYear);
      if (hasIsoWeekData) {
        throw new ConflictingSpecificationError(
          "Cannot mix locale-based week fields with ISO-based week fields"
        );
      }
      if (!isUndefined2(obj.localWeekday)) obj.weekday = obj.localWeekday;
      if (!isUndefined2(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
      if (!isUndefined2(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
      delete obj.localWeekday;
      delete obj.localWeekNumber;
      delete obj.localWeekYear;
      return {
        minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
        startOfWeek: loc.getStartOfWeek()
      };
    } else {
      return { minDaysInFirstWeek: 4, startOfWeek: 1 };
    }
  }
  __name(usesLocalWeekValues, "usesLocalWeekValues");
  function hasInvalidWeekData(obj, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const validYear = isInteger(obj.weekYear), validWeek = integerBetween(
      obj.weekNumber,
      1,
      weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)
    ), validWeekday = integerBetween(obj.weekday, 1, 7);
    if (!validYear) {
      return unitOutOfRange("weekYear", obj.weekYear);
    } else if (!validWeek) {
      return unitOutOfRange("week", obj.weekNumber);
    } else if (!validWeekday) {
      return unitOutOfRange("weekday", obj.weekday);
    } else return false;
  }
  __name(hasInvalidWeekData, "hasInvalidWeekData");
  function hasInvalidOrdinalData(obj) {
    const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validOrdinal) {
      return unitOutOfRange("ordinal", obj.ordinal);
    } else return false;
  }
  __name(hasInvalidOrdinalData, "hasInvalidOrdinalData");
  function hasInvalidGregorianData(obj) {
    const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validMonth) {
      return unitOutOfRange("month", obj.month);
    } else if (!validDay) {
      return unitOutOfRange("day", obj.day);
    } else return false;
  }
  __name(hasInvalidGregorianData, "hasInvalidGregorianData");
  function hasInvalidTimeData(obj) {
    const { hour, minute, second, millisecond } = obj;
    const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
    if (!validHour) {
      return unitOutOfRange("hour", hour);
    } else if (!validMinute) {
      return unitOutOfRange("minute", minute);
    } else if (!validSecond) {
      return unitOutOfRange("second", second);
    } else if (!validMillisecond) {
      return unitOutOfRange("millisecond", millisecond);
    } else return false;
  }
  __name(hasInvalidTimeData, "hasInvalidTimeData");

  // node_modules/luxon/src/impl/util.js
  function isUndefined2(o18) {
    return typeof o18 === "undefined";
  }
  __name(isUndefined2, "isUndefined");
  function isNumber(o18) {
    return typeof o18 === "number";
  }
  __name(isNumber, "isNumber");
  function isInteger(o18) {
    return typeof o18 === "number" && o18 % 1 === 0;
  }
  __name(isInteger, "isInteger");
  function isString2(o18) {
    return typeof o18 === "string";
  }
  __name(isString2, "isString");
  function isDate(o18) {
    return Object.prototype.toString.call(o18) === "[object Date]";
  }
  __name(isDate, "isDate");
  function hasRelative() {
    try {
      return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e18) {
      return false;
    }
  }
  __name(hasRelative, "hasRelative");
  function hasLocaleWeekInfo() {
    try {
      return typeof Intl !== "undefined" && !!Intl.Locale && ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype);
    } catch (e18) {
      return false;
    }
  }
  __name(hasLocaleWeekInfo, "hasLocaleWeekInfo");
  function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [thing];
  }
  __name(maybeArray, "maybeArray");
  function bestBy(arr, by, compare2) {
    if (arr.length === 0) {
      return void 0;
    }
    return arr.reduce((best, next) => {
      const pair = [by(next), next];
      if (!best) {
        return pair;
      } else if (compare2(best[0], pair[0]) === best[0]) {
        return best;
      } else {
        return pair;
      }
    }, null)[1];
  }
  __name(bestBy, "bestBy");
  function pick(obj, keys) {
    return keys.reduce((a21, k) => {
      a21[k] = obj[k];
      return a21;
    }, {});
  }
  __name(pick, "pick");
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  __name(hasOwnProperty, "hasOwnProperty");
  function validateWeekSettings(settings) {
    if (settings == null) {
      return null;
    } else if (typeof settings !== "object") {
      throw new InvalidArgumentError("Week settings must be an object");
    } else {
      if (!integerBetween(settings.firstDay, 1, 7) || !integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some((v4) => !integerBetween(v4, 1, 7))) {
        throw new InvalidArgumentError("Invalid week settings");
      }
      return {
        firstDay: settings.firstDay,
        minimalDays: settings.minimalDays,
        weekend: Array.from(settings.weekend)
      };
    }
  }
  __name(validateWeekSettings, "validateWeekSettings");
  function integerBetween(thing, bottom3, top3) {
    return isInteger(thing) && thing >= bottom3 && thing <= top3;
  }
  __name(integerBetween, "integerBetween");
  function floorMod(x, n21) {
    return x - n21 * Math.floor(x / n21);
  }
  __name(floorMod, "floorMod");
  function padStart(input, n21 = 2) {
    const isNeg = input < 0;
    let padded;
    if (isNeg) {
      padded = "-" + ("" + -input).padStart(n21, "0");
    } else {
      padded = ("" + input).padStart(n21, "0");
    }
    return padded;
  }
  __name(padStart, "padStart");
  function parseInteger(string) {
    if (isUndefined2(string) || string === null || string === "") {
      return void 0;
    } else {
      return parseInt(string, 10);
    }
  }
  __name(parseInteger, "parseInteger");
  function parseFloating(string) {
    if (isUndefined2(string) || string === null || string === "") {
      return void 0;
    } else {
      return parseFloat(string);
    }
  }
  __name(parseFloating, "parseFloating");
  function parseMillis(fraction) {
    if (isUndefined2(fraction) || fraction === null || fraction === "") {
      return void 0;
    } else {
      const f2 = parseFloat("0." + fraction) * 1e3;
      return Math.floor(f2);
    }
  }
  __name(parseMillis, "parseMillis");
  function roundTo(number, digits, rounding = "round") {
    const factor = 10 ** digits;
    switch (rounding) {
      case "expand":
        return number > 0 ? Math.ceil(number * factor) / factor : Math.floor(number * factor) / factor;
      case "trunc":
        return Math.trunc(number * factor) / factor;
      case "round":
        return Math.round(number * factor) / factor;
      case "floor":
        return Math.floor(number * factor) / factor;
      case "ceil":
        return Math.ceil(number * factor) / factor;
      default:
        throw new RangeError(`Value rounding ${rounding} is out of range`);
    }
  }
  __name(roundTo, "roundTo");
  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  __name(isLeapYear, "isLeapYear");
  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }
  __name(daysInYear, "daysInYear");
  function daysInMonth(year, month) {
    const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
    if (modMonth === 2) {
      return isLeapYear(modYear) ? 29 : 28;
    } else {
      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
    }
  }
  __name(daysInMonth, "daysInMonth");
  function objToLocalTS(obj) {
    let d16 = Date.UTC(
      obj.year,
      obj.month - 1,
      obj.day,
      obj.hour,
      obj.minute,
      obj.second,
      obj.millisecond
    );
    if (obj.year < 100 && obj.year >= 0) {
      d16 = new Date(d16);
      d16.setUTCFullYear(obj.year, obj.month - 1, obj.day);
    }
    return +d16;
  }
  __name(objToLocalTS, "objToLocalTS");
  function firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
    const fwdlw = isoWeekdayToLocal(dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
    return -fwdlw + minDaysInFirstWeek - 1;
  }
  __name(firstWeekOffset, "firstWeekOffset");
  function weeksInWeekYear(weekYear, minDaysInFirstWeek = 4, startOfWeek = 1) {
    const weekOffset = firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
    const weekOffsetNext = firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
    return (daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
  }
  __name(weeksInWeekYear, "weeksInWeekYear");
  function untruncateYear(year) {
    if (year > 99) {
      return year;
    } else return year > Settings.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
  }
  __name(untruncateYear, "untruncateYear");
  function parseZoneInfo(ts3, offsetFormat, locale2, timeZone = null) {
    const date = new Date(ts3), intlOpts = {
      hourCycle: "h23",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    };
    if (timeZone) {
      intlOpts.timeZone = timeZone;
    }
    const modified = { timeZoneName: offsetFormat, ...intlOpts };
    const parsed = new Intl.DateTimeFormat(locale2, modified).formatToParts(date).find((m6) => m6.type.toLowerCase() === "timezonename");
    return parsed ? parsed.value : null;
  }
  __name(parseZoneInfo, "parseZoneInfo");
  function signedOffset(offHourStr, offMinuteStr) {
    let offHour = parseInt(offHourStr, 10);
    if (Number.isNaN(offHour)) {
      offHour = 0;
    }
    const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
  }
  __name(signedOffset, "signedOffset");
  function asNumber(value) {
    const numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || !Number.isFinite(numericValue))
      throw new InvalidArgumentError(`Invalid unit value ${value}`);
    return numericValue;
  }
  __name(asNumber, "asNumber");
  function normalizeObject(obj, normalizer) {
    const normalized = {};
    for (const u10 in obj) {
      if (hasOwnProperty(obj, u10)) {
        const v4 = obj[u10];
        if (v4 === void 0 || v4 === null) continue;
        normalized[normalizer(u10)] = asNumber(v4);
      }
    }
    return normalized;
  }
  __name(normalizeObject, "normalizeObject");
  function formatOffset(offset5, format4) {
    const hours = Math.trunc(Math.abs(offset5 / 60)), minutes = Math.trunc(Math.abs(offset5 % 60)), sign = offset5 >= 0 ? "+" : "-";
    switch (format4) {
      case "short":
        return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
      case "narrow":
        return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
      case "techie":
        return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
      default:
        throw new RangeError(`Value format ${format4} is out of range for property format`);
    }
  }
  __name(formatOffset, "formatOffset");
  function timeObject(obj) {
    return pick(obj, ["hour", "minute", "second", "millisecond"]);
  }
  __name(timeObject, "timeObject");

  // node_modules/luxon/src/impl/english.js
  var monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  var monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
  function months(length) {
    switch (length) {
      case "narrow":
        return [...monthsNarrow];
      case "short":
        return [...monthsShort];
      case "long":
        return [...monthsLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      case "2-digit":
        return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
      default:
        return null;
    }
  }
  __name(months, "months");
  var weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
  ];
  var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
  var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
  function weekdays(length) {
    switch (length) {
      case "narrow":
        return [...weekdaysNarrow];
      case "short":
        return [...weekdaysShort];
      case "long":
        return [...weekdaysLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7"];
      default:
        return null;
    }
  }
  __name(weekdays, "weekdays");
  var meridiems = ["AM", "PM"];
  var erasLong = ["Before Christ", "Anno Domini"];
  var erasShort = ["BC", "AD"];
  var erasNarrow = ["B", "A"];
  function eras(length) {
    switch (length) {
      case "narrow":
        return [...erasNarrow];
      case "short":
        return [...erasShort];
      case "long":
        return [...erasLong];
      default:
        return null;
    }
  }
  __name(eras, "eras");
  function meridiemForDateTime(dt3) {
    return meridiems[dt3.hour < 12 ? 0 : 1];
  }
  __name(meridiemForDateTime, "meridiemForDateTime");
  function weekdayForDateTime(dt3, length) {
    return weekdays(length)[dt3.weekday - 1];
  }
  __name(weekdayForDateTime, "weekdayForDateTime");
  function monthForDateTime(dt3, length) {
    return months(length)[dt3.month - 1];
  }
  __name(monthForDateTime, "monthForDateTime");
  function eraForDateTime(dt3, length) {
    return eras(length)[dt3.year < 0 ? 0 : 1];
  }
  __name(eraForDateTime, "eraForDateTime");
  function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
    const units = {
      years: ["year", "yr."],
      quarters: ["quarter", "qtr."],
      months: ["month", "mo."],
      weeks: ["week", "wk."],
      days: ["day", "day", "days"],
      hours: ["hour", "hr."],
      minutes: ["minute", "min."],
      seconds: ["second", "sec."]
    };
    const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
    if (numeric === "auto" && lastable) {
      const isDay = unit === "days";
      switch (count) {
        case 1:
          return isDay ? "tomorrow" : `next ${units[unit][0]}`;
        case -1:
          return isDay ? "yesterday" : `last ${units[unit][0]}`;
        case 0:
          return isDay ? "today" : `this ${units[unit][0]}`;
        default:
      }
    }
    const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
    return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
  }
  __name(formatRelativeTime, "formatRelativeTime");

  // node_modules/luxon/src/impl/formatter.js
  function stringifyTokens(splits, tokenToString) {
    let s21 = "";
    for (const token of splits) {
      if (token.literal) {
        s21 += token.val;
      } else {
        s21 += tokenToString(token.val);
      }
    }
    return s21;
  }
  __name(stringifyTokens, "stringifyTokens");
  var macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS
  };
  var _Formatter = class _Formatter {
    static create(locale2, opts = {}) {
      return new _Formatter(locale2, opts);
    }
    static parseFormat(fmt) {
      let current = null, currentFull = "", bracketed = false;
      const splits = [];
      for (let i12 = 0; i12 < fmt.length; i12++) {
        const c6 = fmt.charAt(i12);
        if (c6 === "'") {
          if (currentFull.length > 0 || bracketed) {
            splits.push({
              literal: bracketed || /^\s+$/.test(currentFull),
              val: currentFull === "" ? "'" : currentFull
            });
          }
          current = null;
          currentFull = "";
          bracketed = !bracketed;
        } else if (bracketed) {
          currentFull += c6;
        } else if (c6 === current) {
          currentFull += c6;
        } else {
          if (currentFull.length > 0) {
            splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
          }
          currentFull = c6;
          current = c6;
        }
      }
      if (currentFull.length > 0) {
        splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
      }
      return splits;
    }
    static macroTokenToFormatOpts(token) {
      return macroTokenToFormatOpts[token];
    }
    constructor(locale2, formatOpts) {
      this.opts = formatOpts;
      this.loc = locale2;
      this.systemLoc = null;
    }
    formatWithSystemDefault(dt3, opts) {
      if (this.systemLoc === null) {
        this.systemLoc = this.loc.redefaultToSystem();
      }
      const df = this.systemLoc.dtFormatter(dt3, { ...this.opts, ...opts });
      return df.format();
    }
    dtFormatter(dt3, opts = {}) {
      return this.loc.dtFormatter(dt3, { ...this.opts, ...opts });
    }
    formatDateTime(dt3, opts) {
      return this.dtFormatter(dt3, opts).format();
    }
    formatDateTimeParts(dt3, opts) {
      return this.dtFormatter(dt3, opts).formatToParts();
    }
    formatInterval(interval, opts) {
      const df = this.dtFormatter(interval.start, opts);
      return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    }
    resolvedOptions(dt3, opts) {
      return this.dtFormatter(dt3, opts).resolvedOptions();
    }
    num(n21, p5 = 0, signDisplay = void 0) {
      if (this.opts.forceSimple) {
        return padStart(n21, p5);
      }
      const opts = { ...this.opts };
      if (p5 > 0) {
        opts.padTo = p5;
      }
      if (signDisplay) {
        opts.signDisplay = signDisplay;
      }
      return this.loc.numberFormatter(opts).format(n21);
    }
    formatDateTimeFromString(dt3, fmt) {
      const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = /* @__PURE__ */ __name((opts, extract) => this.loc.extract(dt3, opts, extract), "string"), formatOffset3 = /* @__PURE__ */ __name((opts) => {
        if (dt3.isOffsetFixed && dt3.offset === 0 && opts.allowZ) {
          return "Z";
        }
        return dt3.isValid ? dt3.zone.formatOffset(dt3.ts, opts.format) : "";
      }, "formatOffset"), meridiem = /* @__PURE__ */ __name(() => knownEnglish ? meridiemForDateTime(dt3) : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), "meridiem"), month = /* @__PURE__ */ __name((length, standalone) => knownEnglish ? monthForDateTime(dt3, length) : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), "month"), weekday = /* @__PURE__ */ __name((length, standalone) => knownEnglish ? weekdayForDateTime(dt3, length) : string(
        standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
        "weekday"
      ), "weekday"), maybeMacro = /* @__PURE__ */ __name((token) => {
        const formatOpts = _Formatter.macroTokenToFormatOpts(token);
        if (formatOpts) {
          return this.formatWithSystemDefault(dt3, formatOpts);
        } else {
          return token;
        }
      }, "maybeMacro"), era = /* @__PURE__ */ __name((length) => knownEnglish ? eraForDateTime(dt3, length) : string({ era: length }, "era"), "era"), tokenToString = /* @__PURE__ */ __name((token) => {
        switch (token) {
          // ms
          case "S":
            return this.num(dt3.millisecond);
          case "u":
          // falls through
          case "SSS":
            return this.num(dt3.millisecond, 3);
          // seconds
          case "s":
            return this.num(dt3.second);
          case "ss":
            return this.num(dt3.second, 2);
          // fractional seconds
          case "uu":
            return this.num(Math.floor(dt3.millisecond / 10), 2);
          case "uuu":
            return this.num(Math.floor(dt3.millisecond / 100));
          // minutes
          case "m":
            return this.num(dt3.minute);
          case "mm":
            return this.num(dt3.minute, 2);
          // hours
          case "h":
            return this.num(dt3.hour % 12 === 0 ? 12 : dt3.hour % 12);
          case "hh":
            return this.num(dt3.hour % 12 === 0 ? 12 : dt3.hour % 12, 2);
          case "H":
            return this.num(dt3.hour);
          case "HH":
            return this.num(dt3.hour, 2);
          // offset
          case "Z":
            return formatOffset3({ format: "narrow", allowZ: this.opts.allowZ });
          case "ZZ":
            return formatOffset3({ format: "short", allowZ: this.opts.allowZ });
          case "ZZZ":
            return formatOffset3({ format: "techie", allowZ: this.opts.allowZ });
          case "ZZZZ":
            return dt3.zone.offsetName(dt3.ts, { format: "short", locale: this.loc.locale });
          case "ZZZZZ":
            return dt3.zone.offsetName(dt3.ts, { format: "long", locale: this.loc.locale });
          // zone
          case "z":
            return dt3.zoneName;
          // meridiems
          case "a":
            return meridiem();
          // dates
          case "d":
            return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt3.day);
          case "dd":
            return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt3.day, 2);
          // weekdays - standalone
          case "c":
            return this.num(dt3.weekday);
          case "ccc":
            return weekday("short", true);
          case "cccc":
            return weekday("long", true);
          case "ccccc":
            return weekday("narrow", true);
          // weekdays - format
          case "E":
            return this.num(dt3.weekday);
          case "EEE":
            return weekday("short", false);
          case "EEEE":
            return weekday("long", false);
          case "EEEEE":
            return weekday("narrow", false);
          // months - standalone
          case "L":
            return useDateTimeFormatter ? string({ month: "numeric", day: "numeric" }, "month") : this.num(dt3.month);
          case "LL":
            return useDateTimeFormatter ? string({ month: "2-digit", day: "numeric" }, "month") : this.num(dt3.month, 2);
          case "LLL":
            return month("short", true);
          case "LLLL":
            return month("long", true);
          case "LLLLL":
            return month("narrow", true);
          // months - format
          case "M":
            return useDateTimeFormatter ? string({ month: "numeric" }, "month") : this.num(dt3.month);
          case "MM":
            return useDateTimeFormatter ? string({ month: "2-digit" }, "month") : this.num(dt3.month, 2);
          case "MMM":
            return month("short", false);
          case "MMMM":
            return month("long", false);
          case "MMMMM":
            return month("narrow", false);
          // years
          case "y":
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt3.year);
          case "yy":
            return useDateTimeFormatter ? string({ year: "2-digit" }, "year") : this.num(dt3.year.toString().slice(-2), 2);
          case "yyyy":
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt3.year, 4);
          case "yyyyyy":
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt3.year, 6);
          // eras
          case "G":
            return era("short");
          case "GG":
            return era("long");
          case "GGGGG":
            return era("narrow");
          case "kk":
            return this.num(dt3.weekYear.toString().slice(-2), 2);
          case "kkkk":
            return this.num(dt3.weekYear, 4);
          case "W":
            return this.num(dt3.weekNumber);
          case "WW":
            return this.num(dt3.weekNumber, 2);
          case "n":
            return this.num(dt3.localWeekNumber);
          case "nn":
            return this.num(dt3.localWeekNumber, 2);
          case "ii":
            return this.num(dt3.localWeekYear.toString().slice(-2), 2);
          case "iiii":
            return this.num(dt3.localWeekYear, 4);
          case "o":
            return this.num(dt3.ordinal);
          case "ooo":
            return this.num(dt3.ordinal, 3);
          case "q":
            return this.num(dt3.quarter);
          case "qq":
            return this.num(dt3.quarter, 2);
          case "X":
            return this.num(Math.floor(dt3.ts / 1e3));
          case "x":
            return this.num(dt3.ts);
          default:
            return maybeMacro(token);
        }
      }, "tokenToString");
      return stringifyTokens(_Formatter.parseFormat(fmt), tokenToString);
    }
    formatDurationFromString(dur, fmt) {
      const invertLargest = this.opts.signMode === "negativeLargestOnly" ? -1 : 1;
      const tokenToField = /* @__PURE__ */ __name((token) => {
        switch (token[0]) {
          case "S":
            return "milliseconds";
          case "s":
            return "seconds";
          case "m":
            return "minutes";
          case "h":
            return "hours";
          case "d":
            return "days";
          case "w":
            return "weeks";
          case "M":
            return "months";
          case "y":
            return "years";
          default:
            return null;
        }
      }, "tokenToField"), tokenToString = /* @__PURE__ */ __name((lildur, info2) => (token) => {
        const mapped = tokenToField(token);
        if (mapped) {
          const inversionFactor = info2.isNegativeDuration && mapped !== info2.largestUnit ? invertLargest : 1;
          let signDisplay;
          if (this.opts.signMode === "negativeLargestOnly" && mapped !== info2.largestUnit) {
            signDisplay = "never";
          } else if (this.opts.signMode === "all") {
            signDisplay = "always";
          } else {
            signDisplay = "auto";
          }
          return this.num(lildur.get(mapped) * inversionFactor, token.length, signDisplay);
        } else {
          return token;
        }
      }, "tokenToString"), tokens = _Formatter.parseFormat(fmt), realTokens = tokens.reduce(
        (found, { literal, val }) => literal ? found : found.concat(val),
        []
      ), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t21) => t21)), durationInfo = {
        isNegativeDuration: collapsed < 0,
        // this relies on "collapsed" being based on "shiftTo", which builds up the object
        // in order
        largestUnit: Object.keys(collapsed.values)[0]
      };
      return stringifyTokens(tokens, tokenToString(collapsed, durationInfo));
    }
  };
  __name(_Formatter, "Formatter");
  var Formatter = _Formatter;

  // node_modules/luxon/src/impl/regexParser.js
  var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
  function combineRegexes(...regexes) {
    const full = regexes.reduce((f2, r30) => f2 + r30.source, "");
    return RegExp(`^${full}$`);
  }
  __name(combineRegexes, "combineRegexes");
  function combineExtractors(...extractors) {
    return (m6) => extractors.reduce(
      ([mergedVals, mergedZone, cursor], ex) => {
        const [val, zone, next] = ex(m6, cursor);
        return [{ ...mergedVals, ...val }, zone || mergedZone, next];
      },
      [{}, null, 1]
    ).slice(0, 2);
  }
  __name(combineExtractors, "combineExtractors");
  function parse2(s21, ...patterns) {
    if (s21 == null) {
      return [null, null];
    }
    for (const [regex, extractor] of patterns) {
      const m6 = regex.exec(s21);
      if (m6) {
        return extractor(m6);
      }
    }
    return [null, null];
  }
  __name(parse2, "parse");
  function simpleParse(...keys) {
    return (match4, cursor) => {
      const ret = {};
      let i12;
      for (i12 = 0; i12 < keys.length; i12++) {
        ret[keys[i12]] = parseInteger(match4[cursor + i12]);
      }
      return [ret, null, cursor + i12];
    };
  }
  __name(simpleParse, "simpleParse");
  var offsetRegex = /(?:([Zz])|([+-]\d\d)(?::?(\d\d))?)/;
  var isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
  var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
  var isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
  var isoTimeExtensionRegex = RegExp(`(?:[Tt]${isoTimeRegex.source})?`);
  var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
  var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
  var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
  var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
  var extractISOOrdinalData = simpleParse("year", "ordinal");
  var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
  var sqlTimeRegex = RegExp(
    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
  );
  var sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
  function int(match4, pos, fallback) {
    const m6 = match4[pos];
    return isUndefined2(m6) ? fallback : parseInteger(m6);
  }
  __name(int, "int");
  function extractISOYmd(match4, cursor) {
    const item = {
      year: int(match4, cursor),
      month: int(match4, cursor + 1, 1),
      day: int(match4, cursor + 2, 1)
    };
    return [item, null, cursor + 3];
  }
  __name(extractISOYmd, "extractISOYmd");
  function extractISOTime(match4, cursor) {
    const item = {
      hours: int(match4, cursor, 0),
      minutes: int(match4, cursor + 1, 0),
      seconds: int(match4, cursor + 2, 0),
      milliseconds: parseMillis(match4[cursor + 3])
    };
    return [item, null, cursor + 4];
  }
  __name(extractISOTime, "extractISOTime");
  function extractISOOffset(match4, cursor) {
    const local = !match4[cursor] && !match4[cursor + 1], fullOffset = signedOffset(match4[cursor + 1], match4[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
    return [{}, zone, cursor + 3];
  }
  __name(extractISOOffset, "extractISOOffset");
  function extractIANAZone(match4, cursor) {
    const zone = match4[cursor] ? IANAZone.create(match4[cursor]) : null;
    return [{}, zone, cursor + 1];
  }
  __name(extractIANAZone, "extractIANAZone");
  var isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
  var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
  function extractISODuration(match4) {
    const [s21, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match4;
    const hasNegativePrefix = s21[0] === "-";
    const negativeSeconds = secondStr && secondStr[0] === "-";
    const maybeNegate = /* @__PURE__ */ __name((num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num, "maybeNegate");
    return [
      {
        years: maybeNegate(parseFloating(yearStr)),
        months: maybeNegate(parseFloating(monthStr)),
        weeks: maybeNegate(parseFloating(weekStr)),
        days: maybeNegate(parseFloating(dayStr)),
        hours: maybeNegate(parseFloating(hourStr)),
        minutes: maybeNegate(parseFloating(minuteStr)),
        seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
        milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
      }
    ];
  }
  __name(extractISODuration, "extractISODuration");
  var obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };
  function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = {
      year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
      month: monthsShort.indexOf(monthStr) + 1,
      day: parseInteger(dayStr),
      hour: parseInteger(hourStr),
      minute: parseInteger(minuteStr)
    };
    if (secondStr) result.second = parseInteger(secondStr);
    if (weekdayStr) {
      result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
    }
    return result;
  }
  __name(fromStrings, "fromStrings");
  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
  function extractRFC2822(match4) {
    const [
      ,
      weekdayStr,
      dayStr,
      monthStr,
      yearStr,
      hourStr,
      minuteStr,
      secondStr,
      obsOffset,
      milOffset,
      offHourStr,
      offMinuteStr
    ] = match4, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    let offset5;
    if (obsOffset) {
      offset5 = obsOffsets[obsOffset];
    } else if (milOffset) {
      offset5 = 0;
    } else {
      offset5 = signedOffset(offHourStr, offMinuteStr);
    }
    return [result, new FixedOffsetZone(offset5)];
  }
  __name(extractRFC2822, "extractRFC2822");
  function preprocessRFC2822(s21) {
    return s21.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
  }
  __name(preprocessRFC2822, "preprocessRFC2822");
  var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
  var rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
  var ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
  function extractRFC1123Or850(match4) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match4, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }
  __name(extractRFC1123Or850, "extractRFC1123Or850");
  function extractASCII(match4) {
    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match4, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }
  __name(extractASCII, "extractASCII");
  var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
  var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
  var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
  var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
  var extractISOYmdTimeAndOffset = combineExtractors(
    extractISOYmd,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  var extractISOWeekTimeAndOffset = combineExtractors(
    extractISOWeekData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  var extractISOOrdinalDateAndTime = combineExtractors(
    extractISOOrdinalData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  var extractISOTimeAndOffset = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  function parseISODate(s21) {
    return parse2(
      s21,
      [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
      [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
      [isoTimeCombinedRegex, extractISOTimeAndOffset]
    );
  }
  __name(parseISODate, "parseISODate");
  function parseRFC2822Date(s21) {
    return parse2(preprocessRFC2822(s21), [rfc2822, extractRFC2822]);
  }
  __name(parseRFC2822Date, "parseRFC2822Date");
  function parseHTTPDate(s21) {
    return parse2(
      s21,
      [rfc1123, extractRFC1123Or850],
      [rfc850, extractRFC1123Or850],
      [ascii, extractASCII]
    );
  }
  __name(parseHTTPDate, "parseHTTPDate");
  function parseISODuration(s21) {
    return parse2(s21, [isoDuration, extractISODuration]);
  }
  __name(parseISODuration, "parseISODuration");
  var extractISOTimeOnly = combineExtractors(extractISOTime);
  function parseISOTimeOnly(s21) {
    return parse2(s21, [isoTimeOnly, extractISOTimeOnly]);
  }
  __name(parseISOTimeOnly, "parseISOTimeOnly");
  var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
  var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
  var extractISOTimeOffsetAndIANAZone = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  function parseSQL(s21) {
    return parse2(
      s21,
      [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
    );
  }
  __name(parseSQL, "parseSQL");

  // node_modules/luxon/src/duration.js
  var INVALID = "Invalid Duration";
  var lowOrderMatrix = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1e3
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1e3
    },
    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
    minutes: { seconds: 60, milliseconds: 60 * 1e3 },
    seconds: { milliseconds: 1e3 }
  };
  var casualMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1e3
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      seconds: 91 * 24 * 60 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1e3
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix
  };
  var daysInYearAccurate = 146097 / 400;
  var daysInMonthAccurate = 146097 / 4800;
  var accurateMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: daysInYearAccurate / 7,
      days: daysInYearAccurate,
      hours: daysInYearAccurate * 24,
      minutes: daysInYearAccurate * 24 * 60,
      seconds: daysInYearAccurate * 24 * 60 * 60,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate / 28,
      days: daysInYearAccurate / 4,
      hours: daysInYearAccurate * 24 / 4,
      minutes: daysInYearAccurate * 24 * 60 / 4,
      seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
    },
    months: {
      weeks: daysInMonthAccurate / 7,
      days: daysInMonthAccurate,
      hours: daysInMonthAccurate * 24,
      minutes: daysInMonthAccurate * 24 * 60,
      seconds: daysInMonthAccurate * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix
  };
  var orderedUnits = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
  ];
  var reverseUnits = orderedUnits.slice(0).reverse();
  function clone(dur, alts, clear = false) {
    const conf = {
      values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
      loc: dur.loc.clone(alts.loc),
      conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
      matrix: alts.matrix || dur.matrix
    };
    return new Duration(conf);
  }
  __name(clone, "clone");
  function durationToMillis(matrix, vals) {
    let sum = vals.milliseconds ?? 0;
    for (const unit of reverseUnits.slice(1)) {
      if (vals[unit]) {
        sum += vals[unit] * matrix[unit]["milliseconds"];
      }
    }
    return sum;
  }
  __name(durationToMillis, "durationToMillis");
  function normalizeValues(matrix, vals) {
    const factor = durationToMillis(matrix, vals) < 0 ? -1 : 1;
    orderedUnits.reduceRight((previous, current) => {
      if (!isUndefined2(vals[current])) {
        if (previous) {
          const previousVal = vals[previous] * factor;
          const conv = matrix[current][previous];
          const rollUp = Math.floor(previousVal / conv);
          vals[current] += rollUp * factor;
          vals[previous] -= rollUp * conv * factor;
        }
        return current;
      } else {
        return previous;
      }
    }, null);
    orderedUnits.reduce((previous, current) => {
      if (!isUndefined2(vals[current])) {
        if (previous) {
          const fraction = vals[previous] % 1;
          vals[previous] -= fraction;
          vals[current] += fraction * matrix[previous][current];
        }
        return current;
      } else {
        return previous;
      }
    }, null);
  }
  __name(normalizeValues, "normalizeValues");
  function removeZeroes(vals) {
    const newVals = {};
    for (const [key, value] of Object.entries(vals)) {
      if (value !== 0) {
        newVals[key] = value;
      }
    }
    return newVals;
  }
  __name(removeZeroes, "removeZeroes");
  var _Duration = class _Duration {
    /**
     * @private
     */
    constructor(config3) {
      const accurate = config3.conversionAccuracy === "longterm" || false;
      let matrix = accurate ? accurateMatrix : casualMatrix;
      if (config3.matrix) {
        matrix = config3.matrix;
      }
      this.values = config3.values;
      this.loc = config3.loc || Locale.create();
      this.conversionAccuracy = accurate ? "longterm" : "casual";
      this.invalid = config3.invalid || null;
      this.matrix = matrix;
      this.isLuxonDuration = true;
    }
    /**
     * Create Duration from a number of milliseconds.
     * @param {number} count of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    static fromMillis(count, opts) {
      return _Duration.fromObject({ milliseconds: count }, opts);
    }
    /**
     * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
     * If this object is empty then a zero milliseconds duration is returned.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.years
     * @param {number} obj.quarters
     * @param {number} obj.months
     * @param {number} obj.weeks
     * @param {number} obj.days
     * @param {number} obj.hours
     * @param {number} obj.minutes
     * @param {number} obj.seconds
     * @param {number} obj.milliseconds
     * @param {Object} [opts=[]] - options for creating this Duration
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the custom conversion system to use
     * @return {Duration}
     */
    static fromObject(obj, opts = {}) {
      if (obj == null || typeof obj !== "object") {
        throw new InvalidArgumentError(
          `Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`
        );
      }
      return new _Duration({
        values: normalizeObject(obj, _Duration.normalizeUnit),
        loc: Locale.fromObject(opts),
        conversionAccuracy: opts.conversionAccuracy,
        matrix: opts.matrix
      });
    }
    /**
     * Create a Duration from DurationLike.
     *
     * @param {Object | number | Duration} durationLike
     * One of:
     * - object with keys like 'years' and 'hours'.
     * - number representing milliseconds
     * - Duration instance
     * @return {Duration}
     */
    static fromDurationLike(durationLike) {
      if (isNumber(durationLike)) {
        return _Duration.fromMillis(durationLike);
      } else if (_Duration.isDuration(durationLike)) {
        return durationLike;
      } else if (typeof durationLike === "object") {
        return _Duration.fromObject(durationLike);
      } else {
        throw new InvalidArgumentError(
          `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
        );
      }
    }
    /**
     * Create a Duration from an ISO 8601 duration string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the preset conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
     * @return {Duration}
     */
    static fromISO(text, opts) {
      const [parsed] = parseISODuration(text);
      if (parsed) {
        return _Duration.fromObject(parsed, opts);
      } else {
        return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }
    /**
     * Create a Duration from an ISO 8601 time string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
     * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @return {Duration}
     */
    static fromISOTime(text, opts) {
      const [parsed] = parseISOTimeOnly(text);
      if (parsed) {
        return _Duration.fromObject(parsed, opts);
      } else {
        return _Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }
    /**
     * Create an invalid Duration.
     * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Duration}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
      }
      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
      if (Settings.throwOnInvalid) {
        throw new InvalidDurationError(invalid);
      } else {
        return new _Duration({ invalid });
      }
    }
    /**
     * @private
     */
    static normalizeUnit(unit) {
      const normalized = {
        year: "years",
        years: "years",
        quarter: "quarters",
        quarters: "quarters",
        month: "months",
        months: "months",
        week: "weeks",
        weeks: "weeks",
        day: "days",
        days: "days",
        hour: "hours",
        hours: "hours",
        minute: "minutes",
        minutes: "minutes",
        second: "seconds",
        seconds: "seconds",
        millisecond: "milliseconds",
        milliseconds: "milliseconds"
      }[unit ? unit.toLowerCase() : unit];
      if (!normalized) throw new InvalidUnitError(unit);
      return normalized;
    }
    /**
     * Check if an object is a Duration. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDuration(o18) {
      return o18 && o18.isLuxonDuration || false;
    }
    /**
     * Get  the locale of a Duration, such 'en-GB'
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
     * * `S` for milliseconds
     * * `s` for seconds
     * * `m` for minutes
     * * `h` for hours
     * * `d` for days
     * * `w` for weeks
     * * `M` for months
     * * `y` for years
     * Notes:
     * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
     * * Tokens can be escaped by wrapping with single quotes.
     * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
     * @param {string} fmt - the format string
     * @param {Object} opts - options
     * @param {boolean} [opts.floor=true] - floor numerical values
     * @param {'negative'|'all'|'negativeLargestOnly'} [opts.signMode=negative] - How to handle signs
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
     * @example Duration.fromObject({ days: 6, seconds: 2 }).toFormat("d s", { signMode: "all" }) //=> "+6 +2"
     * @example Duration.fromObject({ days: -6, seconds: -2 }).toFormat("d s", { signMode: "all" }) //=> "-6 -2"
     * @example Duration.fromObject({ days: -6, seconds: -2 }).toFormat("d s", { signMode: "negativeLargestOnly" }) //=> "-6 2"
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      const fmtOpts = {
        ...opts,
        floor: opts.round !== false && opts.floor !== false
      };
      return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
    }
    /**
     * Returns a string representation of a Duration with all units included.
     * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
     * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
     * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
     * @param {boolean} [opts.showZeros=true] - Show all units previously used by the duration even if they are zero
     * @example
     * ```js
     * var dur = Duration.fromObject({ months: 1, weeks: 0, hours: 5, minutes: 6 })
     * dur.toHuman() //=> '1 month, 0 weeks, 5 hours, 6 minutes'
     * dur.toHuman({ listStyle: "long" }) //=> '1 month, 0 weeks, 5 hours, and 6 minutes'
     * dur.toHuman({ unitDisplay: "short" }) //=> '1 mth, 0 wks, 5 hr, 6 min'
     * dur.toHuman({ showZeros: false }) //=> '1 month, 5 hours, 6 minutes'
     * ```
     */
    toHuman(opts = {}) {
      if (!this.isValid) return INVALID;
      const showZeros = opts.showZeros !== false;
      const l19 = orderedUnits.map((unit) => {
        const val = this.values[unit];
        if (isUndefined2(val) || val === 0 && !showZeros) {
          return null;
        }
        return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
      }).filter((n21) => n21);
      return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l19);
    }
    /**
     * Returns a JavaScript object with this Duration's values.
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
     * @return {Object}
     */
    toObject() {
      if (!this.isValid) return {};
      return { ...this.values };
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Duration.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
     * @return {string}
     */
    toISO() {
      if (!this.isValid) return null;
      let s21 = "P";
      if (this.years !== 0) s21 += this.years + "Y";
      if (this.months !== 0 || this.quarters !== 0) s21 += this.months + this.quarters * 3 + "M";
      if (this.weeks !== 0) s21 += this.weeks + "W";
      if (this.days !== 0) s21 += this.days + "D";
      if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
        s21 += "T";
      if (this.hours !== 0) s21 += this.hours + "H";
      if (this.minutes !== 0) s21 += this.minutes + "M";
      if (this.seconds !== 0 || this.milliseconds !== 0)
        s21 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
      if (s21 === "P") s21 += "T0S";
      return s21;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
     * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
     * @return {string}
     */
    toISOTime(opts = {}) {
      if (!this.isValid) return null;
      const millis = this.toMillis();
      if (millis < 0 || millis >= 864e5) return null;
      opts = {
        suppressMilliseconds: false,
        suppressSeconds: false,
        includePrefix: false,
        format: "extended",
        ...opts,
        includeOffset: false
      };
      const dateTime = DateTime.fromMillis(millis, { zone: "UTC" });
      return dateTime.toISOTime(opts);
    }
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
     * @return {string}
     */
    toString() {
      return this.toISO();
    }
    /**
     * Returns a string representation of this Duration appropriate for the REPL.
     * @return {string}
     */
    [Symbol.for("nodejs.util.inspect.custom")]() {
      if (this.isValid) {
        return `Duration { values: ${JSON.stringify(this.values)} }`;
      } else {
        return `Duration { Invalid, reason: ${this.invalidReason} }`;
      }
    }
    /**
     * Returns an milliseconds value of this Duration.
     * @return {number}
     */
    toMillis() {
      if (!this.isValid) return NaN;
      return durationToMillis(this.matrix, this.values);
    }
    /**
     * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }
    /**
     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    plus(duration) {
      if (!this.isValid) return this;
      const dur = _Duration.fromDurationLike(duration), result = {};
      for (const k of orderedUnits) {
        if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
          result[k] = dur.get(k) + this.get(k);
        }
      }
      return clone(this, { values: result }, true);
    }
    /**
     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    minus(duration) {
      if (!this.isValid) return this;
      const dur = _Duration.fromDurationLike(duration);
      return this.plus(dur.negate());
    }
    /**
     * Scale this Duration by the specified amount. Return a newly-constructed Duration.
     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
     * @return {Duration}
     */
    mapUnits(fn3) {
      if (!this.isValid) return this;
      const result = {};
      for (const k of Object.keys(this.values)) {
        result[k] = asNumber(fn3(this.values[k], k));
      }
      return clone(this, { values: result }, true);
    }
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
     * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
     * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
     * @return {number}
     */
    get(unit) {
      return this[_Duration.normalizeUnit(unit)];
    }
    /**
     * "Set" the values of specified units. Return a newly-constructed Duration.
     * @param {Object} values - a mapping of units to numbers
     * @example dur.set({ years: 2017 })
     * @example dur.set({ hours: 8, minutes: 30 })
     * @return {Duration}
     */
    set(values) {
      if (!this.isValid) return this;
      const mixed = { ...this.values, ...normalizeObject(values, _Duration.normalizeUnit) };
      return clone(this, { values: mixed });
    }
    /**
     * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
     * @example dur.reconfigure({ locale: 'en-GB' })
     * @return {Duration}
     */
    reconfigure({ locale: locale2, numberingSystem, conversionAccuracy, matrix } = {}) {
      const loc = this.loc.clone({ locale: locale2, numberingSystem });
      const opts = { loc, matrix, conversionAccuracy };
      return clone(this, opts);
    }
    /**
     * Return the length of the duration in the specified unit.
     * @param {string} unit - a unit such as 'minutes' or 'days'
     * @example Duration.fromObject({years: 1}).as('days') //=> 365
     * @example Duration.fromObject({years: 1}).as('months') //=> 12
     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
     * @return {number}
     */
    as(unit) {
      return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    }
    /**
     * Reduce this Duration to its canonical representation in its current units.
     * Assuming the overall value of the Duration is positive, this means:
     * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
     * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
     *   the overall value would be negative, see third example)
     * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
     *
     * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
     * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
     * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
     * @return {Duration}
     */
    normalize() {
      if (!this.isValid) return this;
      const vals = this.toObject();
      normalizeValues(this.matrix, vals);
      return clone(this, { values: vals }, true);
    }
    /**
     * Rescale units to its largest representation
     * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
     * @return {Duration}
     */
    rescale() {
      if (!this.isValid) return this;
      const vals = removeZeroes(this.normalize().shiftToAll().toObject());
      return clone(this, { values: vals }, true);
    }
    /**
     * Convert this Duration into its representation in a different set of units.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
     * @return {Duration}
     */
    shiftTo(...units) {
      if (!this.isValid) return this;
      if (units.length === 0) {
        return this;
      }
      units = units.map((u10) => _Duration.normalizeUnit(u10));
      const built = {}, accumulated = {}, vals = this.toObject();
      let lastUnit;
      for (const k of orderedUnits) {
        if (units.indexOf(k) >= 0) {
          lastUnit = k;
          let own = 0;
          for (const ak in accumulated) {
            own += this.matrix[ak][k] * accumulated[ak];
            accumulated[ak] = 0;
          }
          if (isNumber(vals[k])) {
            own += vals[k];
          }
          const i12 = Math.trunc(own);
          built[k] = i12;
          accumulated[k] = (own * 1e3 - i12 * 1e3) / 1e3;
        } else if (isNumber(vals[k])) {
          accumulated[k] = vals[k];
        }
      }
      for (const key in accumulated) {
        if (accumulated[key] !== 0) {
          built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
        }
      }
      normalizeValues(this.matrix, built);
      return clone(this, { values: built }, true);
    }
    /**
     * Shift this Duration to all available units.
     * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
     * @return {Duration}
     */
    shiftToAll() {
      if (!this.isValid) return this;
      return this.shiftTo(
        "years",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
      );
    }
    /**
     * Return the negative of this Duration.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
     * @return {Duration}
     */
    negate() {
      if (!this.isValid) return this;
      const negated = {};
      for (const k of Object.keys(this.values)) {
        negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
      }
      return clone(this, { values: negated }, true);
    }
    /**
     * Removes all units with values equal to 0 from this Duration.
     * @example Duration.fromObject({ years: 2, days: 0, hours: 0, minutes: 0 }).removeZeros().toObject() //=> { years: 2 }
     * @return {Duration}
     */
    removeZeros() {
      if (!this.isValid) return this;
      const vals = removeZeroes(this.values);
      return clone(this, { values: vals }, true);
    }
    /**
     * Get the years.
     * @type {number}
     */
    get years() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */
    get quarters() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */
    get months() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */
    get weeks() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */
    get days() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */
    get hours() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */
    get minutes() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */
    get seconds() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */
    get milliseconds() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Equality check
     * Two Durations are equal iff they have the same units and the same values for each unit.
     * @param {Duration} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }
      if (!this.loc.equals(other.loc)) {
        return false;
      }
      function eq(v1, v22) {
        if (v1 === void 0 || v1 === 0) return v22 === void 0 || v22 === 0;
        return v1 === v22;
      }
      __name(eq, "eq");
      for (const u10 of orderedUnits) {
        if (!eq(this.values[u10], other.values[u10])) {
          return false;
        }
      }
      return true;
    }
  };
  __name(_Duration, "Duration");
  var Duration = _Duration;

  // node_modules/luxon/src/interval.js
  var INVALID2 = "Invalid Interval";
  function validateStartEnd(start5, end3) {
    if (!start5 || !start5.isValid) {
      return Interval.invalid("missing or invalid start");
    } else if (!end3 || !end3.isValid) {
      return Interval.invalid("missing or invalid end");
    } else if (end3 < start5) {
      return Interval.invalid(
        "end before start",
        `The end of an interval must be after its start, but you had start=${start5.toISO()} and end=${end3.toISO()}`
      );
    } else {
      return null;
    }
  }
  __name(validateStartEnd, "validateStartEnd");
  var _Interval = class _Interval {
    /**
     * @private
     */
    constructor(config3) {
      this.s = config3.start;
      this.e = config3.end;
      this.invalid = config3.invalid || null;
      this.isLuxonInterval = true;
    }
    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Interval}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
      }
      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
      if (Settings.throwOnInvalid) {
        throw new InvalidIntervalError(invalid);
      } else {
        return new _Interval({ invalid });
      }
    }
    /**
     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
     * @param {DateTime|Date|Object} start
     * @param {DateTime|Date|Object} end
     * @return {Interval}
     */
    static fromDateTimes(start5, end3) {
      const builtStart = friendlyDateTime(start5), builtEnd = friendlyDateTime(end3);
      const validateError = validateStartEnd(builtStart, builtEnd);
      if (validateError == null) {
        return new _Interval({
          start: builtStart,
          end: builtEnd
        });
      } else {
        return validateError;
      }
    }
    /**
     * Create an Interval from a start DateTime and a Duration to extend to.
     * @param {DateTime|Date|Object} start
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static after(start5, duration) {
      const dur = Duration.fromDurationLike(duration), dt3 = friendlyDateTime(start5);
      return _Interval.fromDateTimes(dt3, dt3.plus(dur));
    }
    /**
     * Create an Interval from an end DateTime and a Duration to extend backwards to.
     * @param {DateTime|Date|Object} end
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static before(end3, duration) {
      const dur = Duration.fromDurationLike(duration), dt3 = friendlyDateTime(end3);
      return _Interval.fromDateTimes(dt3.minus(dur), dt3);
    }
    /**
     * Create an Interval from an ISO 8601 string.
     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
     * @param {string} text - the ISO string to parse
     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {Interval}
     */
    static fromISO(text, opts) {
      const [s21, e18] = (text || "").split("/", 2);
      if (s21 && e18) {
        let start5, startIsValid;
        try {
          start5 = DateTime.fromISO(s21, opts);
          startIsValid = start5.isValid;
        } catch (e19) {
          startIsValid = false;
        }
        let end3, endIsValid;
        try {
          end3 = DateTime.fromISO(e18, opts);
          endIsValid = end3.isValid;
        } catch (e19) {
          endIsValid = false;
        }
        if (startIsValid && endIsValid) {
          return _Interval.fromDateTimes(start5, end3);
        }
        if (startIsValid) {
          const dur = Duration.fromISO(e18, opts);
          if (dur.isValid) {
            return _Interval.after(start5, dur);
          }
        } else if (endIsValid) {
          const dur = Duration.fromISO(s21, opts);
          if (dur.isValid) {
            return _Interval.before(end3, dur);
          }
        }
      }
      return _Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
    /**
     * Check if an object is an Interval. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isInterval(o18) {
      return o18 && o18.isLuxonInterval || false;
    }
    /**
     * Returns the start of the Interval
     * @type {DateTime}
     */
    get start() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval. This is the first instant which is not part of the interval
     * (Interval is half-open).
     * @type {DateTime}
     */
    get end() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns the last DateTime included in the interval (since end is not part of the interval)
     * @type {DateTime}
     */
    get lastDateTime() {
      return this.isValid ? this.e ? this.e.minus(1) : null : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */
    get isValid() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Returns the length of the Interval in the specified unit.
     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
     * @return {number}
     */
    length(unit = "milliseconds") {
      return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
    }
    /**
     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
     * @param {string} [unit='milliseconds'] - the unit of time to count.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
     * @return {number}
     */
    count(unit = "milliseconds", opts) {
      if (!this.isValid) return NaN;
      const start5 = this.start.startOf(unit, opts);
      let end3;
      if (opts?.useLocaleWeeks) {
        end3 = this.end.reconfigure({ locale: start5.locale });
      } else {
        end3 = this.end;
      }
      end3 = end3.startOf(unit, opts);
      return Math.floor(end3.diff(start5, unit).get(unit)) + (end3.valueOf() !== this.end.valueOf());
    }
    /**
     * Returns whether this Interval's start and end are both in the same unit of time
     * @param {string} unit - the unit of time to check sameness on
     * @return {boolean}
     */
    hasSame(unit) {
      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    }
    /**
     * Return whether this Interval has the same start and end DateTimes.
     * @return {boolean}
     */
    isEmpty() {
      return this.s.valueOf() === this.e.valueOf();
    }
    /**
     * Return whether this Interval's start is after the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isAfter(dateTime) {
      if (!this.isValid) return false;
      return this.s > dateTime;
    }
    /**
     * Return whether this Interval's end is before the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isBefore(dateTime) {
      if (!this.isValid) return false;
      return this.e <= dateTime;
    }
    /**
     * Return whether this Interval contains the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    contains(dateTime) {
      if (!this.isValid) return false;
      return this.s <= dateTime && this.e > dateTime;
    }
    /**
     * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
     * @param {Object} values - the values to set
     * @param {DateTime} values.start - the starting DateTime
     * @param {DateTime} values.end - the ending DateTime
     * @return {Interval}
     */
    set({ start: start5, end: end3 } = {}) {
      if (!this.isValid) return this;
      return _Interval.fromDateTimes(start5 || this.s, end3 || this.e);
    }
    /**
     * Split this Interval at each of the specified DateTimes
     * @param {...DateTime} dateTimes - the unit of time to count.
     * @return {Array}
     */
    splitAt(...dateTimes) {
      if (!this.isValid) return [];
      const sorted = dateTimes.map(friendlyDateTime).filter((d16) => this.contains(d16)).sort((a21, b6) => a21.toMillis() - b6.toMillis()), results = [];
      let { s: s21 } = this, i12 = 0;
      while (s21 < this.e) {
        const added = sorted[i12] || this.e, next = +added > +this.e ? this.e : added;
        results.push(_Interval.fromDateTimes(s21, next));
        s21 = next;
        i12 += 1;
      }
      return results;
    }
    /**
     * Split this Interval into smaller Intervals, each of the specified length.
     * Left over time is grouped into a smaller interval
     * @param {Duration|Object|number} duration - The length of each resulting interval.
     * @return {Array}
     */
    splitBy(duration) {
      const dur = Duration.fromDurationLike(duration);
      if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
        return [];
      }
      let { s: s21 } = this, idx = 1, next;
      const results = [];
      while (s21 < this.e) {
        const added = this.start.plus(dur.mapUnits((x) => x * idx));
        next = +added > +this.e ? this.e : added;
        results.push(_Interval.fromDateTimes(s21, next));
        s21 = next;
        idx += 1;
      }
      return results;
    }
    /**
     * Split this Interval into the specified number of smaller intervals.
     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
     * @return {Array}
     */
    divideEqually(numberOfParts) {
      if (!this.isValid) return [];
      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    }
    /**
     * Return whether this Interval overlaps with the specified Interval
     * @param {Interval} other
     * @return {boolean}
     */
    overlaps(other) {
      return this.e > other.s && this.s < other.e;
    }
    /**
     * Return whether this Interval's end is adjacent to the specified Interval's start.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsStart(other) {
      if (!this.isValid) return false;
      return +this.e === +other.s;
    }
    /**
     * Return whether this Interval's start is adjacent to the specified Interval's end.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsEnd(other) {
      if (!this.isValid) return false;
      return +other.e === +this.s;
    }
    /**
     * Returns true if this Interval fully contains the specified Interval, specifically if the intersect (of this Interval and the other Interval) is equal to the other Interval; false otherwise.
     * @param {Interval} other
     * @return {boolean}
     */
    engulfs(other) {
      if (!this.isValid) return false;
      return this.s <= other.s && this.e >= other.e;
    }
    /**
     * Return whether this Interval has the same start and end as the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }
      return this.s.equals(other.s) && this.e.equals(other.e);
    }
    /**
     * Return an Interval representing the intersection of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
     * Returns null if the intersection is empty, meaning, the intervals don't intersect.
     * @param {Interval} other
     * @return {Interval}
     */
    intersection(other) {
      if (!this.isValid) return this;
      const s21 = this.s > other.s ? this.s : other.s, e18 = this.e < other.e ? this.e : other.e;
      if (s21 >= e18) {
        return null;
      } else {
        return _Interval.fromDateTimes(s21, e18);
      }
    }
    /**
     * Return an Interval representing the union of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
     * @param {Interval} other
     * @return {Interval}
     */
    union(other) {
      if (!this.isValid) return this;
      const s21 = this.s < other.s ? this.s : other.s, e18 = this.e > other.e ? this.e : other.e;
      return _Interval.fromDateTimes(s21, e18);
    }
    /**
     * Merge an array of Intervals into an equivalent minimal set of Intervals.
     * Combines overlapping and adjacent Intervals.
     * The resulting array will contain the Intervals in ascending order, that is, starting with the earliest Interval
     * and ending with the latest.
     *
     * @param {Array} intervals
     * @return {Array}
     */
    static merge(intervals) {
      const [found, final] = intervals.sort((a21, b6) => a21.s - b6.s).reduce(
        ([sofar, current], item) => {
          if (!current) {
            return [sofar, item];
          } else if (current.overlaps(item) || current.abutsStart(item)) {
            return [sofar, current.union(item)];
          } else {
            return [sofar.concat([current]), item];
          }
        },
        [[], null]
      );
      if (final) {
        found.push(final);
      }
      return found;
    }
    /**
     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static xor(intervals) {
      let start5 = null, currentCount = 0;
      const results = [], ends = intervals.map((i12) => [
        { time: i12.s, type: "s" },
        { time: i12.e, type: "e" }
      ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a21, b6) => a21.time - b6.time);
      for (const i12 of arr) {
        currentCount += i12.type === "s" ? 1 : -1;
        if (currentCount === 1) {
          start5 = i12.time;
        } else {
          if (start5 && +start5 !== +i12.time) {
            results.push(_Interval.fromDateTimes(start5, i12.time));
          }
          start5 = null;
        }
      }
      return _Interval.merge(results);
    }
    /**
     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
     * @param {...Interval} intervals
     * @return {Array}
     */
    difference(...intervals) {
      return _Interval.xor([this].concat(intervals)).map((i12) => this.intersection(i12)).filter((i12) => i12 && !i12.isEmpty());
    }
    /**
     * Returns a string representation of this Interval appropriate for debugging.
     * @return {string}
     */
    toString() {
      if (!this.isValid) return INVALID2;
      return `[${this.s.toISO()} – ${this.e.toISO()})`;
    }
    /**
     * Returns a string representation of this Interval appropriate for the REPL.
     * @return {string}
     */
    [Symbol.for("nodejs.util.inspect.custom")]() {
      if (this.isValid) {
        return `Interval { start: ${this.s.toISO()}, end: ${this.e.toISO()} }`;
      } else {
        return `Interval { Invalid, reason: ${this.invalidReason} }`;
      }
    }
    /**
     * Returns a localized string representing this Interval. Accepts the same options as the
     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
     * is browser-specific, but in general it will return an appropriate representation of the
     * Interval in the assigned locale. Defaults to the system's locale if no locale has been
     * specified.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
     * Intl.DateTimeFormat constructor options.
     * @param {Object} opts - Options to override the configuration of the start DateTime.
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Interval.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISO(opts) {
      if (!this.isValid) return INVALID2;
      return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
    }
    /**
     * Returns an ISO 8601-compliant string representation of date of this Interval.
     * The time components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {string}
     */
    toISODate() {
      if (!this.isValid) return INVALID2;
      return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }
    /**
     * Returns an ISO 8601-compliant string representation of time of this Interval.
     * The date components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISOTime(opts) {
      if (!this.isValid) return INVALID2;
      return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
    }
    /**
     * Returns a string representation of this Interval formatted according to the specified format
     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
     * formatting tool.
     * @param {string} dateFormat - The format string. This string formats the start and end time.
     * See {@link DateTime#toFormat} for details.
     * @param {Object} opts - Options.
     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
     * representations.
     * @return {string}
     */
    toFormat(dateFormat, { separator = " – " } = {}) {
      if (!this.isValid) return INVALID2;
      return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
    }
    /**
     * Return a Duration representing the time spanned by this interval.
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
     * @return {Duration}
     */
    toDuration(unit, opts) {
      if (!this.isValid) {
        return Duration.invalid(this.invalidReason);
      }
      return this.e.diff(this.s, unit, opts);
    }
    /**
     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
     * @param {function} mapFn
     * @return {Interval}
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
     */
    mapEndpoints(mapFn) {
      return _Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
    }
  };
  __name(_Interval, "Interval");
  var Interval = _Interval;

  // node_modules/luxon/src/info.js
  var _Info = class _Info {
    /**
     * Return whether the specified zone contains a DST.
     * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
     * @return {boolean}
     */
    static hasDST(zone = Settings.defaultZone) {
      const proto = DateTime.now().setZone(zone).set({ month: 12 });
      return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
    }
    /**
     * Return whether the specified zone is a valid IANA specifier.
     * @param {string} zone - Zone to check
     * @return {boolean}
     */
    static isValidIANAZone(zone) {
      return IANAZone.isValidZone(zone);
    }
    /**
     * Converts the input into a {@link Zone} instance.
     *
     * * If `input` is already a Zone instance, it is returned unchanged.
     * * If `input` is a string containing a valid time zone name, a Zone instance
     *   with that name is returned.
     * * If `input` is a string that doesn't refer to a known time zone, a Zone
     *   instance with {@link Zone#isValid} == false is returned.
     * * If `input is a number, a Zone instance with the specified fixed offset
     *   in minutes is returned.
     * * If `input` is `null` or `undefined`, the default zone is returned.
     * @param {string|Zone|number} [input] - the value to be converted
     * @return {Zone}
     */
    static normalizeZone(input) {
      return normalizeZone(input, Settings.defaultZone);
    }
    /**
     * Get the weekday on which the week starts according to the given locale.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
     */
    static getStartOfWeek({ locale: locale2 = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale2)).getStartOfWeek();
    }
    /**
     * Get the minimum number of days necessary in a week before it is considered part of the next year according
     * to the given locale.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number}
     */
    static getMinimumDaysInFirstWeek({ locale: locale2 = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale2)).getMinDaysInFirstWeek();
    }
    /**
     * Get the weekdays, which are considered the weekend according to the given locale
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
     */
    static getWeekendWeekdays({ locale: locale2 = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale2)).getWeekendDays().slice();
    }
    /**
     * Return an array of standalone month names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @example Info.months()[0] //=> 'January'
     * @example Info.months('short')[0] //=> 'Jan'
     * @example Info.months('numeric')[0] //=> '1'
     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
     * @return {Array}
     */
    static months(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
      return (locObj || Locale.create(locale2, numberingSystem, outputCalendar)).months(length);
    }
    /**
     * Return an array of format month names.
     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
     * changes the string.
     * See {@link Info#months}
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @return {Array}
     */
    static monthsFormat(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
      return (locObj || Locale.create(locale2, numberingSystem, outputCalendar)).months(length, true);
    }
    /**
     * Return an array of standalone week names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @example Info.weekdays()[0] //=> 'Monday'
     * @example Info.weekdays('short')[0] //=> 'Mon'
     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
     * @return {Array}
     */
    static weekdays(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale2, numberingSystem, null)).weekdays(length);
    }
    /**
     * Return an array of format week names.
     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
     * changes the string.
     * See {@link Info#weekdays}
     * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale=null] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @return {Array}
     */
    static weekdaysFormat(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale2, numberingSystem, null)).weekdays(length, true);
    }
    /**
     * Return an array of meridiems.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.meridiems() //=> [ 'AM', 'PM' ]
     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
     * @return {Array}
     */
    static meridiems({ locale: locale2 = null } = {}) {
      return Locale.create(locale2).meridiems();
    }
    /**
     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
     * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.eras() //=> [ 'BC', 'AD' ]
     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
     * @return {Array}
     */
    static eras(length = "short", { locale: locale2 = null } = {}) {
      return Locale.create(locale2, null, "gregory").eras(length);
    }
    /**
     * Return the set of available features in this environment.
     * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
     * Keys:
     * * `relative`: whether this environment supports relative time formatting
     * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
     * @example Info.features() //=> { relative: false, localeWeek: true }
     * @return {Object}
     */
    static features() {
      return { relative: hasRelative(), localeWeek: hasLocaleWeekInfo() };
    }
  };
  __name(_Info, "Info");
  var Info = _Info;

  // node_modules/luxon/src/impl/diff.js
  function dayDiff(earlier, later) {
    const utcDayStart = /* @__PURE__ */ __name((dt3) => dt3.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), "utcDayStart"), ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(Duration.fromMillis(ms).as("days"));
  }
  __name(dayDiff, "dayDiff");
  function highOrderDiffs(cursor, later, units) {
    const differs = [
      ["years", (a21, b6) => b6.year - a21.year],
      ["quarters", (a21, b6) => b6.quarter - a21.quarter + (b6.year - a21.year) * 4],
      ["months", (a21, b6) => b6.month - a21.month + (b6.year - a21.year) * 12],
      [
        "weeks",
        (a21, b6) => {
          const days = dayDiff(a21, b6);
          return (days - days % 7) / 7;
        }
      ],
      ["days", dayDiff]
    ];
    const results = {};
    const earlier = cursor;
    let lowestOrder, highWater;
    for (const [unit, differ] of differs) {
      if (units.indexOf(unit) >= 0) {
        lowestOrder = unit;
        results[unit] = differ(cursor, later);
        highWater = earlier.plus(results);
        if (highWater > later) {
          results[unit]--;
          cursor = earlier.plus(results);
          if (cursor > later) {
            highWater = cursor;
            results[unit]--;
            cursor = earlier.plus(results);
          }
        } else {
          cursor = highWater;
        }
      }
    }
    return [cursor, results, highWater, lowestOrder];
  }
  __name(highOrderDiffs, "highOrderDiffs");
  function diff_default(earlier, later, units, opts) {
    let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
    const remainingMillis = later - cursor;
    const lowerOrderUnits = units.filter(
      (u10) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u10) >= 0
    );
    if (lowerOrderUnits.length === 0) {
      if (highWater < later) {
        highWater = cursor.plus({ [lowestOrder]: 1 });
      }
      if (highWater !== cursor) {
        results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
      }
    }
    const duration = Duration.fromObject(results, opts);
    if (lowerOrderUnits.length > 0) {
      return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
    } else {
      return duration;
    }
  }
  __name(diff_default, "default");

  // node_modules/luxon/src/impl/tokenParser.js
  var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
  function intUnit(regex, post = (i12) => i12) {
    return { regex, deser: /* @__PURE__ */ __name(([s21]) => post(parseDigits(s21)), "deser") };
  }
  __name(intUnit, "intUnit");
  var NBSP = String.fromCharCode(160);
  var spaceOrNBSP = `[ ${NBSP}]`;
  var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
  function fixListRegex(s21) {
    return s21.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
  }
  __name(fixListRegex, "fixListRegex");
  function stripInsensitivities(s21) {
    return s21.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
  }
  __name(stripInsensitivities, "stripInsensitivities");
  function oneOf(strings, startIndex) {
    if (strings === null) {
      return null;
    } else {
      return {
        regex: RegExp(strings.map(fixListRegex).join("|")),
        deser: /* @__PURE__ */ __name(([s21]) => strings.findIndex((i12) => stripInsensitivities(s21) === stripInsensitivities(i12)) + startIndex, "deser")
      };
    }
  }
  __name(oneOf, "oneOf");
  function offset2(regex, groups) {
    return { regex, deser: /* @__PURE__ */ __name(([, h5, m6]) => signedOffset(h5, m6), "deser"), groups };
  }
  __name(offset2, "offset");
  function simple(regex) {
    return { regex, deser: /* @__PURE__ */ __name(([s21]) => s21, "deser") };
  }
  __name(simple, "simple");
  function escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }
  __name(escapeToken, "escapeToken");
  function unitForToken(token, loc) {
    const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = /* @__PURE__ */ __name((t21) => ({ regex: RegExp(escapeToken(t21.val)), deser: /* @__PURE__ */ __name(([s21]) => s21, "deser"), literal: true }), "literal"), unitate = /* @__PURE__ */ __name((t21) => {
      if (token.literal) {
        return literal(t21);
      }
      switch (t21.val) {
        // era
        case "G":
          return oneOf(loc.eras("short"), 0);
        case "GG":
          return oneOf(loc.eras("long"), 0);
        // years
        case "y":
          return intUnit(oneToSix);
        case "yy":
          return intUnit(twoToFour, untruncateYear);
        case "yyyy":
          return intUnit(four);
        case "yyyyy":
          return intUnit(fourToSix);
        case "yyyyyy":
          return intUnit(six);
        // months
        case "M":
          return intUnit(oneOrTwo);
        case "MM":
          return intUnit(two);
        case "MMM":
          return oneOf(loc.months("short", true), 1);
        case "MMMM":
          return oneOf(loc.months("long", true), 1);
        case "L":
          return intUnit(oneOrTwo);
        case "LL":
          return intUnit(two);
        case "LLL":
          return oneOf(loc.months("short", false), 1);
        case "LLLL":
          return oneOf(loc.months("long", false), 1);
        // dates
        case "d":
          return intUnit(oneOrTwo);
        case "dd":
          return intUnit(two);
        // ordinals
        case "o":
          return intUnit(oneToThree);
        case "ooo":
          return intUnit(three);
        // time
        case "HH":
          return intUnit(two);
        case "H":
          return intUnit(oneOrTwo);
        case "hh":
          return intUnit(two);
        case "h":
          return intUnit(oneOrTwo);
        case "mm":
          return intUnit(two);
        case "m":
          return intUnit(oneOrTwo);
        case "q":
          return intUnit(oneOrTwo);
        case "qq":
          return intUnit(two);
        case "s":
          return intUnit(oneOrTwo);
        case "ss":
          return intUnit(two);
        case "S":
          return intUnit(oneToThree);
        case "SSS":
          return intUnit(three);
        case "u":
          return simple(oneToNine);
        case "uu":
          return simple(oneOrTwo);
        case "uuu":
          return intUnit(one);
        // meridiem
        case "a":
          return oneOf(loc.meridiems(), 0);
        // weekYear (k)
        case "kkkk":
          return intUnit(four);
        case "kk":
          return intUnit(twoToFour, untruncateYear);
        // weekNumber (W)
        case "W":
          return intUnit(oneOrTwo);
        case "WW":
          return intUnit(two);
        // weekdays
        case "E":
        case "c":
          return intUnit(one);
        case "EEE":
          return oneOf(loc.weekdays("short", false), 1);
        case "EEEE":
          return oneOf(loc.weekdays("long", false), 1);
        case "ccc":
          return oneOf(loc.weekdays("short", true), 1);
        case "cccc":
          return oneOf(loc.weekdays("long", true), 1);
        // offset/zone
        case "Z":
        case "ZZ":
          return offset2(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
        case "ZZZ":
          return offset2(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
        // because we don't have any way to figure out what they are
        case "z":
          return simple(/[a-z_+-/]{1,256}?/i);
        // this special-case "token" represents a place where a macro-token expanded into a white-space literal
        // in this case we accept any non-newline white-space
        case " ":
          return simple(/[^\S\n\r]/);
        default:
          return literal(t21);
      }
    }, "unitate");
    const unit = unitate(token) || {
      invalidReason: MISSING_FTP
    };
    unit.token = token;
    return unit;
  }
  __name(unitForToken, "unitForToken");
  var partTypeStyleToTokenVal = {
    year: {
      "2-digit": "yy",
      numeric: "yyyyy"
    },
    month: {
      numeric: "M",
      "2-digit": "MM",
      short: "MMM",
      long: "MMMM"
    },
    day: {
      numeric: "d",
      "2-digit": "dd"
    },
    weekday: {
      short: "EEE",
      long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour12: {
      numeric: "h",
      "2-digit": "hh"
    },
    hour24: {
      numeric: "H",
      "2-digit": "HH"
    },
    minute: {
      numeric: "m",
      "2-digit": "mm"
    },
    second: {
      numeric: "s",
      "2-digit": "ss"
    },
    timeZoneName: {
      long: "ZZZZZ",
      short: "ZZZ"
    }
  };
  function tokenForPart(part, formatOpts, resolvedOpts) {
    const { type, value } = part;
    if (type === "literal") {
      const isSpace = /^\s+$/.test(value);
      return {
        literal: !isSpace,
        val: isSpace ? " " : value
      };
    }
    const style = formatOpts[type];
    let actualType = type;
    if (type === "hour") {
      if (formatOpts.hour12 != null) {
        actualType = formatOpts.hour12 ? "hour12" : "hour24";
      } else if (formatOpts.hourCycle != null) {
        if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") {
          actualType = "hour12";
        } else {
          actualType = "hour24";
        }
      } else {
        actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
      }
    }
    let val = partTypeStyleToTokenVal[actualType];
    if (typeof val === "object") {
      val = val[style];
    }
    if (val) {
      return {
        literal: false,
        val
      };
    }
    return void 0;
  }
  __name(tokenForPart, "tokenForPart");
  function buildRegex(units) {
    const re3 = units.map((u10) => u10.regex).reduce((f2, r30) => `${f2}(${r30.source})`, "");
    return [`^${re3}$`, units];
  }
  __name(buildRegex, "buildRegex");
  function match(input, regex, handlers) {
    const matches = input.match(regex);
    if (matches) {
      const all = {};
      let matchIndex = 1;
      for (const i12 in handlers) {
        if (hasOwnProperty(handlers, i12)) {
          const h5 = handlers[i12], groups = h5.groups ? h5.groups + 1 : 1;
          if (!h5.literal && h5.token) {
            all[h5.token.val[0]] = h5.deser(matches.slice(matchIndex, matchIndex + groups));
          }
          matchIndex += groups;
        }
      }
      return [matches, all];
    } else {
      return [matches, {}];
    }
  }
  __name(match, "match");
  function dateTimeFromMatches(matches) {
    const toField = /* @__PURE__ */ __name((token) => {
      switch (token) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
        case "H":
          return "hour";
        case "d":
          return "day";
        case "o":
          return "ordinal";
        case "L":
        case "M":
          return "month";
        case "y":
          return "year";
        case "E":
        case "c":
          return "weekday";
        case "W":
          return "weekNumber";
        case "k":
          return "weekYear";
        case "q":
          return "quarter";
        default:
          return null;
      }
    }, "toField");
    let zone = null;
    let specificOffset;
    if (!isUndefined2(matches.z)) {
      zone = IANAZone.create(matches.z);
    }
    if (!isUndefined2(matches.Z)) {
      if (!zone) {
        zone = new FixedOffsetZone(matches.Z);
      }
      specificOffset = matches.Z;
    }
    if (!isUndefined2(matches.q)) {
      matches.M = (matches.q - 1) * 3 + 1;
    }
    if (!isUndefined2(matches.h)) {
      if (matches.h < 12 && matches.a === 1) {
        matches.h += 12;
      } else if (matches.h === 12 && matches.a === 0) {
        matches.h = 0;
      }
    }
    if (matches.G === 0 && matches.y) {
      matches.y = -matches.y;
    }
    if (!isUndefined2(matches.u)) {
      matches.S = parseMillis(matches.u);
    }
    const vals = Object.keys(matches).reduce((r30, k) => {
      const f2 = toField(k);
      if (f2) {
        r30[f2] = matches[k];
      }
      return r30;
    }, {});
    return [vals, zone, specificOffset];
  }
  __name(dateTimeFromMatches, "dateTimeFromMatches");
  var dummyDateTimeCache = null;
  function getDummyDateTime() {
    if (!dummyDateTimeCache) {
      dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }
    return dummyDateTimeCache;
  }
  __name(getDummyDateTime, "getDummyDateTime");
  function maybeExpandMacroToken(token, locale2) {
    if (token.literal) {
      return token;
    }
    const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
    const tokens = formatOptsToTokens(formatOpts, locale2);
    if (tokens == null || tokens.includes(void 0)) {
      return token;
    }
    return tokens;
  }
  __name(maybeExpandMacroToken, "maybeExpandMacroToken");
  function expandMacroTokens(tokens, locale2) {
    return Array.prototype.concat(...tokens.map((t21) => maybeExpandMacroToken(t21, locale2)));
  }
  __name(expandMacroTokens, "expandMacroTokens");
  var _TokenParser = class _TokenParser {
    constructor(locale2, format4) {
      this.locale = locale2;
      this.format = format4;
      this.tokens = expandMacroTokens(Formatter.parseFormat(format4), locale2);
      this.units = this.tokens.map((t21) => unitForToken(t21, locale2));
      this.disqualifyingUnit = this.units.find((t21) => t21.invalidReason);
      if (!this.disqualifyingUnit) {
        const [regexString, handlers] = buildRegex(this.units);
        this.regex = RegExp(regexString, "i");
        this.handlers = handlers;
      }
    }
    explainFromTokens(input) {
      if (!this.isValid) {
        return { input, tokens: this.tokens, invalidReason: this.invalidReason };
      } else {
        const [rawMatches, matches] = match(input, this.regex, this.handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, void 0];
        if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
          throw new ConflictingSpecificationError(
            "Can't include meridiem when specifying 24-hour format"
          );
        }
        return {
          input,
          tokens: this.tokens,
          regex: this.regex,
          rawMatches,
          matches,
          result,
          zone,
          specificOffset
        };
      }
    }
    get isValid() {
      return !this.disqualifyingUnit;
    }
    get invalidReason() {
      return this.disqualifyingUnit ? this.disqualifyingUnit.invalidReason : null;
    }
  };
  __name(_TokenParser, "TokenParser");
  var TokenParser = _TokenParser;
  function explainFromTokens(locale2, input, format4) {
    const parser = new TokenParser(locale2, format4);
    return parser.explainFromTokens(input);
  }
  __name(explainFromTokens, "explainFromTokens");
  function parseFromTokens(locale2, input, format4) {
    const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale2, input, format4);
    return [result, zone, specificOffset, invalidReason];
  }
  __name(parseFromTokens, "parseFromTokens");
  function formatOptsToTokens(formatOpts, locale2) {
    if (!formatOpts) {
      return null;
    }
    const formatter = Formatter.create(locale2, formatOpts);
    const df = formatter.dtFormatter(getDummyDateTime());
    const parts = df.formatToParts();
    const resolvedOpts = df.resolvedOptions();
    return parts.map((p5) => tokenForPart(p5, formatOpts, resolvedOpts));
  }
  __name(formatOptsToTokens, "formatOptsToTokens");

  // node_modules/luxon/src/datetime.js
  var INVALID3 = "Invalid DateTime";
  var MAX_DATE = 864e13;
  function unsupportedZone(zone) {
    return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
  }
  __name(unsupportedZone, "unsupportedZone");
  function possiblyCachedWeekData(dt3) {
    if (dt3.weekData === null) {
      dt3.weekData = gregorianToWeek(dt3.c);
    }
    return dt3.weekData;
  }
  __name(possiblyCachedWeekData, "possiblyCachedWeekData");
  function possiblyCachedLocalWeekData(dt3) {
    if (dt3.localWeekData === null) {
      dt3.localWeekData = gregorianToWeek(
        dt3.c,
        dt3.loc.getMinDaysInFirstWeek(),
        dt3.loc.getStartOfWeek()
      );
    }
    return dt3.localWeekData;
  }
  __name(possiblyCachedLocalWeekData, "possiblyCachedLocalWeekData");
  function clone2(inst, alts) {
    const current = {
      ts: inst.ts,
      zone: inst.zone,
      c: inst.c,
      o: inst.o,
      loc: inst.loc,
      invalid: inst.invalid
    };
    return new DateTime({ ...current, ...alts, old: current });
  }
  __name(clone2, "clone");
  function fixOffset(localTS, o18, tz) {
    let utcGuess = localTS - o18 * 60 * 1e3;
    const o22 = tz.offset(utcGuess);
    if (o18 === o22) {
      return [utcGuess, o18];
    }
    utcGuess -= (o22 - o18) * 60 * 1e3;
    const o32 = tz.offset(utcGuess);
    if (o22 === o32) {
      return [utcGuess, o22];
    }
    return [localTS - Math.min(o22, o32) * 60 * 1e3, Math.max(o22, o32)];
  }
  __name(fixOffset, "fixOffset");
  function tsToObj(ts3, offset5) {
    ts3 += offset5 * 60 * 1e3;
    const d16 = new Date(ts3);
    return {
      year: d16.getUTCFullYear(),
      month: d16.getUTCMonth() + 1,
      day: d16.getUTCDate(),
      hour: d16.getUTCHours(),
      minute: d16.getUTCMinutes(),
      second: d16.getUTCSeconds(),
      millisecond: d16.getUTCMilliseconds()
    };
  }
  __name(tsToObj, "tsToObj");
  function objToTS(obj, offset5, zone) {
    return fixOffset(objToLocalTS(obj), offset5, zone);
  }
  __name(objToTS, "objToTS");
  function adjustTime(inst, dur) {
    const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c6 = {
      ...inst.c,
      year,
      month,
      day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
    }, millisToAdd = Duration.fromObject({
      years: dur.years - Math.trunc(dur.years),
      quarters: dur.quarters - Math.trunc(dur.quarters),
      months: dur.months - Math.trunc(dur.months),
      weeks: dur.weeks - Math.trunc(dur.weeks),
      days: dur.days - Math.trunc(dur.days),
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds
    }).as("milliseconds"), localTS = objToLocalTS(c6);
    let [ts3, o18] = fixOffset(localTS, oPre, inst.zone);
    if (millisToAdd !== 0) {
      ts3 += millisToAdd;
      o18 = inst.zone.offset(ts3);
    }
    return { ts: ts3, o: o18 };
  }
  __name(adjustTime, "adjustTime");
  function parseDataToDateTime(parsed, parsedZone, opts, format4, text, specificOffset) {
    const { setZone, zone } = opts;
    if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
      const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
        ...opts,
        zone: interpretationZone,
        specificOffset
      });
      return setZone ? inst : inst.setZone(zone);
    } else {
      return DateTime.invalid(
        new Invalid("unparsable", `the input "${text}" can't be parsed as ${format4}`)
      );
    }
  }
  __name(parseDataToDateTime, "parseDataToDateTime");
  function toTechFormat(dt3, format4, allowZ = true) {
    return dt3.isValid ? Formatter.create(Locale.create("en-US"), {
      allowZ,
      forceSimple: true
    }).formatDateTimeFromString(dt3, format4) : null;
  }
  __name(toTechFormat, "toTechFormat");
  function toISODate(o18, extended, precision) {
    const longFormat = o18.c.year > 9999 || o18.c.year < 0;
    let c6 = "";
    if (longFormat && o18.c.year >= 0) c6 += "+";
    c6 += padStart(o18.c.year, longFormat ? 6 : 4);
    if (precision === "year") return c6;
    if (extended) {
      c6 += "-";
      c6 += padStart(o18.c.month);
      if (precision === "month") return c6;
      c6 += "-";
    } else {
      c6 += padStart(o18.c.month);
      if (precision === "month") return c6;
    }
    c6 += padStart(o18.c.day);
    return c6;
  }
  __name(toISODate, "toISODate");
  function toISOTime(o18, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone, precision) {
    let showSeconds = !suppressSeconds || o18.c.millisecond !== 0 || o18.c.second !== 0, c6 = "";
    switch (precision) {
      case "day":
      case "month":
      case "year":
        break;
      default:
        c6 += padStart(o18.c.hour);
        if (precision === "hour") break;
        if (extended) {
          c6 += ":";
          c6 += padStart(o18.c.minute);
          if (precision === "minute") break;
          if (showSeconds) {
            c6 += ":";
            c6 += padStart(o18.c.second);
          }
        } else {
          c6 += padStart(o18.c.minute);
          if (precision === "minute") break;
          if (showSeconds) {
            c6 += padStart(o18.c.second);
          }
        }
        if (precision === "second") break;
        if (showSeconds && (!suppressMilliseconds || o18.c.millisecond !== 0)) {
          c6 += ".";
          c6 += padStart(o18.c.millisecond, 3);
        }
    }
    if (includeOffset) {
      if (o18.isOffsetFixed && o18.offset === 0 && !extendedZone) {
        c6 += "Z";
      } else if (o18.o < 0) {
        c6 += "-";
        c6 += padStart(Math.trunc(-o18.o / 60));
        c6 += ":";
        c6 += padStart(Math.trunc(-o18.o % 60));
      } else {
        c6 += "+";
        c6 += padStart(Math.trunc(o18.o / 60));
        c6 += ":";
        c6 += padStart(Math.trunc(o18.o % 60));
      }
    }
    if (extendedZone) {
      c6 += "[" + o18.zone.ianaName + "]";
    }
    return c6;
  }
  __name(toISOTime, "toISOTime");
  var defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var orderedUnits2 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
  var orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
  ];
  var orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
  function normalizeUnit(unit) {
    const normalized = {
      year: "year",
      years: "year",
      month: "month",
      months: "month",
      day: "day",
      days: "day",
      hour: "hour",
      hours: "hour",
      minute: "minute",
      minutes: "minute",
      quarter: "quarter",
      quarters: "quarter",
      second: "second",
      seconds: "second",
      millisecond: "millisecond",
      milliseconds: "millisecond",
      weekday: "weekday",
      weekdays: "weekday",
      weeknumber: "weekNumber",
      weeksnumber: "weekNumber",
      weeknumbers: "weekNumber",
      weekyear: "weekYear",
      weekyears: "weekYear",
      ordinal: "ordinal"
    }[unit.toLowerCase()];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
  }
  __name(normalizeUnit, "normalizeUnit");
  function normalizeUnitWithLocalWeeks(unit) {
    switch (unit.toLowerCase()) {
      case "localweekday":
      case "localweekdays":
        return "localWeekday";
      case "localweeknumber":
      case "localweeknumbers":
        return "localWeekNumber";
      case "localweekyear":
      case "localweekyears":
        return "localWeekYear";
      default:
        return normalizeUnit(unit);
    }
  }
  __name(normalizeUnitWithLocalWeeks, "normalizeUnitWithLocalWeeks");
  function guessOffsetForZone(zone) {
    if (zoneOffsetTs === void 0) {
      zoneOffsetTs = Settings.now();
    }
    if (zone.type !== "iana") {
      return zone.offset(zoneOffsetTs);
    }
    const zoneName = zone.name;
    let offsetGuess = zoneOffsetGuessCache.get(zoneName);
    if (offsetGuess === void 0) {
      offsetGuess = zone.offset(zoneOffsetTs);
      zoneOffsetGuessCache.set(zoneName, offsetGuess);
    }
    return offsetGuess;
  }
  __name(guessOffsetForZone, "guessOffsetForZone");
  function quickDT(obj, opts) {
    const zone = normalizeZone(opts.zone, Settings.defaultZone);
    if (!zone.isValid) {
      return DateTime.invalid(unsupportedZone(zone));
    }
    const loc = Locale.fromObject(opts);
    let ts3, o18;
    if (!isUndefined2(obj.year)) {
      for (const u10 of orderedUnits2) {
        if (isUndefined2(obj[u10])) {
          obj[u10] = defaultUnitValues[u10];
        }
      }
      const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
      if (invalid) {
        return DateTime.invalid(invalid);
      }
      const offsetProvis = guessOffsetForZone(zone);
      [ts3, o18] = objToTS(obj, offsetProvis, zone);
    } else {
      ts3 = Settings.now();
    }
    return new DateTime({ ts: ts3, zone, loc, o: o18 });
  }
  __name(quickDT, "quickDT");
  function diffRelative(start5, end3, opts) {
    const round3 = isUndefined2(opts.round) ? true : opts.round, rounding = isUndefined2(opts.rounding) ? "trunc" : opts.rounding, format4 = /* @__PURE__ */ __name((c6, unit) => {
      c6 = roundTo(c6, round3 || opts.calendary ? 0 : 2, opts.calendary ? "round" : rounding);
      const formatter = end3.loc.clone(opts).relFormatter(opts);
      return formatter.format(c6, unit);
    }, "format"), differ = /* @__PURE__ */ __name((unit) => {
      if (opts.calendary) {
        if (!end3.hasSame(start5, unit)) {
          return end3.startOf(unit).diff(start5.startOf(unit), unit).get(unit);
        } else return 0;
      } else {
        return end3.diff(start5, unit).get(unit);
      }
    }, "differ");
    if (opts.unit) {
      return format4(differ(opts.unit), opts.unit);
    }
    for (const unit of opts.units) {
      const count = differ(unit);
      if (Math.abs(count) >= 1) {
        return format4(count, unit);
      }
    }
    return format4(start5 > end3 ? -0 : 0, opts.units[opts.units.length - 1]);
  }
  __name(diffRelative, "diffRelative");
  function lastOpts(argList) {
    let opts = {}, args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
      opts = argList[argList.length - 1];
      args = Array.from(argList).slice(0, argList.length - 1);
    } else {
      args = Array.from(argList);
    }
    return [opts, args];
  }
  __name(lastOpts, "lastOpts");
  var zoneOffsetTs;
  var zoneOffsetGuessCache = /* @__PURE__ */ new Map();
  var _DateTime = class _DateTime {
    /**
     * @access private
     */
    constructor(config3) {
      const zone = config3.zone || Settings.defaultZone;
      let invalid = config3.invalid || (Number.isNaN(config3.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
      this.ts = isUndefined2(config3.ts) ? Settings.now() : config3.ts;
      let c6 = null, o18 = null;
      if (!invalid) {
        const unchanged = config3.old && config3.old.ts === this.ts && config3.old.zone.equals(zone);
        if (unchanged) {
          [c6, o18] = [config3.old.c, config3.old.o];
        } else {
          const ot3 = isNumber(config3.o) && !config3.old ? config3.o : zone.offset(this.ts);
          c6 = tsToObj(this.ts, ot3);
          invalid = Number.isNaN(c6.year) ? new Invalid("invalid input") : null;
          c6 = invalid ? null : c6;
          o18 = invalid ? null : ot3;
        }
      }
      this._zone = zone;
      this.loc = config3.loc || Locale.create();
      this.invalid = invalid;
      this.weekData = null;
      this.localWeekData = null;
      this.c = c6;
      this.o = o18;
      this.isLuxonDateTime = true;
    }
    // CONSTRUCT
    /**
     * Create a DateTime for the current instant, in the system's time zone.
     *
     * Use Settings to override these default values if needed.
     * @example DateTime.now().toISO() //~> now in the ISO format
     * @return {DateTime}
     */
    static now() {
      return new _DateTime({});
    }
    /**
     * Create a local DateTime
     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month, 1-indexed
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                                  //~> now
     * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
     * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
     * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
     * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */
    static local() {
      const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }
    /**
     * Create a DateTime in UTC
     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @param {Object} options - configuration options for the DateTime
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [options.weekSettings] - the week settings to set on the resulting DateTime instance
     * @example DateTime.utc()                                              //~> now
     * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
     * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
     * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
     * @return {DateTime}
     */
    static utc() {
      const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
      opts.zone = FixedOffsetZone.utcInstance;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }
    /**
     * Create a DateTime from a JavaScript Date object. Uses the default zone.
     * @param {Date} date - a JavaScript Date object
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @return {DateTime}
     */
    static fromJSDate(date, options = {}) {
      const ts3 = isDate(date) ? date.valueOf() : NaN;
      if (Number.isNaN(ts3)) {
        return _DateTime.invalid("invalid input");
      }
      const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return _DateTime.invalid(unsupportedZone(zoneToUse));
      }
      return new _DateTime({
        ts: ts3,
        zone: zoneToUse,
        loc: Locale.fromObject(options)
      });
    }
    /**
     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} milliseconds - a number of milliseconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromMillis(milliseconds, options = {}) {
      if (!isNumber(milliseconds)) {
        throw new InvalidArgumentError(
          `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
        );
      } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
        return _DateTime.invalid("Timestamp out of range");
      } else {
        return new _DateTime({
          ts: milliseconds,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options)
        });
      }
    }
    /**
     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} seconds - a number of seconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} options.weekSettings - the week settings to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromSeconds(seconds, options = {}) {
      if (!isNumber(seconds)) {
        throw new InvalidArgumentError("fromSeconds requires a numerical input");
      } else {
        return new _DateTime({
          ts: seconds * 1e3,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options)
        });
      }
    }
    /**
     * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.year - a year, such as 1987
     * @param {number} obj.month - a month, 1-12
     * @param {number} obj.day - a day of the month, 1-31, depending on the month
     * @param {number} obj.ordinal - day of the year, 1-365 or 366
     * @param {number} obj.weekYear - an ISO week year
     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
     * @param {number} obj.localWeekYear - a week year, according to the locale
     * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
     * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
     * @param {number} obj.hour - hour of the day, 0-23
     * @param {number} obj.minute - minute of the hour, 0-59
     * @param {number} obj.second - second of the minute, 0-59
     * @param {number} obj.millisecond - millisecond of the second, 0-999
     * @param {Object} opts - options for creating this DateTime
     * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
     * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
     * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
     * @return {DateTime}
     */
    static fromObject(obj, opts = {}) {
      obj = obj || {};
      const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return _DateTime.invalid(unsupportedZone(zoneToUse));
      }
      const loc = Locale.fromObject(opts);
      const normalized = normalizeObject(obj, normalizeUnitWithLocalWeeks);
      const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, loc);
      const tsNow = Settings.now(), offsetProvis = !isUndefined2(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !isUndefined2(normalized.ordinal), containsGregorYear = !isUndefined2(normalized.year), containsGregorMD = !isUndefined2(normalized.month) || !isUndefined2(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }
      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }
      const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
      let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
      if (useWeekData) {
        units = orderedWeekUnits;
        defaultValues = defaultWeekUnitValues;
        objNow = gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
      } else if (containsOrdinal) {
        units = orderedOrdinalUnits;
        defaultValues = defaultOrdinalUnitValues;
        objNow = gregorianToOrdinal(objNow);
      } else {
        units = orderedUnits2;
        defaultValues = defaultUnitValues;
      }
      let foundFirst = false;
      for (const u10 of units) {
        const v4 = normalized[u10];
        if (!isUndefined2(v4)) {
          foundFirst = true;
        } else if (foundFirst) {
          normalized[u10] = defaultValues[u10];
        } else {
          normalized[u10] = objNow[u10];
        }
      }
      const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
      if (invalid) {
        return _DateTime.invalid(invalid);
      }
      const gregorian = useWeekData ? weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new _DateTime({
        ts: tsFinal,
        zone: zoneToUse,
        o: offsetFinal,
        loc
      });
      if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
        return _DateTime.invalid(
          "mismatched weekday",
          `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
        );
      }
      if (!inst.isValid) {
        return _DateTime.invalid(inst.invalid);
      }
      return inst;
    }
    /**
     * Create a DateTime from an ISO 8601 string
     * @param {string} text - the ISO string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @param {string} [opts.weekSettings] - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromISO('2016-05-25T09:08:34.123')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
     * @example DateTime.fromISO('2016-W05-4')
     * @return {DateTime}
     */
    static fromISO(text, opts = {}) {
      const [vals, parsedZone] = parseISODate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    }
    /**
     * Create a DateTime from an RFC 2822 string
     * @param {string} text - the RFC 2822 string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
     * @return {DateTime}
     */
    static fromRFC2822(text, opts = {}) {
      const [vals, parsedZone] = parseRFC2822Date(text);
      return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    }
    /**
     * Create a DateTime from an HTTP header date
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @param {string} text - the HTTP header date
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
     * @return {DateTime}
     */
    static fromHTTP(text, opts = {}) {
      const [vals, parsedZone] = parseHTTPDate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
    }
    /**
     * Create a DateTime from an input string and format string.
     * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromFormat(text, fmt, opts = {}) {
      if (isUndefined2(text) || isUndefined2(fmt)) {
        throw new InvalidArgumentError("fromFormat requires an input string and a format");
      }
      const { locale: locale2 = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
        locale: locale2,
        numberingSystem,
        defaultToEN: true
      }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
      if (invalid) {
        return _DateTime.invalid(invalid);
      } else {
        return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
      }
    }
    /**
     * @deprecated use fromFormat instead
     */
    static fromString(text, fmt, opts = {}) {
      return _DateTime.fromFormat(text, fmt, opts);
    }
    /**
     * Create a DateTime from a SQL date, time, or datetime
     * Defaults to en-US if no locale has been specified, regardless of the system's locale
     * @param {string} text - the string to parse
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.weekSettings - the week settings to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @example DateTime.fromSQL('2017-05-15')
     * @example DateTime.fromSQL('2017-05-15 09:12:34')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
     * @example DateTime.fromSQL('09:12:34.342')
     * @return {DateTime}
     */
    static fromSQL(text, opts = {}) {
      const [vals, parsedZone] = parseSQL(text);
      return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    }
    /**
     * Create an invalid DateTime.
     * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {DateTime}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
      }
      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
      if (Settings.throwOnInvalid) {
        throw new InvalidDateTimeError(invalid);
      } else {
        return new _DateTime({ invalid });
      }
    }
    /**
     * Check if an object is an instance of DateTime. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDateTime(o18) {
      return o18 && o18.isLuxonDateTime || false;
    }
    /**
     * Produce the format string for a set of options
     * @param formatOpts
     * @param localeOpts
     * @returns {string}
     */
    static parseFormatForOpts(formatOpts, localeOpts = {}) {
      const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
      return !tokenList ? null : tokenList.map((t21) => t21 ? t21.val : null).join("");
    }
    /**
     * Produce the the fully expanded format token for the locale
     * Does NOT quote characters, so quoted tokens will not round trip correctly
     * @param fmt
     * @param localeOpts
     * @returns {string}
     */
    static expandFormat(fmt, localeOpts = {}) {
      const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
      return expanded.map((t21) => t21.val).join("");
    }
    static resetCache() {
      zoneOffsetTs = void 0;
      zoneOffsetGuessCache.clear();
    }
    // INFO
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
     * @return {number}
     */
    get(unit) {
      return this[unit];
    }
    /**
     * Returns whether the DateTime is valid. Invalid DateTimes occur when:
     * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
     * * The DateTime was created by an operation on another invalid date
     * @type {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */
    get outputCalendar() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */
    get zone() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */
    get zoneName() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */
    get year() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */
    get quarter() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */
    get month() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */
    get day() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */
    get hour() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */
    get minute() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */
    get second() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */
    get millisecond() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */
    get weekYear() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */
    get weekNumber() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */
    get weekday() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
     * Returns true if this date is on a weekend according to the locale, false otherwise
     * @returns {boolean}
     */
    get isWeekend() {
      return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
    }
    /**
     * Get the day of the week according to the locale.
     * 1 is the first day of the week and 7 is the last day of the week.
     * If the locale assigns Sunday as the first day of the week, then a date which is a Sunday will return 1,
     * @returns {number}
     */
    get localWeekday() {
      return this.isValid ? possiblyCachedLocalWeekData(this).weekday : NaN;
    }
    /**
     * Get the week number of the week year according to the locale. Different locales assign week numbers differently,
     * because the week can start on different days of the week (see localWeekday) and because a different number of days
     * is required for a week to count as the first week of a year.
     * @returns {number}
     */
    get localWeekNumber() {
      return this.isValid ? possiblyCachedLocalWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the week year according to the locale. Different locales assign week numbers (and therefor week years)
     * differently, see localWeekNumber.
     * @returns {number}
     */
    get localWeekYear() {
      return this.isValid ? possiblyCachedLocalWeekData(this).weekYear : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */
    get ordinal() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */
    get monthShort() {
      return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */
    get monthLong() {
      return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */
    get weekdayShort() {
      return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */
    get weekdayLong() {
      return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */
    get offset() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameShort() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameLong() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */
    get isOffsetFixed() {
      return this.isValid ? this.zone.isUniversal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */
    get isInDST() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
      }
    }
    /**
     * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
     * in this DateTime's zone. During DST changes local time can be ambiguous, for example
     * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
     * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
     * @returns {DateTime[]}
     */
    getPossibleOffsets() {
      if (!this.isValid || this.isOffsetFixed) {
        return [this];
      }
      const dayMs = 864e5;
      const minuteMs = 6e4;
      const localTS = objToLocalTS(this.c);
      const oEarlier = this.zone.offset(localTS - dayMs);
      const oLater = this.zone.offset(localTS + dayMs);
      const o1 = this.zone.offset(localTS - oEarlier * minuteMs);
      const o22 = this.zone.offset(localTS - oLater * minuteMs);
      if (o1 === o22) {
        return [this];
      }
      const ts1 = localTS - o1 * minuteMs;
      const ts22 = localTS - o22 * minuteMs;
      const c1 = tsToObj(ts1, o1);
      const c22 = tsToObj(ts22, o22);
      if (c1.hour === c22.hour && c1.minute === c22.minute && c1.second === c22.second && c1.millisecond === c22.millisecond) {
        return [clone2(this, { ts: ts1 }), clone2(this, { ts: ts22 })];
      }
      return [this];
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */
    get isInLeapYear() {
      return isLeapYear(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */
    get daysInMonth() {
      return daysInMonth(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */
    get daysInYear() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */
    get weeksInWeekYear() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's local week year
     * @example DateTime.local(2020, 6, {locale: 'en-US'}).weeksInLocalWeekYear //=> 52
     * @example DateTime.local(2020, 6, {locale: 'de-DE'}).weeksInLocalWeekYear //=> 53
     * @type {number}
     */
    get weeksInLocalWeekYear() {
      return this.isValid ? weeksInWeekYear(
        this.localWeekYear,
        this.loc.getMinDaysInFirstWeek(),
        this.loc.getStartOfWeek()
      ) : NaN;
    }
    /**
     * Returns the resolved Intl options for this DateTime.
     * This is useful in understanding the behavior of formatting methods
     * @param {Object} opts - the same options as toLocaleString
     * @return {Object}
     */
    resolvedLocaleOptions(opts = {}) {
      const { locale: locale2, numberingSystem, calendar } = Formatter.create(
        this.loc.clone(opts),
        opts
      ).resolvedOptions(this);
      return { locale: locale2, numberingSystem, outputCalendar: calendar };
    }
    // TRANSFORM
    /**
     * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
     *
     * Equivalent to {@link DateTime#setZone}('utc')
     * @param {number} [offset=0] - optionally, an offset from UTC in minutes
     * @param {Object} [opts={}] - options to pass to `setZone()`
     * @return {DateTime}
     */
    toUTC(offset5 = 0, opts = {}) {
      return this.setZone(FixedOffsetZone.instance(offset5), opts);
    }
    /**
     * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
     *
     * Equivalent to `setZone('local')`
     * @return {DateTime}
     */
    toLocal() {
      return this.setZone(Settings.defaultZone);
    }
    /**
     * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
     *
     * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
     * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
     * @param {Object} opts - options
     * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
     * @return {DateTime}
     */
    setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
      zone = normalizeZone(zone, Settings.defaultZone);
      if (zone.equals(this.zone)) {
        return this;
      } else if (!zone.isValid) {
        return _DateTime.invalid(unsupportedZone(zone));
      } else {
        let newTS = this.ts;
        if (keepLocalTime || keepCalendarTime) {
          const offsetGuess = zone.offset(this.ts);
          const asObj = this.toObject();
          [newTS] = objToTS(asObj, offsetGuess, zone);
        }
        return clone2(this, { ts: newTS, zone });
      }
    }
    /**
     * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
     * @param {Object} properties - the properties to set
     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
     * @return {DateTime}
     */
    reconfigure({ locale: locale2, numberingSystem, outputCalendar } = {}) {
      const loc = this.loc.clone({ locale: locale2, numberingSystem, outputCalendar });
      return clone2(this, { loc });
    }
    /**
     * "Set" the locale. Returns a newly-constructed DateTime.
     * Just a convenient alias for reconfigure({ locale })
     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
     * @return {DateTime}
     */
    setLocale(locale2) {
      return this.reconfigure({ locale: locale2 });
    }
    /**
     * "Set" the values of specified units. Returns a newly-constructed DateTime.
     * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
     *
     * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
     * They cannot be mixed with ISO-week units like `weekday`.
     * @param {Object} values - a mapping of units to numbers
     * @example dt.set({ year: 2017 })
     * @example dt.set({ hour: 8, minute: 30 })
     * @example dt.set({ weekday: 5 })
     * @example dt.set({ year: 2005, ordinal: 234 })
     * @return {DateTime}
     */
    set(values) {
      if (!this.isValid) return this;
      const normalized = normalizeObject(values, normalizeUnitWithLocalWeeks);
      const { minDaysInFirstWeek, startOfWeek } = usesLocalWeekValues(normalized, this.loc);
      const settingWeekStuff = !isUndefined2(normalized.weekYear) || !isUndefined2(normalized.weekNumber) || !isUndefined2(normalized.weekday), containsOrdinal = !isUndefined2(normalized.ordinal), containsGregorYear = !isUndefined2(normalized.year), containsGregorMD = !isUndefined2(normalized.month) || !isUndefined2(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }
      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }
      let mixed;
      if (settingWeekStuff) {
        mixed = weekToGregorian(
          { ...gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), ...normalized },
          minDaysInFirstWeek,
          startOfWeek
        );
      } else if (!isUndefined2(normalized.ordinal)) {
        mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
      } else {
        mixed = { ...this.toObject(), ...normalized };
        if (isUndefined2(normalized.day)) {
          mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
        }
      }
      const [ts3, o18] = objToTS(mixed, this.o, this.zone);
      return clone2(this, { ts: ts3, o: o18 });
    }
    /**
     * Add a period of time to this DateTime and return the resulting DateTime
     *
     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @example DateTime.now().plus(123) //~> in 123 milliseconds
     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
     * @return {DateTime}
     */
    plus(duration) {
      if (!this.isValid) return this;
      const dur = Duration.fromDurationLike(duration);
      return clone2(this, adjustTime(this, dur));
    }
    /**
     * Subtract a period of time to this DateTime and return the resulting DateTime
     * See {@link DateTime#plus}
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     @return {DateTime}
     */
    minus(duration) {
      if (!this.isValid) return this;
      const dur = Duration.fromDurationLike(duration).negate();
      return clone2(this, adjustTime(this, dur));
    }
    /**
     * "Set" this DateTime to the beginning of a unit of time.
     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
     * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
     * @return {DateTime}
     */
    startOf(unit, { useLocaleWeeks = false } = {}) {
      if (!this.isValid) return this;
      const o18 = {}, normalizedUnit = Duration.normalizeUnit(unit);
      switch (normalizedUnit) {
        case "years":
          o18.month = 1;
        // falls through
        case "quarters":
        case "months":
          o18.day = 1;
        // falls through
        case "weeks":
        case "days":
          o18.hour = 0;
        // falls through
        case "hours":
          o18.minute = 0;
        // falls through
        case "minutes":
          o18.second = 0;
        // falls through
        case "seconds":
          o18.millisecond = 0;
          break;
        case "milliseconds":
          break;
      }
      if (normalizedUnit === "weeks") {
        if (useLocaleWeeks) {
          const startOfWeek = this.loc.getStartOfWeek();
          const { weekday } = this;
          if (weekday < startOfWeek) {
            o18.weekNumber = this.weekNumber - 1;
          }
          o18.weekday = startOfWeek;
        } else {
          o18.weekday = 1;
        }
      }
      if (normalizedUnit === "quarters") {
        const q3 = Math.ceil(this.month / 3);
        o18.month = (q3 - 1) * 3 + 1;
      }
      return this.set(o18);
    }
    /**
     * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
     * @return {DateTime}
     */
    endOf(unit, opts) {
      return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit, opts).minus(1) : this;
    }
    // OUTPUT
    /**
     * Returns a string representation of this DateTime formatted according to the specified format string.
     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @param {string} fmt - the format string
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
     * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID3;
    }
    /**
     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
     * of the DateTime in the assigned locale.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toLocaleString(); //=> 4/20/2017
     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
    }
    /**
     * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
     * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
     * @example DateTime.now().toLocaleParts(); //=> [
     *                                   //=>   { type: 'day', value: '25' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'month', value: '05' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'year', value: '1982' }
     *                                   //=> ]
     */
    toLocaleParts(opts = {}) {
      return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @param {string} [opts.precision='milliseconds'] - truncate output to desired presicion: 'years', 'months', 'days', 'hours', 'minutes', 'seconds' or 'milliseconds'. When precision and suppressSeconds or suppressMilliseconds are used together, precision sets the maximum unit shown in the output, however seconds or milliseconds will still be suppressed if they are 0.
     * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
     * @example DateTime.now().toISO({ precision: 'day' }) //=> '2017-04-22Z'
     * @example DateTime.now().toISO({ precision: 'minute' }) //=> '2017-04-22T20:47Z'
     * @return {string|null}
     */
    toISO({
      format: format4 = "extended",
      suppressSeconds = false,
      suppressMilliseconds = false,
      includeOffset = true,
      extendedZone = false,
      precision = "milliseconds"
    } = {}) {
      if (!this.isValid) {
        return null;
      }
      precision = normalizeUnit(precision);
      const ext = format4 === "extended";
      let c6 = toISODate(this, ext, precision);
      if (orderedUnits2.indexOf(precision) >= 3) c6 += "T";
      c6 += toISOTime(
        this,
        ext,
        suppressSeconds,
        suppressMilliseconds,
        includeOffset,
        extendedZone,
        precision
      );
      return c6;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's date component
     * @param {Object} opts - options
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @param {string} [opts.precision='day'] - truncate output to desired precision: 'years', 'months', or 'days'.
     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
     * @example DateTime.utc(1982, 5, 25).toISODate({ precision: 'month' }) //=> '1982-05'
     * @return {string|null}
     */
    toISODate({ format: format4 = "extended", precision = "day" } = {}) {
      if (!this.isValid) {
        return null;
      }
      return toISODate(this, format4 === "extended", normalizeUnit(precision));
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's week date
     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
     * @return {string}
     */
    toISOWeekDate() {
      return toTechFormat(this, "kkkk-'W'WW-c");
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's time component
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @param {string} [opts.precision='milliseconds'] - truncate output to desired presicion: 'hours', 'minutes', 'seconds' or 'milliseconds'. When precision and suppressSeconds or suppressMilliseconds are used together, precision sets the maximum unit shown in the output, however seconds or milliseconds will still be suppressed if they are 0.
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, second: 56 }).toISOTime({ precision: 'minute' }) //=> '07:34Z'
     * @return {string}
     */
    toISOTime({
      suppressMilliseconds = false,
      suppressSeconds = false,
      includeOffset = true,
      includePrefix = false,
      extendedZone = false,
      format: format4 = "extended",
      precision = "milliseconds"
    } = {}) {
      if (!this.isValid) {
        return null;
      }
      precision = normalizeUnit(precision);
      let c6 = includePrefix && orderedUnits2.indexOf(precision) >= 3 ? "T" : "";
      return c6 + toISOTime(
        this,
        format4 === "extended",
        suppressSeconds,
        suppressMilliseconds,
        includeOffset,
        extendedZone,
        precision
      );
    }
    /**
     * Returns an RFC 2822-compatible string representation of this DateTime
     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
     * @return {string}
     */
    toRFC2822() {
      return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
     * Specifically, the string conforms to RFC 1123.
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
     * @return {string}
     */
    toHTTP() {
      return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Date
     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
     * @return {string|null}
     */
    toSQLDate() {
      if (!this.isValid) {
        return null;
      }
      return toISODate(this, true);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Time
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc().toSQL() //=> '05:15:16.345'
     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
     * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
     * @return {string}
     */
    toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
      let fmt = "HH:mm:ss.SSS";
      if (includeZone || includeOffset) {
        if (includeOffsetSpace) {
          fmt += " ";
        }
        if (includeZone) {
          fmt += "z";
        } else if (includeOffset) {
          fmt += "ZZ";
        }
      }
      return toTechFormat(this, fmt, true);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
     * @return {string}
     */
    toSQL(opts = {}) {
      if (!this.isValid) {
        return null;
      }
      return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
    }
    /**
     * Returns a string representation of this DateTime appropriate for debugging
     * @return {string}
     */
    toString() {
      return this.isValid ? this.toISO() : INVALID3;
    }
    /**
     * Returns a string representation of this DateTime appropriate for the REPL.
     * @return {string}
     */
    [Symbol.for("nodejs.util.inspect.custom")]() {
      if (this.isValid) {
        return `DateTime { ts: ${this.toISO()}, zone: ${this.zone.name}, locale: ${this.locale} }`;
      } else {
        return `DateTime { Invalid, reason: ${this.invalidReason} }`;
      }
    }
    /**
     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }
    /**
     * Returns the epoch milliseconds of this DateTime.
     * @return {number}
     */
    toMillis() {
      return this.isValid ? this.ts : NaN;
    }
    /**
     * Returns the epoch seconds (including milliseconds in the fractional part) of this DateTime.
     * @return {number}
     */
    toSeconds() {
      return this.isValid ? this.ts / 1e3 : NaN;
    }
    /**
     * Returns the epoch seconds (as a whole number) of this DateTime.
     * @return {number}
     */
    toUnixInteger() {
      return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
    }
    /**
     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }
    /**
     * Returns a BSON serializable equivalent to this DateTime.
     * @return {Date}
     */
    toBSON() {
      return this.toJSDate();
    }
    /**
     * Returns a JavaScript object with this DateTime's year, month, day, and so on.
     * @param opts - options for generating the object
     * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
     * @return {Object}
     */
    toObject(opts = {}) {
      if (!this.isValid) return {};
      const base = { ...this.c };
      if (opts.includeConfig) {
        base.outputCalendar = this.outputCalendar;
        base.numberingSystem = this.loc.numberingSystem;
        base.locale = this.loc.locale;
      }
      return base;
    }
    /**
     * Returns a JavaScript Date equivalent to this DateTime.
     * @return {Date}
     */
    toJSDate() {
      return new Date(this.isValid ? this.ts : NaN);
    }
    // COMPARE
    /**
     * Return the difference between two DateTimes as a Duration.
     * @param {DateTime} otherDateTime - the DateTime to compare this one to
     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example
     * var i1 = DateTime.fromISO('1982-05-25T09:45'),
     *     i2 = DateTime.fromISO('1983-10-14T10:30');
     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
     * @return {Duration}
     */
    diff(otherDateTime, unit = "milliseconds", opts = {}) {
      if (!this.isValid || !otherDateTime.isValid) {
        return Duration.invalid("created by diffing an invalid DateTime");
      }
      const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
      const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
      return otherIsLater ? diffed.negate() : diffed;
    }
    /**
     * Return the difference between this DateTime and right now.
     * See {@link DateTime#diff}
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    diffNow(unit = "milliseconds", opts = {}) {
      return this.diff(_DateTime.now(), unit, opts);
    }
    /**
     * Return an Interval spanning between this DateTime and another DateTime
     * @param {DateTime} otherDateTime - the other end point of the Interval
     * @return {Interval|DateTime}
     */
    until(otherDateTime) {
      return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
    }
    /**
     * Return whether this DateTime is in the same unit of time as another DateTime.
     * Higher-order units must also be identical for this function to return `true`.
     * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
     * @param {DateTime} otherDateTime - the other DateTime
     * @param {string} unit - the unit of time to check sameness on
     * @param {Object} opts - options
     * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
     * @return {boolean}
     */
    hasSame(otherDateTime, unit, opts) {
      if (!this.isValid) return false;
      const inputMs = otherDateTime.valueOf();
      const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
      return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
    }
    /**
     * Equality check
     * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
     * To compare just the millisecond values, use `+dt1 === +dt2`.
     * @param {DateTime} other - the other DateTime
     * @return {boolean}
     */
    equals(other) {
      return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
    }
    /**
     * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
     * platform supports Intl.RelativeTimeFormat. Rounds towards zero by default.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
     * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
     * @param {boolean} [options.round=true] - whether to round the numbers in the output.
     * @param {string} [options.rounding="trunc"] - rounding method to use when rounding the numbers in the output. Can be "trunc" (toward zero), "expand" (away from zero), "round", "floor", or "ceil".
     * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
     * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
     */
    toRelative(options = {}) {
      if (!this.isValid) return null;
      const base = options.base || _DateTime.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
      let units = ["years", "months", "days", "hours", "minutes", "seconds"];
      let unit = options.unit;
      if (Array.isArray(options.unit)) {
        units = options.unit;
        unit = void 0;
      }
      return diffRelative(base, this.plus(padding), {
        ...options,
        numeric: "always",
        units,
        unit
      });
    }
    /**
     * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
     * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
     */
    toRelativeCalendar(options = {}) {
      if (!this.isValid) return null;
      return diffRelative(options.base || _DateTime.fromObject({}, { zone: this.zone }), this, {
        ...options,
        numeric: "auto",
        units: ["years", "months", "days"],
        calendary: true
      });
    }
    /**
     * Return the min of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
     * @return {DateTime} the min DateTime, or undefined if called with no argument
     */
    static min(...dateTimes) {
      if (!dateTimes.every(_DateTime.isDateTime)) {
        throw new InvalidArgumentError("min requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i12) => i12.valueOf(), Math.min);
    }
    /**
     * Return the max of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
     * @return {DateTime} the max DateTime, or undefined if called with no argument
     */
    static max(...dateTimes) {
      if (!dateTimes.every(_DateTime.isDateTime)) {
        throw new InvalidArgumentError("max requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i12) => i12.valueOf(), Math.max);
    }
    // MISC
    /**
     * Explain how a string would be parsed by fromFormat()
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see description)
     * @param {Object} options - options taken by fromFormat()
     * @return {Object}
     */
    static fromFormatExplain(text, fmt, options = {}) {
      const { locale: locale2 = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
        locale: locale2,
        numberingSystem,
        defaultToEN: true
      });
      return explainFromTokens(localeToUse, text, fmt);
    }
    /**
     * @deprecated use fromFormatExplain instead
     */
    static fromStringExplain(text, fmt, options = {}) {
      return _DateTime.fromFormatExplain(text, fmt, options);
    }
    /**
     * Build a parser for `fmt` using the given locale. This parser can be passed
     * to {@link DateTime.fromFormatParser} to a parse a date in this format. This
     * can be used to optimize cases where many dates need to be parsed in a
     * specific format.
     *
     * @param {String} fmt - the format the string is expected to be in (see
     * description)
     * @param {Object} options - options used to set locale and numberingSystem
     * for parser
     * @returns {TokenParser} - opaque object to be used
     */
    static buildFormatParser(fmt, options = {}) {
      const { locale: locale2 = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
        locale: locale2,
        numberingSystem,
        defaultToEN: true
      });
      return new TokenParser(localeToUse, fmt);
    }
    /**
     * Create a DateTime from an input string and format parser.
     *
     * The format parser must have been created with the same locale as this call.
     *
     * @param {String} text - the string to parse
     * @param {TokenParser} formatParser - parser from {@link DateTime.buildFormatParser}
     * @param {Object} opts - options taken by fromFormat()
     * @returns {DateTime}
     */
    static fromFormatParser(text, formatParser, opts = {}) {
      if (isUndefined2(text) || isUndefined2(formatParser)) {
        throw new InvalidArgumentError(
          "fromFormatParser requires an input string and a format parser"
        );
      }
      const { locale: locale2 = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
        locale: locale2,
        numberingSystem,
        defaultToEN: true
      });
      if (!localeToUse.equals(formatParser.locale)) {
        throw new InvalidArgumentError(
          `fromFormatParser called with a locale of ${localeToUse}, but the format parser was created for ${formatParser.locale}`
        );
      }
      const { result, zone, specificOffset, invalidReason } = formatParser.explainFromTokens(text);
      if (invalidReason) {
        return _DateTime.invalid(invalidReason);
      } else {
        return parseDataToDateTime(
          result,
          zone,
          opts,
          `format ${formatParser.format}`,
          text,
          specificOffset
        );
      }
    }
    // FORMAT PRESETS
    /**
     * {@link DateTime#toLocaleString} format like 10/14/1983
     * @type {Object}
     */
    static get DATE_SHORT() {
      return DATE_SHORT;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED() {
      return DATE_MED;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED_WITH_WEEKDAY() {
      return DATE_MED_WITH_WEEKDAY;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */
    static get DATE_FULL() {
      return DATE_FULL;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */
    static get DATE_HUGE() {
      return DATE_HUGE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_SIMPLE() {
      return TIME_SIMPLE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SECONDS() {
      return TIME_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SHORT_OFFSET() {
      return TIME_WITH_SHORT_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_LONG_OFFSET() {
      return TIME_WITH_LONG_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_SIMPLE() {
      return TIME_24_SIMPLE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SECONDS() {
      return TIME_24_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SHORT_OFFSET() {
      return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_LONG_OFFSET() {
      return TIME_24_WITH_LONG_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT() {
      return DATETIME_SHORT;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT_WITH_SECONDS() {
      return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED() {
      return DATETIME_MED;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_SECONDS() {
      return DATETIME_MED_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_WEEKDAY() {
      return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL() {
      return DATETIME_FULL;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL_WITH_SECONDS() {
      return DATETIME_FULL_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE() {
      return DATETIME_HUGE;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE_WITH_SECONDS() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  };
  __name(_DateTime, "DateTime");
  var DateTime = _DateTime;
  function friendlyDateTime(dateTimeish) {
    if (DateTime.isDateTime(dateTimeish)) {
      return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
      return DateTime.fromJSDate(dateTimeish);
    } else if (dateTimeish && typeof dateTimeish === "object") {
      return DateTime.fromObject(dateTimeish);
    } else {
      throw new InvalidArgumentError(
        `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
      );
    }
  }
  __name(friendlyDateTime, "friendlyDateTime");

  // ../../contrib/hdbt/src/js/react/common/enum/HDSDateFormat.ts
  var HDS_DATE_FORMAT = "d.M.yyyy";

  // src/js/react/apps/allu-decisions-search/helpers.ts
  var matchTypeLabel = /* @__PURE__ */ __name((type) => {
    switch (type) {
      case "EXCAVATION_ANNOUNCEMENT":
        return Drupal.t("Excavation announcement", {}, { context: "Allu decision search" });
      case "AREA_RENTAL":
        return Drupal.t("Area rental", {}, { context: "Allu decision search" });
      case "TEMPORARY_TRAFFIC_ARRANGEMENTS":
        return Drupal.t("Temporary traffic announcement", {}, { context: "Allu decision search" });
      case "PLACEMENT_CONTRACT":
        return Drupal.t("Placement contract", {}, { context: "Allu decision search" });
      case "EVENT":
        return Drupal.t("Event", {}, { context: "Allu decision search" });
      case "SHORT_TERM_RENTAL":
        return Drupal.t("Short term rental", {}, { context: "Allu decision search" });
      default:
        throw new Error("Unknown decision type");
    }
    ;
  }, "matchTypeLabel");
  var matchTypeValueFromLabel = /* @__PURE__ */ __name((label) => {
    switch (label) {
      case Drupal.t("Excavation announcement", {}, { context: "Allu decision search" }):
        return "EXCAVATION_ANNOUNCEMENT";
      case Drupal.t("Area rental", {}, { context: "Allu decision search" }):
        return "AREA_RENTAL";
      case Drupal.t("Temporary traffic announcement", {}, { context: "Allu decision search" }):
        return "TEMPORARY_TRAFFIC_ARRANGEMENTS";
      case Drupal.t("Placement contract", {}, { context: "Allu decision search" }):
        return "PLACEMENT_CONTRACT";
      case Drupal.t("Event", {}, { context: "Allu decision search" }):
        return "EVENT";
      case Drupal.t("Short term rental", {}, { context: "Allu decision search" }):
        return "SHORT_TERM_RENTAL";
      default:
        throw new Error("Unknown decision type label");
    }
    ;
  }, "matchTypeValueFromLabel");
  var formQuery = /* @__PURE__ */ __name((selections) => {
    const body = {
      query: {
        bool: {}
      }
    };
    const must = [
      {
        match: {
          // Match only allu documents
          search_api_datasource: "entity:paatokset_allu_document"
        }
      }
    ];
    if (selections?.type?.length) {
      must.push({
        terms: {
          document_type: selections.type.map((type) => type.value)
        }
      });
    }
    const range = {};
    if (selections.start) {
      range.gte = DateTime.fromFormat(selections.start, HDS_DATE_FORMAT).startOf("day").toUnixInteger().toString();
    }
    if (selections.end) {
      range.lte = DateTime.fromFormat(selections.end, HDS_DATE_FORMAT).endOf("day").toUnixInteger().toString();
    }
    if (Object.keys(range).length && body?.query?.bool) {
      must.push({
        range: {
          document_created: range
        }
      });
    }
    if (body.query?.bool) {
      body.query.bool.must = must;
    }
    let should = [];
    if (selections.q) {
      should = should.concat([
        {
          match_phrase_prefix: {
            address_fulltext: selections.q
          }
        },
        {
          match: {
            label: selections.q
          }
        }
      ]);
    }
    if (should.length && body?.query?.bool) {
      body.query.bool.should = should;
      body.query.bool.minimum_should_match = 1;
    }
    const sort = [
      {
        document_created: {
          order: "desc"
        }
      }
    ];
    const { page, ...rest } = selections;
    if (Object.keys(rest).length) {
      sort.unshift({
        _score: {
          order: "desc"
        }
      });
    }
    body.sort = sort;
    return body;
  }, "formQuery");

  // src/js/react/apps/allu-decisions-search/store.ts
  var initalUrlParams = new URLSearchParams(window.location.search);
  var initialParams = {
    end: initalUrlParams.get("end") || void 0,
    page: initalUrlParams.get("page") || void 0,
    q: initalUrlParams.get("q") || void 0,
    start: initalUrlParams.get("start") || void 0,
    type: initalUrlParams.getAll("type").map((label) => ({
      label,
      value: matchTypeValueFromLabel(label)
    })) || void 0
  };
  var selectionsAtom = atom(initialParams);
  var setSelectionsAtom = atom(
    null,
    (get, set, value, partial = false) => {
      if (value === RESET) {
        set(selectionsAtom, {});
        return;
      }
      set(
        selectionsAtom,
        (currentValue) => partial ? {
          ...currentValue,
          ...value
        } : value
      );
    }
  );
  var getPageAtom = atom((get) => {
    const selections = get(selectionsAtom);
    return selections?.page;
  });
  var selectionsToURLParams = /* @__PURE__ */ __name((currentParams) => {
    const params = new URLSearchParams();
    Object.entries(currentParams).forEach((entry) => {
      const [key, value] = entry;
      if (value && Array.isArray(value) && value.length) {
        value.forEach((option) => params.set(key, option.label));
      } else if (value && !Array.isArray(value)) {
        params.set(key, value);
      }
    });
    return params;
  }, "selectionsToURLParams");
  var urlAtom = atom((get) => {
    const selections = get(selectionsAtom);
    const params = selectionsToURLParams(selections);
    const currentGlobalParams = new URLSearchParams(window.location.search);
    const newParams = new URLSearchParams({
      ...Object.fromEntries(currentGlobalParams),
      ...Object.fromEntries(params)
    });
    ["end", "page", "q", "type", "start"].forEach((key) => {
      if (!params.has(key)) {
        newParams.delete(key);
      }
    });
    const newUrl = new URL(window.location.toString());
    newUrl.search = newParams.toString();
    window.history.pushState(
      {},
      "",
      newUrl.toString()
    );
    return params.toString();
  });

  // ../../contrib/hdbt/node_modules/hds-react/tslib.es6-0bd7f4eb.js
  function o10(t21, r30) {
    var n21 = {};
    for (var o18 in t21) Object.prototype.hasOwnProperty.call(t21, o18) && r30.indexOf(o18) < 0 && (n21[o18] = t21[o18]);
    if (null != t21 && "function" == typeof Object.getOwnPropertySymbols) {
      var e18 = 0;
      for (o18 = Object.getOwnPropertySymbols(t21); e18 < o18.length; e18++) r30.indexOf(o18[e18]) < 0 && Object.prototype.propertyIsEnumerable.call(t21, o18[e18]) && (n21[o18[e18]] = t21[o18[e18]]);
    }
    return n21;
  }
  __name(o10, "o");

  // ../../contrib/hdbt/node_modules/postcss/lib/postcss.mjs
  var import_postcss3 = __toESM(require_postcss2(), 1);
  var stringify2 = import_postcss3.default.stringify;
  var fromJSON2 = import_postcss3.default.fromJSON;
  var plugin2 = import_postcss3.default.plugin;
  var parse3 = import_postcss3.default.parse;
  var list2 = import_postcss3.default.list;
  var document3 = import_postcss3.default.document;
  var comment2 = import_postcss3.default.comment;
  var atRule2 = import_postcss3.default.atRule;
  var rule2 = import_postcss3.default.rule;
  var decl2 = import_postcss3.default.decl;
  var root2 = import_postcss3.default.root;
  var CssSyntaxError2 = import_postcss3.default.CssSyntaxError;
  var Declaration2 = import_postcss3.default.Declaration;
  var Container2 = import_postcss3.default.Container;
  var Processor2 = import_postcss3.default.Processor;
  var Document2 = import_postcss3.default.Document;
  var Comment2 = import_postcss3.default.Comment;
  var Warning2 = import_postcss3.default.Warning;
  var AtRule2 = import_postcss3.default.AtRule;
  var Result2 = import_postcss3.default.Result;
  var Input2 = import_postcss3.default.Input;
  var Rule2 = import_postcss3.default.Rule;
  var Root2 = import_postcss3.default.Root;
  var Node2 = import_postcss3.default.Node;

  // ../../contrib/hdbt/node_modules/hds-react/style-inject.es-acdf7ad9.js
  function e11(e18, t21) {
    void 0 === t21 && (t21 = {});
    var d16 = t21.insertAt;
    if (e18 && "undefined" != typeof document) {
      var n21 = document.head || document.getElementsByTagName("head")[0], s21 = document.createElement("style");
      s21.type = "text/css", "top" === d16 && n21.firstChild ? n21.insertBefore(s21, n21.firstChild) : n21.appendChild(s21), s21.styleSheet ? s21.styleSheet.cssText = e18 : s21.appendChild(document.createTextNode(e18));
    }
  }
  __name(e11, "e");

  // ../../contrib/hdbt/node_modules/hds-react/Icon.module-226ab730.js
  var a10;
  !function(e18) {
    e18.ExtraSmall = "extraSmall", e18.Small = "small", e18.Medium = "medium", e18.Large = "large", e18.ExtraLarge = "extraLarge";
  }(a10 || (a10 = {}));
  var i6 = { icon: "Icon-module_icon__1Jtzj icon_hds-icon__1YqNC", extraSmall: "Icon-module_extraSmall__3Q7tD icon_hds-icon--size-xs__3dAMZ", small: "Icon-module_small__gTGkU icon_hds-icon--size-s__2Lkik", medium: "Icon-module_medium__1D6Pb icon_hds-icon--size-m__1mcHv", large: "Icon-module_large__28YAW icon_hds-icon--size-l__3Zczy", extraLarge: "Icon-module_extraLarge__27rtn icon_hds-icon--size-xl__1Jes8" };
  e11('.icon_hds-icon__1YqNC{background-color:currentcolor;display:inline-block;height:var(--icon-size);-webkit-mask-image:var(--mask-image);mask-image:var(--mask-image);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:auto;mask-size:auto;width:var(--icon-size)}.icon_hds-icon--size-xs__3dAMZ{--icon-size:var(--spacing-layout-2-xs)}.icon_hds-icon--size-s__2Lkik{--icon-size:var(--spacing-layout-xs)}.icon_hds-icon--size-m__1mcHv{--icon-size:var(--spacing-layout-s)}.icon_hds-icon--size-l__3Zczy{--icon-size:var(--spacing-layout-m)}.icon_hds-icon--size-xl__1Jes8{--icon-size:var(--spacing-layout-l)}[class*=hds-icon-start--]:before{-webkit-mask-image:var(--mask-image-before);mask-image:var(--mask-image-before)}[class*=hds-icon-end--]:after,[class*=hds-icon-start--]:before{background-color:currentcolor;content:"";display:inline-flex;height:var(--icon-size,24px);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:contain;mask-size:contain;width:var(--icon-size,24px)}[class*=hds-icon-end--]:after{-webkit-mask-image:var(--mask-image-after);mask-image:var(--mask-image-after)}.Icon-module_icon__1Jtzj{background-color:transparent}');

  // ../../contrib/hdbt/node_modules/hds-react/IconInfoCircleFill-afc9e4df.js
  var import_react31 = __toESM(require_react());
  var i7 = /* @__PURE__ */ __name((i12) => {
    var { "aria-label": s21 = "alert-circle-fill", "aria-hidden": o18 = true, className: t21 = "", color: c6, size: n21 = a10.Small, style: d16 = {} } = i12, m6 = o10(i12, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react31.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": o18, className: [i6.icon, i6[n21], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: d16 }, m6), import_react31.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3ZM13 16V18H11V16H13ZM13 6V14H11V6H13Z", fill: "currentColor" }));
  }, "i");
  var s10 = /* @__PURE__ */ __name((i12) => {
    var { "aria-label": s21 = "info-circle-fill", "aria-hidden": o18 = true, className: t21 = "", color: c6, size: n21 = a10.Small, style: d16 = {} } = i12, m6 = o10(i12, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react31.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": o18, className: [i6.icon, i6[n21], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: d16 }, m6), import_react31.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3ZM13 10V16.5H15V18H9V16.5H11V11.5H9V10H13ZM11.8125 6C12.5374 6 13.125 6.5876 13.125 7.3125C13.125 8.03735 12.5374 8.625 11.8125 8.625C11.0876 8.625 10.5 8.03735 10.5 7.3125C10.5 6.5876 11.0876 6 11.8125 6Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconAngleDown-126d7850.js
  var import_react32 = __toESM(require_react());
  var o11 = /* @__PURE__ */ __name((o18) => {
    var { "aria-label": s21 = "angle-down", "aria-hidden": i12 = true, className: t21 = "", color: n21, size: c6 = a10.Small, style: m6 = {} } = o18, d16 = o10(o18, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react32.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": i12, className: [i6.icon, i6[c6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: n21, style: m6 }, d16), import_react32.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 13.5L17 8.5L18.5 10L12 16.5L5.5 10L7 8.5L12 13.5Z", fill: "currentColor" }));
  }, "o");

  // ../../contrib/hdbt/node_modules/hds-react/IconAngleLeft-21d02339.js
  var import_react33 = __toESM(require_react());
  var s11 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "angle-left", "aria-hidden": i12 = true, className: t21 = "", color: n21, size: c6 = a10.Small, style: m6 = {} } = s21, d16 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react33.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i6.icon, i6[c6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: n21, style: m6 }, d16), import_react33.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M10.5 12L15.5 17L14 18.5L7.5 12L14 5.5L15.5 7L10.5 12Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconAngleRight-c84ad949.js
  var import_react34 = __toESM(require_react());
  var s12 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": i12 = "angle-right", "aria-hidden": o18 = true, className: t21 = "", color: n21, size: c6 = a10.Small, style: m6 = {} } = s21, d16 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react34.default.createElement("svg", Object.assign({ "aria-label": i12, "aria-hidden": o18, className: [i6.icon, i6[c6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: n21, style: m6 }, d16), import_react34.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M13.5 12L8.5 7L10 5.5L16.5 12L10 18.5L8.5 17L13.5 12Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconCalendar-89915a16.js
  var import_react35 = __toESM(require_react());
  var s13 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "calendar", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: n21 = a10.Small, style: m6 = {} } = s21, d16 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react35.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i6.icon, i6[n21], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: m6 }, d16), import_react35.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M17 2C17.5523 2 18 2.44772 18 3V4H22V21H2V4H6V3C6 2.44772 6.44772 2 7 2C7.55228 2 8 2.44772 8 3V4H16V3C16 2.44772 16.4477 2 17 2ZM20 11H4V19H20V11ZM20 6H4V9H20V6Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconCheck-863f0c90.js
  var import_react36 = __toESM(require_react());
  var s14 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "check", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a10.Small, style: n21 = {} } = s21, d16 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react36.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i6.icon, i6[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react36.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M21 7L10 18L4.5 12.5L6 11L10 15L19.5 5.5L21 7Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconCheckCircleFill-0170685a.js
  var import_react37 = __toESM(require_react());
  var i8 = /* @__PURE__ */ __name((i12) => {
    var { "aria-label": s21 = "check-circle-fill", "aria-hidden": o18 = true, className: t21 = "", color: c6, size: m6 = a10.Small, style: n21 = {} } = i12, d16 = o10(i12, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react37.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": o18, className: [i6.icon, i6[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react37.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3ZM16.5 8L18 9.5L10.5 17L6 12.5L7.5 11L10.5 14L16.5 8Z", fill: "currentColor" }));
  }, "i");

  // ../../contrib/hdbt/node_modules/hds-react/IconCross-5876a590.js
  var import_react38 = __toESM(require_react());
  var s15 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "cross", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a10.Small, style: n21 = {} } = s21, d16 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react38.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i6.icon, i6[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react38.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M18 7.5L13.5 12L18 16.5L16.5 18L12 13.5L7.5 18L6 16.5L10.5 12L6 7.5L7.5 6L12 10.5L16.5 6L18 7.5Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconCrossCircle-31348c7c.js
  var import_react39 = __toESM(require_react());
  var s16 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": o18 = "cross-circle", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a10.Small, style: n21 = {} } = s21, d16 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react39.default.createElement("svg", Object.assign({ "aria-label": o18, "aria-hidden": i12, className: [i6.icon, i6[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react39.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM15 7.5L16.5 9L13.5 12L16.5 15L15 16.5L12 13.5L9 16.5L7.5 15L10.5 12L7.5 9L9 7.5L12 10.5L15 7.5Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/IconErrorFill-944ab9cb.js
  var import_react40 = __toESM(require_react());
  var o12 = /* @__PURE__ */ __name((o18) => {
    var { "aria-label": s21 = "error-fill", "aria-hidden": i12 = true, className: t21 = "", color: c6, size: m6 = a10.Small, style: n21 = {} } = o18, d16 = o10(o18, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react40.default.createElement("svg", Object.assign({ "aria-label": s21, "aria-hidden": i12, className: [i6.icon, i6[m6], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, d16), import_react40.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M11.175 3.45608C11.5239 2.86969 12.3977 2.84875 12.7842 3.39325L12.825 3.45608L21.8771 18.6666C22.2202 19.2432 21.8055 19.951 21.1235 19.9976L21.052 20H2.94799C2.24813 20 1.7987 19.3114 2.09013 18.7267L2.12295 18.6666L11.175 3.45608ZM13 16V18H11V16H13ZM13 8.5V14.5H11V8.5H13Z", fill: "currentColor" }));
  }, "o");

  // ../../contrib/hdbt/node_modules/hds-react/IconQuestionCircle-3221fe83.js
  var import_react41 = __toESM(require_react());
  var s17 = /* @__PURE__ */ __name((s21) => {
    var { "aria-label": i12 = "question-circle", "aria-hidden": o18 = true, className: t21 = "", color: c6, size: C2 = a10.Small, style: n21 = {} } = s21, m6 = o10(s21, ["aria-label", "aria-hidden", "className", "color", "size", "style"]);
    return import_react41.default.createElement("svg", Object.assign({ "aria-label": i12, "aria-hidden": o18, className: [i6.icon, i6[C2], t21].filter((e18) => e18).join(" "), role: "img", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", color: c6, style: n21 }, m6), import_react41.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2ZM12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4ZM13 16V18H11V16H13ZM12.0437 5.75C14.0343 5.75 15.7173 7.29464 15.7173 9.42361C15.7173 10.7806 15.2461 11.489 14.161 12.306L13.9187 12.4844C13.1753 13.0295 12.9556 13.3359 12.9386 14.142L12.9375 14.25H10.9375C10.9375 12.6746 11.4591 11.8378 12.6143 10.9622L12.8618 10.7796C13.5685 10.2628 13.7173 10.0539 13.7173 9.42361C13.7173 8.43934 12.9662 7.75 12.0437 7.75C11.1907 7.75 10.4785 8.34077 10.3816 9.20835L10.3734 9.30587L8.37663 9.19182C8.49191 7.17347 10.1344 5.75 12.0437 5.75Z", fill: "currentColor" }));
  }, "s");

  // ../../contrib/hdbt/node_modules/hds-react/base.module-f77a180c.js
  e11(':root{--breakpoint-xs:320px;--breakpoint-s:576px;--breakpoint-m:768px;--breakpoint-l:992px;--breakpoint-xl:1248px;--container-width-xs:288px;--container-width-s:544px;--container-width-m:720px;--container-width-l:944px;--container-width-xl:1200px;--color-brick:#bd2719;--color-brick-light:#ffeeed;--color-brick-medium-light:#facbc8;--color-brick-dark:#800e04;--color-bus:#0000bf;--color-bus-light:#f0f0ff;--color-bus-medium-light:#ccf;--color-bus-dark:#00005e;--color-coat-of-arms:#0072c6;--color-coat-of-arms-light:#e6f4ff;--color-coat-of-arms-medium-light:#b5daf7;--color-coat-of-arms-dark:#005799;--color-copper:#00d7a7;--color-copper-light:#cffaf1;--color-copper-medium-light:#9ef0de;--color-copper-dark:#00a17d;--color-engel:#ffe977;--color-engel-light:#fff9db;--color-engel-medium-light:#fff3b8;--color-engel-dark:#dbc030;--color-fog:#9fc9eb;--color-fog-light:#e8f3fc;--color-fog-medium-light:#d0e6f7;--color-fog-dark:#72a5cf;--color-gold:#c2a251;--color-gold-light:#f7f2e4;--color-gold-medium-light:#e8d7a7;--color-gold-dark:#9e823c;--color-metro:#fd4f00;--color-metro-light:#ffeee6;--color-metro-medium-light:#ffcab3;--color-metro-dark:#bd2f00;--color-silver:#dedfe1;--color-silver-light:#f7f7f8;--color-silver-medium-light:#efeff0;--color-silver-dark:#b0b8bf;--color-summer:#ffc61e;--color-summer-light:#fff4d4;--color-summer-medium-light:#ffe49c;--color-summer-dark:#cc9200;--color-suomenlinna:#f5a3c7;--color-suomenlinna-light:#fff0f7;--color-suomenlinna-medium-light:#ffdbeb;--color-suomenlinna-dark:#e673a5;--color-tram:#008741;--color-tram-light:#dff7eb;--color-tram-medium-light:#a3e3c2;--color-tram-dark:#006631;--color-focus-outline:#0072c6;--color-black:#000;--color-white:#fff;--color-black-5:#f2f2f2;--color-black-10:#e6e6e6;--color-black-20:#ccc;--color-black-30:#b3b3b3;--color-black-40:#999;--color-black-50:grey;--color-black-60:#595959;--color-black-70:#4d4d4d;--color-black-80:#333;--color-black-90:#1a1a1a;--color-error:#b01038;--color-error-light:#f6e2e6;--color-error-dark:#8d0d2d;--color-success:#007a64;--color-success-light:#e2f5f3;--color-success-dark:#006250;--color-alert:#ffda07;--color-alert-light:#fff4b4;--color-alert-dark:#d18200;--color-info:#0062b9;--color-info-light:#e5eff8;--color-info-dark:#004f94;--box-shadow-s:0px 2px 10px 0px rgba(0,0,0,0.07);--box-shadow-m:0px 2px 10px 0px rgba(0,0,0,0.1);--box-shadow-l:0px 2px 20px 0px rgba(0,0,0,0.2);--spacing-layout-2-xs:1rem;--spacing-layout-xs:1.5rem;--spacing-layout-s:2rem;--spacing-layout-m:3rem;--spacing-layout-l:4rem;--spacing-layout-xl:6rem;--spacing-layout-2-xl:8rem;--spacing-4-xs:0.125rem;--spacing-3-xs:0.25rem;--spacing-2-xs:0.5rem;--spacing-xs:0.75rem;--spacing-s:1rem;--spacing-m:1.5rem;--spacing-l:2rem;--spacing-xl:2.5rem;--spacing-2-xl:3.0rem;--spacing-3-xl:3.5rem;--spacing-4-xl:4rem;--spacing-5-xl:4.5rem;--fontsize-heading-xxl:4rem;--fontsize-heading-xl:3rem;--fontsize-heading-xl-mobile:2.5rem;--fontsize-heading-l:2rem;--fontsize-heading-m:1.5rem;--fontsize-heading-s:1.25rem;--fontsize-heading-xs:1.125rem;--fontsize-heading-xxs:1rem;--fontsize-body-s:0.875rem;--fontsize-body-m:1rem;--fontsize-body-l:1.125rem;--fontsize-body-xl:1.25rem;--font-default:HelsinkiGrotesk,Arial,sans-serif;--lineheight-s:1;--lineheight-m:1.2;--lineheight-l:1.5;--lineheight-xl:1.75}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.visually-hidden{border:0;clip:"rect(0 0 0 0)";height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.button-reset{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.text-body{color:var(--color-black-90);font-size:var(--fontsize-body-m);line-height:var(--lineheight-l)}.text-body,.text-medium{font-family:var(--font-default)}.text-medium{font-weight:500}.text-bold{font-family:var(--font-default);font-weight:700}.text-xl{font-size:var(--fontsize-heading-m)}.text-lg{font-size:var(--fontsize-heading-s)}.text-md{font-size:var(--fontsize-heading-xs)}.subtitle{font-size:var(--fontsize-body-m)}.text-sm{font-size:var(--fontsize-body-s);line-height:var(--lineheight-xl)}.heading-xxl{font-size:var(--fontsize-heading-xxl);letter-spacing:-1.2px}.heading-xl,.heading-xxl{font-weight:400;line-height:var(--lineheight-s)}.heading-xl{font-size:var(--fontsize-heading-xl);letter-spacing:-1px}.heading-xl-mobile{font-size:var(--fontsize-heading-xl-mobile);font-weight:400;letter-spacing:-.8px;line-height:var(--lineheight-s)}.heading-l{font-size:var(--fontsize-heading-l);font-weight:400;letter-spacing:-.4px}.heading-l,.heading-m{line-height:var(--lineheight-m)}.heading-m{font-size:var(--fontsize-heading-m);font-weight:500;letter-spacing:-.2px}.heading-s{font-size:var(--fontsize-heading-s);font-weight:500}.heading-s,.heading-xs{letter-spacing:0;line-height:var(--lineheight-l)}.heading-xs{font-size:var(--fontsize-heading-xs);font-weight:700}.heading-xxs{font-size:var(--fontsize-heading-xxs);font-weight:700;letter-spacing:.2px;line-height:var(--lineheight-l)}.helper-text{color:var(--color-black-60);display:block;flex-basis:100%;font-size:var(--fontsize-body-m);margin-top:var(--spacing-2-xs)}html{-webkit-text-size-adjust:100%}');

  // ../../contrib/hdbt/node_modules/hds-react/classNames-cb7c78b5.js
  var t12 = {}.hasOwnProperty;
  function n12(r30) {
    const o18 = typeof r30;
    return r30 ? "string" === o18 || "number" === o18 ? r30 : Array.isArray(r30) ? r30.length ? r30.map((t21) => n12(t21)).filter(Boolean).join(" ") : null : "object" === o18 ? ((n21, r31 = null) => {
      if (n21.toString !== Object.prototype.toString && !n21.toString.toString().includes("[native code]")) return n21.toString();
      const o19 = Object.assign({}, n21);
      return r31 && Object.keys(r31).filter((t21) => !!n21[t21]).forEach((t21) => {
        o19[r31[t21]] = true;
      }), Object.keys(o19).filter((n22) => t12.call(o19, n22) && !!o19[n22]).join(" ");
    })(r30, this) : null : null;
  }
  __name(n12, "n");
  var r17 = /* @__PURE__ */ __name((...t21) => t21.map(n12).filter(Boolean).join(" "), "r");

  // ../../contrib/hdbt/node_modules/hds-react/useTheme-c6399169.js
  var import_react42 = __toESM(require_react());
  var import_lodash7 = __toESM(require_lodash2());

  // ../../contrib/hdbt/node_modules/hds-react/isSsrEnvironment-26654d35.js
  var e12 = /* @__PURE__ */ __name(() => "undefined" == typeof window || "undefined" == typeof document, "e");

  // ../../contrib/hdbt/node_modules/hds-react/useTheme-c6399169.js
  var r18 = "undefined" != typeof window && window.document ? import_react42.useLayoutEffect : import_react42.useEffect;
  var d9 = /* @__PURE__ */ __name((e18, t21, d16) => {
    const c6 = t21 && "string" != typeof t21, i12 = (0, import_react42.useRef)(c6 ? (0, import_lodash7.uniqueId)("custom-theme-") : "").current;
    return r18(() => {
      c6 && ((e19, t22, n21) => {
        if (e12()) return;
        const o18 = /* @__PURE__ */ __name((t23) => {
          var o19;
          return null === (o19 = t23.selectorText) || void 0 === o19 ? void 0 : o19.includes(`${e19}.${n21}`);
        }, "o");
        try {
          let s21 = [...document.styleSheets].findIndex((t23) => {
            try {
              return [...t23.cssRules].findIndex((t24) => {
                var n22;
                return null === (n22 = t24.selectorText) || void 0 === n22 ? void 0 : n22.includes(e19);
              }) >= 0;
            } catch (e20) {
              return false;
            }
          });
          if (-1 === s21) {
            const e20 = document.createElement("style");
            document.head.appendChild(e20), s21 = document.styleSheets.length - 1;
          }
          const r30 = document.styleSheets[s21], d17 = r30.cssRules;
          let c7 = [...d17].findIndex(o18);
          -1 === c7 && (r30.insertRule(`.${e19}.${n21} { content: '' }`, d17.length), c7 = [...d17].findIndex(o18));
          const i13 = d17[c7];
          Object.entries(t22).forEach(([e20, t23]) => i13.style.setProperty(e20, t23));
        } catch (t23) {
          console.warn(`Could not find the stylesheet to update with the "${e19}" selector!`);
        }
      })(e18 && e18.split(" ")[0], t21, `${i12}${d16 || ""}`);
    }, [e18, t21, i12, c6, d16]), i12;
  }, "d");

  // ../../contrib/hdbt/node_modules/hds-react/Button-2f796980.js
  var import_react43 = __toESM(require_react());
  var l12;
  var t14;
  var n14;
  var d10 = { button: "Button-module_button__1msFE", primary: "Button-module_primary__2LfKB", secondary: "Button-module_secondary__1nABp", supplementary: "Button-module_supplementary__3YKiS", "theme-coat": "Button-module_theme-coat__2_3U7", "theme-black": "Button-module_theme-black__m8giY", clear: "Button-module_clear__2i_5U", success: "Button-module_success__CU9nK", danger: "Button-module_danger__2el15", "size-small": "Button-module_size-small__3lizH", fullWidth: "Button-module_fullWidth__31eVK", icon: "Button-module_icon__O-h7R" };
  e11(".Button-module_button__1msFE{--border-width:2px;--outline-width-focus:3px;--padding-horizontal:var(--spacing-l);--min-size:56px;--padding-vertical:var(--spacing-s);--padding:calc(var(--padding-vertical) - var(--border-width)) calc(var(--padding-horizontal) - var(--border-width));--icon-reposition:calc(-1 * var(--spacing-2-xs));--computed-background-color:var(--background-color,transparent);--computed-background-color-focus:var(--background-color-focus,var(--computed-background-color,transparent));--computed-background-color-hover:var(--background-color-hover,var(--computed-background-color-focus,transparent));--computed-background-color-active:var(--background-color-active,var(--computed-background-color-hover,transparent));--computed-background-color-disabled:var(--background-color-disabled,var(--color-black-20,transparent));--computed-color:var(--color,inherit);--computed-color-focus:var(--color-focus,var(--computed-color,inherit));--computed-color-hover:var(--color-hover,var(--computed-color-focus,inherit));--computed-color-active:var(--color-active,var(--computed-color-hover,inherit));--computed-color-disabled:var(--color-disabled,var(--color-white,inherit));--computed-border-color:var(--border-color,var(--computed-background-color));--computed-border-color-focus:var(--border-color-focus,var(--computed-border-color,transparent));--computed-border-color-hover:var(--border-color-hover,var(--computed-border-color-focus,transparent));--computed-border-color-active:var(--border-color-active,var(--computed-border-color-hover,transparent));--computed-border-color-disabled:var(--border-color-disabled,var(--computed-background-color-disabled,transparent));--computed-outline-color-focus:var(--outline-color-focus,transparent);--computed-icon-size:var(--icon-size,var(--spacing-m));align-content:flex-start;align-items:center;background-color:var(--computed-background-color);border:var(--border-width) solid var(--computed-border-color);border-radius:0;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;color:var(--computed-color,inherit);column-gap:var(--spacing-2-xs);cursor:var(--cursor,pointer);display:inline-flex;font-family:inherit;font-size:100%;font-weight:500;hyphens:auto;justify-content:center;line-height:var(--lineheight-l);margin:0;min-height:var(--min-size);min-width:var(--min-size);outline:none;outline-offset:2px;overflow:hidden;overflow-wrap:anywhere;padding:var(--padding);position:relative;text-align:center;text-decoration:none;text-transform:none;vertical-align:top}.Button-module_button__1msFE:after{margin-right:var(--icon-reposition)}.Button-module_button__1msFE:before{margin-left:var(--icon-reposition)}.Button-module_button__1msFE,.Button-module_button__1msFE[type=button],.Button-module_button__1msFE[type=reset],.Button-module_button__1msFE[type=submit]{-webkit-appearance:button}.Button-module_button__1msFE:focus-visible{background-color:var(--computed-background-color-focus);border-color:var(--computed-border-color-focus);color:var(--computed-color-focus);outline:var(--outline-width-focus) solid var(--computed-outline-color-focus)}.Button-module_button__1msFE:hover{background-color:var(--computed-background-color-hover);border-color:var(--computed-border-color-hover);color:var(--computed-color-hover)}.Button-module_button__1msFE:active{background-color:var(--computed-background-color-active);border-color:var(--computed-border-color-active);color:var(--computed-color-active);outline:var(--outline-width-focus) solid var(--computed-outline-color-focus)}.Button-module_button__1msFE:disabled{--cursor:not-allowed;background-color:var(--computed-background-color-disabled);border-color:var(--computed-border-color-disabled);color:var(--computed-color-disabled);outline:none}.Button-module_button__1msFE button.Button-module_button__1msFE{-webkit-appearance:button}.Button-module_primary__2LfKB{--background-color:var(--color-bus);--background-color-hover:var(--color-bus-dark);--background-color-focus:var(--color-bus);--background-color-disabled:var(--color-black-20);--border-color:transparent;--color:var(--color-white);--color-disabled:var(--color-white);--outline-color-focus:var(--color-coat-of-arms)}.Button-module_secondary__1nABp{--border-color:var(--color-bus);--border-color-disabled:var(--color-disabled)}.Button-module_secondary__1nABp,.Button-module_supplementary__3YKiS{--background-color:transparent;--background-color-hover:var(--color-bus-light);--background-color-focus:transparent;--background-color-disabled:transparent;--color:var(--color-bus);--color-disabled:var(--color-black-40);--outline-color-focus:var(--color-coat-of-arms)}.Button-module_supplementary__3YKiS{--border-color:transparent;--border-color-disabled:transparent}.Button-module_theme-coat__2_3U7.Button-module_primary__2LfKB{--background-color:var(--color-bus);--background-color-hover:var(--color-bus-dark);--background-color-focus:var(--color-bus);--background-color-disabled:var(--color-black-20);--border-color:transparent;--color-disabled:var(--color-white);--outline-color-focus:var(--color-coat-of-arms);--background-color:var(--color-coat-of-arms);--background-color-hover:var(--color-coat-of-arms-dark);--background-color-focus:var(--color-coat-of-arms);--border-color:var(--color-coat-of-arms);--border-color-hover:var(--color-coat-of-arms-dark);--border-color-focus:var(--color-coat-of-arms);--color:var(--color-white)}.Button-module_theme-coat__2_3U7.Button-module_secondary__1nABp{--border-color:var(--color-bus);--border-color-disabled:var(--color-disabled);--border-color:var(--color-coat-of-arms)}.Button-module_theme-coat__2_3U7.Button-module_secondary__1nABp,.Button-module_theme-coat__2_3U7.Button-module_supplementary__3YKiS{--background-color-hover:var(--color-bus-light);--background-color-disabled:transparent;--color:var(--color-bus);--color-disabled:var(--color-black-40);--outline-color-focus:var(--color-coat-of-arms);--background-color:transparent;--background-color-hover:var(--color-coat-of-arms-light);--background-color-focus:transparent;--color:var(--color-coat-of-arms)}.Button-module_theme-coat__2_3U7.Button-module_supplementary__3YKiS{--border-color-disabled:transparent;--border-color:transparent}.Button-module_theme-black__m8giY.Button-module_primary__2LfKB{--background-color:var(--color-bus);--background-color-hover:var(--color-bus-dark);--background-color-focus:var(--color-bus);--background-color-disabled:var(--color-black-20);--border-color:transparent;--color-disabled:var(--color-white);--outline-color-focus:var(--color-coat-of-arms);--background-color:var(--color-black);--background-color-hover:var(--color-black);--background-color-focus:var(--color-black);--border-color:var(--color-black);--border-color-hover:var(--color-black);--border-color-focus:var(--color-black);--color:var(--color-white);--color-hover:var(--color-white);--color-focus:var(--color-white)}.Button-module_theme-black__m8giY.Button-module_secondary__1nABp{--border-color:var(--color-bus);--border-color-disabled:var(--color-disabled);--border-color:var(--color-black);--border-color-hover:var(--color-black);--border-color-focus:var(--color-black)}.Button-module_theme-black__m8giY.Button-module_secondary__1nABp,.Button-module_theme-black__m8giY.Button-module_supplementary__3YKiS{--background-color-hover:var(--color-bus-light);--background-color-disabled:transparent;--color:var(--color-bus);--color-disabled:var(--color-black-40);--outline-color-focus:var(--color-coat-of-arms);--background-color:transparent;--background-color-hover:var(--color-black-5);--background-color-focus:transparent;--color:var(--color-black);--color-hover:var(--color-black);--color-focus:var(--color-black)}.Button-module_theme-black__m8giY.Button-module_supplementary__3YKiS{--border-color-disabled:transparent;--border-color:transparent;--border-color-hover:transparent}.Button-module_clear__2i_5U{--background-color:transparent;--background-color-disabled:transparent;--border-color:transparent;--border-color-disabled:transparent;--color:var(--color-black-90);--color-disabled:var(--color-black-90)}.Button-module_success__CU9nK{--background-color:var(--color-success);--background-color-hover:var(--color-success-dark);--background-color-focus:var(--color-success);--border-color:var(--color-success);--border-color-hover:var(--color-success-dark);--border-color-focus:var(--color-success)}.Button-module_danger__2el15,.Button-module_success__CU9nK{--color:var(--color-white);--outline-color-focus:var(--color-coat-of-arms)}.Button-module_danger__2el15{--background-color:var(--color-error);--background-color-hover:var(--color-error-dark);--background-color-focus:var(--color-error);--border-color:var(--color-error);--border-color-hover:var(--color-error-dark);--border-color-focus:var(--color-error)}.Button-module_size-small__3lizH{--min-size:44px;--padding-horizontal:var(--spacing-m);--padding-vertical:var(--spacing-2-xs)}.Button-module_fullWidth__31eVK{width:100%}.Button-module_icon__O-h7R{flex-shrink:0;height:var(--computed-icon-size);width:var(--computed-icon-size)}.Button-module_icon__O-h7R:first-child:not(:last-child){margin-left:var(--icon-reposition)}.Button-module_icon__O-h7R:last-child:not(:first-child){margin-right:var(--icon-reposition)}"), function(o18) {
    o18.Small = "small", o18.Medium = "medium";
  }(l12 || (l12 = {})), function(o18) {
    o18.Bus = "bus", o18.Coat = "coat", o18.Black = "black";
  }(t14 || (t14 = {})), function(o18) {
    o18.Primary = "primary", o18.Secondary = "secondary", o18.Supplementary = "supplementary", o18.Success = "success", o18.Danger = "danger", o18.Clear = "clear";
  }(n14 || (n14 = {}));
  var u6 = import_react43.default.forwardRef((c6, u10) => {
    var { children: s21, className: i12, disabled: b6 = false, fullWidth: m6, size: v4 = l12.Medium, theme: _7 = t14.Bus, variant: p5 = n14.Primary, iconStart: g4, iconEnd: h5, onClick: k } = c6, f2 = o10(c6, ["children", "className", "disabled", "fullWidth", "size", "theme", "variant", "iconStart", "iconEnd", "onClick"]);
    const B2 = d9(d10.button, _7), y2 = g4 ? import_react43.default.createElement("div", { className: d10.icon, "aria-hidden": "true" }, g4) : null, w = h5 ? import_react43.default.createElement("div", { className: r17(d10.icon), "aria-hidden": "true" }, h5) : null;
    return import_react43.default.createElement("button", Object.assign({ ref: u10, disabled: b6, type: "button", className: r17(d10.button, d10[p5], "string" == typeof _7 ? d10[`theme-${_7}`] : "", d10[`size-${v4}`], m6 ? d10.fullWidth : "", B2, i12), onClick: b6 ? void 0 : k }, f2), y2, import_react43.default.createElement("span", null, s21), w);
  });

  // ../../contrib/hdbt/node_modules/hds-react/Checkbox-bf00bf69.js
  var import_react45 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/hds-react/mergeRefWithInternalRef-4c61fd7f.js
  var import_lodash8 = __toESM(require_lodash2());
  var t15 = /* @__PURE__ */ __name((t21, e18) => {
    (0, import_lodash8.isFunction)(t21) ? t21(e18.current) : t21.current = e18.current;
  }, "t");

  // ../../contrib/hdbt/node_modules/hds-react/composeAriaDescribedBy-8c23da0a.js
  var r21 = /* @__PURE__ */ __name((r30, e18, n21, l19, o18) => {
    const s21 = [e18 && `${r30}-helper`, n21 && `${r30}-error`, l19 && `${r30}-success`, o18 && `${r30}-info`].filter((r31) => r31);
    return s21.length ? s21.join(" ") : null;
  }, "r");

  // ../../contrib/hdbt/node_modules/hds-react/Tooltip-d8893826.js
  var import_react44 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/react-popper/lib/esm/utils.js
  var React9 = __toESM(require_react());
  var fromEntries3 = /* @__PURE__ */ __name(function fromEntries4(entries) {
    return entries.reduce(function(acc, _ref) {
      var key = _ref[0], value = _ref[1];
      acc[key] = value;
      return acc;
    }, {});
  }, "fromEntries");
  var useIsomorphicLayoutEffect3 = typeof window !== "undefined" && window.document && window.document.createElement ? React9.useLayoutEffect : React9.useEffect;

  // ../../contrib/hdbt/node_modules/react-popper/lib/esm/usePopper.js
  var React10 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/enums.js
  var top2 = "top";
  var bottom2 = "bottom";
  var right2 = "right";
  var left2 = "left";
  var auto2 = "auto";
  var basePlacements2 = [top2, bottom2, right2, left2];
  var start3 = "start";
  var end2 = "end";
  var clippingParents2 = "clippingParents";
  var viewport2 = "viewport";
  var popper2 = "popper";
  var reference2 = "reference";
  var variationPlacements2 = /* @__PURE__ */ basePlacements2.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start3, placement + "-" + end2]);
  }, []);
  var placements2 = /* @__PURE__ */ [].concat(basePlacements2, [auto2]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start3, placement + "-" + end2]);
  }, []);
  var beforeRead2 = "beforeRead";
  var read2 = "read";
  var afterRead2 = "afterRead";
  var beforeMain2 = "beforeMain";
  var main2 = "main";
  var afterMain2 = "afterMain";
  var beforeWrite2 = "beforeWrite";
  var write2 = "write";
  var afterWrite2 = "afterWrite";
  var modifierPhases2 = [beforeRead2, read2, afterRead2, beforeMain2, main2, afterMain2, beforeWrite2, write2, afterWrite2];

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName2(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }
  __name(getNodeName2, "getNodeName");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow2(node) {
    if (node == null) {
      return window;
    }
    if (node.toString() !== "[object Window]") {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
  }
  __name(getWindow2, "getWindow");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement3(node) {
    var OwnElement = getWindow2(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }
  __name(isElement3, "isElement");
  function isHTMLElement2(node) {
    var OwnElement = getWindow2(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }
  __name(isHTMLElement2, "isHTMLElement");
  function isShadowRoot2(node) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow2(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }
  __name(isShadowRoot2, "isShadowRoot");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles2(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement2(element) || !getNodeName2(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  __name(applyStyles2, "applyStyles");
  function effect4(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement2(element) || !getNodeName2(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  __name(effect4, "effect");
  var applyStyles_default2 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles2,
    effect: effect4,
    requires: ["computeStyles"]
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement2(placement) {
    return placement.split("-")[0];
  }
  __name(getBasePlacement2, "getBasePlacement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/math.js
  var max2 = Math.max;
  var min2 = Math.min;
  var round2 = Math.round;

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect2(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (isHTMLElement2(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth;
      if (offsetWidth > 0) {
        scaleX = round2(rect.width) / offsetWidth || 1;
      }
      if (offsetHeight > 0) {
        scaleY = round2(rect.height) / offsetHeight || 1;
      }
    }
    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }
  __name(getBoundingClientRect2, "getBoundingClientRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect2(element) {
    var clientRect = getBoundingClientRect2(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }
  __name(getLayoutRect2, "getLayoutRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains2(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot2(rootNode)) {
      var next = child;
      do {
        if (next && parent.isSameNode(next)) {
          return true;
        }
        next = next.parentNode || next.host;
      } while (next);
    }
    return false;
  }
  __name(contains2, "contains");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle2(element) {
    return getWindow2(element).getComputedStyle(element);
  }
  __name(getComputedStyle2, "getComputedStyle");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement2(element) {
    return ["table", "td", "th"].indexOf(getNodeName2(element)) >= 0;
  }
  __name(isTableElement2, "isTableElement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement2(element) {
    return ((isElement3(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }
  __name(getDocumentElement2, "getDocumentElement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode2(element) {
    if (getNodeName2(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot2(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement2(element)
    );
  }
  __name(getParentNode2, "getParentNode");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent2(element) {
    if (!isHTMLElement2(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle2(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  __name(getTrueOffsetParent2, "getTrueOffsetParent");
  function getContainingBlock2(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
    var isIE = navigator.userAgent.indexOf("Trident") !== -1;
    if (isIE && isHTMLElement2(element)) {
      var elementCss = getComputedStyle2(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode2(element);
    if (isShadowRoot2(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement2(currentNode) && ["html", "body"].indexOf(getNodeName2(currentNode)) < 0) {
      var css = getComputedStyle2(currentNode);
      if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  __name(getContainingBlock2, "getContainingBlock");
  function getOffsetParent2(element) {
    var window2 = getWindow2(element);
    var offsetParent = getTrueOffsetParent2(element);
    while (offsetParent && isTableElement2(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent2(offsetParent);
    }
    if (offsetParent && (getNodeName2(offsetParent) === "html" || getNodeName2(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock2(element) || window2;
  }
  __name(getOffsetParent2, "getOffsetParent");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement2(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }
  __name(getMainAxisFromPlacement2, "getMainAxisFromPlacement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/within.js
  function within2(min3, value, max3) {
    return max2(min3, min2(value, max3));
  }
  __name(within2, "within");
  function withinMaxClamp2(min3, value, max3) {
    var v4 = within2(min3, value, max3);
    return v4 > max3 ? max3 : v4;
  }
  __name(withinMaxClamp2, "withinMaxClamp");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject2() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }
  __name(getFreshSideObject2, "getFreshSideObject");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject2(paddingObject) {
    return Object.assign({}, getFreshSideObject2(), paddingObject);
  }
  __name(mergePaddingObject2, "mergePaddingObject");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap2(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }
  __name(expandToHashMap2, "expandToHashMap");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject3 = /* @__PURE__ */ __name(function toPaddingObject4(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject2(typeof padding !== "number" ? padding : expandToHashMap2(padding, basePlacements2));
  }, "toPaddingObject");
  function arrow2(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets3 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement2(state.placement);
    var axis = getMainAxisFromPlacement2(basePlacement);
    var isVertical = [left2, right2].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets3) {
      return;
    }
    var paddingObject = toPaddingObject3(options.padding, state);
    var arrowRect = getLayoutRect2(arrowElement);
    var minProp = axis === "y" ? top2 : left2;
    var maxProp = axis === "y" ? bottom2 : right2;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets3[axis] - state.rects.popper[len];
    var startDiff = popperOffsets3[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent2(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min3 = paddingObject[minProp];
    var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset5 = within2(min3, center, max3);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset5, _state$modifiersData$.centerOffset = offset5 - center, _state$modifiersData$);
  }
  __name(arrow2, "arrow");
  function effect5(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (true) {
      if (!isHTMLElement2(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
      }
    }
    if (!contains2(state.elements.popper, arrowElement)) {
      if (true) {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
      }
      return;
    }
    state.elements.arrow = arrowElement;
  }
  __name(effect5, "effect");
  var arrow_default2 = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow2,
    effect: effect5,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation2(placement) {
    return placement.split("-")[1];
  }
  __name(getVariation2, "getVariation");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides2 = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR2(_ref) {
    var x = _ref.x, y2 = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round2(x * dpr) / dpr || 0,
      y: round2(y2 * dpr) / dpr || 0
    };
  }
  __name(roundOffsetsByDPR2, "roundOffsetsByDPR");
  function mapToStyles2(_ref2) {
    var _Object$assign2;
    var popper3 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y: y2
    }) : {
      x,
      y: y2
    };
    x = _ref3.x;
    y2 = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left2;
    var sideY = top2;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent2(popper3);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow2(popper3)) {
        offsetParent = getDocumentElement2(popper3);
        if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top2 || (placement === left2 || placement === right2) && variation === end2) {
        sideY = bottom2;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y2 -= offsetY - popperRect.height;
        y2 *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left2 || (placement === top2 || placement === bottom2) && variation === end2) {
        sideX = right2;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position
    }, adaptive && unsetSides2);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR2({
      x,
      y: y2
    }) : {
      x,
      y: y2
    };
    x = _ref4.x;
    y2 = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y2 + "px)" : "translate3d(" + x + "px, " + y2 + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  __name(mapToStyles2, "mapToStyles");
  function computeStyles2(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (true) {
      var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
      if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
      }
    }
    var commonStyles = {
      placement: getBasePlacement2(state.placement),
      variation: getVariation2(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles2(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles2(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  __name(computeStyles2, "computeStyles");
  var computeStyles_default2 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles2,
    data: {}
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive2 = {
    passive: true
  };
  function effect6(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow2(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive2);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive2);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive2);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive2);
      }
    };
  }
  __name(effect6, "effect");
  var eventListeners_default2 = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: /* @__PURE__ */ __name(function fn2() {
    }, "fn"),
    effect: effect6,
    data: {}
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash3 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement2(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash3[matched];
    });
  }
  __name(getOppositePlacement2, "getOppositePlacement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash4 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement2(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash4[matched];
    });
  }
  __name(getOppositeVariationPlacement2, "getOppositeVariationPlacement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll2(node) {
    var win = getWindow2(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }
  __name(getWindowScroll2, "getWindowScroll");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX2(element) {
    return getBoundingClientRect2(getDocumentElement2(element)).left + getWindowScroll2(element).scrollLeft;
  }
  __name(getWindowScrollBarX2, "getWindowScrollBarX");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect2(element) {
    var win = getWindow2(element);
    var html = getDocumentElement2(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX2(element),
      y: y2
    };
  }
  __name(getViewportRect2, "getViewportRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect2(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement2(element);
    var winScroll = getWindowScroll2(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX2(element);
    var y2 = -winScroll.scrollTop;
    if (getComputedStyle2(body || html).direction === "rtl") {
      x += max2(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y: y2
    };
  }
  __name(getDocumentRect2, "getDocumentRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent2(element) {
    var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }
  __name(isScrollParent2, "isScrollParent");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent2(node) {
    if (["html", "body", "#document"].indexOf(getNodeName2(node)) >= 0) {
      return node.ownerDocument.body;
    }
    if (isHTMLElement2(node) && isScrollParent2(node)) {
      return node;
    }
    return getScrollParent2(getParentNode2(node));
  }
  __name(getScrollParent2, "getScrollParent");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents2(element, list3) {
    var _element$ownerDocumen;
    if (list3 === void 0) {
      list3 = [];
    }
    var scrollParent = getScrollParent2(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow2(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent2(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list3.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents2(getParentNode2(target)))
    );
  }
  __name(listScrollParents2, "listScrollParents");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect2(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }
  __name(rectToClientRect2, "rectToClientRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect2(element) {
    var rect = getBoundingClientRect2(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  __name(getInnerBoundingClientRect2, "getInnerBoundingClientRect");
  function getClientRectFromMixedType2(element, clippingParent) {
    return clippingParent === viewport2 ? rectToClientRect2(getViewportRect2(element)) : isElement3(clippingParent) ? getInnerBoundingClientRect2(clippingParent) : rectToClientRect2(getDocumentRect2(getDocumentElement2(element)));
  }
  __name(getClientRectFromMixedType2, "getClientRectFromMixedType");
  function getClippingParents2(element) {
    var clippingParents3 = listScrollParents2(getParentNode2(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement2(element) ? getOffsetParent2(element) : element;
    if (!isElement3(clipperElement)) {
      return [];
    }
    return clippingParents3.filter(function(clippingParent) {
      return isElement3(clippingParent) && contains2(clippingParent, clipperElement) && getNodeName2(clippingParent) !== "body";
    });
  }
  __name(getClippingParents2, "getClippingParents");
  function getClippingRect2(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents2(element) : [].concat(boundary);
    var clippingParents3 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents3[0];
    var clippingRect = clippingParents3.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType2(element, clippingParent);
      accRect.top = max2(rect.top, accRect.top);
      accRect.right = min2(rect.right, accRect.right);
      accRect.bottom = min2(rect.bottom, accRect.bottom);
      accRect.left = max2(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType2(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }
  __name(getClippingRect2, "getClippingRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets2(_ref) {
    var reference3 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement2(placement) : null;
    var variation = placement ? getVariation2(placement) : null;
    var commonX = reference3.x + reference3.width / 2 - element.width / 2;
    var commonY = reference3.y + reference3.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top2:
        offsets = {
          x: commonX,
          y: reference3.y - element.height
        };
        break;
      case bottom2:
        offsets = {
          x: commonX,
          y: reference3.y + reference3.height
        };
        break;
      case right2:
        offsets = {
          x: reference3.x + reference3.width,
          y: commonY
        };
        break;
      case left2:
        offsets = {
          x: reference3.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference3.x,
          y: reference3.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement2(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start3:
          offsets[mainAxis] = offsets[mainAxis] - (reference3[len] / 2 - element[len] / 2);
          break;
        case end2:
          offsets[mainAxis] = offsets[mainAxis] + (reference3[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }
  __name(computeOffsets2, "computeOffsets");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow2(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents2 : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport2 : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper2 : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject2(typeof padding !== "number" ? padding : expandToHashMap2(padding, basePlacements2));
    var altContext = elementContext === popper2 ? reference2 : popper2;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect2(isElement3(element) ? element : element.contextElement || getDocumentElement2(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect2(state.elements.reference);
    var popperOffsets3 = computeOffsets2({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect2(Object.assign({}, popperRect, popperOffsets3));
    var elementClientRect = elementContext === popper2 ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper2 && offsetData) {
      var offset5 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right2, bottom2].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top2, bottom2].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset5[axis] * multiply;
      });
    }
    return overflowOffsets;
  }
  __name(detectOverflow2, "detectOverflow");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement2(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements2 : _options$allowedAutoP;
    var variation = getVariation2(placement);
    var placements3 = variation ? flipVariations ? variationPlacements2 : variationPlacements2.filter(function(placement2) {
      return getVariation2(placement2) === variation;
    }) : basePlacements2;
    var allowedPlacements = placements3.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements3;
      if (true) {
        console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
      }
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow2(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement2(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a21, b6) {
      return overflows[a21] - overflows[b6];
    });
  }
  __name(computeAutoPlacement2, "computeAutoPlacement");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements2(placement) {
    if (getBasePlacement2(placement) === auto2) {
      return [];
    }
    var oppositePlacement = getOppositePlacement2(placement);
    return [getOppositeVariationPlacement2(placement), oppositePlacement, getOppositeVariationPlacement2(oppositePlacement)];
  }
  __name(getExpandedFallbackPlacements2, "getExpandedFallbackPlacements");
  function flip2(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement2(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement2(preferredPlacement)] : getExpandedFallbackPlacements2(preferredPlacement));
    var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement2(placement2) === auto2 ? computeAutoPlacement2(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements3[0];
    for (var i12 = 0; i12 < placements3.length; i12++) {
      var placement = placements3[i12];
      var _basePlacement = getBasePlacement2(placement);
      var isStartVariation = getVariation2(placement) === start3;
      var isVertical = [top2, bottom2].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow2(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right2 : left2 : isStartVariation ? bottom2 : top2;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement2(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement2(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = /* @__PURE__ */ __name(function _loop2(_i2) {
        var fittingPlacement = placements3.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      }, "_loop");
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  __name(flip2, "flip");
  var flip_default2 = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip2,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets2(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  __name(getSideOffsets2, "getSideOffsets");
  function isAnySideFullyClipped2(overflow) {
    return [top2, right2, bottom2, left2].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  __name(isAnySideFullyClipped2, "isAnySideFullyClipped");
  function hide2(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow2(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow2(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets2(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets2(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped2(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped2(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  __name(hide2, "hide");
  var hide_default2 = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide2
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY2(placement, rects, offset5) {
    var basePlacement = getBasePlacement2(placement);
    var invertDistance = [left2, top2].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset5 === "function" ? offset5(Object.assign({}, rects, {
      placement
    })) : offset5, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left2, right2].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  __name(distanceAndSkiddingToXY2, "distanceAndSkiddingToXY");
  function offset3(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset5 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements2.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY2(placement, state.rects, offset5);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y2 = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y2;
    }
    state.modifiersData[name] = data;
  }
  __name(offset3, "offset");
  var offset_default2 = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset3
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets2(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets2({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  __name(popperOffsets2, "popperOffsets");
  var popperOffsets_default2 = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets2,
    data: {}
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis2(axis) {
    return axis === "x" ? "y" : "x";
  }
  __name(getAltAxis2, "getAltAxis");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow2(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow2(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement2(state.placement);
    var variation = getVariation2(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement2(basePlacement);
    var altAxis = getAltAxis2(mainAxis);
    var popperOffsets3 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets3) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top2 : left2;
      var altSide = mainAxis === "y" ? bottom2 : right2;
      var len = mainAxis === "y" ? "height" : "width";
      var offset5 = popperOffsets3[mainAxis];
      var min3 = offset5 + overflow[mainSide];
      var max3 = offset5 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start3 ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start3 ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect2(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject2();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within2(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent2(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset5 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset5 + maxOffset - offsetModifierValue;
      var preventedOffset = within2(tether ? min2(min3, tetherMin) : min3, offset5, tether ? max2(max3, tetherMax) : max3);
      popperOffsets3[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset5;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top2 : left2;
      var _altSide = mainAxis === "x" ? bottom2 : right2;
      var _offset = popperOffsets3[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top2, left2].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp2(_tetherMin, _offset, _tetherMax) : within2(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets3[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  __name(preventOverflow2, "preventOverflow");
  var preventOverflow_default2 = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow2,
    requiresIfExists: ["offset"]
  };

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll2(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  __name(getHTMLElementScroll2, "getHTMLElementScroll");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll2(node) {
    if (node === getWindow2(node) || !isHTMLElement2(node)) {
      return getWindowScroll2(node);
    } else {
      return getHTMLElementScroll2(node);
    }
  }
  __name(getNodeScroll2, "getNodeScroll");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled2(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round2(rect.width) / element.offsetWidth || 1;
    var scaleY = round2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  __name(isElementScaled2, "isElementScaled");
  function getCompositeRect2(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement2(offsetParent);
    var offsetParentIsScaled = isHTMLElement2(offsetParent) && isElementScaled2(offsetParent);
    var documentElement = getDocumentElement2(offsetParent);
    var rect = getBoundingClientRect2(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName2(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent2(documentElement)) {
        scroll = getNodeScroll2(offsetParent);
      }
      if (isHTMLElement2(offsetParent)) {
        offsets = getBoundingClientRect2(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX2(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  __name(getCompositeRect2, "getCompositeRect");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order2(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    __name(sort, "sort");
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  __name(order2, "order");
  function orderModifiers2(modifiers) {
    var orderedModifiers = order2(modifiers);
    return modifierPhases2.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }
  __name(orderModifiers2, "orderModifiers");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce2(fn3) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn3());
          });
        });
      }
      return pending;
    };
  }
  __name(debounce2, "debounce");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/format.js
  function format2(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function(p5, c6) {
      return p5.replace(/%s/, c6);
    }, str);
  }
  __name(format2, "format");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/validateModifiers.js
  var INVALID_MODIFIER_ERROR2 = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR2 = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES2 = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
  function validateModifiers2(modifiers) {
    modifiers.forEach(function(modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES2).filter(function(value, index, self2) {
        return self2.indexOf(value) === index;
      }).forEach(function(key) {
        switch (key) {
          case "name":
            if (typeof modifier.name !== "string") {
              console.error(format2(INVALID_MODIFIER_ERROR2, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
            }
            break;
          case "enabled":
            if (typeof modifier.enabled !== "boolean") {
              console.error(format2(INVALID_MODIFIER_ERROR2, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
            }
            break;
          case "phase":
            if (modifierPhases2.indexOf(modifier.phase) < 0) {
              console.error(format2(INVALID_MODIFIER_ERROR2, modifier.name, '"phase"', "either " + modifierPhases2.join(", "), '"' + String(modifier.phase) + '"'));
            }
            break;
          case "fn":
            if (typeof modifier.fn !== "function") {
              console.error(format2(INVALID_MODIFIER_ERROR2, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "effect":
            if (modifier.effect != null && typeof modifier.effect !== "function") {
              console.error(format2(INVALID_MODIFIER_ERROR2, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
            }
            break;
          case "requires":
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format2(INVALID_MODIFIER_ERROR2, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
            }
            break;
          case "requiresIfExists":
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format2(INVALID_MODIFIER_ERROR2, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
            }
            break;
          case "options":
          case "data":
            break;
          default:
            console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES2.map(function(s21) {
              return '"' + s21 + '"';
            }).join(", ") + '; but "' + key + '" was provided.');
        }
        modifier.requires && modifier.requires.forEach(function(requirement) {
          if (modifiers.find(function(mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format2(MISSING_DEPENDENCY_ERROR2, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }
  __name(validateModifiers2, "validateModifiers");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/uniqueBy.js
  function uniqueBy2(arr, fn3) {
    var identifiers = /* @__PURE__ */ new Set();
    return arr.filter(function(item) {
      var identifier = fn3(item);
      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }
  __name(uniqueBy2, "uniqueBy");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName2(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }
  __name(mergeByName2, "mergeByName");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/createPopper.js
  var INVALID_ELEMENT_ERROR2 = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
  var INFINITE_LOOP_ERROR2 = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
  var DEFAULT_OPTIONS2 = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  __name(areValidElements2, "areValidElements");
  function popperGenerator2(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS2 : _generatorOptions$def2;
    return /* @__PURE__ */ __name(function createPopper3(reference3, popper3, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS2, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference3,
          popper: popper3
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: /* @__PURE__ */ __name(function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement3(reference3) ? listScrollParents2(reference3) : reference3.contextElement ? listScrollParents2(reference3.contextElement) : [],
            popper: listScrollParents2(popper3)
          };
          var orderedModifiers = orderModifiers2(mergeByName2([].concat(defaultModifiers3, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m6) {
            return m6.enabled;
          });
          if (true) {
            var modifiers = uniqueBy2([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers2(modifiers);
            if (getBasePlacement2(state.options.placement) === auto2) {
              var flipModifier = state.orderedModifiers.find(function(_ref2) {
                var name = _ref2.name;
                return name === "flip";
              });
              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
              }
            }
            var _getComputedStyle = getComputedStyle2(popper3), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
            if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
            }
          }
          runModifierEffects();
          return instance.update();
        }, "setOptions"),
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: /* @__PURE__ */ __name(function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference4 = _state$elements.reference, popper4 = _state$elements.popper;
          if (!areValidElements2(reference4, popper4)) {
            if (true) {
              console.error(INVALID_ELEMENT_ERROR2);
            }
            return;
          }
          state.rects = {
            reference: getCompositeRect2(reference4, getOffsetParent2(popper4), state.options.strategy === "fixed"),
            popper: getLayoutRect2(popper4)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (true) {
              __debug_loops__ += 1;
              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR2);
                break;
              }
            }
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn3 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn3 === "function") {
              state = fn3({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        }, "forceUpdate"),
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce2(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: /* @__PURE__ */ __name(function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }, "destroy")
      };
      if (!areValidElements2(reference3, popper3)) {
        if (true) {
          console.error(INVALID_ELEMENT_ERROR2);
        }
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref3) {
          var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect7 = _ref3.effect;
          if (typeof effect7 === "function") {
            var cleanupFn = effect7({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = /* @__PURE__ */ __name(function noopFn2() {
            }, "noopFn");
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      __name(runModifierEffects, "runModifierEffects");
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn3) {
          return fn3();
        });
        effectCleanupFns = [];
      }
      __name(cleanupModifierEffects, "cleanupModifierEffects");
      return instance;
    }, "createPopper");
  }
  __name(popperGenerator2, "popperGenerator");

  // ../../contrib/hdbt/node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers2 = [eventListeners_default2, popperOffsets_default2, computeStyles_default2, applyStyles_default2, offset_default2, flip_default2, preventOverflow_default2, arrow_default2, hide_default2];
  var createPopper2 = /* @__PURE__ */ popperGenerator2({
    defaultModifiers: defaultModifiers2
  });

  // ../../contrib/hdbt/node_modules/react-popper/lib/esm/usePopper.js
  var import_react_fast_compare2 = __toESM(require_react_fast_compare2());
  var EMPTY_MODIFIERS2 = [];
  var usePopper3 = /* @__PURE__ */ __name(function usePopper4(referenceElement, popperElement, options) {
    if (options === void 0) {
      options = {};
    }
    var prevOptions = React10.useRef(null);
    var optionsWithDefaults = {
      onFirstUpdate: options.onFirstUpdate,
      placement: options.placement || "bottom",
      strategy: options.strategy || "absolute",
      modifiers: options.modifiers || EMPTY_MODIFIERS2
    };
    var _React$useState = React10.useState({
      styles: {
        popper: {
          position: optionsWithDefaults.strategy,
          left: "0",
          top: "0"
        },
        arrow: {
          position: "absolute"
        }
      },
      attributes: {}
    }), state = _React$useState[0], setState = _React$useState[1];
    var updateStateModifier = React10.useMemo(function() {
      return {
        name: "updateState",
        enabled: true,
        phase: "write",
        fn: /* @__PURE__ */ __name(function fn3(_ref) {
          var state2 = _ref.state;
          var elements = Object.keys(state2.elements);
          setState({
            styles: fromEntries3(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries3(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        }, "fn"),
        requires: ["computeStyles"]
      };
    }, []);
    var popperOptions = React10.useMemo(function() {
      var newOptions = {
        onFirstUpdate: optionsWithDefaults.onFirstUpdate,
        placement: optionsWithDefaults.placement,
        strategy: optionsWithDefaults.strategy,
        modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
          name: "applyStyles",
          enabled: false
        }])
      };
      if ((0, import_react_fast_compare2.default)(prevOptions.current, newOptions)) {
        return prevOptions.current || newOptions;
      } else {
        prevOptions.current = newOptions;
        return newOptions;
      }
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React10.useRef();
    useIsomorphicLayoutEffect3(function() {
      if (popperInstanceRef.current) {
        popperInstanceRef.current.setOptions(popperOptions);
      }
    }, [popperOptions]);
    useIsomorphicLayoutEffect3(function() {
      if (referenceElement == null || popperElement == null) {
        return;
      }
      var createPopper3 = options.createPopper || createPopper2;
      var popperInstance = createPopper3(referenceElement, popperElement, popperOptions);
      popperInstanceRef.current = popperInstance;
      return function() {
        popperInstance.destroy();
        popperInstanceRef.current = null;
      };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
      state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
      styles: state.styles,
      attributes: state.attributes,
      update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
      forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
  }, "usePopper");

  // ../../contrib/hdbt/node_modules/hds-react/Tooltip-d8893826.js
  var n15 = "Tooltip-module_button__2x9m0";
  var d11 = "Tooltip-module_root__1Yo9t";
  var c4 = "Tooltip-module_tooltip__3x8S8";
  var m4 = "Tooltip-module_boxShadow__3IzE-";
  var u7 = "Tooltip-module_small__29mxd";
  var _5 = "Tooltip-module_arrow__210Rd";
  e11(".Tooltip-module_button__2x9m0{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.Tooltip-module_root__1Yo9t{--button-focus-outline-width:3px;--button-focus-outline-color:var(--color-coat-of-arms);--tooltip-arrow-size:8px;--tooltip-background:var(--color-coat-of-arms-light);--tooltip-border-color:var(--color-coat-of-arms);--tooltip-spacing-default:var(--spacing-s);--tooltip-spacing-small:var(--spacing-3-xs) var(--spacing-2-xs)}.Tooltip-module_tooltip__3x8S8{background-color:var(--tooltip-background);font-size:var(--fontsize-body-s);font-weight:400;line-height:24px;max-width:21.875rem;padding:var(--tooltip-spacing-default);z-index:1000}.Tooltip-module_boxShadow__3IzE-{box-shadow:var(--box-shadow-s)}.Tooltip-module_small__29mxd{padding:var(--tooltip-spacing-small)}.Tooltip-module_button__2x9m0>span{display:flex}.Tooltip-module_button__2x9m0:focus{box-shadow:0 0 0 var(--button-focus-outline-width) var(--button-focus-outline-color);outline:none}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=bottom]{border-top:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=top]{border-bottom:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=left]{border-right:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=right]{border-left:8px solid var(--tooltip-border-color)}.Tooltip-module_tooltip__3x8S8 .Tooltip-module_arrow__210Rd{position:absolute}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=bottom] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-bottom:var(--tooltip-arrow-size) solid var(--tooltip-border-color);top:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=top] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-top:var(--tooltip-arrow-size) solid var(--tooltip-border-color);bottom:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=left] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-left:var(--tooltip-arrow-size) solid var(--tooltip-border-color);right:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}.Tooltip-module_tooltip__3x8S8[data-popper-placement^=right] .Tooltip-module_arrow__210Rd{border:var(--tooltip-arrow-size) solid transparent;border-right:var(--tooltip-arrow-size) solid var(--tooltip-border-color);left:calc(-1 * var(--tooltip-spacing-default) - var(--tooltip-arrow-size))}");
  var b4 = /* @__PURE__ */ __name((i12) => {
    var { boxShadow: b6 = false, children: v4, placement: f2 = "auto", small: x = false, buttonLabel: w = "Tooltip", tooltipLabel: g4 = "Tooltip", className: T, buttonClassName: h5, tooltipClassName: z3 } = i12, S2 = o10(i12, ["boxShadow", "children", "placement", "small", "buttonLabel", "tooltipLabel", "className", "buttonClassName", "tooltipClassName"]);
    const [E2, k] = (0, import_react44.useState)(false), y2 = (0, import_react44.useRef)(null), N3 = (0, import_react44.useRef)(null), [j2, L2] = (0, import_react44.useState)(null), { styles: C2, attributes: R3, forceUpdate: I2 } = usePopper3(y2.current, N3.current, { placement: f2, modifiers: [{ name: "arrow", options: { element: j2 } }, { name: "offset", options: { offset: [0, 10] } }] });
    (0, import_react44.useEffect)(() => {
      null !== I2 && true === E2 && I2();
    }, [E2, I2]);
    return (0, import_react44.useEffect)(() => {
      const o18 = /* @__PURE__ */ __name((o19) => {
        const t22 = o19.key || o19.keyCode;
        !E2 || "Escape" !== t22 && "Esc" !== t22 && 27 !== t22 || k(false);
      }, "o"), t21 = /* @__PURE__ */ __name((o19) => {
        const t22 = o19.target;
        !E2 || y2.current.contains(t22) || N3.current.contains(t22) || k(false);
      }, "t");
      return document.addEventListener("keyup", o18), document.addEventListener("click", t21), () => {
        document.removeEventListener("keyup", o18), document.removeEventListener("click", t21);
      };
    }), import_react44.default.createElement("div", Object.assign({}, S2, { className: r17(d11, T) }), import_react44.default.createElement("button", { ref: y2, type: "button", className: r17(n15, h5), title: w, "aria-label": w, "aria-expanded": E2, onClick: /* @__PURE__ */ __name(() => {
      k(!E2);
    }, "onClick"), onBlur: /* @__PURE__ */ __name(() => k(false), "onBlur") }, import_react44.default.createElement("span", { "aria-hidden": "true" }, import_react44.default.createElement(s17, null))), E2 && import_react44.default.createElement("section", Object.assign({ "aria-label": g4, ref: N3, className: r17(c4, x && u7, b6 && m4, z3), style: C2.popper }, R3.popper), v4, import_react44.default.createElement("div", Object.assign({ ref: L2, className: _5, style: C2.arrow }, R3.arrow))));
  }, "b");

  // ../../contrib/hdbt/node_modules/hds-react/Checkbox-bf00bf69.js
  var d12 = "Checkbox-module_checkbox__3r5uI";
  var s18 = "Checkbox-module_input__2bdJk";
  var b5 = "Checkbox-module_label__148Ac";
  var h3 = "Checkbox-module_noLabel__1HSAV";
  var _6 = "Checkbox-module_errorText__1tRw6";
  var u8 = "Checkbox-module_helperText__261fG helpers_helper-text__YRZTD";
  var p4 = "Checkbox-module_tooltipButton__ErN1J";
  e11(`.helpers_visually-hidden__3lBcX{border:0;clip:"rect(0 0 0 0)";height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.helpers_button-reset__2d38b{background:none;border:none;color:inherit;cursor:pointer;font:inherit;padding:0}.helpers_text-body__FA9G-{color:var(--color-black-90);font-family:var(--font-default);font-size:var(--fontsize-body-m);line-height:var(--lineheight-l)}.helpers_text-medium__3Hiiz{font-family:var(--font-default);font-weight:500}.helpers_text-bold__2QyP8{font-family:var(--font-default);font-weight:700}.helpers_text-xl__33T1r{font-size:var(--fontsize-heading-m)}.helpers_text-lg__1_8nq{font-size:var(--fontsize-heading-s)}.helpers_text-md__RyeCd{font-size:var(--fontsize-heading-xs)}.helpers_subtitle__RE8f_{font-size:var(--fontsize-body-m)}.helpers_text-sm__AxqmS{font-size:var(--fontsize-body-s);line-height:var(--lineheight-xl)}.helpers_heading-xxl__1GAqs{font-size:var(--fontsize-heading-xxl);font-weight:400;letter-spacing:-1.2px;line-height:var(--lineheight-s)}.helpers_heading-xl__u_X50{font-size:var(--fontsize-heading-xl);font-weight:400;letter-spacing:-1px;line-height:var(--lineheight-s)}.helpers_heading-xl-mobile__gKona{font-size:var(--fontsize-heading-xl-mobile);font-weight:400;letter-spacing:-.8px;line-height:var(--lineheight-s)}.helpers_heading-l__3EMpz{font-size:var(--fontsize-heading-l);font-weight:400;letter-spacing:-.4px;line-height:var(--lineheight-m)}.helpers_heading-m__1Lsy-{font-size:var(--fontsize-heading-m);font-weight:500;letter-spacing:-.2px;line-height:var(--lineheight-m)}.helpers_heading-s__1EK5w{font-size:var(--fontsize-heading-s);font-weight:500;letter-spacing:0;line-height:var(--lineheight-l)}.helpers_heading-xs__iZYJi{font-size:var(--fontsize-heading-xs);font-weight:700;letter-spacing:0;line-height:var(--lineheight-l)}.helpers_heading-xxs__jqtFk{font-size:var(--fontsize-heading-xxs);font-weight:700;letter-spacing:.2px;line-height:var(--lineheight-l)}.helpers_helper-text__YRZTD{color:var(--color-black-60);display:block;flex-basis:100%;font-size:var(--fontsize-body-m);margin-top:var(--spacing-2-xs)}.Checkbox-module_checkbox__3r5uI{--size:24px;--icon-scale:1;--border-width:2px;--outline-width:3px;--label-font-size:var(--fontsize-body-m);--label-padding:var(--spacing-2-xs);--background-unselected:transparent;--background-selected:var(--color-bus);--background-hover:var(--color-bus-dark);--background-disabled:var(--color-black-10);--border-color-selected:var(--color-bus);--border-color-selected-hover:var(--color-bus-dark);--border-color-selected-focus:var(--color-bus);--border-color-unselected:var(--color-black-50);--border-color-unselected-hover:var(--color-black-90);--border-color-unselected-focus:var(--color-black-90);--border-color-disabled:var(--color-black-10);--icon-color-unselected:transparent;--icon-color-selected:var(--color-white);--icon-color-disabled:var(--color-white);--label-color:var(--color-black-90);--label-color-disabled:var(--color-black-40);--icon-size:var(--spacing-m);display:flex;flex-wrap:wrap;min-height:var(--size);position:relative}.Checkbox-module_checkbox__3r5uI,.Checkbox-module_checkbox__3r5uI *,.Checkbox-module_checkbox__3r5uI :after,.Checkbox-module_checkbox__3r5uI :before{box-sizing:border-box}.Checkbox-module_checkbox__3r5uI:not(:first-of-type){margin-top:var(--spacing-2-xs)}.Checkbox-module_input__2bdJk{-moz-appearance:none;-webkit-appearance:none;appearance:none;cursor:pointer;font-family:inherit;font-size:100%;line-height:1.15;margin:0;outline:none}.Checkbox-module_input__2bdJk,.Checkbox-module_input__2bdJk:before{height:var(--size);left:0;position:absolute;top:0;width:var(--size)}.Checkbox-module_input__2bdJk:before{background-color:var(--icon-color-unselected);content:"";mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M21 7L10 18l-5.5-5.5L6 11l4 4 9.5-9.5z'/%3E%3C/g%3E%3C/svg%3E");mask-position:center;mask-repeat:no-repeat;mask-size:calc(var(--size) * var(--icon-scale));transform:scale(.6);z-index:1}.Checkbox-module_input__2bdJk:disabled+label{color:var(--label-color-disabled)}.Checkbox-module_input__2bdJk:checked:disabled:before{background-color:var(--icon-color-disabled)}.Checkbox-module_input__2bdJk:disabled,.Checkbox-module_input__2bdJk:disabled+label{cursor:not-allowed}.Checkbox-module_input__2bdJk:focus+label:after,.Checkbox-module_input__2bdJk:focus:before,.Checkbox-module_input__2bdJk:hover+label:after,.Checkbox-module_input__2bdJk:hover:before{transition:85ms ease-out;transition-property:background-color,border-color,transform}.Checkbox-module_input__2bdJk:focus+label:before{box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.Checkbox-module_input__2bdJk:checked:before{background-color:var(--icon-color-selected);transform:scale(1)}.Checkbox-module_input__2bdJk:not(:checked):indeterminate:before{background-color:var(--icon-color-selected);mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M6 11h12v2H6z'/%3E%3C/g%3E%3C/svg%3E");transform:scale(1)}.Checkbox-module_input__2bdJk:checked+label:after,.Checkbox-module_input__2bdJk:indeterminate+label:after{background-color:var(--background-selected);border-color:var(--border-color-selected)}.Checkbox-module_input__2bdJk:disabled+label:after{background-color:var(--background-disabled);border-color:var(--border-color-disabled)}.Checkbox-module_input__2bdJk:not(:disabled):focus+label:after{border-color:var(--border-color-unselected-focus)}.Checkbox-module_input__2bdJk:not(:disabled):hover+label:after,.Checkbox-module_input__2bdJk:not(:disabled):hover:focus+label:after{border-color:var(--border-color-unselected-hover)}.Checkbox-module_input__2bdJk:not(:disabled):checked:focus+label:after,.Checkbox-module_input__2bdJk:not(:disabled):indeterminate:focus+label:after{border-color:var(--border-color-selected-focus)}.Checkbox-module_input__2bdJk:not(:disabled):checked:hover+label:after,.Checkbox-module_input__2bdJk:not(:disabled):checked:hover:focus+label:after,.Checkbox-module_input__2bdJk:not(:disabled):indeterminate:hover+label:after,.Checkbox-module_input__2bdJk:not(:disabled):indeterminate:hover:focus+label:after{background-color:var(--background-hover);border-color:var(--border-color-selected-hover)}.Checkbox-module_label__148Ac{color:var(--label-color);cursor:pointer;font-size:var(--label-font-size);line-height:var(--lineheight-m);padding-left:calc(var(--size) + var(--label-padding));padding-top:calc((var(--size) - var(--label-font-size) * var(--lineheight-m)) / 2);position:relative}.Checkbox-module_label__148Ac:after,.Checkbox-module_label__148Ac:before{content:"";left:0;position:absolute;top:0;height:var(--size);width:var(--size)}.Checkbox-module_label__148Ac:after{background-color:var(--background-unselected);border:var(--border-width) solid var(--border-color-unselected)}.Checkbox-module_noLabel__1HSAV{padding-left:var(--size)}.Checkbox-module_errorText__1tRw6{background-color:var(--color-error-light);border-left:8px solid var(--color-error);color:var(--color-black);display:flex;flex-basis:100%;font-size:var(--fontsize-body-m);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.Checkbox-module_errorText__1tRw6:before{background:var(--color-error);content:"";display:inline-block;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.Checkbox-module_tooltipButton__ErN1J{display:inline-block;margin-left:var(--spacing-2-xs)}`);
  var v2 = import_react45.default.forwardRef((t21, v4) => {
    var { checked: f2 = false, className: m6, disabled: g4 = false, errorText: k, helperText: x, id: C2, indeterminate: z3, label: w, onChange: y2 = /* @__PURE__ */ __name(() => null, "y"), style: E2, value: J3, tooltipText: T, tooltipLabel: N3, tooltipButtonLabel: j2, tooltip: A2 } = t21, L2 = o10(t21, ["checked", "className", "disabled", "errorText", "helperText", "id", "indeterminate", "label", "onChange", "style", "value", "tooltipText", "tooltipLabel", "tooltipButtonLabel", "tooltip"]);
    const R3 = (0, import_react45.useRef)(null);
    (0, import_react45.useEffect)(() => {
      v4 && t15(v4, R3), R3.current.indeterminate = z3;
    }, [R3, v4, z3]), w && "string" != typeof w && "number" != typeof w && console.warn("Using ReactElement as a label is against good usability and accessibility practices. Please prefer plain strings.");
    const B2 = r21(C2, x, k, void 0, void 0);
    return import_react45.default.createElement("div", { className: r17(d12, m6), style: E2 }, import_react45.default.createElement("input", Object.assign({ ref: R3, id: C2, className: r17(s18), onChange: y2, value: J3, type: "checkbox", disabled: g4, checked: f2, "aria-describedby": B2 }, L2)), import_react45.default.createElement("label", { htmlFor: C2, className: r17(b5, w ? "" : h3) }, w), A2 ? import_react45.default.createElement(b4, Object.assign({}, A2.props, { buttonClassName: p4 })) : null, T && import_react45.default.createElement(b4, { className: p4, buttonLabel: j2, tooltipLabel: N3 }, T), k && import_react45.default.createElement("div", { className: _6, id: `${C2}-error` }, k), x && import_react45.default.createElement("div", { className: u8, id: `${C2}-helper` }, x));
  });

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/toInteger/index.js
  function toInteger(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
      return NaN;
    }
    var number = Number(dirtyNumber);
    if (isNaN(number)) {
      return number;
    }
    return number < 0 ? Math.ceil(number) : Math.floor(number);
  }
  __name(toInteger, "toInteger");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/requiredArgs/index.js
  function requiredArgs(required, args) {
    if (args.length < required) {
      throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
    }
  }
  __name(requiredArgs, "requiredArgs");

  // ../../contrib/hdbt/node_modules/date-fns/esm/toDate/index.js
  function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument);
    if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
      return new Date(argument.getTime());
    } else if (typeof argument === "number" || argStr === "[object Number]") {
      return new Date(argument);
    } else {
      if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
        console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
        console.warn(new Error().stack);
      }
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  __name(toDate, "toDate");

  // ../../contrib/hdbt/node_modules/date-fns/esm/addMonths/index.js
  function addMonths(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var amount = toInteger(dirtyAmount);
    if (isNaN(amount)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    if (!amount) {
      return date;
    }
    var dayOfMonth = date.getDate();
    var endOfDesiredMonth = new Date(date.getTime());
    endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
    var daysInMonth3 = endOfDesiredMonth.getDate();
    if (dayOfMonth >= daysInMonth3) {
      return endOfDesiredMonth;
    } else {
      date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
      return date;
    }
  }
  __name(addMonths, "addMonths");

  // ../../contrib/hdbt/node_modules/date-fns/esm/addMilliseconds/index.js
  function addMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var timestamp = toDate(dirtyDate).getTime();
    var amount = toInteger(dirtyAmount);
    return new Date(timestamp + amount);
  }
  __name(addMilliseconds, "addMilliseconds");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
  var MILLISECONDS_IN_MINUTE = 6e4;
  function getDateMillisecondsPart(date) {
    return date.getTime() % MILLISECONDS_IN_MINUTE;
  }
  __name(getDateMillisecondsPart, "getDateMillisecondsPart");
  function getTimezoneOffsetInMilliseconds(dirtyDate) {
    var date = new Date(dirtyDate.getTime());
    var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
    date.setSeconds(0, 0);
    var hasNegativeUTCOffset = baseTimezoneOffset > 0;
    var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);
    return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
  }
  __name(getTimezoneOffsetInMilliseconds, "getTimezoneOffsetInMilliseconds");

  // ../../contrib/hdbt/node_modules/date-fns/esm/addYears/index.js
  function addYears(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMonths(dirtyDate, amount * 12);
  }
  __name(addYears, "addYears");

  // ../../contrib/hdbt/node_modules/date-fns/esm/isValid/index.js
  function isValid(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    return !isNaN(date);
  }
  __name(isValid, "isValid");

  // ../../contrib/hdbt/node_modules/date-fns/esm/startOfMonth/index.js
  function startOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  __name(startOfMonth, "startOfMonth");

  // ../../contrib/hdbt/node_modules/date-fns/esm/endOfMonth/index.js
  function endOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(23, 59, 59, 999);
    return date;
  }
  __name(endOfMonth, "endOfMonth");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: "less than a second",
      other: "less than {{count}} seconds"
    },
    xSeconds: {
      one: "1 second",
      other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
      one: "less than a minute",
      other: "less than {{count}} minutes"
    },
    xMinutes: {
      one: "1 minute",
      other: "{{count}} minutes"
    },
    aboutXHours: {
      one: "about 1 hour",
      other: "about {{count}} hours"
    },
    xHours: {
      one: "1 hour",
      other: "{{count}} hours"
    },
    xDays: {
      one: "1 day",
      other: "{{count}} days"
    },
    aboutXWeeks: {
      one: "about 1 week",
      other: "about {{count}} weeks"
    },
    xWeeks: {
      one: "1 week",
      other: "{{count}} weeks"
    },
    aboutXMonths: {
      one: "about 1 month",
      other: "about {{count}} months"
    },
    xMonths: {
      one: "1 month",
      other: "{{count}} months"
    },
    aboutXYears: {
      one: "about 1 year",
      other: "about {{count}} years"
    },
    xYears: {
      one: "1 year",
      other: "{{count}} years"
    },
    overXYears: {
      one: "over 1 year",
      other: "over {{count}} years"
    },
    almostXYears: {
      one: "almost 1 year",
      other: "almost {{count}} years"
    }
  };
  function formatDistance(token, count, options) {
    options = options || {};
    var result;
    if (typeof formatDistanceLocale[token] === "string") {
      result = formatDistanceLocale[token];
    } else if (count === 1) {
      result = formatDistanceLocale[token].one;
    } else {
      result = formatDistanceLocale[token].other.replace("{{count}}", count);
    }
    if (options.addSuffix) {
      if (options.comparison > 0) {
        return "in " + result;
      } else {
        return result + " ago";
      }
    }
    return result;
  }
  __name(formatDistance, "formatDistance");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
  function buildFormatLongFn(args) {
    return function(dirtyOptions) {
      var options = dirtyOptions || {};
      var width = options.width ? String(options.width) : args.defaultWidth;
      var format4 = args.formats[width] || args.formats[args.defaultWidth];
      return format4;
    };
  }
  __name(buildFormatLongFn, "buildFormatLongFn");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
  var dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
  };
  var timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: "full"
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: "full"
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: "full"
    })
  };
  var formatLong_default = formatLong;

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P"
  };
  function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
  }
  __name(formatRelative, "formatRelative");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
  function buildLocalizeFn(args) {
    return function(dirtyIndex, dirtyOptions) {
      var options = dirtyOptions || {};
      var context = options.context ? String(options.context) : "standalone";
      var valuesArray;
      if (context === "formatting" && args.formattingValues) {
        var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        var width = options.width ? String(options.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        var _defaultWidth = args.defaultWidth;
        var _width = options.width ? String(options.width) : args.defaultWidth;
        valuesArray = args.values[_width] || args.values[_defaultWidth];
      }
      var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
      return valuesArray[index];
    };
  }
  __name(buildLocalizeFn, "buildLocalizeFn");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
  var eraValues = {
    narrow: ["B", "A"],
    abbreviated: ["BC", "AD"],
    wide: ["Before Christ", "Anno Domini"]
  };
  var quarterValues = {
    narrow: ["1", "2", "3", "4"],
    abbreviated: ["Q1", "Q2", "Q3", "Q4"],
    wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
    // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.
  };
  var monthValues = {
    narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
    abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
  };
  var dayValues = {
    narrow: ["S", "M", "T", "W", "T", "F", "S"],
    short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
  };
  var dayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    }
  };
  function ordinalNumber(dirtyNumber, _dirtyOptions) {
    var number = Number(dirtyNumber);
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + "st";
        case 2:
          return number + "nd";
        case 3:
          return number + "rd";
      }
    }
    return number + "th";
  }
  __name(ordinalNumber, "ordinalNumber");
  var localize = {
    ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: "wide"
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: "wide",
      argumentCallback: /* @__PURE__ */ __name(function(quarter) {
        return Number(quarter) - 1;
      }, "argumentCallback")
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: "wide"
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: "wide"
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: "wide",
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: "wide"
    })
  };
  var localize_default = localize;

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
  function buildMatchPatternFn(args) {
    return function(dirtyString, dirtyOptions) {
      var string = String(dirtyString);
      var options = dirtyOptions || {};
      var matchResult = string.match(args.matchPattern);
      if (!matchResult) {
        return null;
      }
      var matchedString = matchResult[0];
      var parseResult = string.match(args.parsePattern);
      if (!parseResult) {
        return null;
      }
      var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value = options.valueCallback ? options.valueCallback(value) : value;
      return {
        value,
        rest: string.slice(matchedString.length)
      };
    };
  }
  __name(buildMatchPatternFn, "buildMatchPatternFn");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
  function buildMatchFn(args) {
    return function(dirtyString, dirtyOptions) {
      var string = String(dirtyString);
      var options = dirtyOptions || {};
      var width = options.width;
      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      var matchResult = string.match(matchPattern);
      if (!matchResult) {
        return null;
      }
      var matchedString = matchResult[0];
      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      var value;
      if (Object.prototype.toString.call(parsePatterns) === "[object Array]") {
        value = findIndex2(parsePatterns, function(pattern) {
          return pattern.test(matchedString);
        });
      } else {
        value = findKey(parsePatterns, function(pattern) {
          return pattern.test(matchedString);
        });
      }
      value = args.valueCallback ? args.valueCallback(value) : value;
      value = options.valueCallback ? options.valueCallback(value) : value;
      return {
        value,
        rest: string.slice(matchedString.length)
      };
    };
  }
  __name(buildMatchFn, "buildMatchFn");
  function findKey(object, predicate) {
    for (var key in object) {
      if (object.hasOwnProperty(key) && predicate(object[key])) {
        return key;
      }
    }
  }
  __name(findKey, "findKey");
  function findIndex2(array, predicate) {
    for (var key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
  }
  __name(findIndex2, "findIndex");

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match2 = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: /* @__PURE__ */ __name(function(value) {
        return parseInt(value, 10);
      }, "valueCallback")
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseEraPatterns,
      defaultParseWidth: "any"
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: "any",
      valueCallback: /* @__PURE__ */ __name(function(index) {
        return index + 1;
      }, "valueCallback")
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: "any"
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseDayPatterns,
      defaultParseWidth: "any"
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: "any",
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: "any"
    })
  };
  var match_default = match2;

  // ../../contrib/hdbt/node_modules/date-fns/esm/locale/en-US/index.js
  var locale = {
    code: "en-US",
    formatDistance,
    formatLong: formatLong_default,
    formatRelative,
    localize: localize_default,
    match: match_default,
    options: {
      weekStartsOn: 0,
      firstWeekContainsDate: 1
    }
  };
  var en_US_default = locale;

  // ../../contrib/hdbt/node_modules/date-fns/esm/subMilliseconds/index.js
  function subMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, -amount);
  }
  __name(subMilliseconds, "subMilliseconds");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
  function addLeadingZeros(number, targetLength) {
    var sign = number < 0 ? "-" : "";
    var output = Math.abs(number).toString();
    while (output.length < targetLength) {
      output = "0" + output;
    }
    return sign + output;
  }
  __name(addLeadingZeros, "addLeadingZeros");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
  var formatters = {
    // Year
    y: /* @__PURE__ */ __name(function(date, token) {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
    }, "y"),
    // Month
    M: /* @__PURE__ */ __name(function(date, token) {
      var month = date.getUTCMonth();
      return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
    }, "M"),
    // Day of the month
    d: /* @__PURE__ */ __name(function(date, token) {
      return addLeadingZeros(date.getUTCDate(), token.length);
    }, "d"),
    // AM or PM
    a: /* @__PURE__ */ __name(function(date, token) {
      var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return dayPeriodEnumValue.toUpperCase();
        case "aaaaa":
          return dayPeriodEnumValue[0];
        case "aaaa":
        default:
          return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
      }
    }, "a"),
    // Hour [1-12]
    h: /* @__PURE__ */ __name(function(date, token) {
      return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
    }, "h"),
    // Hour [0-23]
    H: /* @__PURE__ */ __name(function(date, token) {
      return addLeadingZeros(date.getUTCHours(), token.length);
    }, "H"),
    // Minute
    m: /* @__PURE__ */ __name(function(date, token) {
      return addLeadingZeros(date.getUTCMinutes(), token.length);
    }, "m"),
    // Second
    s: /* @__PURE__ */ __name(function(date, token) {
      return addLeadingZeros(date.getUTCSeconds(), token.length);
    }, "s"),
    // Fraction of second
    S: /* @__PURE__ */ __name(function(date, token) {
      var numberOfDigits = token.length;
      var milliseconds = date.getUTCMilliseconds();
      var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
      return addLeadingZeros(fractionalSeconds, token.length);
    }, "S")
  };
  var lightFormatters_default = formatters;

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
  var MILLISECONDS_IN_DAY = 864e5;
  function getUTCDayOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
  }
  __name(getUTCDayOfYear, "getUTCDayOfYear");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
  function startOfUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
  }
  __name(startOfUTCISOWeek, "startOfUTCISOWeek");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
  function getUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }
  __name(getUTCISOWeekYear, "getUTCISOWeekYear");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
  function startOfUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getUTCISOWeekYear(dirtyDate);
    var fourthOfJanuary = /* @__PURE__ */ new Date(0);
    fourthOfJanuary.setUTCFullYear(year, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCISOWeek(fourthOfJanuary);
    return date;
  }
  __name(startOfUTCISOWeekYear, "startOfUTCISOWeekYear");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
  var MILLISECONDS_IN_WEEK = 6048e5;
  function getUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
  }
  __name(getUTCISOWeek, "getUTCISOWeek");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
  function startOfUTCWeek(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var options = dirtyOptions || {};
    var locale2 = options.locale;
    var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    }
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
  }
  __name(startOfUTCWeek, "startOfUTCWeek");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
  function getUTCWeekYear(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate, dirtyOptions);
    var year = date.getUTCFullYear();
    var options = dirtyOptions || {};
    var locale2 = options.locale;
    var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    }
    var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
    var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
    if (date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }
  __name(getUTCWeekYear, "getUTCWeekYear");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
  function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
    requiredArgs(1, arguments);
    var options = dirtyOptions || {};
    var locale2 = options.locale;
    var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
    var year = getUTCWeekYear(dirtyDate, dirtyOptions);
    var firstWeek = /* @__PURE__ */ new Date(0);
    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCWeek(firstWeek, dirtyOptions);
    return date;
  }
  __name(startOfUTCWeekYear, "startOfUTCWeekYear");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/getUTCWeek/index.js
  var MILLISECONDS_IN_WEEK2 = 6048e5;
  function getUTCWeek(dirtyDate, options) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
    return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
  }
  __name(getUTCWeek, "getUTCWeek");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/format/formatters/index.js
  var dayPeriodEnum = {
    am: "am",
    pm: "pm",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */
  };
  var formatters2 = {
    // Era
    G: /* @__PURE__ */ __name(function(date, token, localize2) {
      var era = date.getUTCFullYear() > 0 ? 1 : 0;
      switch (token) {
        // AD, BC
        case "G":
        case "GG":
        case "GGG":
          return localize2.era(era, {
            width: "abbreviated"
          });
        // A, B
        case "GGGGG":
          return localize2.era(era, {
            width: "narrow"
          });
        // Anno Domini, Before Christ
        case "GGGG":
        default:
          return localize2.era(era, {
            width: "wide"
          });
      }
    }, "G"),
    // Year
    y: /* @__PURE__ */ __name(function(date, token, localize2) {
      if (token === "yo") {
        var signedYear = date.getUTCFullYear();
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return localize2.ordinalNumber(year, {
          unit: "year"
        });
      }
      return lightFormatters_default.y(date, token);
    }, "y"),
    // Local week-numbering year
    Y: /* @__PURE__ */ __name(function(date, token, localize2, options) {
      var signedWeekYear = getUTCWeekYear(date, options);
      var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
      if (token === "YY") {
        var twoDigitYear = weekYear % 100;
        return addLeadingZeros(twoDigitYear, 2);
      }
      if (token === "Yo") {
        return localize2.ordinalNumber(weekYear, {
          unit: "year"
        });
      }
      return addLeadingZeros(weekYear, token.length);
    }, "Y"),
    // ISO week-numbering year
    R: /* @__PURE__ */ __name(function(date, token) {
      var isoWeekYear = getUTCISOWeekYear(date);
      return addLeadingZeros(isoWeekYear, token.length);
    }, "R"),
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: /* @__PURE__ */ __name(function(date, token) {
      var year = date.getUTCFullYear();
      return addLeadingZeros(year, token.length);
    }, "u"),
    // Quarter
    Q: /* @__PURE__ */ __name(function(date, token, localize2) {
      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
      switch (token) {
        // 1, 2, 3, 4
        case "Q":
          return String(quarter);
        // 01, 02, 03, 04
        case "QQ":
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th
        case "Qo":
          return localize2.ordinalNumber(quarter, {
            unit: "quarter"
          });
        // Q1, Q2, Q3, Q4
        case "QQQ":
          return localize2.quarter(quarter, {
            width: "abbreviated",
            context: "formatting"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "QQQQQ":
          return localize2.quarter(quarter, {
            width: "narrow",
            context: "formatting"
          });
        // 1st quarter, 2nd quarter, ...
        case "QQQQ":
        default:
          return localize2.quarter(quarter, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "Q"),
    // Stand-alone quarter
    q: /* @__PURE__ */ __name(function(date, token, localize2) {
      var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
      switch (token) {
        // 1, 2, 3, 4
        case "q":
          return String(quarter);
        // 01, 02, 03, 04
        case "qq":
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th
        case "qo":
          return localize2.ordinalNumber(quarter, {
            unit: "quarter"
          });
        // Q1, Q2, Q3, Q4
        case "qqq":
          return localize2.quarter(quarter, {
            width: "abbreviated",
            context: "standalone"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "qqqqq":
          return localize2.quarter(quarter, {
            width: "narrow",
            context: "standalone"
          });
        // 1st quarter, 2nd quarter, ...
        case "qqqq":
        default:
          return localize2.quarter(quarter, {
            width: "wide",
            context: "standalone"
          });
      }
    }, "q"),
    // Month
    M: /* @__PURE__ */ __name(function(date, token, localize2) {
      var month = date.getUTCMonth();
      switch (token) {
        case "M":
        case "MM":
          return lightFormatters_default.M(date, token);
        // 1st, 2nd, ..., 12th
        case "Mo":
          return localize2.ordinalNumber(month + 1, {
            unit: "month"
          });
        // Jan, Feb, ..., Dec
        case "MMM":
          return localize2.month(month, {
            width: "abbreviated",
            context: "formatting"
          });
        // J, F, ..., D
        case "MMMMM":
          return localize2.month(month, {
            width: "narrow",
            context: "formatting"
          });
        // January, February, ..., December
        case "MMMM":
        default:
          return localize2.month(month, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "M"),
    // Stand-alone month
    L: /* @__PURE__ */ __name(function(date, token, localize2) {
      var month = date.getUTCMonth();
      switch (token) {
        // 1, 2, ..., 12
        case "L":
          return String(month + 1);
        // 01, 02, ..., 12
        case "LL":
          return addLeadingZeros(month + 1, 2);
        // 1st, 2nd, ..., 12th
        case "Lo":
          return localize2.ordinalNumber(month + 1, {
            unit: "month"
          });
        // Jan, Feb, ..., Dec
        case "LLL":
          return localize2.month(month, {
            width: "abbreviated",
            context: "standalone"
          });
        // J, F, ..., D
        case "LLLLL":
          return localize2.month(month, {
            width: "narrow",
            context: "standalone"
          });
        // January, February, ..., December
        case "LLLL":
        default:
          return localize2.month(month, {
            width: "wide",
            context: "standalone"
          });
      }
    }, "L"),
    // Local week of year
    w: /* @__PURE__ */ __name(function(date, token, localize2, options) {
      var week = getUTCWeek(date, options);
      if (token === "wo") {
        return localize2.ordinalNumber(week, {
          unit: "week"
        });
      }
      return addLeadingZeros(week, token.length);
    }, "w"),
    // ISO week of year
    I: /* @__PURE__ */ __name(function(date, token, localize2) {
      var isoWeek = getUTCISOWeek(date);
      if (token === "Io") {
        return localize2.ordinalNumber(isoWeek, {
          unit: "week"
        });
      }
      return addLeadingZeros(isoWeek, token.length);
    }, "I"),
    // Day of the month
    d: /* @__PURE__ */ __name(function(date, token, localize2) {
      if (token === "do") {
        return localize2.ordinalNumber(date.getUTCDate(), {
          unit: "date"
        });
      }
      return lightFormatters_default.d(date, token);
    }, "d"),
    // Day of year
    D: /* @__PURE__ */ __name(function(date, token, localize2) {
      var dayOfYear = getUTCDayOfYear(date);
      if (token === "Do") {
        return localize2.ordinalNumber(dayOfYear, {
          unit: "dayOfYear"
        });
      }
      return addLeadingZeros(dayOfYear, token.length);
    }, "D"),
    // Day of week
    E: /* @__PURE__ */ __name(function(date, token, localize2) {
      var dayOfWeek3 = date.getUTCDay();
      switch (token) {
        // Tue
        case "E":
        case "EE":
        case "EEE":
          return localize2.day(dayOfWeek3, {
            width: "abbreviated",
            context: "formatting"
          });
        // T
        case "EEEEE":
          return localize2.day(dayOfWeek3, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "EEEEEE":
          return localize2.day(dayOfWeek3, {
            width: "short",
            context: "formatting"
          });
        // Tuesday
        case "EEEE":
        default:
          return localize2.day(dayOfWeek3, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "E"),
    // Local day of week
    e: /* @__PURE__ */ __name(function(date, token, localize2, options) {
      var dayOfWeek3 = date.getUTCDay();
      var localDayOfWeek = (dayOfWeek3 - options.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        // Numerical value (Nth day of week with current locale or weekStartsOn)
        case "e":
          return String(localDayOfWeek);
        // Padded numerical value
        case "ee":
          return addLeadingZeros(localDayOfWeek, 2);
        // 1st, 2nd, ..., 7th
        case "eo":
          return localize2.ordinalNumber(localDayOfWeek, {
            unit: "day"
          });
        case "eee":
          return localize2.day(dayOfWeek3, {
            width: "abbreviated",
            context: "formatting"
          });
        // T
        case "eeeee":
          return localize2.day(dayOfWeek3, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "eeeeee":
          return localize2.day(dayOfWeek3, {
            width: "short",
            context: "formatting"
          });
        // Tuesday
        case "eeee":
        default:
          return localize2.day(dayOfWeek3, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "e"),
    // Stand-alone local day of week
    c: /* @__PURE__ */ __name(function(date, token, localize2, options) {
      var dayOfWeek3 = date.getUTCDay();
      var localDayOfWeek = (dayOfWeek3 - options.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        // Numerical value (same as in `e`)
        case "c":
          return String(localDayOfWeek);
        // Padded numerical value
        case "cc":
          return addLeadingZeros(localDayOfWeek, token.length);
        // 1st, 2nd, ..., 7th
        case "co":
          return localize2.ordinalNumber(localDayOfWeek, {
            unit: "day"
          });
        case "ccc":
          return localize2.day(dayOfWeek3, {
            width: "abbreviated",
            context: "standalone"
          });
        // T
        case "ccccc":
          return localize2.day(dayOfWeek3, {
            width: "narrow",
            context: "standalone"
          });
        // Tu
        case "cccccc":
          return localize2.day(dayOfWeek3, {
            width: "short",
            context: "standalone"
          });
        // Tuesday
        case "cccc":
        default:
          return localize2.day(dayOfWeek3, {
            width: "wide",
            context: "standalone"
          });
      }
    }, "c"),
    // ISO day of week
    i: /* @__PURE__ */ __name(function(date, token, localize2) {
      var dayOfWeek3 = date.getUTCDay();
      var isoDayOfWeek = dayOfWeek3 === 0 ? 7 : dayOfWeek3;
      switch (token) {
        // 2
        case "i":
          return String(isoDayOfWeek);
        // 02
        case "ii":
          return addLeadingZeros(isoDayOfWeek, token.length);
        // 2nd
        case "io":
          return localize2.ordinalNumber(isoDayOfWeek, {
            unit: "day"
          });
        // Tue
        case "iii":
          return localize2.day(dayOfWeek3, {
            width: "abbreviated",
            context: "formatting"
          });
        // T
        case "iiiii":
          return localize2.day(dayOfWeek3, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "iiiiii":
          return localize2.day(dayOfWeek3, {
            width: "short",
            context: "formatting"
          });
        // Tuesday
        case "iiii":
        default:
          return localize2.day(dayOfWeek3, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "i"),
    // AM or PM
    a: /* @__PURE__ */ __name(function(date, token, localize2) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "aaaaa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "a"),
    // AM, PM, midnight, noon
    b: /* @__PURE__ */ __name(function(date, token, localize2) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue;
      if (hours === 12) {
        dayPeriodEnumValue = dayPeriodEnum.noon;
      } else if (hours === 0) {
        dayPeriodEnumValue = dayPeriodEnum.midnight;
      } else {
        dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
      }
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "bbbbb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "b"),
    // in the morning, in the afternoon, in the evening, at night
    B: /* @__PURE__ */ __name(function(date, token, localize2) {
      var hours = date.getUTCHours();
      var dayPeriodEnumValue;
      if (hours >= 17) {
        dayPeriodEnumValue = dayPeriodEnum.evening;
      } else if (hours >= 12) {
        dayPeriodEnumValue = dayPeriodEnum.afternoon;
      } else if (hours >= 4) {
        dayPeriodEnumValue = dayPeriodEnum.morning;
      } else {
        dayPeriodEnumValue = dayPeriodEnum.night;
      }
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "BBBBB":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "B"),
    // Hour [1-12]
    h: /* @__PURE__ */ __name(function(date, token, localize2) {
      if (token === "ho") {
        var hours = date.getUTCHours() % 12;
        if (hours === 0) hours = 12;
        return localize2.ordinalNumber(hours, {
          unit: "hour"
        });
      }
      return lightFormatters_default.h(date, token);
    }, "h"),
    // Hour [0-23]
    H: /* @__PURE__ */ __name(function(date, token, localize2) {
      if (token === "Ho") {
        return localize2.ordinalNumber(date.getUTCHours(), {
          unit: "hour"
        });
      }
      return lightFormatters_default.H(date, token);
    }, "H"),
    // Hour [0-11]
    K: /* @__PURE__ */ __name(function(date, token, localize2) {
      var hours = date.getUTCHours() % 12;
      if (token === "Ko") {
        return localize2.ordinalNumber(hours, {
          unit: "hour"
        });
      }
      return addLeadingZeros(hours, token.length);
    }, "K"),
    // Hour [1-24]
    k: /* @__PURE__ */ __name(function(date, token, localize2) {
      var hours = date.getUTCHours();
      if (hours === 0) hours = 24;
      if (token === "ko") {
        return localize2.ordinalNumber(hours, {
          unit: "hour"
        });
      }
      return addLeadingZeros(hours, token.length);
    }, "k"),
    // Minute
    m: /* @__PURE__ */ __name(function(date, token, localize2) {
      if (token === "mo") {
        return localize2.ordinalNumber(date.getUTCMinutes(), {
          unit: "minute"
        });
      }
      return lightFormatters_default.m(date, token);
    }, "m"),
    // Second
    s: /* @__PURE__ */ __name(function(date, token, localize2) {
      if (token === "so") {
        return localize2.ordinalNumber(date.getUTCSeconds(), {
          unit: "second"
        });
      }
      return lightFormatters_default.s(date, token);
    }, "s"),
    // Fraction of second
    S: /* @__PURE__ */ __name(function(date, token) {
      return lightFormatters_default.S(date, token);
    }, "S"),
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: /* @__PURE__ */ __name(function(date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();
      if (timezoneOffset === 0) {
        return "Z";
      }
      switch (token) {
        // Hours and optional minutes
        case "X":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XX`
        case "XXXX":
        case "XX":
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XXX`
        case "XXXXX":
        case "XXX":
        // Hours and minutes with `:` delimiter
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    }, "X"),
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: /* @__PURE__ */ __name(function(date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();
      switch (token) {
        // Hours and optional minutes
        case "x":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xx`
        case "xxxx":
        case "xx":
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xxx`
        case "xxxxx":
        case "xxx":
        // Hours and minutes with `:` delimiter
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    }, "x"),
    // Timezone (GMT)
    O: /* @__PURE__ */ __name(function(date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();
      switch (token) {
        // Short
        case "O":
        case "OO":
        case "OOO":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        // Long
        case "OOOO":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    }, "O"),
    // Timezone (specific non-location)
    z: /* @__PURE__ */ __name(function(date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timezoneOffset = originalDate.getTimezoneOffset();
      switch (token) {
        // Short
        case "z":
        case "zz":
        case "zzz":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        // Long
        case "zzzz":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    }, "z"),
    // Seconds timestamp
    t: /* @__PURE__ */ __name(function(date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timestamp = Math.floor(originalDate.getTime() / 1e3);
      return addLeadingZeros(timestamp, token.length);
    }, "t"),
    // Milliseconds timestamp
    T: /* @__PURE__ */ __name(function(date, token, _localize, options) {
      var originalDate = options._originalDate || date;
      var timestamp = originalDate.getTime();
      return addLeadingZeros(timestamp, token.length);
    }, "T")
  };
  function formatTimezoneShort(offset5, dirtyDelimiter) {
    var sign = offset5 > 0 ? "-" : "+";
    var absOffset = Math.abs(offset5);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;
    if (minutes === 0) {
      return sign + String(hours);
    }
    var delimiter = dirtyDelimiter || "";
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
  }
  __name(formatTimezoneShort, "formatTimezoneShort");
  function formatTimezoneWithOptionalMinutes(offset5, dirtyDelimiter) {
    if (offset5 % 60 === 0) {
      var sign = offset5 > 0 ? "-" : "+";
      return sign + addLeadingZeros(Math.abs(offset5) / 60, 2);
    }
    return formatTimezone(offset5, dirtyDelimiter);
  }
  __name(formatTimezoneWithOptionalMinutes, "formatTimezoneWithOptionalMinutes");
  function formatTimezone(offset5, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || "";
    var sign = offset5 > 0 ? "-" : "+";
    var absOffset = Math.abs(offset5);
    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
    var minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
  }
  __name(formatTimezone, "formatTimezone");
  var formatters_default = formatters2;

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/format/longFormatters/index.js
  function dateLongFormatter(pattern, formatLong2) {
    switch (pattern) {
      case "P":
        return formatLong2.date({
          width: "short"
        });
      case "PP":
        return formatLong2.date({
          width: "medium"
        });
      case "PPP":
        return formatLong2.date({
          width: "long"
        });
      case "PPPP":
      default:
        return formatLong2.date({
          width: "full"
        });
    }
  }
  __name(dateLongFormatter, "dateLongFormatter");
  function timeLongFormatter(pattern, formatLong2) {
    switch (pattern) {
      case "p":
        return formatLong2.time({
          width: "short"
        });
      case "pp":
        return formatLong2.time({
          width: "medium"
        });
      case "ppp":
        return formatLong2.time({
          width: "long"
        });
      case "pppp":
      default:
        return formatLong2.time({
          width: "full"
        });
    }
  }
  __name(timeLongFormatter, "timeLongFormatter");
  function dateTimeLongFormatter(pattern, formatLong2) {
    var matchResult = pattern.match(/(P+)(p+)?/);
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];
    if (!timePattern) {
      return dateLongFormatter(pattern, formatLong2);
    }
    var dateTimeFormat;
    switch (datePattern) {
      case "P":
        dateTimeFormat = formatLong2.dateTime({
          width: "short"
        });
        break;
      case "PP":
        dateTimeFormat = formatLong2.dateTime({
          width: "medium"
        });
        break;
      case "PPP":
        dateTimeFormat = formatLong2.dateTime({
          width: "long"
        });
        break;
      case "PPPP":
      default:
        dateTimeFormat = formatLong2.dateTime({
          width: "full"
        });
        break;
    }
    return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
  }
  __name(dateTimeLongFormatter, "dateTimeLongFormatter");
  var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
  };
  var longFormatters_default = longFormatters;

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/protectedTokens/index.js
  var protectedDayOfYearTokens = ["D", "DD"];
  var protectedWeekYearTokens = ["YY", "YYYY"];
  function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
  }
  __name(isProtectedDayOfYearToken, "isProtectedDayOfYearToken");
  function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
  }
  __name(isProtectedWeekYearToken, "isProtectedWeekYearToken");
  function throwProtectedError(token, format4, input) {
    if (token === "YYYY") {
      throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format4, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    } else if (token === "YY") {
      throw new RangeError("Use `yy` instead of `YY` (in `".concat(format4, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    } else if (token === "D") {
      throw new RangeError("Use `d` instead of `D` (in `".concat(format4, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    } else if (token === "DD") {
      throw new RangeError("Use `dd` instead of `DD` (in `".concat(format4, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
    }
  }
  __name(throwProtectedError, "throwProtectedError");

  // ../../contrib/hdbt/node_modules/date-fns/esm/format/index.js
  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var escapedStringRegExp = /^'([^]*?)'?$/;
  var doubleQuoteRegExp = /''/g;
  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  function format3(dirtyDate, dirtyFormatStr, dirtyOptions) {
    requiredArgs(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var options = dirtyOptions || {};
    var locale2 = options.locale || en_US_default;
    var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    }
    var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    }
    if (!locale2.localize) {
      throw new RangeError("locale must contain localize property");
    }
    if (!locale2.formatLong) {
      throw new RangeError("locale must contain formatLong property");
    }
    var originalDate = toDate(dirtyDate);
    if (!isValid(originalDate)) {
      throw new RangeError("Invalid time value");
    }
    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
    var utcDate = subMilliseconds(originalDate, timezoneOffset);
    var formatterOptions = {
      firstWeekContainsDate,
      weekStartsOn,
      locale: locale2,
      _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
      var firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        var longFormatter = longFormatters_default[firstCharacter];
        return longFormatter(substring, locale2.formatLong, formatterOptions);
      }
      return substring;
    }).join("").match(formattingTokensRegExp).map(function(substring) {
      if (substring === "''") {
        return "'";
      }
      var firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return cleanEscapedString(substring);
      }
      var formatter = formatters_default[firstCharacter];
      if (formatter) {
        if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
          throwProtectedError(substring, dirtyFormatStr, dirtyDate);
        }
        if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
          throwProtectedError(substring, dirtyFormatStr, dirtyDate);
        }
        return formatter(utcDate, substring, locale2.localize, formatterOptions);
      }
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
      }
      return substring;
    }).join("");
    return result;
  }
  __name(format3, "format");
  function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
  }
  __name(cleanEscapedString, "cleanEscapedString");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/assign/index.js
  function assign2(target, dirtyObject) {
    if (target == null) {
      throw new TypeError("assign requires that input parameter not be null or undefined");
    }
    dirtyObject = dirtyObject || {};
    for (var property in dirtyObject) {
      if (dirtyObject.hasOwnProperty(property)) {
        target[property] = dirtyObject[property];
      }
    }
    return target;
  }
  __name(assign2, "assign");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/setUTCDay/index.js
  function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
    requiredArgs(2, arguments);
    var options = dirtyOptions || {};
    var locale2 = options.locale;
    var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    }
    var date = toDate(dirtyDate);
    var day = toInteger(dirtyDay);
    var currentDay = date.getUTCDay();
    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;
    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
  }
  __name(setUTCDay, "setUTCDay");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/setUTCISODay/index.js
  function setUTCISODay(dirtyDate, dirtyDay) {
    requiredArgs(2, arguments);
    var day = toInteger(dirtyDay);
    if (day % 7 === 0) {
      day = day - 7;
    }
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var currentDay = date.getUTCDay();
    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;
    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
  }
  __name(setUTCISODay, "setUTCISODay");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
  function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var isoWeek = toInteger(dirtyISOWeek);
    var diff = getUTCISOWeek(date) - isoWeek;
    date.setUTCDate(date.getUTCDate() - diff * 7);
    return date;
  }
  __name(setUTCISOWeek, "setUTCISOWeek");

  // ../../contrib/hdbt/node_modules/date-fns/esm/_lib/setUTCWeek/index.js
  function setUTCWeek(dirtyDate, dirtyWeek, options) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var week = toInteger(dirtyWeek);
    var diff = getUTCWeek(date, options) - week;
    date.setUTCDate(date.getUTCDate() - diff * 7);
    return date;
  }
  __name(setUTCWeek, "setUTCWeek");

  // ../../contrib/hdbt/node_modules/date-fns/esm/parse/_lib/parsers/index.js
  var MILLISECONDS_IN_HOUR = 36e5;
  var MILLISECONDS_IN_MINUTE2 = 6e4;
  var MILLISECONDS_IN_SECOND = 1e3;
  var numericPatterns = {
    month: /^(1[0-2]|0?\d)/,
    // 0 to 12
    date: /^(3[0-1]|[0-2]?\d)/,
    // 0 to 31
    dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
    // 0 to 366
    week: /^(5[0-3]|[0-4]?\d)/,
    // 0 to 53
    hour23h: /^(2[0-3]|[0-1]?\d)/,
    // 0 to 23
    hour24h: /^(2[0-4]|[0-1]?\d)/,
    // 0 to 24
    hour11h: /^(1[0-1]|0?\d)/,
    // 0 to 11
    hour12h: /^(1[0-2]|0?\d)/,
    // 0 to 12
    minute: /^[0-5]?\d/,
    // 0 to 59
    second: /^[0-5]?\d/,
    // 0 to 59
    singleDigit: /^\d/,
    // 0 to 9
    twoDigits: /^\d{1,2}/,
    // 0 to 99
    threeDigits: /^\d{1,3}/,
    // 0 to 999
    fourDigits: /^\d{1,4}/,
    // 0 to 9999
    anyDigitsSigned: /^-?\d+/,
    singleDigitSigned: /^-?\d/,
    // 0 to 9, -0 to -9
    twoDigitsSigned: /^-?\d{1,2}/,
    // 0 to 99, -0 to -99
    threeDigitsSigned: /^-?\d{1,3}/,
    // 0 to 999, -0 to -999
    fourDigitsSigned: /^-?\d{1,4}/
    // 0 to 9999, -0 to -9999
  };
  var timezonePatterns = {
    basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
    basic: /^([+-])(\d{2})(\d{2})|Z/,
    basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
    extended: /^([+-])(\d{2}):(\d{2})|Z/,
    extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
  };
  function parseNumericPattern(pattern, string, valueCallback) {
    var matchResult = string.match(pattern);
    if (!matchResult) {
      return null;
    }
    var value = parseInt(matchResult[0], 10);
    return {
      value: valueCallback ? valueCallback(value) : value,
      rest: string.slice(matchResult[0].length)
    };
  }
  __name(parseNumericPattern, "parseNumericPattern");
  function parseTimezonePattern(pattern, string) {
    var matchResult = string.match(pattern);
    if (!matchResult) {
      return null;
    }
    if (matchResult[0] === "Z") {
      return {
        value: 0,
        rest: string.slice(1)
      };
    }
    var sign = matchResult[1] === "+" ? 1 : -1;
    var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
    var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
    var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
    return {
      value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE2 + seconds * MILLISECONDS_IN_SECOND),
      rest: string.slice(matchResult[0].length)
    };
  }
  __name(parseTimezonePattern, "parseTimezonePattern");
  function parseAnyDigitsSigned(string, valueCallback) {
    return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
  }
  __name(parseAnyDigitsSigned, "parseAnyDigitsSigned");
  function parseNDigits(n21, string, valueCallback) {
    switch (n21) {
      case 1:
        return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
      case 2:
        return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
      case 3:
        return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
      case 4:
        return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
      default:
        return parseNumericPattern(new RegExp("^\\d{1," + n21 + "}"), string, valueCallback);
    }
  }
  __name(parseNDigits, "parseNDigits");
  function parseNDigitsSigned(n21, string, valueCallback) {
    switch (n21) {
      case 1:
        return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
      case 2:
        return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
      case 3:
        return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
      case 4:
        return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
      default:
        return parseNumericPattern(new RegExp("^-?\\d{1," + n21 + "}"), string, valueCallback);
    }
  }
  __name(parseNDigitsSigned, "parseNDigitsSigned");
  function dayPeriodEnumToHours(enumValue) {
    switch (enumValue) {
      case "morning":
        return 4;
      case "evening":
        return 17;
      case "pm":
      case "noon":
      case "afternoon":
        return 12;
      case "am":
      case "midnight":
      case "night":
      default:
        return 0;
    }
  }
  __name(dayPeriodEnumToHours, "dayPeriodEnumToHours");
  function normalizeTwoDigitYear(twoDigitYear, currentYear) {
    var isCommonEra = currentYear > 0;
    var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
    var result;
    if (absCurrentYear <= 50) {
      result = twoDigitYear || 100;
    } else {
      var rangeEnd = absCurrentYear + 50;
      var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
      var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
      result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
    }
    return isCommonEra ? result : 1 - result;
  }
  __name(normalizeTwoDigitYear, "normalizeTwoDigitYear");
  var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
  }
  __name(isLeapYearIndex, "isLeapYearIndex");
  var parsers = {
    // Era
    G: {
      priority: 140,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          // AD, BC
          case "G":
          case "GG":
          case "GGG":
            return match4.era(string, {
              width: "abbreviated"
            }) || match4.era(string, {
              width: "narrow"
            });
          // A, B
          case "GGGGG":
            return match4.era(string, {
              width: "narrow"
            });
          // Anno Domini, Before Christ
          case "GGGG":
          default:
            return match4.era(string, {
              width: "wide"
            }) || match4.era(string, {
              width: "abbreviated"
            }) || match4.era(string, {
              width: "narrow"
            });
        }
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, flags, value, _options) {
        flags.era = value;
        date.setUTCFullYear(value, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["R", "u", "t", "T"]
    },
    // Year
    y: {
      // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
      // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
      // |----------|-------|----|-------|-------|-------|
      // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
      // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
      // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
      // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
      // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
      priority: 130,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        var valueCallback = /* @__PURE__ */ __name(function(year) {
          return {
            year,
            isTwoDigitYear: token === "yy"
          };
        }, "valueCallback");
        switch (token) {
          case "y":
            return parseNDigits(4, string, valueCallback);
          case "yo":
            return match4.ordinalNumber(string, {
              unit: "year",
              valueCallback
            });
          default:
            return parseNDigits(token.length, string, valueCallback);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value.isTwoDigitYear || value.year > 0;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, flags, value, _options) {
        var currentYear = date.getUTCFullYear();
        if (value.isTwoDigitYear) {
          var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
          date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
        var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
        date.setUTCFullYear(year, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]
    },
    // Local week-numbering year
    Y: {
      priority: 130,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        var valueCallback = /* @__PURE__ */ __name(function(year) {
          return {
            year,
            isTwoDigitYear: token === "YY"
          };
        }, "valueCallback");
        switch (token) {
          case "Y":
            return parseNDigits(4, string, valueCallback);
          case "Yo":
            return match4.ordinalNumber(string, {
              unit: "year",
              valueCallback
            });
          default:
            return parseNDigits(token.length, string, valueCallback);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value.isTwoDigitYear || value.year > 0;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, flags, value, options) {
        var currentYear = getUTCWeekYear(date, options);
        if (value.isTwoDigitYear) {
          var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
          date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
          date.setUTCHours(0, 0, 0, 0);
          return startOfUTCWeek(date, options);
        }
        var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
        date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }, "set"),
      incompatibleTokens: ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]
    },
    // ISO week-numbering year
    R: {
      priority: 130,
      parse: /* @__PURE__ */ __name(function(string, token, _match, _options) {
        if (token === "R") {
          return parseNDigitsSigned(4, string);
        }
        return parseNDigitsSigned(token.length, string);
      }, "parse"),
      set: /* @__PURE__ */ __name(function(_date, _flags, value, _options) {
        var firstWeekOfYear = /* @__PURE__ */ new Date(0);
        firstWeekOfYear.setUTCFullYear(value, 0, 4);
        firstWeekOfYear.setUTCHours(0, 0, 0, 0);
        return startOfUTCISOWeek(firstWeekOfYear);
      }, "set"),
      incompatibleTokens: ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
    },
    // Extended year
    u: {
      priority: 130,
      parse: /* @__PURE__ */ __name(function(string, token, _match, _options) {
        if (token === "u") {
          return parseNDigitsSigned(4, string);
        }
        return parseNDigitsSigned(token.length, string);
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCFullYear(value, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]
    },
    // Quarter
    Q: {
      priority: 120,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          // 1, 2, 3, 4
          case "Q":
          case "QQ":
            return parseNDigits(token.length, string);
          // 1st, 2nd, 3rd, 4th
          case "Qo":
            return match4.ordinalNumber(string, {
              unit: "quarter"
            });
          // Q1, Q2, Q3, Q4
          case "QQQ":
            return match4.quarter(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.quarter(string, {
              width: "narrow",
              context: "formatting"
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case "QQQQQ":
            return match4.quarter(string, {
              width: "narrow",
              context: "formatting"
            });
          // 1st quarter, 2nd quarter, ...
          case "QQQQ":
          default:
            return match4.quarter(string, {
              width: "wide",
              context: "formatting"
            }) || match4.quarter(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.quarter(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 4;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMonth((value - 1) * 3, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
    },
    // Stand-alone quarter
    q: {
      priority: 120,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          // 1, 2, 3, 4
          case "q":
          case "qq":
            return parseNDigits(token.length, string);
          // 1st, 2nd, 3rd, 4th
          case "qo":
            return match4.ordinalNumber(string, {
              unit: "quarter"
            });
          // Q1, Q2, Q3, Q4
          case "qqq":
            return match4.quarter(string, {
              width: "abbreviated",
              context: "standalone"
            }) || match4.quarter(string, {
              width: "narrow",
              context: "standalone"
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)
          case "qqqqq":
            return match4.quarter(string, {
              width: "narrow",
              context: "standalone"
            });
          // 1st quarter, 2nd quarter, ...
          case "qqqq":
          default:
            return match4.quarter(string, {
              width: "wide",
              context: "standalone"
            }) || match4.quarter(string, {
              width: "abbreviated",
              context: "standalone"
            }) || match4.quarter(string, {
              width: "narrow",
              context: "standalone"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 4;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMonth((value - 1) * 3, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
    },
    // Month
    M: {
      priority: 110,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        var valueCallback = /* @__PURE__ */ __name(function(value) {
          return value - 1;
        }, "valueCallback");
        switch (token) {
          // 1, 2, ..., 12
          case "M":
            return parseNumericPattern(numericPatterns.month, string, valueCallback);
          // 01, 02, ..., 12
          case "MM":
            return parseNDigits(2, string, valueCallback);
          // 1st, 2nd, ..., 12th
          case "Mo":
            return match4.ordinalNumber(string, {
              unit: "month",
              valueCallback
            });
          // Jan, Feb, ..., Dec
          case "MMM":
            return match4.month(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.month(string, {
              width: "narrow",
              context: "formatting"
            });
          // J, F, ..., D
          case "MMMMM":
            return match4.month(string, {
              width: "narrow",
              context: "formatting"
            });
          // January, February, ..., December
          case "MMMM":
          default:
            return match4.month(string, {
              width: "wide",
              context: "formatting"
            }) || match4.month(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.month(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 11;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMonth(value, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]
    },
    // Stand-alone month
    L: {
      priority: 110,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        var valueCallback = /* @__PURE__ */ __name(function(value) {
          return value - 1;
        }, "valueCallback");
        switch (token) {
          // 1, 2, ..., 12
          case "L":
            return parseNumericPattern(numericPatterns.month, string, valueCallback);
          // 01, 02, ..., 12
          case "LL":
            return parseNDigits(2, string, valueCallback);
          // 1st, 2nd, ..., 12th
          case "Lo":
            return match4.ordinalNumber(string, {
              unit: "month",
              valueCallback
            });
          // Jan, Feb, ..., Dec
          case "LLL":
            return match4.month(string, {
              width: "abbreviated",
              context: "standalone"
            }) || match4.month(string, {
              width: "narrow",
              context: "standalone"
            });
          // J, F, ..., D
          case "LLLLL":
            return match4.month(string, {
              width: "narrow",
              context: "standalone"
            });
          // January, February, ..., December
          case "LLLL":
          default:
            return match4.month(string, {
              width: "wide",
              context: "standalone"
            }) || match4.month(string, {
              width: "abbreviated",
              context: "standalone"
            }) || match4.month(string, {
              width: "narrow",
              context: "standalone"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 11;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMonth(value, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]
    },
    // Local week of year
    w: {
      priority: 100,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "w":
            return parseNumericPattern(numericPatterns.week, string);
          case "wo":
            return match4.ordinalNumber(string, {
              unit: "week"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 53;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, options) {
        return startOfUTCWeek(setUTCWeek(date, value, options), options);
      }, "set"),
      incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]
    },
    // ISO week of year
    I: {
      priority: 100,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "I":
            return parseNumericPattern(numericPatterns.week, string);
          case "Io":
            return match4.ordinalNumber(string, {
              unit: "week"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 53;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, options) {
        return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
      }, "set"),
      incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
    },
    // Day of the month
    d: {
      priority: 90,
      subPriority: 1,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "d":
            return parseNumericPattern(numericPatterns.date, string);
          case "do":
            return match4.ordinalNumber(string, {
              unit: "date"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(date, value, _options) {
        var year = date.getUTCFullYear();
        var isLeapYear3 = isLeapYearIndex(year);
        var month = date.getUTCMonth();
        if (isLeapYear3) {
          return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
        } else {
          return value >= 1 && value <= DAYS_IN_MONTH[month];
        }
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCDate(value);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]
    },
    // Day of year
    D: {
      priority: 90,
      subPriority: 1,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "D":
          case "DD":
            return parseNumericPattern(numericPatterns.dayOfYear, string);
          case "Do":
            return match4.ordinalNumber(string, {
              unit: "date"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(date, value, _options) {
        var year = date.getUTCFullYear();
        var isLeapYear3 = isLeapYearIndex(year);
        if (isLeapYear3) {
          return value >= 1 && value <= 366;
        } else {
          return value >= 1 && value <= 365;
        }
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMonth(0, value);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]
    },
    // Day of week
    E: {
      priority: 90,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          // Tue
          case "E":
          case "EE":
          case "EEE":
            return match4.day(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.day(string, {
              width: "short",
              context: "formatting"
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
          // T
          case "EEEEE":
            return match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
          // Tu
          case "EEEEEE":
            return match4.day(string, {
              width: "short",
              context: "formatting"
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
          // Tuesday
          case "EEEE":
          default:
            return match4.day(string, {
              width: "wide",
              context: "formatting"
            }) || match4.day(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.day(string, {
              width: "short",
              context: "formatting"
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 6;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, options) {
        date = setUTCDay(date, value, options);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["D", "i", "e", "c", "t", "T"]
    },
    // Local day of week
    e: {
      priority: 90,
      parse: /* @__PURE__ */ __name(function(string, token, match4, options) {
        var valueCallback = /* @__PURE__ */ __name(function(value) {
          var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
          return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
        }, "valueCallback");
        switch (token) {
          // 3
          case "e":
          case "ee":
            return parseNDigits(token.length, string, valueCallback);
          // 3rd
          case "eo":
            return match4.ordinalNumber(string, {
              unit: "day",
              valueCallback
            });
          // Tue
          case "eee":
            return match4.day(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.day(string, {
              width: "short",
              context: "formatting"
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
          // T
          case "eeeee":
            return match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
          // Tu
          case "eeeeee":
            return match4.day(string, {
              width: "short",
              context: "formatting"
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
          // Tuesday
          case "eeee":
          default:
            return match4.day(string, {
              width: "wide",
              context: "formatting"
            }) || match4.day(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.day(string, {
              width: "short",
              context: "formatting"
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 6;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, options) {
        date = setUTCDay(date, value, options);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]
    },
    // Stand-alone local day of week
    c: {
      priority: 90,
      parse: /* @__PURE__ */ __name(function(string, token, match4, options) {
        var valueCallback = /* @__PURE__ */ __name(function(value) {
          var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
          return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
        }, "valueCallback");
        switch (token) {
          // 3
          case "c":
          case "cc":
            return parseNDigits(token.length, string, valueCallback);
          // 3rd
          case "co":
            return match4.ordinalNumber(string, {
              unit: "day",
              valueCallback
            });
          // Tue
          case "ccc":
            return match4.day(string, {
              width: "abbreviated",
              context: "standalone"
            }) || match4.day(string, {
              width: "short",
              context: "standalone"
            }) || match4.day(string, {
              width: "narrow",
              context: "standalone"
            });
          // T
          case "ccccc":
            return match4.day(string, {
              width: "narrow",
              context: "standalone"
            });
          // Tu
          case "cccccc":
            return match4.day(string, {
              width: "short",
              context: "standalone"
            }) || match4.day(string, {
              width: "narrow",
              context: "standalone"
            });
          // Tuesday
          case "cccc":
          default:
            return match4.day(string, {
              width: "wide",
              context: "standalone"
            }) || match4.day(string, {
              width: "abbreviated",
              context: "standalone"
            }) || match4.day(string, {
              width: "short",
              context: "standalone"
            }) || match4.day(string, {
              width: "narrow",
              context: "standalone"
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 6;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, options) {
        date = setUTCDay(date, value, options);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]
    },
    // ISO day of week
    i: {
      priority: 90,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        var valueCallback = /* @__PURE__ */ __name(function(value) {
          if (value === 0) {
            return 7;
          }
          return value;
        }, "valueCallback");
        switch (token) {
          // 2
          case "i":
          case "ii":
            return parseNDigits(token.length, string);
          // 2nd
          case "io":
            return match4.ordinalNumber(string, {
              unit: "day"
            });
          // Tue
          case "iii":
            return match4.day(string, {
              width: "abbreviated",
              context: "formatting",
              valueCallback
            }) || match4.day(string, {
              width: "short",
              context: "formatting",
              valueCallback
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting",
              valueCallback
            });
          // T
          case "iiiii":
            return match4.day(string, {
              width: "narrow",
              context: "formatting",
              valueCallback
            });
          // Tu
          case "iiiiii":
            return match4.day(string, {
              width: "short",
              context: "formatting",
              valueCallback
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting",
              valueCallback
            });
          // Tuesday
          case "iiii":
          default:
            return match4.day(string, {
              width: "wide",
              context: "formatting",
              valueCallback
            }) || match4.day(string, {
              width: "abbreviated",
              context: "formatting",
              valueCallback
            }) || match4.day(string, {
              width: "short",
              context: "formatting",
              valueCallback
            }) || match4.day(string, {
              width: "narrow",
              context: "formatting",
              valueCallback
            });
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 7;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, options) {
        date = setUTCISODay(date, value, options);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]
    },
    // AM or PM
    a: {
      priority: 80,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "a":
          case "aa":
          case "aaa":
            return match4.dayPeriod(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaaa":
            return match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
          case "aaaa":
          default:
            return match4.dayPeriod(string, {
              width: "wide",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["b", "B", "H", "K", "k", "t", "T"]
    },
    // AM, PM, midnight
    b: {
      priority: 80,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "b":
          case "bb":
          case "bbb":
            return match4.dayPeriod(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbbb":
            return match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
          case "bbbb":
          default:
            return match4.dayPeriod(string, {
              width: "wide",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["a", "B", "H", "K", "k", "t", "T"]
    },
    // in the morning, in the afternoon, in the evening, at night
    B: {
      priority: 80,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "B":
          case "BB":
          case "BBB":
            return match4.dayPeriod(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBBB":
            return match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
          case "BBBB":
          default:
            return match4.dayPeriod(string, {
              width: "wide",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "abbreviated",
              context: "formatting"
            }) || match4.dayPeriod(string, {
              width: "narrow",
              context: "formatting"
            });
        }
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["a", "b", "t", "T"]
    },
    // Hour [1-12]
    h: {
      priority: 70,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "h":
            return parseNumericPattern(numericPatterns.hour12h, string);
          case "ho":
            return match4.ordinalNumber(string, {
              unit: "hour"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 12;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        var isPM = date.getUTCHours() >= 12;
        if (isPM && value < 12) {
          date.setUTCHours(value + 12, 0, 0, 0);
        } else if (!isPM && value === 12) {
          date.setUTCHours(0, 0, 0, 0);
        } else {
          date.setUTCHours(value, 0, 0, 0);
        }
        return date;
      }, "set"),
      incompatibleTokens: ["H", "K", "k", "t", "T"]
    },
    // Hour [0-23]
    H: {
      priority: 70,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "H":
            return parseNumericPattern(numericPatterns.hour23h, string);
          case "Ho":
            return match4.ordinalNumber(string, {
              unit: "hour"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 23;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCHours(value, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["a", "b", "h", "K", "k", "t", "T"]
    },
    // Hour [0-11]
    K: {
      priority: 70,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "K":
            return parseNumericPattern(numericPatterns.hour11h, string);
          case "Ko":
            return match4.ordinalNumber(string, {
              unit: "hour"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 11;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        var isPM = date.getUTCHours() >= 12;
        if (isPM && value < 12) {
          date.setUTCHours(value + 12, 0, 0, 0);
        } else {
          date.setUTCHours(value, 0, 0, 0);
        }
        return date;
      }, "set"),
      incompatibleTokens: ["a", "b", "h", "H", "k", "t", "T"]
    },
    // Hour [1-24]
    k: {
      priority: 70,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "k":
            return parseNumericPattern(numericPatterns.hour24h, string);
          case "ko":
            return match4.ordinalNumber(string, {
              unit: "hour"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 1 && value <= 24;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        var hours = value <= 24 ? value % 24 : value;
        date.setUTCHours(hours, 0, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["a", "b", "h", "H", "K", "t", "T"]
    },
    // Minute
    m: {
      priority: 60,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "m":
            return parseNumericPattern(numericPatterns.minute, string);
          case "mo":
            return match4.ordinalNumber(string, {
              unit: "minute"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 59;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMinutes(value, 0, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["t", "T"]
    },
    // Second
    s: {
      priority: 50,
      parse: /* @__PURE__ */ __name(function(string, token, match4, _options) {
        switch (token) {
          case "s":
            return parseNumericPattern(numericPatterns.second, string);
          case "so":
            return match4.ordinalNumber(string, {
              unit: "second"
            });
          default:
            return parseNDigits(token.length, string);
        }
      }, "parse"),
      validate: /* @__PURE__ */ __name(function(_date, value, _options) {
        return value >= 0 && value <= 59;
      }, "validate"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCSeconds(value, 0);
        return date;
      }, "set"),
      incompatibleTokens: ["t", "T"]
    },
    // Fraction of second
    S: {
      priority: 30,
      parse: /* @__PURE__ */ __name(function(string, token, _match, _options) {
        var valueCallback = /* @__PURE__ */ __name(function(value) {
          return Math.floor(value * Math.pow(10, -token.length + 3));
        }, "valueCallback");
        return parseNDigits(token.length, string, valueCallback);
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, _flags, value, _options) {
        date.setUTCMilliseconds(value);
        return date;
      }, "set"),
      incompatibleTokens: ["t", "T"]
    },
    // Timezone (ISO-8601. +00:00 is `'Z'`)
    X: {
      priority: 10,
      parse: /* @__PURE__ */ __name(function(string, token, _match, _options) {
        switch (token) {
          case "X":
            return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
          case "XX":
            return parseTimezonePattern(timezonePatterns.basic, string);
          case "XXXX":
            return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
          case "XXXXX":
            return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
          case "XXX":
          default:
            return parseTimezonePattern(timezonePatterns.extended, string);
        }
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, flags, value, _options) {
        if (flags.timestampIsSet) {
          return date;
        }
        return new Date(date.getTime() - value);
      }, "set"),
      incompatibleTokens: ["t", "T", "x"]
    },
    // Timezone (ISO-8601)
    x: {
      priority: 10,
      parse: /* @__PURE__ */ __name(function(string, token, _match, _options) {
        switch (token) {
          case "x":
            return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
          case "xx":
            return parseTimezonePattern(timezonePatterns.basic, string);
          case "xxxx":
            return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
          case "xxxxx":
            return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
          case "xxx":
          default:
            return parseTimezonePattern(timezonePatterns.extended, string);
        }
      }, "parse"),
      set: /* @__PURE__ */ __name(function(date, flags, value, _options) {
        if (flags.timestampIsSet) {
          return date;
        }
        return new Date(date.getTime() - value);
      }, "set"),
      incompatibleTokens: ["t", "T", "X"]
    },
    // Seconds timestamp
    t: {
      priority: 40,
      parse: /* @__PURE__ */ __name(function(string, _token, _match, _options) {
        return parseAnyDigitsSigned(string);
      }, "parse"),
      set: /* @__PURE__ */ __name(function(_date, _flags, value, _options) {
        return [new Date(value * 1e3), {
          timestampIsSet: true
        }];
      }, "set"),
      incompatibleTokens: "*"
    },
    // Milliseconds timestamp
    T: {
      priority: 20,
      parse: /* @__PURE__ */ __name(function(string, _token, _match, _options) {
        return parseAnyDigitsSigned(string);
      }, "parse"),
      set: /* @__PURE__ */ __name(function(_date, _flags, value, _options) {
        return [new Date(value), {
          timestampIsSet: true
        }];
      }, "set"),
      incompatibleTokens: "*"
    }
  };
  var parsers_default = parsers;

  // ../../contrib/hdbt/node_modules/date-fns/esm/parse/index.js
  var TIMEZONE_UNIT_PRIORITY = 10;
  var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
  var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var escapedStringRegExp2 = /^'([^]*?)'?$/;
  var doubleQuoteRegExp2 = /''/g;
  var notWhitespaceRegExp = /\S/;
  var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
  function parse4(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
    requiredArgs(3, arguments);
    var dateString = String(dirtyDateString);
    var formatString = String(dirtyFormatString);
    var options = dirtyOptions || {};
    var locale2 = options.locale || en_US_default;
    if (!locale2.match) {
      throw new RangeError("locale must contain match property");
    }
    var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
    var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
    var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
      throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    }
    var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
    var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
    var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
      throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    }
    if (formatString === "") {
      if (dateString === "") {
        return toDate(dirtyReferenceDate);
      } else {
        return /* @__PURE__ */ new Date(NaN);
      }
    }
    var subFnOptions = {
      firstWeekContainsDate,
      weekStartsOn,
      locale: locale2
      // If timezone isn't specified, it will be set to the system timezone
    };
    var setters = [{
      priority: TIMEZONE_UNIT_PRIORITY,
      subPriority: -1,
      set: dateToSystemTimezone,
      index: 0
    }];
    var i12;
    var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
      var firstCharacter2 = substring[0];
      if (firstCharacter2 === "p" || firstCharacter2 === "P") {
        var longFormatter = longFormatters_default[firstCharacter2];
        return longFormatter(substring, locale2.formatLong, subFnOptions);
      }
      return substring;
    }).join("").match(formattingTokensRegExp2);
    var usedTokens = [];
    for (i12 = 0; i12 < tokens.length; i12++) {
      var token = tokens[i12];
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
        throwProtectedError(token, formatString, dirtyDateString);
      }
      var firstCharacter = token[0];
      var parser = parsers_default[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = void 0;
          for (var _i = 0; _i < usedTokens.length; _i++) {
            var usedToken = usedTokens[_i].token;
            if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
              incompatibleToken = usedTokens[_i];
              break;
            }
          }
          if (incompatibleToken) {
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length) {
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        }
        usedTokens.push({
          token: firstCharacter,
          fullToken: token
        });
        var parseResult = parser.parse(dateString, token, locale2.match, subFnOptions);
        if (!parseResult) {
          return /* @__PURE__ */ new Date(NaN);
        }
        setters.push({
          priority: parser.priority,
          subPriority: parser.subPriority || 0,
          set: parser.set,
          validate: parser.validate,
          value: parseResult.value,
          index: setters.length
        });
        dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        }
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString2(token);
        }
        if (dateString.indexOf(token) === 0) {
          dateString = dateString.slice(token.length);
        } else {
          return /* @__PURE__ */ new Date(NaN);
        }
      }
    }
    if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    var uniquePrioritySetters = setters.map(function(setter2) {
      return setter2.priority;
    }).sort(function(a21, b6) {
      return b6 - a21;
    }).filter(function(priority3, index, array) {
      return array.indexOf(priority3) === index;
    }).map(function(priority3) {
      return setters.filter(function(setter2) {
        return setter2.priority === priority3;
      }).sort(function(a21, b6) {
        return b6.subPriority - a21.subPriority;
      });
    }).map(function(setterArray) {
      return setterArray[0];
    });
    var date = toDate(dirtyReferenceDate);
    if (isNaN(date)) {
      return /* @__PURE__ */ new Date(NaN);
    }
    var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
    var flags = {};
    for (i12 = 0; i12 < uniquePrioritySetters.length; i12++) {
      var setter = uniquePrioritySetters[i12];
      if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      var result = setter.set(utcDate, flags, setter.value, subFnOptions);
      if (result[0]) {
        utcDate = result[0];
        assign2(flags, result[1]);
      } else {
        utcDate = result;
      }
    }
    return utcDate;
  }
  __name(parse4, "parse");
  function dateToSystemTimezone(date, flags) {
    if (flags.timestampIsSet) {
      return date;
    }
    var convertedDate = /* @__PURE__ */ new Date(0);
    convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
    convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
    return convertedDate;
  }
  __name(dateToSystemTimezone, "dateToSystemTimezone");
  function cleanEscapedString2(input) {
    return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
  }
  __name(cleanEscapedString2, "cleanEscapedString");

  // ../../contrib/hdbt/node_modules/date-fns/esm/subYears/index.js
  function subYears(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addYears(dirtyDate, -amount);
  }
  __name(subYears, "subYears");

  // ../../contrib/hdbt/node_modules/hds-react/DateInput-1fa08aca.js
  var import_react50 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/hds-react/TextInput-5c74ea95.js
  var import_react49 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/hds-react/InputWrapper-3554a385.js
  var import_react48 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/hds-react/FieldLabel-9fe7097e.js
  var import_react47 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/hds-react/RequiredIndicator-e4ba65c1.js
  var import_react46 = __toESM(require_react());
  var i9 = "RequiredIndicator-module_indicator__Pt7GX text-input_hds-text-input__required__2K-Bs";
  e11(`@keyframes text-input_fadeIn__2iVIH{0%{opacity:0}to{opacity:1}}.text-input_hds-text-input__2YbWJ{--border-width:2px;--outline-width:3px;--outline-offset-readonly:4px;--input-height:56px;--textarea-height:149px;--icon-size:var(--spacing-m);--icon-color:var(--color-black);--helper-color-default:var(--color-black-60);--helper-color-invalid:var(--color-black);--helper-background-color-invalid:var(--color-error-light);--helper-icon-color-invalid:var(--color-error);--helper-color-success:var(--color-black);--helper-background-color-success:var(--color-success-light);--helper-icon-color-success:var(--color-success);--helper-color-info:var(--color-black);--helper-background-color-info:var(--color-info-light);--helper-icon-color-info:var(--color-info);--input-background-default:var(--color-white);--input-background-disabled:var(--color-black-10);--input-border-color-default:var(--color-black-50);--input-border-color-hover:var(--color-black-90);--input-border-color-focus:var(--color-black-90);--input-border-color-invalid:var(--color-error);--input-border-color-disabled:var(--color-black-10);--input-border-color-success:var(--color-success);--input-color-default:var(--color-black-90);--input-color-disabled:var(--color-black-40);--label-color-default:var(--color-black-90);--label-color-invalid:var(--color-black-90);--placeholder-color:var(--color-black-60)}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu{-webkit-appearance:none;background-color:var(--input-background-default);border:var(--border-width) solid var(--input-border-color-default);border-radius:0;box-sizing:border-box;color:var(--input-color-default);font-family:inherit;font-size:1.125em;height:var(--input-height);line-height:normal;margin:0;padding:0 var(--spacing-s);width:100%;will-change:transform,box-shadow}.text-input_hds-text-input__2YbWJ:not([data-hds-textinput-filled]) .text-input_hds-text-input__button-clear__wx6Bm,.text-input_hds-text-input__input-clear__1vpab::-webkit-search-cancel-button{display:none}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__button-clear__wx6Bm>*{pointer-events:none}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu:hover{border-color:var(--input-border-color-hover);transition:border-color 85ms ease-out}.text-input_hds-text-input__input-wrapper__3qg76:focus-within .text-input_hds-text-input__input__BIkQu{border-color:var(--input-border-color-focus);outline:none}.text-input_hds-text-input__2YbWJ.text-input_hds-text-input--invalid__25oHc .text-input_hds-text-input__input__BIkQu{border-color:var(--input-border-color-invalid)}.text-input_hds-text-input__2YbWJ.text-input_hds-text-input--success__28-SV .text-input_hds-text-input__input__BIkQu{border-color:var(--input-border-color-success)}.text-input_hds-text-input__input-wrapper__3qg76:focus-within .text-input_hds-text-input__input__BIkQu:not([readonly]){box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.text-input_hds-text-input__label__15SYz{color:var(--label-color-default);display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.text-input_hds-text-input--invalid__25oHc .text-input_hds-text-input__label__15SYz{color:var(--label-color-invalid);transition:color 85ms linear}.text-input_hds-text-input__required__2K-Bs{display:inline-block;font-size:var(--fontsize-body-xl);line-height:1;margin-left:var(--spacing-2-xs);transform:translateY(var(--spacing-3-xs))}.text-input_hds-text-input__input-wrapper__3qg76{display:flex;position:relative}.text-input_hds-text-input__2YbWJ textarea.text-input_hds-text-input__input__BIkQu{font-family:inherit;height:var(--textarea-height);margin:0;min-height:var(--input-height);overflow:auto;padding:var(--spacing-s);resize:vertical}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu::-ms-reveal{display:none}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu::-moz-placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu::placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__helper-text__gNPue{color:var(--helper-color-default);display:block;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-3-xs);white-space:pre-line}.text-input_hds-text-input__error-text__2Qjmg{background-color:var(--helper-background-color-invalid);border-left:8px solid var(--color-error);color:var(--helper-color-invalid);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);white-space:pre-line}.text-input_hds-text-input__error-text__2Qjmg:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__error-text__2Qjmg:before{animation:text-input_fadeIn__2iVIH 85ms ease-out;background:var(--helper-icon-color-invalid);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__success-text__274NH{background-color:var(--helper-background-color-success);border-left:8px solid var(--color-success);color:var(--helper-color-success);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative;white-space:pre-wrap}.text-input_hds-text-input__success-text__274NH:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__success-text__274NH:before{animation:text-input_fadeIn__2iVIH 85ms ease-out;background:var(--helper-icon-color-success);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__info-text__1hF9o{background-color:var(--helper-background-color-info);border-left:8px solid var(--color-info);color:var(--helper-color-info);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.text-input_hds-text-input__info-text__1hF9o:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__info-text__1hF9o:before{animation:text-input_fadeIn__2iVIH 85ms ease-out;background:var(--helper-icon-color-info);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu[disabled]{background-color:var(--input-background-disabled);border-color:var(--input-border-color-disabled);color:var(--input-color-disabled);cursor:not-allowed}.text-input_hds-text-input__2YbWJ .text-input_hds-text-input__input__BIkQu[readonly]{background-color:transparent;border:0;color:var(--input-color-default);outline-offset:var(--outline-offset-readonly);padding:0;-webkit-text-fill-color:var(--input-color-default);transform:translateZ(0);transition:85ms ease-out;transition-property:outline,transform}.text-input_hds-text-input__input-wrapper__3qg76:focus-within input.text-input_hds-text-input__input__BIkQu[readonly]{height:calc(var(--input-height) - 2 * var(--outline-offset-readonly));margin:var(--outline-offset-readonly) 0;outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__input-wrapper__3qg76:focus-within textarea.text-input_hds-text-input__input__BIkQu[readonly]{outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__buttons__1eV1P{align-items:center;bottom:0;display:flex;font-size:1rem;justify-content:center;margin-right:calc(var(--spacing-s) - var(--spacing-xs) / 2);position:absolute;right:0;top:0}.text-input_hds-text-input__button__1JeYJ{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;color:var(--icon-color);cursor:pointer;display:flex;font:inherit;outline:none;padding:var(--spacing-xs) calc(var(--spacing-xs) / 2)}.text-input_hds-text-input__button__1JeYJ:focus{outline:var(--outline-width) solid var(--color-focus-outline)}`);
  var r24 = /* @__PURE__ */ __name(({ className: e18, style: r30 }) => import_react46.default.createElement("span", { className: r17(i9, e18), style: r30 }, "*"), "r");

  // ../../contrib/hdbt/node_modules/hds-react/FieldLabel-9fe7097e.js
  var i10 = "FieldLabel-module_hidden__3UWxI";
  var r25 = "FieldLabel-module_label__1zrXK";
  var d13 = "FieldLabel-module_tooltipButton__1My3f";
  e11(".FieldLabel-module_hidden__3UWxI{border:0;clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.FieldLabel-module_label__1zrXK{color:var(--label-color-default,var(--color-black-90));display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.FieldLabel-module_tooltipButton__1My3f{position:absolute;right:0;top:0}");
  var n16 = /* @__PURE__ */ __name((l19) => {
    var { hidden: n21, id: s21, inputId: p5, isAriaLabelledBy: b6, label: m6, required: c6, tooltipLabel: u10, tooltipButtonLabel: _7, tooltipText: f2, tooltip: L2 } = l19, h5 = o10(l19, ["hidden", "id", "inputId", "isAriaLabelledBy", "label", "required", "tooltipLabel", "tooltipButtonLabel", "tooltipText", "tooltip"]);
    return import_react47.default.createElement(import_react47.default.Fragment, null, import_react47.default.createElement("label", Object.assign({ id: s21 }, (!b6 || !s21) && { htmlFor: p5 }, { className: `${r25} ${n21 ? i10 : ""}` }, h5), m6, c6 && import_react47.default.createElement(r24, null)), L2 && import_react47.default.createElement(b4, Object.assign({}, L2.props, { buttonClassName: d13 })), f2 && import_react47.default.createElement(b4, { buttonClassName: d13, tooltipLabel: u10, buttonLabel: _7 }, f2));
  }, "n");

  // ../../contrib/hdbt/node_modules/hds-react/InputWrapper-3554a385.js
  var r26 = { root: "TextInput-module_root__2CMNr text-input_hds-text-input__2LODq", invalid: "TextInput-module_invalid__2iYo2 text-input_hds-text-input--invalid__1UfKC", inputWrapper: "TextInput-module_inputWrapper__3Rvel text-input_hds-text-input__input-wrapper__1OqYG", input: "TextInput-module_input__1BlHi text-input_hds-text-input__input__GJm5C", hasButton: "TextInput-module_hasButton__2KCM1", hasClearButton: "TextInput-module_hasClearButton__3-tBe text-input_hds-text-input__input-clear__17qr1", clearButton: "TextInput-module_clearButton__bfCLI text-input_hds-text-input__button-clear__2ED7z", errorText: "TextInput-module_errorText__3pizm text-input_hds-text-input__error-text__1GLYk", helperText: "TextInput-module_helperText__2dLR6 text-input_hds-text-input__helper-text__3V2KM", invalidText: "TextInput-module_invalidText__1w4sm text-input_hds-text-input__helper-text__3V2KM", successText: "TextInput-module_successText__2NMCP text-input_hds-text-input__success-text__3EOiy", infoText: "TextInput-module_infoText__zHOGs text-input_hds-text-input__info-text__3bqzy", success: "TextInput-module_success__1kDOm text-input_hds-text-input--success__3dm2J", readOnly: "TextInput-module_readOnly__j615N undefined", buttonWrapper: "TextInput-module_buttonWrapper___filA text-input_hds-text-input__buttons__1RMzT", button: "TextInput-module_button__1ySMX text-input_hds-text-input__button__1Fh0I" };
  e11(`@keyframes text-input_fadeIn__2IDZ8{0%{opacity:0}to{opacity:1}}.text-input_hds-text-input__2LODq{--border-width:2px;--outline-width:3px;--outline-offset-readonly:4px;--input-height:56px;--textarea-height:149px;--icon-size:var(--spacing-m);--icon-color:var(--color-black);--helper-color-default:var(--color-black-60);--helper-color-invalid:var(--color-black);--helper-background-color-invalid:var(--color-error-light);--helper-icon-color-invalid:var(--color-error);--helper-color-success:var(--color-black);--helper-background-color-success:var(--color-success-light);--helper-icon-color-success:var(--color-success);--helper-color-info:var(--color-black);--helper-background-color-info:var(--color-info-light);--helper-icon-color-info:var(--color-info);--input-background-default:var(--color-white);--input-background-disabled:var(--color-black-10);--input-border-color-default:var(--color-black-50);--input-border-color-hover:var(--color-black-90);--input-border-color-focus:var(--color-black-90);--input-border-color-invalid:var(--color-error);--input-border-color-disabled:var(--color-black-10);--input-border-color-success:var(--color-success);--input-color-default:var(--color-black-90);--input-color-disabled:var(--color-black-40);--label-color-default:var(--color-black-90);--label-color-invalid:var(--color-black-90);--placeholder-color:var(--color-black-60)}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C{-webkit-appearance:none;background-color:var(--input-background-default);border:var(--border-width) solid var(--input-border-color-default);border-radius:0;box-sizing:border-box;color:var(--input-color-default);font-family:inherit;font-size:1.125em;height:var(--input-height);line-height:normal;margin:0;padding:0 var(--spacing-s);width:100%;will-change:transform,box-shadow}.text-input_hds-text-input__2LODq:not([data-hds-textinput-filled]) .text-input_hds-text-input__button-clear__2ED7z,.text-input_hds-text-input__input-clear__17qr1::-webkit-search-cancel-button{display:none}.text-input_hds-text-input__2LODq .text-input_hds-text-input__button-clear__2ED7z>*{pointer-events:none}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C:hover{border-color:var(--input-border-color-hover);transition:border-color 85ms ease-out}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within .text-input_hds-text-input__input__GJm5C{border-color:var(--input-border-color-focus);outline:none}.text-input_hds-text-input__2LODq.text-input_hds-text-input--invalid__1UfKC .text-input_hds-text-input__input__GJm5C{border-color:var(--input-border-color-invalid)}.text-input_hds-text-input__2LODq.text-input_hds-text-input--success__3dm2J .text-input_hds-text-input__input__GJm5C{border-color:var(--input-border-color-success)}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within .text-input_hds-text-input__input__GJm5C:not([readonly]){box-shadow:0 0 0 var(--outline-width) var(--color-focus-outline);transform:translateZ(0);transition:85ms ease-out;transition-property:box-shadow,transform}.text-input_hds-text-input__label__15F2V{color:var(--label-color-default);display:block;font-size:var(--fontsize-body-m);font-weight:500;margin-bottom:var(--spacing-3-xs)}.text-input_hds-text-input--invalid__1UfKC .text-input_hds-text-input__label__15F2V{color:var(--label-color-invalid);transition:color 85ms linear}.text-input_hds-text-input__required__z3Hm0{display:inline-block;font-size:var(--fontsize-body-xl);line-height:1;margin-left:var(--spacing-2-xs);transform:translateY(var(--spacing-3-xs))}.text-input_hds-text-input__input-wrapper__1OqYG{display:flex;position:relative}.text-input_hds-text-input__2LODq textarea.text-input_hds-text-input__input__GJm5C{font-family:inherit;height:var(--textarea-height);margin:0;min-height:var(--input-height);overflow:auto;padding:var(--spacing-s);resize:vertical}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C::-ms-reveal{display:none}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C::-moz-placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C::placeholder{color:var(--placeholder-color);opacity:1}.text-input_hds-text-input__helper-text__3V2KM{color:var(--helper-color-default);display:block;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-3-xs);white-space:pre-line}.text-input_hds-text-input__error-text__1GLYk{background-color:var(--helper-background-color-invalid);border-left:8px solid var(--color-error);color:var(--helper-color-invalid);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);white-space:pre-line}.text-input_hds-text-input__error-text__1GLYk:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__error-text__1GLYk:before{animation:text-input_fadeIn__2IDZ8 85ms ease-out;background:var(--helper-icon-color-invalid);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__success-text__3EOiy{background-color:var(--helper-background-color-success);border-left:8px solid var(--color-success);color:var(--helper-color-success);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative;white-space:pre-wrap}.text-input_hds-text-input__success-text__3EOiy:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__success-text__3EOiy:before{animation:text-input_fadeIn__2IDZ8 85ms ease-out;background:var(--helper-icon-color-success);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__info-text__3bqzy{background-color:var(--helper-background-color-info);border-left:8px solid var(--color-info);color:var(--helper-color-info);display:flex;font-size:var(--fontsize-body-m);line-height:var(--lineheight-l);margin-top:var(--spacing-2-xs);padding:var(--spacing-2-xs);position:relative}.text-input_hds-text-input__info-text__3bqzy:not(:last-child){margin-bottom:var(--spacing-2-xs)}.text-input_hds-text-input__info-text__3bqzy:before{animation:text-input_fadeIn__2IDZ8 85ms ease-out;background:var(--helper-icon-color-info);content:"";display:inline-block;flex-shrink:0;height:var(--icon-size);margin-right:var(--spacing-2-xs);-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cpath d='M0 0h24v24H0z'/%3E%3Cpath fill='currentColor' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z'/%3E%3C/g%3E%3C/svg%3E");pointer-events:none;width:var(--icon-size)}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C[disabled]{background-color:var(--input-background-disabled);border-color:var(--input-border-color-disabled);color:var(--input-color-disabled);cursor:not-allowed}.text-input_hds-text-input__2LODq .text-input_hds-text-input__input__GJm5C[readonly]{background-color:transparent;border:0;color:var(--input-color-default);outline-offset:var(--outline-offset-readonly);padding:0;-webkit-text-fill-color:var(--input-color-default);transform:translateZ(0);transition:85ms ease-out;transition-property:outline,transform}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within input.text-input_hds-text-input__input__GJm5C[readonly]{height:calc(var(--input-height) - 2 * var(--outline-offset-readonly));margin:var(--outline-offset-readonly) 0;outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__input-wrapper__1OqYG:focus-within textarea.text-input_hds-text-input__input__GJm5C[readonly]{outline:var(--color-focus-outline) solid var(--outline-width)}.text-input_hds-text-input__buttons__1RMzT{align-items:center;bottom:0;display:flex;font-size:1rem;justify-content:center;margin-right:calc(var(--spacing-s) - var(--spacing-xs) / 2);position:absolute;right:0;top:0}.text-input_hds-text-input__button__1Fh0I{-webkit-appearance:none;-moz-appearance:none;appearance:none;background:none;border:none;color:var(--icon-color);cursor:pointer;display:flex;font:inherit;outline:none;padding:var(--spacing-xs) calc(var(--spacing-xs) / 2)}.text-input_hds-text-input__button__1Fh0I:focus{outline:var(--outline-width) solid var(--color-focus-outline)}.TextInput-module_root__2CMNr{position:relative;&.TextInput-module_invalid__2iYo2{label{color:var(--label-color-invalid)}}}.TextInput-module_input__1BlHi.TextInput-module_hasButton__2KCM1,.TextInput-module_input__1BlHi.TextInput-module_hasClearButton__3-tBe{padding-right:calc(2 * var(--spacing-s) + 1.5rem)}.TextInput-module_input__1BlHi.TextInput-module_hasButton__2KCM1.TextInput-module_hasClearButton__3-tBe{padding-right:calc(4 * var(--spacing-s) + 1.5rem)}.TextInput-module_button__1ySMX:disabled{cursor:not-allowed}.TextInput-module_button__1ySMX:focus{outline:var(--outline-width) solid var(--color-focus-outline)}`);
  var l15 = import_react48.default.forwardRef((i12, l19) => {
    var { children: a21, className: s21 = "", errorText: u10, helperText: p5, hideLabel: _7 = false, id: d16, invalid: c6 = false, isAriaLabelledBy: x = false, label: h5, labelId: v4, onBlur: m6, required: g4 = false, style: b6, successText: f2, infoText: w, tooltipLabel: C2, tooltipText: k, tooltipButtonLabel: y2, tooltip: z3 } = i12, T = o10(i12, ["children", "className", "errorText", "helperText", "hideLabel", "id", "invalid", "isAriaLabelledBy", "label", "labelId", "onBlur", "required", "style", "successText", "infoText", "tooltipLabel", "tooltipText", "tooltipButtonLabel", "tooltip"]);
    const E2 = { className: r17(r26.root, c6 && r26.invalid, f2 && r26.success, s21), onBlur: m6, style: b6 };
    return import_react48.default.createElement("div", Object.assign({}, E2, T, { ref: l19 }), h5 && import_react48.default.createElement(n16, { id: v4, inputId: d16, isAriaLabelledBy: x, hidden: _7, label: h5, required: g4, tooltipLabel: C2, tooltipButtonLabel: y2, tooltipText: k, tooltip: z3 }), import_react48.default.createElement("div", { className: r17(r26.inputWrapper) }, a21), u10 && import_react48.default.createElement("div", { className: r26.errorText, id: `${d16}-error` }, u10), f2 && import_react48.default.createElement("div", { className: r26.successText, id: `${d16}-success` }, f2), w && import_react48.default.createElement("div", { className: r26.infoText, id: `${d16}-info` }, w), p5 && import_react48.default.createElement("div", { className: r26.helperText, id: `${d16}-helper` }, p5));
  });

  // ../../contrib/hdbt/node_modules/hds-react/TextInput-5c74ea95.js
  var n17 = import_react49.default.forwardRef((n21, s21) => {
    var { buttonAriaLabel: u10, buttonIcon: c6, children: b6, className: d16 = "", clearButtonAriaLabel: p5 = "Clear", clearButton: m6 = false, defaultValue: f2, disabled: x = false, errorText: h5, helperText: T, hideLabel: B2, id: L2, infoText: y2, invalid: C2, label: v4, labelId: I2, onButtonClick: g4, onChange: j2 = /* @__PURE__ */ __name(() => null, "j"), required: N3, style: A2, successText: E2, tooltipButtonLabel: q3, tooltipLabel: k, tooltipText: V3, tooltip: O2, type: R3 = "text" } = n21, W3 = o10(n21, ["buttonAriaLabel", "buttonIcon", "children", "className", "clearButtonAriaLabel", "clearButton", "defaultValue", "disabled", "errorText", "helperText", "hideLabel", "id", "infoText", "invalid", "label", "labelId", "onButtonClick", "onChange", "required", "style", "successText", "tooltipButtonLabel", "tooltipLabel", "tooltipText", "tooltip", "type"]);
    const w = { className: d16, errorText: h5, helperText: T, hideLabel: B2, id: L2, infoText: y2, invalid: C2, label: v4, labelId: I2, required: N3, style: A2, successText: E2, tooltipButtonLabel: q3, tooltipLabel: k, tooltipText: V3, tooltip: O2 }, D = import_react49.default.useRef(null), S2 = r21(L2, T, h5, E2, y2), _7 = Boolean(c6 && g4), z3 = Boolean(m6 || "search" === R3), F3 = /* @__PURE__ */ __name((e18) => {
      if (j2(e18), !z3) return;
      const t21 = e18.target.value;
      z3 && t21.length > 0 ? D.current.setAttribute("data-hds-textinput-filled", "true") : D.current.removeAttribute("data-hds-textinput-filled");
    }, "F");
    return (null == f2 ? void 0 : f2.length) > 0 && z3 && (w["data-hds-textinput-filled"] = true), import_react49.default.createElement(l15, Object.assign({}, w, { ref: D }), import_react49.default.createElement("input", Object.assign({ "aria-describedby": S2, className: r17(r26.input, _7 && r26.hasButton, z3 && r26.hasClearButton), defaultValue: f2, disabled: x, id: L2, onChange: F3, ref: s21, required: N3, type: R3 }, W3)), (_7 || z3) && import_react49.default.createElement("div", { className: r26.buttonWrapper }, z3 && import_react49.default.createElement("button", { "aria-label": p5, className: r17(r26.button, r26.clearButton), disabled: x, onClick: /* @__PURE__ */ __name((e18) => {
      const t21 = D.current.querySelector("input");
      t21.value = "", t21.focus(), F3(e18);
    }, "onClick"), type: "button" }, import_react49.default.createElement(s16, null)), c6 && g4 && import_react49.default.createElement("button", { "aria-label": u10, className: r26.button, disabled: x, onClick: g4, type: "button" }, c6)), b6);
  });

  // ../../contrib/hdbt/node_modules/hds-react/DateInput-1fa08aca.js
  var E = "DateInput-module_wrapper__HHa75";
  function W2(e18) {
    if (null === e18 || true === e18 || false === e18) return NaN;
    var t21 = Number(e18);
    return isNaN(t21) ? t21 : t21 < 0 ? Math.ceil(t21) : Math.floor(t21);
  }
  __name(W2, "W");
  function j(e18, t21) {
    if (t21.length < e18) throw new TypeError(e18 + " argument" + (e18 > 1 ? "s" : "") + " required, but only " + t21.length + " present");
  }
  __name(j, "j");
  function N2(e18) {
    j(1, arguments);
    var t21 = Object.prototype.toString.call(e18);
    return e18 instanceof Date || "object" == typeof e18 && "[object Date]" === t21 ? new Date(e18.getTime()) : "number" == typeof e18 || "[object Number]" === t21 ? new Date(e18) : ("string" != typeof e18 && "[object String]" !== t21 || "undefined" == typeof console || (console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"), console.warn(new Error().stack)), /* @__PURE__ */ new Date(NaN));
  }
  __name(N2, "N");
  function S(e18, t21) {
    j(2, arguments);
    var a21 = N2(e18), n21 = W2(t21);
    return isNaN(n21) ? /* @__PURE__ */ new Date(NaN) : n21 ? (a21.setDate(a21.getDate() + n21), a21) : a21;
  }
  __name(S, "S");
  function H2(e18) {
    j(1, arguments);
    var t21 = N2(e18);
    return t21.setHours(23, 59, 59, 999), t21;
  }
  __name(H2, "H");
  function Y2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = t21.getFullYear(), n21 = t21.getMonth(), r30 = /* @__PURE__ */ new Date(0);
    return r30.setFullYear(a21, n21 + 1, 0), r30.setHours(0, 0, 0, 0), r30.getDate();
  }
  __name(Y2, "Y");
  function B(e18) {
    j(1, arguments);
    var t21 = N2(e18);
    return t21.setHours(0, 0, 0, 0), t21;
  }
  __name(B, "B");
  function U2(e18, t21) {
    j(2, arguments);
    var a21 = N2(e18), n21 = N2(t21);
    return a21.getTime() > n21.getTime();
  }
  __name(U2, "U");
  function z2(e18, t21) {
    j(2, arguments);
    var a21 = N2(e18), n21 = N2(t21);
    return a21.getTime() < n21.getTime();
  }
  __name(z2, "z");
  function O(e18) {
    j(1, arguments);
    var t21 = N2(e18);
    return t21.setDate(1), t21.setHours(0, 0, 0, 0), t21;
  }
  __name(O, "O");
  function L(e18) {
    j(1, arguments);
    var t21 = N2(e18);
    return !isNaN(t21);
  }
  __name(L, "L");
  e11(".DateInput-module_wrapper__HHa75{position:relative}");
  var F2 = { lessThanXSeconds: { one: "less than a second", other: "less than {{count}} seconds" }, xSeconds: { one: "1 second", other: "{{count}} seconds" }, halfAMinute: "half a minute", lessThanXMinutes: { one: "less than a minute", other: "less than {{count}} minutes" }, xMinutes: { one: "1 minute", other: "{{count}} minutes" }, aboutXHours: { one: "about 1 hour", other: "about {{count}} hours" }, xHours: { one: "1 hour", other: "{{count}} hours" }, xDays: { one: "1 day", other: "{{count}} days" }, aboutXWeeks: { one: "about 1 week", other: "about {{count}} weeks" }, xWeeks: { one: "1 week", other: "{{count}} weeks" }, aboutXMonths: { one: "about 1 month", other: "about {{count}} months" }, xMonths: { one: "1 month", other: "{{count}} months" }, aboutXYears: { one: "about 1 year", other: "about {{count}} years" }, xYears: { one: "1 year", other: "{{count}} years" }, overXYears: { one: "over 1 year", other: "over {{count}} years" }, almostXYears: { one: "almost 1 year", other: "almost {{count}} years" } };
  function I(e18, t21, a21) {
    var n21;
    return a21 = a21 || {}, n21 = "string" == typeof F2[e18] ? F2[e18] : 1 === t21 ? F2[e18].one : F2[e18].other.replace("{{count}}", t21), a21.addSuffix ? a21.comparison > 0 ? "in " + n21 : n21 + " ago" : n21;
  }
  __name(I, "I");
  function q2(e18) {
    return function(t21) {
      var a21 = t21 || {}, n21 = a21.width ? String(a21.width) : e18.defaultWidth;
      return e18.formats[n21] || e18.formats[e18.defaultWidth];
    };
  }
  __name(q2, "q");
  var R2 = { date: q2({ formats: { full: "EEEE, MMMM do, y", long: "MMMM do, y", medium: "MMM d, y", short: "MM/dd/yyyy" }, defaultWidth: "full" }), time: q2({ formats: { full: "h:mm:ss a zzzz", long: "h:mm:ss a z", medium: "h:mm:ss a", short: "h:mm a" }, defaultWidth: "full" }), dateTime: q2({ formats: { full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: "{{date}}, {{time}}", short: "{{date}}, {{time}}" }, defaultWidth: "full" }) };
  var A = { lastWeek: "'last' eeee 'at' p", yesterday: "'yesterday at' p", today: "'today at' p", tomorrow: "'tomorrow at' p", nextWeek: "eeee 'at' p", other: "P" };
  function X2(e18, t21, a21, n21) {
    return A[e18];
  }
  __name(X2, "X");
  function Q2(e18) {
    return function(t21, a21) {
      var n21, r30 = a21 || {};
      if ("formatting" === (r30.context ? String(r30.context) : "standalone") && e18.formattingValues) {
        var i12 = e18.defaultFormattingWidth || e18.defaultWidth, o18 = r30.width ? String(r30.width) : i12;
        n21 = e18.formattingValues[o18] || e18.formattingValues[i12];
      } else {
        var s21 = e18.defaultWidth, l19 = r30.width ? String(r30.width) : e18.defaultWidth;
        n21 = e18.values[l19] || e18.values[s21];
      }
      return n21[e18.argumentCallback ? e18.argumentCallback(t21) : t21];
    };
  }
  __name(Q2, "Q");
  var K2 = { ordinalNumber: /* @__PURE__ */ __name(function(e18, t21) {
    var a21 = Number(e18), n21 = a21 % 100;
    if (n21 > 20 || n21 < 10) switch (n21 % 10) {
      case 1:
        return a21 + "st";
      case 2:
        return a21 + "nd";
      case 3:
        return a21 + "rd";
    }
    return a21 + "th";
  }, "ordinalNumber"), era: Q2({ values: { narrow: ["B", "A"], abbreviated: ["BC", "AD"], wide: ["Before Christ", "Anno Domini"] }, defaultWidth: "wide" }), quarter: Q2({ values: { narrow: ["1", "2", "3", "4"], abbreviated: ["Q1", "Q2", "Q3", "Q4"], wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"] }, defaultWidth: "wide", argumentCallback: /* @__PURE__ */ __name(function(e18) {
    return Number(e18) - 1;
  }, "argumentCallback") }), month: Q2({ values: { narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }, defaultWidth: "wide" }), day: Q2({ values: { narrow: ["S", "M", "T", "W", "T", "F", "S"], short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] }, defaultWidth: "wide" }), dayPeriod: Q2({ values: { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" } }, defaultWidth: "wide", formattingValues: { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" } }, defaultFormattingWidth: "wide" }) };
  function V2(e18) {
    return function(t21, a21) {
      var n21 = String(t21), r30 = a21 || {}, i12 = n21.match(e18.matchPattern);
      if (!i12) return null;
      var o18 = i12[0], s21 = n21.match(e18.parsePattern);
      if (!s21) return null;
      var l19 = e18.valueCallback ? e18.valueCallback(s21[0]) : s21[0];
      return { value: l19 = r30.valueCallback ? r30.valueCallback(l19) : l19, rest: n21.slice(o18.length) };
    };
  }
  __name(V2, "V");
  function J2(e18) {
    return function(t21, a21) {
      var n21 = String(t21), r30 = a21 || {}, i12 = r30.width, o18 = i12 && e18.matchPatterns[i12] || e18.matchPatterns[e18.defaultMatchWidth], s21 = n21.match(o18);
      if (!s21) return null;
      var l19, u10 = s21[0], d16 = i12 && e18.parsePatterns[i12] || e18.parsePatterns[e18.defaultParseWidth];
      return l19 = "[object Array]" === Object.prototype.toString.call(d16) ? function(e19, t22) {
        for (var a22 = 0; a22 < e19.length; a22++) if (t22(e19[a22])) return a22;
      }(d16, function(e19) {
        return e19.test(u10);
      }) : function(e19, t22) {
        for (var a22 in e19) if (e19.hasOwnProperty(a22) && t22(e19[a22])) return a22;
      }(d16, function(e19) {
        return e19.test(u10);
      }), l19 = e18.valueCallback ? e18.valueCallback(l19) : l19, { value: l19 = r30.valueCallback ? r30.valueCallback(l19) : l19, rest: n21.slice(u10.length) };
    };
  }
  __name(J2, "J");
  var G2 = { ordinalNumber: V2({ matchPattern: /^(\d+)(th|st|nd|rd)?/i, parsePattern: /\d+/i, valueCallback: /* @__PURE__ */ __name(function(e18) {
    return parseInt(e18, 10);
  }, "valueCallback") }), era: J2({ matchPatterns: { narrow: /^(b|a)/i, abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i, wide: /^(before christ|before common era|anno domini|common era)/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/^b/i, /^(a|c)/i] }, defaultParseWidth: "any" }), quarter: J2({ matchPatterns: { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234](th|st|nd|rd)? quarter/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] }, defaultParseWidth: "any", valueCallback: /* @__PURE__ */ __name(function(e18) {
    return e18 + 1;
  }, "valueCallback") }), month: J2({ matchPatterns: { narrow: /^[jfmasond]/i, abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i], any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] }, defaultParseWidth: "any" }), day: J2({ matchPatterns: { narrow: /^[smtwf]/i, short: /^(su|mo|tu|we|th|fr|sa)/i, abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i, wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i], any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i] }, defaultParseWidth: "any" }), dayPeriod: J2({ matchPatterns: { narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i, any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i }, defaultMatchWidth: "any", parsePatterns: { any: { am: /^a/i, pm: /^p/i, midnight: /^mi/i, noon: /^no/i, morning: /morning/i, afternoon: /afternoon/i, evening: /evening/i, night: /night/i } }, defaultParseWidth: "any" }) };
  var Z2 = { code: "en-US", formatDistance: I, formatLong: R2, formatRelative: X2, localize: K2, match: G2, options: { weekStartsOn: 0, firstWeekContainsDate: 1 } };
  function $2(e18, t21) {
    return j(2, arguments), function(e19, t22) {
      j(2, arguments);
      var a21 = N2(e19).getTime(), n21 = W2(t22);
      return new Date(a21 + n21);
    }(e18, -W2(t21));
  }
  __name($2, "$");
  function ee2(e18, t21) {
    for (var a21 = e18 < 0 ? "-" : "", n21 = Math.abs(e18).toString(); n21.length < t21; ) n21 = "0" + n21;
    return a21 + n21;
  }
  __name(ee2, "ee");
  var te2 = /* @__PURE__ */ __name(function(e18, t21) {
    var a21 = e18.getUTCFullYear(), n21 = a21 > 0 ? a21 : 1 - a21;
    return ee2("yy" === t21 ? n21 % 100 : n21, t21.length);
  }, "te");
  var ae2 = /* @__PURE__ */ __name(function(e18, t21) {
    var a21 = e18.getUTCMonth();
    return "M" === t21 ? String(a21 + 1) : ee2(a21 + 1, 2);
  }, "ae");
  var ne2 = /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(e18.getUTCDate(), t21.length);
  }, "ne");
  var re2 = /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(e18.getUTCHours() % 12 || 12, t21.length);
  }, "re");
  var ie2 = /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(e18.getUTCHours(), t21.length);
  }, "ie");
  var oe2 = /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(e18.getUTCMinutes(), t21.length);
  }, "oe");
  var se2 = /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(e18.getUTCSeconds(), t21.length);
  }, "se");
  var le2 = /* @__PURE__ */ __name(function(e18, t21) {
    var a21 = t21.length, n21 = e18.getUTCMilliseconds();
    return ee2(Math.floor(n21 * Math.pow(10, a21 - 3)), t21.length);
  }, "le");
  function ue2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = t21.getUTCDay(), n21 = (a21 < 1 ? 7 : 0) + a21 - 1;
    return t21.setUTCDate(t21.getUTCDate() - n21), t21.setUTCHours(0, 0, 0, 0), t21;
  }
  __name(ue2, "ue");
  function de2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = t21.getUTCFullYear(), n21 = /* @__PURE__ */ new Date(0);
    n21.setUTCFullYear(a21 + 1, 0, 4), n21.setUTCHours(0, 0, 0, 0);
    var r30 = ue2(n21), i12 = /* @__PURE__ */ new Date(0);
    i12.setUTCFullYear(a21, 0, 4), i12.setUTCHours(0, 0, 0, 0);
    var o18 = ue2(i12);
    return t21.getTime() >= r30.getTime() ? a21 + 1 : t21.getTime() >= o18.getTime() ? a21 : a21 - 1;
  }
  __name(de2, "de");
  function ce2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = ue2(t21).getTime() - function(e19) {
      j(1, arguments);
      var t22 = de2(e19), a22 = /* @__PURE__ */ new Date(0);
      return a22.setUTCFullYear(t22, 0, 4), a22.setUTCHours(0, 0, 0, 0), ue2(a22);
    }(t21).getTime();
    return Math.round(a21 / 6048e5) + 1;
  }
  __name(ce2, "ce");
  function me2(e18, t21) {
    j(1, arguments);
    var a21 = t21 || {}, n21 = a21.locale, r30 = n21 && n21.options && n21.options.weekStartsOn, i12 = null == r30 ? 0 : W2(r30), o18 = null == a21.weekStartsOn ? i12 : W2(a21.weekStartsOn);
    if (!(o18 >= 0 && o18 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    var s21 = N2(e18), l19 = s21.getUTCDay(), u10 = (l19 < o18 ? 7 : 0) + l19 - o18;
    return s21.setUTCDate(s21.getUTCDate() - u10), s21.setUTCHours(0, 0, 0, 0), s21;
  }
  __name(me2, "me");
  function he2(e18, t21) {
    j(1, arguments);
    var a21 = N2(e18, t21), n21 = a21.getUTCFullYear(), r30 = t21 || {}, i12 = r30.locale, o18 = i12 && i12.options && i12.options.firstWeekContainsDate, s21 = null == o18 ? 1 : W2(o18), l19 = null == r30.firstWeekContainsDate ? s21 : W2(r30.firstWeekContainsDate);
    if (!(l19 >= 1 && l19 <= 7)) throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    var u10 = /* @__PURE__ */ new Date(0);
    u10.setUTCFullYear(n21 + 1, 0, l19), u10.setUTCHours(0, 0, 0, 0);
    var d16 = me2(u10, t21), c6 = /* @__PURE__ */ new Date(0);
    c6.setUTCFullYear(n21, 0, l19), c6.setUTCHours(0, 0, 0, 0);
    var m6 = me2(c6, t21);
    return a21.getTime() >= d16.getTime() ? n21 + 1 : a21.getTime() >= m6.getTime() ? n21 : n21 - 1;
  }
  __name(he2, "he");
  function fe2(e18, t21) {
    j(1, arguments);
    var a21 = N2(e18), n21 = me2(a21, t21).getTime() - function(e19, t22) {
      j(1, arguments);
      var a22 = t22 || {}, n22 = a22.locale, r30 = n22 && n22.options && n22.options.firstWeekContainsDate, i12 = null == r30 ? 1 : W2(r30), o18 = null == a22.firstWeekContainsDate ? i12 : W2(a22.firstWeekContainsDate), s21 = he2(e19, t22), l19 = /* @__PURE__ */ new Date(0);
      return l19.setUTCFullYear(s21, 0, o18), l19.setUTCHours(0, 0, 0, 0), me2(l19, t22);
    }(a21, t21).getTime();
    return Math.round(n21 / 6048e5) + 1;
  }
  __name(fe2, "fe");
  var ge2 = "midnight";
  var pe2 = "noon";
  var ve2 = "morning";
  var ke2 = "afternoon";
  var _e2 = "evening";
  var be2 = "night";
  var we2 = { G: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCFullYear() > 0 ? 1 : 0;
    switch (t21) {
      case "G":
      case "GG":
      case "GGG":
        return a21.era(n21, { width: "abbreviated" });
      case "GGGGG":
        return a21.era(n21, { width: "narrow" });
      default:
        return a21.era(n21, { width: "wide" });
    }
  }, "G"), y: /* @__PURE__ */ __name(function(e18, t21, a21) {
    if ("yo" === t21) {
      var n21 = e18.getUTCFullYear(), r30 = n21 > 0 ? n21 : 1 - n21;
      return a21.ordinalNumber(r30, { unit: "year" });
    }
    return te2(e18, t21);
  }, "y"), Y: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = he2(e18, n21), i12 = r30 > 0 ? r30 : 1 - r30;
    return "YY" === t21 ? ee2(i12 % 100, 2) : "Yo" === t21 ? a21.ordinalNumber(i12, { unit: "year" }) : ee2(i12, t21.length);
  }, "Y"), R: /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(de2(e18), t21.length);
  }, "R"), u: /* @__PURE__ */ __name(function(e18, t21) {
    return ee2(e18.getUTCFullYear(), t21.length);
  }, "u"), Q: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = Math.ceil((e18.getUTCMonth() + 1) / 3);
    switch (t21) {
      case "Q":
        return String(n21);
      case "QQ":
        return ee2(n21, 2);
      case "Qo":
        return a21.ordinalNumber(n21, { unit: "quarter" });
      case "QQQ":
        return a21.quarter(n21, { width: "abbreviated", context: "formatting" });
      case "QQQQQ":
        return a21.quarter(n21, { width: "narrow", context: "formatting" });
      default:
        return a21.quarter(n21, { width: "wide", context: "formatting" });
    }
  }, "Q"), q: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = Math.ceil((e18.getUTCMonth() + 1) / 3);
    switch (t21) {
      case "q":
        return String(n21);
      case "qq":
        return ee2(n21, 2);
      case "qo":
        return a21.ordinalNumber(n21, { unit: "quarter" });
      case "qqq":
        return a21.quarter(n21, { width: "abbreviated", context: "standalone" });
      case "qqqqq":
        return a21.quarter(n21, { width: "narrow", context: "standalone" });
      default:
        return a21.quarter(n21, { width: "wide", context: "standalone" });
    }
  }, "q"), M: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCMonth();
    switch (t21) {
      case "M":
      case "MM":
        return ae2(e18, t21);
      case "Mo":
        return a21.ordinalNumber(n21 + 1, { unit: "month" });
      case "MMM":
        return a21.month(n21, { width: "abbreviated", context: "formatting" });
      case "MMMMM":
        return a21.month(n21, { width: "narrow", context: "formatting" });
      default:
        return a21.month(n21, { width: "wide", context: "formatting" });
    }
  }, "M"), L: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCMonth();
    switch (t21) {
      case "L":
        return String(n21 + 1);
      case "LL":
        return ee2(n21 + 1, 2);
      case "Lo":
        return a21.ordinalNumber(n21 + 1, { unit: "month" });
      case "LLL":
        return a21.month(n21, { width: "abbreviated", context: "standalone" });
      case "LLLLL":
        return a21.month(n21, { width: "narrow", context: "standalone" });
      default:
        return a21.month(n21, { width: "wide", context: "standalone" });
    }
  }, "L"), w: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = fe2(e18, n21);
    return "wo" === t21 ? a21.ordinalNumber(r30, { unit: "week" }) : ee2(r30, t21.length);
  }, "w"), I: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = ce2(e18);
    return "Io" === t21 ? a21.ordinalNumber(n21, { unit: "week" }) : ee2(n21, t21.length);
  }, "I"), d: /* @__PURE__ */ __name(function(e18, t21, a21) {
    return "do" === t21 ? a21.ordinalNumber(e18.getUTCDate(), { unit: "date" }) : ne2(e18, t21);
  }, "d"), D: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = function(e19) {
      j(1, arguments);
      var t22 = N2(e19), a22 = t22.getTime();
      t22.setUTCMonth(0, 1), t22.setUTCHours(0, 0, 0, 0);
      var n22 = a22 - t22.getTime();
      return Math.floor(n22 / 864e5) + 1;
    }(e18);
    return "Do" === t21 ? a21.ordinalNumber(n21, { unit: "dayOfYear" }) : ee2(n21, t21.length);
  }, "D"), E: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCDay();
    switch (t21) {
      case "E":
      case "EE":
      case "EEE":
        return a21.day(n21, { width: "abbreviated", context: "formatting" });
      case "EEEEE":
        return a21.day(n21, { width: "narrow", context: "formatting" });
      case "EEEEEE":
        return a21.day(n21, { width: "short", context: "formatting" });
      default:
        return a21.day(n21, { width: "wide", context: "formatting" });
    }
  }, "E"), e: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = e18.getUTCDay(), i12 = (r30 - n21.weekStartsOn + 8) % 7 || 7;
    switch (t21) {
      case "e":
        return String(i12);
      case "ee":
        return ee2(i12, 2);
      case "eo":
        return a21.ordinalNumber(i12, { unit: "day" });
      case "eee":
        return a21.day(r30, { width: "abbreviated", context: "formatting" });
      case "eeeee":
        return a21.day(r30, { width: "narrow", context: "formatting" });
      case "eeeeee":
        return a21.day(r30, { width: "short", context: "formatting" });
      default:
        return a21.day(r30, { width: "wide", context: "formatting" });
    }
  }, "e"), c: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = e18.getUTCDay(), i12 = (r30 - n21.weekStartsOn + 8) % 7 || 7;
    switch (t21) {
      case "c":
        return String(i12);
      case "cc":
        return ee2(i12, t21.length);
      case "co":
        return a21.ordinalNumber(i12, { unit: "day" });
      case "ccc":
        return a21.day(r30, { width: "abbreviated", context: "standalone" });
      case "ccccc":
        return a21.day(r30, { width: "narrow", context: "standalone" });
      case "cccccc":
        return a21.day(r30, { width: "short", context: "standalone" });
      default:
        return a21.day(r30, { width: "wide", context: "standalone" });
    }
  }, "c"), i: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCDay(), r30 = 0 === n21 ? 7 : n21;
    switch (t21) {
      case "i":
        return String(r30);
      case "ii":
        return ee2(r30, t21.length);
      case "io":
        return a21.ordinalNumber(r30, { unit: "day" });
      case "iii":
        return a21.day(n21, { width: "abbreviated", context: "formatting" });
      case "iiiii":
        return a21.day(n21, { width: "narrow", context: "formatting" });
      case "iiiiii":
        return a21.day(n21, { width: "short", context: "formatting" });
      default:
        return a21.day(n21, { width: "wide", context: "formatting" });
    }
  }, "i"), a: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (t21) {
      case "a":
      case "aa":
      case "aaa":
        return a21.dayPeriod(n21, { width: "abbreviated", context: "formatting" });
      case "aaaaa":
        return a21.dayPeriod(n21, { width: "narrow", context: "formatting" });
      default:
        return a21.dayPeriod(n21, { width: "wide", context: "formatting" });
    }
  }, "a"), b: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21, r30 = e18.getUTCHours();
    switch (n21 = 12 === r30 ? pe2 : 0 === r30 ? ge2 : r30 / 12 >= 1 ? "pm" : "am", t21) {
      case "b":
      case "bb":
      case "bbb":
        return a21.dayPeriod(n21, { width: "abbreviated", context: "formatting" });
      case "bbbbb":
        return a21.dayPeriod(n21, { width: "narrow", context: "formatting" });
      default:
        return a21.dayPeriod(n21, { width: "wide", context: "formatting" });
    }
  }, "b"), B: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21, r30 = e18.getUTCHours();
    switch (n21 = r30 >= 17 ? _e2 : r30 >= 12 ? ke2 : r30 >= 4 ? ve2 : be2, t21) {
      case "B":
      case "BB":
      case "BBB":
        return a21.dayPeriod(n21, { width: "abbreviated", context: "formatting" });
      case "BBBBB":
        return a21.dayPeriod(n21, { width: "narrow", context: "formatting" });
      default:
        return a21.dayPeriod(n21, { width: "wide", context: "formatting" });
    }
  }, "B"), h: /* @__PURE__ */ __name(function(e18, t21, a21) {
    if ("ho" === t21) {
      var n21 = e18.getUTCHours() % 12;
      return 0 === n21 && (n21 = 12), a21.ordinalNumber(n21, { unit: "hour" });
    }
    return re2(e18, t21);
  }, "h"), H: /* @__PURE__ */ __name(function(e18, t21, a21) {
    return "Ho" === t21 ? a21.ordinalNumber(e18.getUTCHours(), { unit: "hour" }) : ie2(e18, t21);
  }, "H"), K: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCHours() % 12;
    return "Ko" === t21 ? a21.ordinalNumber(n21, { unit: "hour" }) : ee2(n21, t21.length);
  }, "K"), k: /* @__PURE__ */ __name(function(e18, t21, a21) {
    var n21 = e18.getUTCHours();
    return 0 === n21 && (n21 = 24), "ko" === t21 ? a21.ordinalNumber(n21, { unit: "hour" }) : ee2(n21, t21.length);
  }, "k"), m: /* @__PURE__ */ __name(function(e18, t21, a21) {
    return "mo" === t21 ? a21.ordinalNumber(e18.getUTCMinutes(), { unit: "minute" }) : oe2(e18, t21);
  }, "m"), s: /* @__PURE__ */ __name(function(e18, t21, a21) {
    return "so" === t21 ? a21.ordinalNumber(e18.getUTCSeconds(), { unit: "second" }) : se2(e18, t21);
  }, "s"), S: /* @__PURE__ */ __name(function(e18, t21) {
    return le2(e18, t21);
  }, "S"), X: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = (n21._originalDate || e18).getTimezoneOffset();
    if (0 === r30) return "Z";
    switch (t21) {
      case "X":
        return De2(r30);
      case "XXXX":
      case "XX":
        return Me2(r30);
      default:
        return Me2(r30, ":");
    }
  }, "X"), x: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = (n21._originalDate || e18).getTimezoneOffset();
    switch (t21) {
      case "x":
        return De2(r30);
      case "xxxx":
      case "xx":
        return Me2(r30);
      default:
        return Me2(r30, ":");
    }
  }, "x"), O: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = (n21._originalDate || e18).getTimezoneOffset();
    switch (t21) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + ye2(r30, ":");
      default:
        return "GMT" + Me2(r30, ":");
    }
  }, "O"), z: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = (n21._originalDate || e18).getTimezoneOffset();
    switch (t21) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + ye2(r30, ":");
      default:
        return "GMT" + Me2(r30, ":");
    }
  }, "z"), t: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    var r30 = n21._originalDate || e18;
    return ee2(Math.floor(r30.getTime() / 1e3), t21.length);
  }, "t"), T: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    return ee2((n21._originalDate || e18).getTime(), t21.length);
  }, "T") };
  function ye2(e18, t21) {
    var a21 = e18 > 0 ? "-" : "+", n21 = Math.abs(e18), r30 = Math.floor(n21 / 60), i12 = n21 % 60;
    if (0 === i12) return a21 + String(r30);
    var o18 = t21 || "";
    return a21 + String(r30) + o18 + ee2(i12, 2);
  }
  __name(ye2, "ye");
  function De2(e18, t21) {
    return e18 % 60 == 0 ? (e18 > 0 ? "-" : "+") + ee2(Math.abs(e18) / 60, 2) : Me2(e18, t21);
  }
  __name(De2, "De");
  function Me2(e18, t21) {
    var a21 = t21 || "", n21 = e18 > 0 ? "-" : "+", r30 = Math.abs(e18);
    return n21 + ee2(Math.floor(r30 / 60), 2) + a21 + ee2(r30 % 60, 2);
  }
  __name(Me2, "Me");
  var Pe2 = we2;
  function Te2(e18, t21) {
    switch (e18) {
      case "P":
        return t21.date({ width: "short" });
      case "PP":
        return t21.date({ width: "medium" });
      case "PPP":
        return t21.date({ width: "long" });
      default:
        return t21.date({ width: "full" });
    }
  }
  __name(Te2, "Te");
  function xe2(e18, t21) {
    switch (e18) {
      case "p":
        return t21.time({ width: "short" });
      case "pp":
        return t21.time({ width: "medium" });
      case "ppp":
        return t21.time({ width: "long" });
      default:
        return t21.time({ width: "full" });
    }
  }
  __name(xe2, "xe");
  var Ce2 = { p: xe2, P: /* @__PURE__ */ __name(function(e18, t21) {
    var a21, n21 = e18.match(/(P+)(p+)?/), r30 = n21[1], i12 = n21[2];
    if (!i12) return Te2(e18, t21);
    switch (r30) {
      case "P":
        a21 = t21.dateTime({ width: "short" });
        break;
      case "PP":
        a21 = t21.dateTime({ width: "medium" });
        break;
      case "PPP":
        a21 = t21.dateTime({ width: "long" });
        break;
      default:
        a21 = t21.dateTime({ width: "full" });
    }
    return a21.replace("{{date}}", Te2(r30, t21)).replace("{{time}}", xe2(i12, t21));
  }, "P") };
  var Ee2 = Ce2;
  var We2 = 6e4;
  function je2(e18) {
    return e18.getTime() % We2;
  }
  __name(je2, "je");
  function Ne2(e18) {
    var t21 = new Date(e18.getTime()), a21 = Math.ceil(t21.getTimezoneOffset());
    t21.setSeconds(0, 0);
    var n21 = a21 > 0 ? (We2 + je2(t21)) % We2 : je2(t21);
    return a21 * We2 + n21;
  }
  __name(Ne2, "Ne");
  var Se2 = ["D", "DD"];
  var He2 = ["YY", "YYYY"];
  function Ye2(e18, t21, a21) {
    if ("YYYY" === e18) throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t21, "`) for formatting years to the input `").concat(a21, "`; see: https://git.io/fxCyr"));
    if ("YY" === e18) throw new RangeError("Use `yy` instead of `YY` (in `".concat(t21, "`) for formatting years to the input `").concat(a21, "`; see: https://git.io/fxCyr"));
    if ("D" === e18) throw new RangeError("Use `d` instead of `D` (in `".concat(t21, "`) for formatting days of the month to the input `").concat(a21, "`; see: https://git.io/fxCyr"));
    if ("DD" === e18) throw new RangeError("Use `dd` instead of `DD` (in `".concat(t21, "`) for formatting days of the month to the input `").concat(a21, "`; see: https://git.io/fxCyr"));
  }
  __name(Ye2, "Ye");
  var Be2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
  var Ue2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var ze2 = /^'([^]*?)'?$/;
  var Oe2 = /''/g;
  var Le2 = /[a-zA-Z]/;
  function Fe2(e18, t21, a21) {
    j(2, arguments);
    var n21 = String(t21), r30 = a21 || {}, i12 = r30.locale || Z2, o18 = i12.options && i12.options.firstWeekContainsDate, s21 = null == o18 ? 1 : W2(o18), l19 = null == r30.firstWeekContainsDate ? s21 : W2(r30.firstWeekContainsDate);
    if (!(l19 >= 1 && l19 <= 7)) throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    var u10 = i12.options && i12.options.weekStartsOn, d16 = null == u10 ? 0 : W2(u10), c6 = null == r30.weekStartsOn ? d16 : W2(r30.weekStartsOn);
    if (!(c6 >= 0 && c6 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    if (!i12.localize) throw new RangeError("locale must contain localize property");
    if (!i12.formatLong) throw new RangeError("locale must contain formatLong property");
    var m6 = N2(e18);
    if (!L(m6)) throw new RangeError("Invalid time value");
    var h5 = $2(m6, Ne2(m6)), f2 = { firstWeekContainsDate: l19, weekStartsOn: c6, locale: i12, _originalDate: m6 };
    return n21.match(Ue2).map(function(e19) {
      var t22 = e19[0];
      return "p" === t22 || "P" === t22 ? (0, Ee2[t22])(e19, i12.formatLong, f2) : e19;
    }).join("").match(Be2).map(function(a22) {
      if ("''" === a22) return "'";
      var n22 = a22[0];
      if ("'" === n22) return a22.match(ze2)[1].replace(Oe2, "'");
      var o19, s22 = Pe2[n22];
      if (s22) return r30.useAdditionalWeekYearTokens || (o19 = a22, -1 === He2.indexOf(o19)) || Ye2(a22, t21, e18), !r30.useAdditionalDayOfYearTokens && function(e19) {
        return -1 !== Se2.indexOf(e19);
      }(a22) && Ye2(a22, t21, e18), s22(h5, a22, i12.localize, f2);
      if (n22.match(Le2)) throw new RangeError("Format string contains an unescaped latin alphabet character `" + n22 + "`");
      return a22;
    }).join("");
  }
  __name(Fe2, "Fe");
  var Ie2 = { code: "en-GB", formatDistance: I, formatLong: { date: q2({ formats: { full: "EEEE, d MMMM yyyy", long: "d MMMM yyyy", medium: "d MMM yyyy", short: "dd/MM/yyyy" }, defaultWidth: "full" }), time: q2({ formats: { full: "HH:mm:ss zzzz", long: "HH:mm:ss z", medium: "HH:mm:ss", short: "HH:mm" }, defaultWidth: "full" }), dateTime: q2({ formats: { full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: "{{date}}, {{time}}", short: "{{date}}, {{time}}" }, defaultWidth: "full" }) }, formatRelative: X2, localize: K2, match: G2, options: { weekStartsOn: 1, firstWeekContainsDate: 4 } };
  function qe2(e18) {
    return e18.replace(/sekuntia?/, "sekunnin");
  }
  __name(qe2, "qe");
  function Re2(e18) {
    return e18.replace(/minuuttia?/, "minuutin");
  }
  __name(Re2, "Re");
  function Ae2(e18) {
    return e18.replace(/tuntia?/, "tunnin");
  }
  __name(Ae2, "Ae");
  function Xe2(e18) {
    return e18.replace(/(viikko|viikkoa)/, "viikon");
  }
  __name(Xe2, "Xe");
  function Qe2(e18) {
    return e18.replace(/(kuukausi|kuukautta)/, "kuukauden");
  }
  __name(Qe2, "Qe");
  function Ke2(e18) {
    return e18.replace(/(vuosi|vuotta)/, "vuoden");
  }
  __name(Ke2, "Ke");
  var Ve2 = { lessThanXSeconds: { one: "alle sekunti", other: "alle {{count}} sekuntia", futureTense: qe2 }, xSeconds: { one: "sekunti", other: "{{count}} sekuntia", futureTense: qe2 }, halfAMinute: { one: "puoli minuuttia", other: "puoli minuuttia", futureTense: /* @__PURE__ */ __name(function(e18) {
    return "puolen minuutin";
  }, "futureTense") }, lessThanXMinutes: { one: "alle minuutti", other: "alle {{count}} minuuttia", futureTense: Re2 }, xMinutes: { one: "minuutti", other: "{{count}} minuuttia", futureTense: Re2 }, aboutXHours: { one: "noin tunti", other: "noin {{count}} tuntia", futureTense: Ae2 }, xHours: { one: "tunti", other: "{{count}} tuntia", futureTense: Ae2 }, xDays: { one: "päivä", other: "{{count}} päivää", futureTense: /* @__PURE__ */ __name(function(e18) {
    return e18.replace(/päivää?/, "päivän");
  }, "futureTense") }, aboutXWeeks: { one: "noin viikko", other: "noin {{count}} viikkoa", futureTense: Xe2 }, xWeeks: { one: "viikko", other: "{{count}} viikkoa", futureTense: Xe2 }, aboutXMonths: { one: "noin kuukausi", other: "noin {{count}} kuukautta", futureTense: Qe2 }, xMonths: { one: "kuukausi", other: "{{count}} kuukautta", futureTense: Qe2 }, aboutXYears: { one: "noin vuosi", other: "noin {{count}} vuotta", futureTense: Ke2 }, xYears: { one: "vuosi", other: "{{count}} vuotta", futureTense: Ke2 }, overXYears: { one: "yli vuosi", other: "yli {{count}} vuotta", futureTense: Ke2 }, almostXYears: { one: "lähes vuosi", other: "lähes {{count}} vuotta", futureTense: Ke2 } };
  var Je2 = { date: q2({ formats: { full: "eeee d. MMMM y", long: "d. MMMM y", medium: "d. MMM y", short: "d.M.y" }, defaultWidth: "full" }), time: q2({ formats: { full: "HH.mm.ss zzzz", long: "HH.mm.ss z", medium: "HH.mm.ss", short: "HH.mm" }, defaultWidth: "full" }), dateTime: q2({ formats: { full: "{{date}} 'klo' {{time}}", long: "{{date}} 'klo' {{time}}", medium: "{{date}} {{time}}", short: "{{date}} {{time}}" }, defaultWidth: "full" }) };
  var Ge2 = { lastWeek: "'viime' eeee 'klo' p", yesterday: "'eilen klo' p", today: "'tänään klo' p", tomorrow: "'huomenna klo' p", nextWeek: "'ensi' eeee 'klo' p", other: "P" };
  var Ze2 = { narrow: ["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"], abbreviated: ["tammi", "helmi", "maalis", "huhti", "touko", "kesä", "heinä", "elo", "syys", "loka", "marras", "joulu"], wide: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu"] };
  var $e2 = { narrow: Ze2.narrow, abbreviated: Ze2.abbreviated, wide: Ze2.wide.map(function(e18) {
    return e18 + "ta";
  }) };
  var et2 = { narrow: ["S", "M", "T", "K", "T", "P", "L"], short: ["su", "ma", "ti", "ke", "to", "pe", "la"], abbreviated: ["sunn.", "maan.", "tiis.", "kesk.", "torst.", "perj.", "la"], wide: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"] };
  var tt2 = { narrow: et2.narrow, short: et2.short, abbreviated: et2.abbreviated, wide: et2.wide.map(function(e18) {
    return e18 + "na";
  }) };
  var at2 = { code: "fi", formatDistance: /* @__PURE__ */ __name(function(e18, t21, a21) {
    a21 = a21 || {};
    var n21 = Ve2[e18], r30 = 1 === t21 ? n21.one : n21.other.replace("{{count}}", t21);
    return a21.addSuffix ? a21.comparison > 0 ? n21.futureTense(r30) + " kuluttua" : r30 + " sitten" : r30;
  }, "formatDistance"), formatLong: Je2, formatRelative: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    return Ge2[e18];
  }, "formatRelative"), localize: { ordinalNumber: /* @__PURE__ */ __name(function(e18) {
    return Number(e18) + ".";
  }, "ordinalNumber"), era: Q2({ values: { narrow: ["eaa.", "jaa."], abbreviated: ["eaa.", "jaa."], wide: ["ennen ajanlaskun alkua", "jälkeen ajanlaskun alun"] }, defaultWidth: "wide" }), quarter: Q2({ values: { narrow: ["1", "2", "3", "4"], abbreviated: ["Q1", "Q2", "Q3", "Q4"], wide: ["1. kvartaali", "2. kvartaali", "3. kvartaali", "4. kvartaali"] }, defaultWidth: "wide", argumentCallback: /* @__PURE__ */ __name(function(e18) {
    return Number(e18) - 1;
  }, "argumentCallback") }), month: Q2({ values: Ze2, formattingValues: $e2, defaultWidth: "wide" }), day: Q2({ values: et2, formattingValues: tt2, defaultWidth: "wide" }), dayPeriod: Q2({ values: { narrow: { am: "ap", pm: "ip", midnight: "keskiyö", noon: "keskipäivä", morning: "ap", afternoon: "ip", evening: "illalla", night: "yöllä" }, abbreviated: { am: "ap", pm: "ip", midnight: "keskiyö", noon: "keskipäivä", morning: "ap", afternoon: "ip", evening: "illalla", night: "yöllä" }, wide: { am: "ap", pm: "ip", midnight: "keskiyöllä", noon: "keskipäivällä", morning: "aamupäivällä", afternoon: "iltapäivällä", evening: "illalla", night: "yöllä" } }, defaultWidth: "wide" }) }, match: { ordinalNumber: V2({ matchPattern: /^(\d+)(\.)/i, parsePattern: /\d+/i, valueCallback: /* @__PURE__ */ __name(function(e18) {
    return parseInt(e18, 10);
  }, "valueCallback") }), era: J2({ matchPatterns: { narrow: /^(e|j)/i, abbreviated: /^(eaa.|jaa.)/i, wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/^e/i, /^j/i] }, defaultParseWidth: "any" }), quarter: J2({ matchPatterns: { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234]\.? kvartaali/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] }, defaultParseWidth: "any", valueCallback: /* @__PURE__ */ __name(function(e18) {
    return e18 + 1;
  }, "valueCallback") }), month: J2({ matchPatterns: { narrow: /^[thmkeslj]/i, abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i, wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i], any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i] }, defaultParseWidth: "any" }), day: J2({ matchPatterns: { narrow: /^[smtkpl]/i, short: /^(su|ma|ti|ke|to|pe|la)/i, abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i, wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i], any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i] }, defaultParseWidth: "any" }), dayPeriod: J2({ matchPatterns: { narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i, any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i }, defaultMatchWidth: "any", parsePatterns: { any: { am: /^ap/i, pm: /^ip/i, midnight: /^keskiyö/i, noon: /^keskipäivä/i, morning: /aamupäivällä/i, afternoon: /iltapäivällä/i, evening: /illalla/i, night: /yöllä/i } }, defaultParseWidth: "any" }) }, options: { weekStartsOn: 1, firstWeekContainsDate: 4 } };
  var nt2 = { lessThanXSeconds: { singular: "mindre än en sekund", plural: "mindre än {{count}} sekunder" }, xSeconds: { singular: "en sekund", plural: "{{count}} sekunder" }, halfAMinute: "en halv minut", lessThanXMinutes: { singular: "mindre än en minut", plural: "mindre än {{count}} minuter" }, xMinutes: { singular: "en minut", plural: "{{count}} minuter" }, aboutXHours: { singular: "ungefär en timme", plural: "ungefär {{count}} timmar" }, xHours: { singular: "en timme", plural: "{{count}} timmar" }, xDays: { singular: "en dag", plural: "{{count}} dagar" }, aboutXWeeks: { singular: "ungefär en vecka", plural: "ungefär {{count}} vecka" }, xWeeks: { singular: "en vecka", plural: "{{count}} vecka" }, aboutXMonths: { singular: "ungefär en månad", plural: "ungefär {{count}} månader" }, xMonths: { singular: "en månad", plural: "{{count}} månader" }, aboutXYears: { singular: "ungefär ett år", plural: "ungefär {{count}} år" }, xYears: { singular: "ett år", plural: "{{count}} år" }, overXYears: { singular: "över ett år", plural: "över {{count}} år" }, almostXYears: { singular: "nästan ett år", plural: "nästan {{count}} år" } };
  var rt2 = ["noll", "en", "två", "tre", "fyra", "fem", "sex", "sju", "åtta", "nio", "tio", "elva", "tolv"];
  var it2 = { date: q2({ formats: { full: "EEEE d MMMM y", long: "d MMMM y", medium: "d MMM y", short: "y-MM-dd" }, defaultWidth: "full" }), time: q2({ formats: { full: "'kl'. HH:mm:ss zzzz", long: "HH:mm:ss z", medium: "HH:mm:ss", short: "HH:mm" }, defaultWidth: "full" }), dateTime: q2({ formats: { full: "{{date}} 'kl.' {{time}}", long: "{{date}} 'kl.' {{time}}", medium: "{{date}} {{time}}", short: "{{date}} {{time}}" }, defaultWidth: "full" }) };
  var ot2 = { lastWeek: "'i' EEEE's kl.' p", yesterday: "'igår kl.' p", today: "'idag kl.' p", tomorrow: "'imorgon kl.' p", nextWeek: "EEEE 'kl.' p", other: "P" };
  var st2 = { code: "sv", formatDistance: /* @__PURE__ */ __name(function(e18, t21, a21) {
    a21 = a21 || { onlyNumeric: false };
    var n21, r30 = nt2[e18];
    return n21 = "string" == typeof r30 ? r30 : 0 === t21 || t21 > 1 ? a21.onlyNumeric ? r30.plural.replace("{{count}}", t21) : r30.plural.replace("{{count}}", t21 < 13 ? rt2[t21] : t21) : r30.singular, a21.addSuffix ? a21.comparison > 0 ? "om " + n21 : n21 + " sedan" : n21;
  }, "formatDistance"), formatLong: it2, formatRelative: /* @__PURE__ */ __name(function(e18, t21, a21, n21) {
    return ot2[e18];
  }, "formatRelative"), localize: { ordinalNumber: /* @__PURE__ */ __name(function(e18) {
    var t21 = Number(e18), a21 = t21 % 100;
    if (a21 > 20 || a21 < 10) switch (a21 % 10) {
      case 1:
      case 2:
        return t21 + ":a";
    }
    return t21 + ":e";
  }, "ordinalNumber"), era: Q2({ values: { narrow: ["f.Kr.", "e.Kr."], abbreviated: ["f.Kr.", "e.Kr."], wide: ["före Kristus", "efter Kristus"] }, defaultWidth: "wide" }), quarter: Q2({ values: { narrow: ["1", "2", "3", "4"], abbreviated: ["Q1", "Q2", "Q3", "Q4"], wide: ["1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet"] }, defaultWidth: "wide", argumentCallback: /* @__PURE__ */ __name(function(e18) {
    return Number(e18) - 1;
  }, "argumentCallback") }), month: Q2({ values: { narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], abbreviated: ["jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec."], wide: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"] }, defaultWidth: "wide" }), day: Q2({ values: { narrow: ["S", "M", "T", "O", "T", "F", "L"], short: ["sö", "må", "ti", "on", "to", "fr", "lö"], abbreviated: ["sön", "mån", "tis", "ons", "tor", "fre", "lör"], wide: ["söndag", "måndag", "tisdag", "onsdag", "torsdag", "fredag", "lördag"] }, defaultWidth: "wide" }), dayPeriod: Q2({ values: { narrow: { am: "fm", pm: "em", midnight: "midnatt", noon: "middag", morning: "morg.", afternoon: "efterm.", evening: "kväll", night: "natt" }, abbreviated: { am: "f.m.", pm: "e.m.", midnight: "midnatt", noon: "middag", morning: "morgon", afternoon: "efterm.", evening: "kväll", night: "natt" }, wide: { am: "förmiddag", pm: "eftermiddag", midnight: "midnatt", noon: "middag", morning: "morgon", afternoon: "eftermiddag", evening: "kväll", night: "natt" } }, defaultWidth: "wide", formattingValues: { narrow: { am: "fm", pm: "em", midnight: "midnatt", noon: "middag", morning: "på morg.", afternoon: "på efterm.", evening: "på kvällen", night: "på natten" }, abbreviated: { am: "fm", pm: "em", midnight: "midnatt", noon: "middag", morning: "på morg.", afternoon: "på efterm.", evening: "på kvällen", night: "på natten" }, wide: { am: "fm", pm: "em", midnight: "midnatt", noon: "middag", morning: "på morgonen", afternoon: "på eftermiddagen", evening: "på kvällen", night: "på natten" } }, defaultFormattingWidth: "wide" }) }, match: { ordinalNumber: V2({ matchPattern: /^(\d+)(:a|:e)?/i, parsePattern: /\d+/i, valueCallback: /* @__PURE__ */ __name(function(e18) {
    return parseInt(e18, 10);
  }, "valueCallback") }), era: J2({ matchPatterns: { narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i, abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i, wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/^f/i, /^[ev]/i] }, defaultParseWidth: "any" }), quarter: J2({ matchPatterns: { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234](:a|:e)? kvartalet/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] }, defaultParseWidth: "any", valueCallback: /* @__PURE__ */ __name(function(e18) {
    return e18 + 1;
  }, "valueCallback") }), month: J2({ matchPatterns: { narrow: /^[jfmasond]/i, abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|aug|sep|okt|nov|dec)\.?/i, wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i], any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] }, defaultParseWidth: "any" }), day: J2({ matchPatterns: { narrow: /^[smtofl]/i, short: /^(sö|må|ti|on|to|fr|lö)/i, abbreviated: /^(sön|mån|tis|ons|tor|fre|lör)/i, wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i] }, defaultParseWidth: "any" }), dayPeriod: J2({ matchPatterns: { any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i }, defaultMatchWidth: "any", parsePatterns: { any: { am: /^f/i, pm: /^e/i, midnight: /^midn/i, noon: /^midd/i, morning: /morgon/i, afternoon: /eftermiddag/i, evening: /kväll/i, night: /natt/i } }, defaultParseWidth: "any" }) }, options: { weekStartsOn: 1, firstWeekContainsDate: 4 } };
  var lt2 = { "small-up": "only screen and (min-width:576px)", "hds-datepicker__day__wrapper-vhidden": "DatePicker-module_hds-datepicker__day__wrapper-vhidden__3Brgt", "hds-datepicker__head__weekday-vhidden": "DatePicker-module_hds-datepicker__head__weekday-vhidden__Rkv0G", pickerWrapper: "DatePicker-module_pickerWrapper__3-V56", isVisible: "DatePicker-module_isVisible__2h96J", "hds-datepicker": "DatePicker-module_hds-datepicker__b0Y3P", "hds-datepicker__month-table": "DatePicker-module_hds-datepicker__month-table__1XIn_", "hds-datepicker__head__weekday": "DatePicker-module_hds-datepicker__head__weekday__SwagI", "hds-datepicker__day-cell": "DatePicker-module_hds-datepicker__day-cell__2YHPj", "hds-datepicker__day": "DatePicker-module_hds-datepicker__day__2_8jB", "hds-datepicker__day--selected": "DatePicker-module_hds-datepicker__day--selected__1QNyc", "hds-datepicker__day--outside": "DatePicker-module_hds-datepicker__day--outside__1rUB8", "hds-datepicker__day--today": "DatePicker-module_hds-datepicker__day--today__1bi5J", "hds-datepicker__day__wrapper": "DatePicker-module_hds-datepicker__day__wrapper__2cskJ", "hds-datepicker__navigation": "DatePicker-module_hds-datepicker__navigation__3KlG-", "hds-datepicker__navigation__select": "DatePicker-module_hds-datepicker__navigation__select__2K75T", "hds-datepicker__navigation__select-label": "DatePicker-module_hds-datepicker__navigation__select-label__3aEd9", "hds-datepicker__navigation__select-icon": "DatePicker-module_hds-datepicker__navigation__select-icon__25qBZ", "hds-datepicker__navigation__buttons": "DatePicker-module_hds-datepicker__navigation__buttons__2UkbB", "hds-datepicker__bottom-buttons": "DatePicker-module_hds-datepicker__bottom-buttons__20j4Y", "hds-datepicker__legend": "DatePicker-module_hds-datepicker__legend__IPZIQ", "hds-datepicker__legend-item": "DatePicker-module_hds-datepicker__legend-item__DecTH", "hds-datepicker__legend-item--color": "DatePicker-module_hds-datepicker__legend-item--color__37MDx", "hds-datepicker__legend-item--selected": "DatePicker-module_hds-datepicker__legend-item--selected__rJ4KT" };
  e11('.DatePicker-module_hds-datepicker__day__wrapper-vhidden__3Brgt,.DatePicker-module_hds-datepicker__head__weekday-vhidden__Rkv0G{border:0;clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;margin:0 -1px -1px 0;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}:root{--date-background:transparent;--date-color:var(--color-black-90);--outside-date-background:transparent;--outside-date-color:var(--color-black-40);--selected-date-background:var(--color-bus);--selected-date-color:#fff;--table-width:100%;--horizontal-spacing:var(--spacing-s);--vertical-spacing:var(--spacing-s);--date-border:0}@media only screen and (min-width:576px){:root{--table-width:308px}}.DatePicker-module_pickerWrapper__3-V56{display:flex;justify-content:flex-end;opacity:0;pointer-events:none;transition:opacity .15s;visibility:hidden;will-change:opacity,visibility;z-index:900}.DatePicker-module_pickerWrapper__3-V56.DatePicker-module_isVisible__2h96J{opacity:1;visibility:visible}.DatePicker-module_pickerWrapper__3-V56>*{pointer-events:auto}.DatePicker-module_hds-datepicker__b0Y3P{background:#fff;box-shadow:0 2px 4px 0 rgba(0,0,0,.5);box-sizing:border-box;display:inline-block;min-width:calc(100vw - 2 * var(--spacing-s));padding:var(--vertical-spacing) var(--horizontal-spacing);position:relative;width:100%}@media only screen and (min-width:576px){.DatePicker-module_hds-datepicker__b0Y3P{min-width:calc(var(--table-width) + 2 * var(--spacing-s))}}.DatePicker-module_hds-datepicker__month-table__1XIn_{border-collapse:collapse;border-spacing:2px;max-width:var(--table-width);width:100%}.DatePicker-module_hds-datepicker__head__weekday__SwagI{font-size:var(--fontsize-body-m);font-weight:700;padding-bottom:6px;text-transform:uppercase}.DatePicker-module_hds-datepicker__day-cell__2YHPj{line-height:0;margin:0 4px 0 0;padding:3px;width:14.2857142857%}.DatePicker-module_hds-datepicker__day__2_8jB{--background-color:var(--date-background);--color:var(--date-color);align-items:center;appearance:none;background:transparent;border:0;box-sizing:border-box;display:inline-flex;line-height:1;margin:0;overflow:hidden;padding:0 0 100%;position:relative;vertical-align:middle;width:100%}.DatePicker-module_hds-datepicker__day--selected__1QNyc{--background-color:var(--selected-date-background);--color:var(--selected-date-color)}.DatePicker-module_hds-datepicker__day--outside__1rUB8{pointer-events:none;--background-color:var(--outside-date-background);--color:var(--outside-date-color)}.DatePicker-module_hds-datepicker__day--today__1bi5J:after{background:var(--color);bottom:7px;content:"";height:2px;left:8px;position:absolute;right:8px}.DatePicker-module_hds-datepicker__day__2_8jB:focus{box-shadow:0 0 0 3px var(--color-coat-of-arms);outline:none}.DatePicker-module_hds-datepicker__day__wrapper__2cskJ{align-items:center;background-color:var(--background-color);border:var(--date-border);color:var(--color);display:flex;font-size:1rem;inset:2px;justify-content:center;line-height:1rem;position:absolute}.DatePicker-module_hds-datepicker__day--selected__1QNyc .DatePicker-module_hds-datepicker__day__wrapper__2cskJ{background-color:var(--selected-date-background);border:0}.DatePicker-module_hds-datepicker__navigation__3KlG-{align-items:center;display:flex;margin-bottom:var(--spacing-s)}.DatePicker-module_hds-datepicker__navigation__select__2K75T{--icon-size:24px;margin-right:var(--spacing-s);position:relative}.DatePicker-module_hds-datepicker__navigation__select__2K75T select{height:100%;left:0;opacity:0;position:absolute;text-transform:capitalize;top:0;width:100%}.DatePicker-module_hds-datepicker__navigation__select-label__3aEd9{--label-spacing:0.3rem;font-size:var(--fontsize-body-xl);font-weight:700;padding:.15rem calc(var(--icon-size)) .15rem .3rem;pointer-events:none;position:relative;text-transform:capitalize}select:focus+.DatePicker-module_hds-datepicker__navigation__select-label__3aEd9{box-shadow:0 0 0 3px var(--color-coat-of-arms)}.DatePicker-module_hds-datepicker__navigation__select-icon__25qBZ{align-items:center;bottom:0;display:flex;justify-content:center;pointer-events:none;position:absolute;right:0;top:0;width:var(--icon-size)}.DatePicker-module_hds-datepicker__navigation__select-icon__25qBZ svg{height:var(--icon-size);width:var(--icon-size)}.DatePicker-module_hds-datepicker__navigation__buttons__2UkbB{display:flex;flex-grow:1;justify-content:flex-end;transform:translateY(-3px)}.DatePicker-module_hds-datepicker__navigation__buttons__2UkbB [aria-disabled=true]{color:var(--color-black-30);cursor:not-allowed}.DatePicker-module_hds-datepicker__navigation__buttons__2UkbB button{align-items:center;background:transparent;border:0;cursor:pointer;display:inline-flex;height:calc(25px + .15rem);justify-content:center;padding:.15rem;width:calc(25px + .15rem)}.DatePicker-module_hds-datepicker__navigation__buttons__2UkbB button:focus{box-shadow:0 0 0 3px var(--color-coat-of-arms);outline:none}.DatePicker-module_hds-datepicker__bottom-buttons__20j4Y{display:flex;flex-direction:row;justify-content:center;margin:var(--spacing-s)}.DatePicker-module_hds-datepicker__bottom-buttons__20j4Y button:nth-child(2){margin-left:var(--spacing-s)}.DatePicker-module_hds-datepicker__legend__IPZIQ{display:flex;flex-flow:row wrap;gap:var(--spacing-m);margin:var(--spacing-m) 0}@media only screen and (min-width:576px){.DatePicker-module_hds-datepicker__legend__IPZIQ{max-width:var(--table-width)}}.DatePicker-module_hds-datepicker__legend-item__DecTH{--legend-item-color-height:0.5rem;align-items:flex-start;display:flex;font-size:var(--fontsize-body-s);gap:var(--spacing-2-xs);line-height:var(--lineheight-l)}.DatePicker-module_hds-datepicker__legend-item--color__37MDx{background-color:var(--date-background);border:var(--date-border);color:var(--date-color);height:var(--legend-item-color-height);margin-top:calc(var(--fontsize-body-s) * var(--lineheight-l) / 2 - var(--legend-item-color-height) / 2);min-width:1.25rem}.DatePicker-module_hds-datepicker__legend-item--selected__rJ4KT{background-color:var(--selected-date-background);color:var(--selected-date-color)}');
  var ut2 = { className: "", style: {}, language: "en", month: O(/* @__PURE__ */ new Date()), selectButtonLabel: "Select", closeButtonLabel: "Close", onCloseButtonClick: /* @__PURE__ */ __name(() => {
  }, "onCloseButtonClick") };
  var dt2 = import_react50.default.createContext(null);
  function ct2(e18, t21) {
    j(1, arguments);
    var a21 = t21 || {}, n21 = a21.locale, r30 = n21 && n21.options && n21.options.weekStartsOn, i12 = null == r30 ? 0 : W2(r30), o18 = null == a21.weekStartsOn ? i12 : W2(a21.weekStartsOn);
    if (!(o18 >= 0 && o18 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    var s21 = N2(e18), l19 = s21.getDay(), u10 = (l19 < o18 ? 7 : 0) + l19 - o18;
    return s21.setDate(s21.getDate() - u10), s21.setHours(0, 0, 0, 0), s21;
  }
  __name(ct2, "ct");
  var mt2 = 6048e5;
  function ht2(e18, t21) {
    return j(1, arguments), function(e19, t22, a21) {
      j(2, arguments);
      var n21 = ct2(e19, a21), r30 = ct2(t22, a21), i12 = n21.getTime() - Ne2(n21), o18 = r30.getTime() - Ne2(r30);
      return Math.round((i12 - o18) / mt2);
    }(function(e19) {
      j(1, arguments);
      var t22 = N2(e19), a21 = t22.getMonth();
      return t22.setFullYear(t22.getFullYear(), a21 + 1, 0), t22.setHours(0, 0, 0, 0), t22;
    }(e18), O(e18), t21) + 1;
  }
  __name(ht2, "ht");
  function ft2(e18, t21) {
    return j(2, arguments), S(e18, 7 * W2(t21));
  }
  __name(ft2, "ft");
  function gt2(e18, t21) {
    j(2, arguments);
    var a21 = N2(e18), n21 = W2(t21);
    if (isNaN(n21)) return /* @__PURE__ */ new Date(NaN);
    if (!n21) return a21;
    var r30 = a21.getDate(), i12 = new Date(a21.getTime());
    return i12.setMonth(a21.getMonth() + n21 + 1, 0), r30 >= i12.getDate() ? i12 : (a21.setFullYear(i12.getFullYear(), i12.getMonth(), r30), a21);
  }
  __name(gt2, "gt");
  function pt2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = t21.getMonth();
    return t21.setFullYear(t21.getFullYear(), a21 + 1, 0), t21.setHours(23, 59, 59, 999), t21;
  }
  __name(pt2, "pt");
  var vt2 = /* @__PURE__ */ __name(({ locale: e18 }) => {
    const t21 = function(e19) {
      const t22 = ct2(/* @__PURE__ */ new Date(), { locale: e19 }), a21 = [];
      for (let n21 = 0; n21 < 7; n21++) {
        const r30 = S(t22, n21);
        a21.push([Fe2(r30, "iiiiii", { locale: e19 }), Fe2(r30, "iiii", { locale: e19 })]);
      }
      return a21;
    }(e18);
    return import_react50.default.createElement("thead", null, import_react50.default.createElement("tr", null, t21.map((e19) => import_react50.default.createElement("th", { key: e19[0], scope: "col", className: lt2["hds-datepicker__head__weekday"] }, import_react50.default.createElement("span", { "aria-hidden": true }, e19[0]), import_react50.default.createElement("span", { className: lt2["hds-datepicker__head__weekday-vhidden"] }, e19[1])))));
  }, "vt");
  function kt2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = t21.getFullYear();
    return t21.setFullYear(a21 + 1, 0, 0), t21.setHours(23, 59, 59, 999), t21;
  }
  __name(kt2, "kt");
  function _t2(e18) {
    j(1, arguments);
    var t21 = N2(e18), a21 = /* @__PURE__ */ new Date(0);
    return a21.setFullYear(t21.getFullYear(), 0, 1), a21.setHours(0, 0, 0, 0), a21;
  }
  __name(_t2, "_t");
  var bt2 = /* @__PURE__ */ __name(({ month: e18 }) => {
    const { locale: t21, language: a21, handleMonthChange: n21, minDate: r30, maxDate: i12 } = (0, import_react50.useContext)(dt2), o18 = e18.getFullYear();
    let s21, d16;
    (!r30 || e18 > O(r30)) && (s21 = gt2(e18, -1)), (!i12 || gt2(e18, 1) <= O(i12)) && (d16 = gt2(e18, 1));
    return import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation"] }, import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__select"] }, import_react50.default.createElement("select", { "aria-label": { en: "Month", fi: "Kuukausi", sv: "Månad" }[a21], onChange: /* @__PURE__ */ __name((t22) => {
      const a22 = new Date(e18);
      a22.setMonth(Number(t22.target.value)), n21(a22);
    }, "onChange"), value: e18.getMonth() }, function(e19) {
      j(1, arguments);
      var t22 = e19 || {}, a22 = N2(t22.start), n22 = N2(t22.end).getTime();
      if (!(a22.getTime() <= n22)) throw new RangeError("Invalid interval");
      var r31 = [], i13 = a22;
      for (i13.setHours(0, 0, 0, 0), i13.setDate(1); i13.getTime() <= n22; ) r31.push(N2(i13)), i13.setMonth(i13.getMonth() + 1);
      return r31;
    }({ start: new Date(o18, 0, 1), end: new Date(o18, 11, 31) }).map((e19) => {
      const a22 = e19.getMonth(), n22 = O(r30) > e19 || pt2(i12) < e19;
      return import_react50.default.createElement("option", { value: a22, key: a22, disabled: n22 }, Fe2(e19, "LLLL", { locale: t21 }));
    })), import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__select-label"], "aria-hidden": true }, Fe2(e18, "LLL", { locale: t21 }), import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__select-icon"] }, import_react50.default.createElement(o11, null)))), import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__select"] }, import_react50.default.createElement("select", { "aria-label": { en: "Year", fi: "Vuosi", sv: "År" }[a21], onChange: /* @__PURE__ */ __name((t22) => {
      const a22 = new Date(e18);
      a22.setFullYear(Number(t22.target.value)), n21(a22);
    }, "onChange"), value: o18 }, function(e19) {
      j(1, arguments);
      var t22 = e19 || {}, a22 = N2(t22.start), n22 = N2(t22.end).getTime();
      if (!(a22.getTime() <= n22)) throw new RangeError("Invalid interval");
      var r31 = [], i13 = a22;
      for (i13.setHours(0, 0, 0, 0), i13.setMonth(0, 1); i13.getTime() <= n22; ) r31.push(N2(i13)), i13.setFullYear(i13.getFullYear() + 1);
      return r31;
    }({ start: _t2(r30), end: kt2(i12) }).map((e19) => {
      const t22 = e19.getFullYear();
      return import_react50.default.createElement("option", { value: t22, key: t22 }, t22);
    })), import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__select-label"], "aria-hidden": true }, e18.getFullYear(), import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__select-icon"] }, import_react50.default.createElement(o11, null)))), import_react50.default.createElement("div", { className: lt2["hds-datepicker__navigation__buttons"] }, import_react50.default.createElement("button", { tabIndex: s21 ? 0 : -1, "aria-disabled": !s21, type: "button", onClick: /* @__PURE__ */ __name((e19) => {
      s21 && n21(s21, e19);
    }, "onClick"), "aria-label": { en: "Previous month", fi: "Edellinen kuukausi", sv: "Föregående månad" }[a21] }, import_react50.default.createElement(s11, null)), import_react50.default.createElement("button", { tabIndex: d16 ? 0 : -1, "aria-disabled": !d16, type: "button", onClick: /* @__PURE__ */ __name((e19) => {
      d16 && n21(d16, e19);
    }, "onClick"), "aria-label": { en: "Next month", fi: "Seuraava kuukausi", sv: "Nästa månad" }[a21] }, import_react50.default.createElement(s12, null))));
  }, "bt");
  function wt2(e18, t21) {
    j(1, arguments);
    var a21 = t21 || {}, n21 = a21.locale, r30 = n21 && n21.options && n21.options.weekStartsOn, i12 = null == r30 ? 0 : W2(r30), o18 = null == a21.weekStartsOn ? i12 : W2(a21.weekStartsOn);
    if (!(o18 >= 0 && o18 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
    var s21 = N2(e18), l19 = s21.getDay(), u10 = 6 + (l19 < o18 ? -7 : 0) - (l19 - o18);
    return s21.setDate(s21.getDate() + u10), s21.setHours(23, 59, 59, 999), s21;
  }
  __name(wt2, "wt");
  function yt2(e18) {
    return j(1, arguments), Math.floor(function(e19) {
      return j(1, arguments), N2(e19).getTime();
    }(e18) / 1e3);
  }
  __name(yt2, "yt");
  function Dt2(e18, t21) {
    j(2, arguments);
    var a21 = B(e18), n21 = B(t21);
    return a21.getTime() === n21.getTime();
  }
  __name(Dt2, "Dt");
  function Mt2(e18) {
    return j(1, arguments), Dt2(e18, Date.now());
  }
  __name(Mt2, "Mt");
  var Pt2 = /* @__PURE__ */ __name(({ day: e18 }) => {
    const { focusedDate: t21, currentMonth: a21, currentMonthAvailableDays: n21, selectedDate: r30, setFocusedDate: i12, locale: o18, onDayClick: s21, handleKeyboardNavigation: u10, setDateClassName: d16, setDateAriaDescribedBy: c6 } = import_react50.default.useContext(dt2), m6 = import_react50.default.useRef(), h5 = z2(e18, O(a21)), f2 = U2(e18, pt2(a21)), g4 = h5 || f2, p5 = g4, v4 = e18.getDate(), k = n21.includes(v4), _7 = g4 || !k, b6 = s21 && !_7, y2 = !_7 && !g4 && d16 && d16(e18), D = b6 ? "button" : "span";
    let M = -1;
    const P2 = t21 && !z2(t21, O(a21)) && !U2(t21, pt2(a21));
    (!P2 && (1 === v4 || v4 === n21[0]) || P2 && Dt2(e18, t21)) && (M = 0);
    const T = { "aria-describedby": c6 ? c6(e18) : void 0, "aria-disabled": !b6 || void 0, "aria-hidden": p5 || void 0, "aria-pressed": Dt2(e18, r30), disabled: _7 || void 0, onClick: b6 ? (t22) => {
      t22.stopPropagation(), t22.preventDefault(), s21(e18, t22);
    } : void 0, onFocus: /* @__PURE__ */ __name(() => i12(e18), "onFocus"), onKeyDown: b6 ? u10 : void 0, ref: b6 ? m6 : void 0, tabIndex: b6 ? M : void 0, className: r17(lt2["hds-datepicker__day"], y2, Mt2(e18) && lt2["hds-datepicker__day--today"], Dt2(e18, r30) && lt2["hds-datepicker__day--selected"], _7 && lt2["hds-datepicker__day--disabled"], _7 && lt2["hds-datepicker__day--outside"]), "data-date": Fe2(e18, "yyyy-MM-dd") };
    return import_react50.default.createElement(D, Object.assign({}, T), import_react50.default.createElement("span", { className: lt2["hds-datepicker__day__wrapper"], "aria-hidden": true }, Fe2(e18, "d", { locale: o18 })), import_react50.default.createElement("span", { className: lt2["hds-datepicker__day__wrapper-vhidden"] }, Fe2(e18, "LLLL d", { locale: o18 })));
  }, "Pt");
  var Tt2 = /* @__PURE__ */ __name((e18) => {
    const { week: t21 } = e18, { locale: a21 } = (0, import_react50.useContext)(dt2), n21 = function(e19, t22) {
      j(1, arguments);
      var a22 = e19 || {}, n22 = N2(a22.start), r30 = N2(a22.end).getTime();
      if (!(n22.getTime() <= r30)) throw new RangeError("Invalid interval");
      var i12 = [], o18 = n22;
      o18.setHours(0, 0, 0, 0);
      var s21 = t22 && "step" in t22 ? Number(t22.step) : 1;
      if (s21 < 1 || isNaN(s21)) throw new RangeError("`options.step` must be a number greater than 1");
      for (; o18.getTime() <= r30; ) i12.push(N2(o18)), o18.setDate(o18.getDate() + s21), o18.setHours(0, 0, 0, 0);
      return i12;
    }({ start: ct2(t21, { locale: a21 }), end: wt2(t21, { locale: a21 }) });
    return import_react50.default.createElement("tr", null, n21.map((e19) => import_react50.default.createElement("td", { className: lt2["hds-datepicker__day-cell"], key: yt2(e19), "aria-current": Mt2(e19) ? "date" : void 0 }, import_react50.default.createElement(Pt2, { day: e19 }))));
  }, "Tt");
  var xt2 = /* @__PURE__ */ __name((e18, t21) => {
    const a21 = O(e18), n21 = pt2(e18), r30 = ht2(e18, { weekStartsOn: 1 });
    return function(e19, t22) {
      j(1, arguments);
      var a22 = e19 || {}, n22 = N2(a22.start), r31 = N2(a22.end), i12 = r31.getTime();
      if (!(n22.getTime() <= i12)) throw new RangeError("Invalid interval");
      var o18 = ct2(n22, t22), s21 = ct2(r31, t22);
      o18.setHours(15), s21.setHours(15), i12 = s21.getTime();
      for (var l19 = [], u10 = o18; u10.getTime() <= i12; ) u10.setHours(0), l19.push(N2(u10)), (u10 = ft2(u10, 1)).setHours(15);
      return l19;
    }({ start: a21, end: 6 === r30 ? n21 : function(e19, t22) {
      if (j(2, arguments), !t22 || "object" != typeof t22) return /* @__PURE__ */ new Date(NaN);
      var a22 = "years" in t22 ? W2(t22.years) : 0, n22 = "months" in t22 ? W2(t22.months) : 0, r31 = "weeks" in t22 ? W2(t22.weeks) : 0, i12 = "days" in t22 ? W2(t22.days) : 0, o18 = "hours" in t22 ? W2(t22.hours) : 0, s21 = "minutes" in t22 ? W2(t22.minutes) : 0, l19 = "seconds" in t22 ? W2(t22.seconds) : 0, u10 = N2(e19), d16 = n22 || a22 ? gt2(u10, n22 + 12 * a22) : u10, c6 = i12 || r31 ? S(d16, i12 + 7 * r31) : d16, m6 = 1e3 * (l19 + 60 * (s21 + 60 * o18));
      return new Date(c6.getTime() + m6);
    }(n21, { weeks: 6 - r30 }) }, { locale: t21 });
  }, "xt");
  var Ct2 = /* @__PURE__ */ __name((e18) => {
    const { locale: t21 } = (0, import_react50.useContext)(dt2), { month: a21 } = e18, n21 = xt2(a21, t21);
    return import_react50.default.createElement("div", null, import_react50.default.createElement(bt2, { month: a21 }), import_react50.default.createElement("table", { className: lt2["hds-datepicker__month-table"] }, import_react50.default.createElement(vt2, { locale: t21 }), import_react50.default.createElement("tbody", null, n21.map((e19) => import_react50.default.createElement(Tt2, { key: e19.toString(), week: e19 })))));
  }, "Ct");
  var Et2 = /* @__PURE__ */ __name(({ legend: e18 }) => 0 === (null == e18 ? void 0 : e18.length) ? null : import_react50.default.createElement("div", { className: lt2["hds-datepicker__legend"] }, e18.map((e19) => import_react50.default.createElement("div", { key: e19.elementId, id: e19.elementId, className: lt2["hds-datepicker__legend-item"] }, import_react50.default.createElement("span", { className: r17(lt2["hds-datepicker__legend-item--color"], e19.selected && lt2["hds-datepicker__legend-item--selected"], e19.relatedClassName) }), e19.label))), "Et");
  var Wt2 = 32;
  var jt2 = 37;
  var Nt2 = 38;
  var St2 = 39;
  var Ht2 = 40;
  var Yt2 = /* @__PURE__ */ __name((e18) => {
    const { initialMonth: t21 = /* @__PURE__ */ new Date(), onMonthChange: a21, onDaySelect: n21, language: r30, minDate: i12, maxDate: o18, onCloseButtonClick: s21, selected: u10, disableConfirmation: f2, selectButtonLabel: g4, closeButtonLabel: p5, isDateDisabledBy: k, open: _7, inputRef: b6, toggleButton: x, setDateClassName: C2, legend: E2, setDateAriaDescribedBy: W3 } = Object.assign(Object.assign({}, ut2), e18), j2 = (0, import_react50.useRef)(), N3 = (0, import_react50.useRef)(), [F3, I2] = (0, import_react50.useState)(O(u10 || t21)), [q3, R3] = (0, import_react50.useState)(null), [A2, X3] = (0, import_react50.useState)(u10 || null), [Q3, K3] = (0, import_react50.useState)(false);
    (0, import_react50.useEffect)(() => {
      u10 && L(u10) && U2(H2(u10), B(i12)) && z2(B(u10), H2(o18)) ? (X3(u10), I2(O(u10))) : (X3(null), I2(O(t21)));
    }, [u10, o18, i12, t21]), (0, import_react50.useEffect)(() => {
      if (q3) {
        const e19 = j2.current.querySelector(`button[data-date='${Fe2(q3, "yyyy-MM-dd")}']`);
        e19 && e19.focus();
      }
    }, [q3]), (0, import_react50.useEffect)(() => {
      const e19 = /* @__PURE__ */ __name((e20) => {
        if (true === _7) {
          const t22 = N3.current && !N3.current.contains(e20.target), a22 = x && (x === e20.target || x.contains(e20.target));
          if (t22 && !a22) {
            const e21 = null === document.activeElement || "BODY" === document.activeElement.tagName;
            s21(e21);
          }
        }
      }, "e");
      return window.addEventListener("click", e19), () => {
        window.removeEventListener("click", e19);
      };
    }), (0, import_react50.useEffect)(() => {
      const e19 = N3.current, t22 = /* @__PURE__ */ __name((t23) => {
        if (!("Tab" === t23.key || 9 === t23.keyCode)) return;
        const a22 = e19.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'), n22 = a22[0], r31 = a22[a22.length - 1];
        t23.shiftKey ? document.activeElement === n22 && (r31.focus(), t23.preventDefault()) : document.activeElement === r31 && (n22.focus(), t23.preventDefault());
      }, "t");
      return e19 && e19.addEventListener("keydown", t22), () => {
        e19 && e19.removeEventListener("keydown", t22);
      };
    }, []), (0, import_react50.useEffect)(() => {
      let e19;
      if (true === _7 && N3.current) {
        const t22 = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])', a22 = N3.current.querySelector(t22);
        a22 && a22.focus(), e19 = setTimeout(() => {
          ((e20) => {
            const t23 = "scrollBehavior" in document.documentElement.style;
            e20.getBoundingClientRect().bottom > window.innerHeight && e20.scrollIntoView(!!t23 && { block: "end", inline: "nearest", behavior: "smooth" }), e20.getBoundingClientRect().top < 0 && e20.scrollIntoView(!t23 || { block: "start", inline: "nearest", behavior: "smooth" });
          })(N3.current);
        }, 30);
      }
      return () => {
        clearTimeout(e19);
      };
    }, [_7]);
    const V3 = /* @__PURE__ */ __name((e19, t22) => {
      const a22 = S(t22, e19);
      return k(a22) ? V3(e19, a22) : a22;
    }, "V"), J3 = /* @__PURE__ */ __name((e19) => {
      if (null !== q3) {
        const t22 = S(q3, e19), a22 = k && k(t22) ? V3(e19, t22) : t22, n22 = U2(H2(a22), B(i12)), r31 = z2(B(a22), H2(o18));
        n22 && r31 && (I2(O(a22)), R3(a22));
      }
    }, "J"), G3 = /* @__PURE__ */ __name((e19, t22) => {
      X3(e19), n21 && f2 && n21(e19, t22);
    }, "G"), Z3 = [...Array(Y2(F3)).keys()].map((e19, t22) => S(F3, t22)), $3 = (k ? Z3.filter((e19) => !k(e19)) : Z3).filter((e19) => U2(H2(e19), B(i12)) && z2(B(e19), H2(o18))).map((e19) => e19.getDate()), ee3 = (0, import_react50.useMemo)(() => ({ name: "beforePopperWrite", enabled: true, phase: "beforeWrite", fn: /* @__PURE__ */ __name(() => {
      Q3 || K3(true);
    }, "fn") }), []), { styles: te3, attributes: ae3 } = usePopper3(b6.current, N3.current, { placement: "bottom-end", modifiers: [ee3, { name: "offset", options: { offset: [0, 5] } }, { name: "flip", options: { rootBoundary: "document", fallbackPlacements: ["bottom-start", "top-end"] } }] });
    return import_react50.default.createElement("div", Object.assign({ ref: N3, className: r17(lt2.pickerWrapper, Q3 && lt2.isVisible), role: "dialog", "aria-modal": "true", "aria-hidden": !_7 || void 0, style: te3.popper }, ae3.popper), import_react50.default.createElement(dt2.Provider, { value: { datepickerRef: j2, minDate: i12, maxDate: o18, currentMonth: F3, currentMonthAvailableDays: $3, focusedDate: q3, selectedDate: A2, locale: (ne3 = r30, { en: Ie2, fi: at2, sv: st2 }[ne3]), language: r30, isDateDisabledBy: k, setCurrentMonth: I2, setFocusedDate: R3, setSelectedDate: X3, onDayClick: G3, handleKeyboardNavigation: /* @__PURE__ */ __name((e19) => {
      let t22 = true;
      switch (e19.keyCode) {
        case St2:
          J3(1);
          break;
        case jt2:
          J3(-1);
          break;
        case Nt2:
          J3(-7);
          break;
        case Ht2:
          J3(7);
          break;
        case Wt2:
          G3(q3, null);
          break;
        default:
          t22 = false;
      }
      true === t22 && e19.preventDefault();
    }, "handleKeyboardNavigation"), handleMonthChange: /* @__PURE__ */ __name((e19, t22) => {
      I2(e19), "function" == typeof a21 && a21(e19, t22);
    }, "handleMonthChange"), setDateClassName: C2, legend: E2, setDateAriaDescribedBy: W3 } }, import_react50.default.createElement("div", { className: lt2["hds-datepicker"], ref: j2 }, import_react50.default.createElement(Ct2, { month: F3 }), E2 && import_react50.default.createElement(Et2, { legend: E2 }), import_react50.default.createElement("div", { className: lt2["hds-datepicker__bottom-buttons"] }, !f2 && import_react50.default.createElement(u6, { disabled: !A2, "aria-disabled": !A2, size: l12.Small, variant: n14.Secondary, iconStart: import_react50.default.createElement(s14, null), onClick: /* @__PURE__ */ __name((e19) => {
      n21 && n21(A2, e19);
    }, "onClick"), "data-testid": "selectButton" }, g4), import_react50.default.createElement(u6, { size: l12.Small, variant: n14.Supplementary, iconStart: import_react50.default.createElement(s15, null), onClick: /* @__PURE__ */ __name(() => s21(), "onClick"), "data-testid": "closeButton" }, p5)))));
    var ne3;
  }, "Yt");
  var Bt2 = import_react50.default.forwardRef((u10, h5) => {
    var { closeButtonLabel: g4, disableConfirmation: v4 = false, disableDatePicker: k = false, initialMonth: _7, language: b6 = "en", openButtonAriaLabel: w, selectButtonLabel: y2, defaultValue: D, value: M, minDate: P2, maxDate: T, isDateDisabledBy: W3, setDateClassName: j2, legend: N3, setDateAriaDescribedBy: S2, dateFormat: H3 = "d.M.yyyy", malformedDateErrorText: Y3, dateOutsideRangeErrorText: B2 } = u10, U3 = o10(u10, ["closeButtonLabel", "disableConfirmation", "disableDatePicker", "initialMonth", "language", "openButtonAriaLabel", "selectButtonLabel", "defaultValue", "value", "minDate", "maxDate", "isDateDisabledBy", "setDateClassName", "legend", "setDateAriaDescribedBy", "dateFormat", "malformedDateErrorText", "dateOutsideRangeErrorText"]);
    const z3 = (0, import_react50.useRef)(null), O2 = (0, import_react50.useRef)(false), [L2, F3] = (0, import_react50.useState)(M || D || ""), [I2, q3] = (0, import_react50.useState)(false), R3 = /* @__PURE__ */ __name(() => {
      var e18;
      return null === (e18 = z3.current) || void 0 === e18 ? void 0 : e18.parentNode.querySelector("button");
    }, "R"), [A2, X3] = (0, import_react50.useState)(false), [Q3, K3] = (0, import_react50.useState)(false);
    (0, import_react50.useEffect)(() => {
      O2.current ? F3(M || "") : O2.current = true;
    }, [M]);
    const V3 = /* @__PURE__ */ __name((e18 = true) => {
      if (q3(false), z3.current && e18) {
        const e19 = R3();
        e19 && e19.focus();
      }
    }, "V");
    (0, import_react50.useEffect)(() => {
      h5 && t15(h5, z3);
    }, [z3, h5]);
    const J3 = (0, import_react50.useCallback)((e18) => parse4(e18, H3, /* @__PURE__ */ new Date()), [H3]), G3 = J3(L2), Z3 = R3(), $3 = isValid(G3) ? G3 : void 0, ee3 = P2 && isValid(P2) ? P2 : startOfMonth(subYears($3 || /* @__PURE__ */ new Date(), 10)), te3 = T && isValid(T) ? T : endOfMonth(addYears($3 || /* @__PURE__ */ new Date(), 10)), ae3 = _7 || /* @__PURE__ */ new Date(), ne3 = /* @__PURE__ */ __name((e18, t21) => {
      e18 !== L2 && F3(e18), U3.onBlur && t21 && U3.onBlur(t21);
      const n21 = J3(e18);
      if (U3.onChange && U3.onChange(e18, n21), "" === e18) return;
      const r30 = isValid(n21) && (!W3 || !W3(n21)), i12 = !!P2 && n21 < P2 || !!T && n21 > T;
      i12 !== Q3 && K3(i12), X3(!r30);
    }, "ne"), re3 = U3.errorText || A2 && (Y3 || { en: "Invalid date or date format", fi: "Virheellinen päivämäärä tai päivämäärämuoto", sv: "Ogiltigt datum eller datumformat" }[b6]) || Q3 && (B2 || { en: "Date is outside the allowed range", fi: "Päivämäärä on sallitun alueen ulkopuolella", sv: "Datumet ligger utanför det tillåtna intervallet" }[b6]) || void 0;
    return import_react50.default.createElement("div", { lang: b6, className: E }, import_react50.default.createElement(n17, Object.assign({}, U3, { buttonIcon: k ? void 0 : import_react50.default.createElement(s13, null), buttonAriaLabel: k ? void 0 : w || { en: "Choose date", fi: "Valitse päivämäärä", sv: "Välj datum" }[b6], onButtonClick: k ? void 0 : (e18) => {
      e18.preventDefault(), q3(!I2);
    }, onChange: /* @__PURE__ */ __name((e18) => {
      F3(e18.target.value);
    }, "onChange"), onBlur: /* @__PURE__ */ __name((e18) => ne3(e18.target.value, e18), "onBlur"), onKeyPress: /* @__PURE__ */ __name((e18) => {
      "Enter" === e18.key && (e18.preventDefault(), ne3(e18.target.value));
    }, "onKeyPress"), value: L2, ref: z3, invalid: A2 || Q3 }, A2 || Q3 ? { "aria-invalid": true } : {}, { errorText: re3 }), false === k && I2 && import_react50.default.createElement(Yt2, { language: b6, disableConfirmation: v4, selected: $3, initialMonth: ae3, onDaySelect: /* @__PURE__ */ __name((e18) => {
      V3(), ne3(format3(e18, H3));
    }, "onDaySelect"), onCloseButtonClick: /* @__PURE__ */ __name((e18) => V3(e18), "onCloseButtonClick"), selectButtonLabel: y2 || { en: "Select", fi: "Valitse", sv: "Välj" }[b6], closeButtonLabel: g4 || { en: "Close", fi: "Sulje", sv: "Stäng" }[b6], minDate: ee3, maxDate: te3, isDateDisabledBy: W3, open: I2, inputRef: z3, toggleButton: Z3, setDateClassName: j2, legend: N3, setDateAriaDescribedBy: S2 })));
  });

  // ../../contrib/hdbt/node_modules/hds-react/Notification.module-b35de371.js
  var o15 = { "hds-icon": "Notification-module_hds-icon__2ocjD", "hds-icon--size-xs": "Notification-module_hds-icon--size-xs__2Mj5D", "hds-icon--size-s": "Notification-module_hds-icon--size-s__igOqE", "hds-icon--size-m": "Notification-module_hds-icon--size-m__sxXOh", "hds-icon--size-l": "Notification-module_hds-icon--size-l__3Ho_A", "hds-icon--size-xl": "Notification-module_hds-icon--size-xl__1cTta", "hds-icon--alert-circle-fill": "Notification-module_hds-icon--alert-circle-fill__12XKS", "hds-icon-start--alert-circle-fill": "Notification-module_hds-icon-start--alert-circle-fill__TwQNY", "hds-icon-end--alert-circle-fill": "Notification-module_hds-icon-end--alert-circle-fill__3gb8C", "hds-icon--check-circle-fill": "Notification-module_hds-icon--check-circle-fill__2wjh3", "hds-icon-start--check-circle-fill": "Notification-module_hds-icon-start--check-circle-fill__2QULC", "hds-icon-end--check-circle-fill": "Notification-module_hds-icon-end--check-circle-fill__2gbRD", "hds-icon--error-fill": "Notification-module_hds-icon--error-fill__159Nf", "hds-icon-start--error-fill": "Notification-module_hds-icon-start--error-fill__2FrGR", "hds-icon-end--error-fill": "Notification-module_hds-icon-end--error-fill__1qx8A", "hds-icon--info-circle-fill": "Notification-module_hds-icon--info-circle-fill__1F7dp", "hds-icon-start--info-circle-fill": "Notification-module_hds-icon-start--info-circle-fill__1-3q2", "hds-icon-end--info-circle-fill": "Notification-module_hds-icon-end--info-circle-fill__w7XD0", notification: "Notification-module_notification__3eUBu notification_hds-notification__2DQPN", noBorder: "Notification-module_noBorder__3HZZH", close: "Notification-module_close__nX5bK notification_hds-notification__close-button__1yGIj", autoClose: "Notification-module_autoClose__3mkBX", content: "Notification-module_content__2E8Z_ notification_hds-notification__content__5ylSS", icon: "Notification-module_icon__3xieh notification_hds-icon__29HQM", label: "Notification-module_label__2OUcx notification_hds-notification__label__2t1lR", body: "Notification-module_body__2lrYE notification_hds-notification__body__3cobH", small: "Notification-module_small__3Vi8R notification_hds-notification--small__1wVl6", large: "Notification-module_large__3sVHL notification_hds-notification--large__260Qm", "top-left": "Notification-module_top-left__nZQMd notification_hds-notification--top-left__sIHO2", "top-center": "Notification-module_top-center__1GWPg notification_hds-notification--top-center__GDWo5", "top-right": "Notification-module_top-right__1HAHi notification_hds-notification--top-right__3Wa5K", "bottom-left": "Notification-module_bottom-left__17y2g notification_hds-notification--bottom-left__eB4ZK", "bottom-center": "Notification-module_bottom-center__2i8Ht notification_hds-notification--bottom-center__5EgOP", "bottom-right": "Notification-module_bottom-right__1Giev notification_hds-notification--bottom-right__1SmfT", success: "Notification-module_success__TdJna notification_hds-notification--success__1_3XZ", alert: "Notification-module_alert__1bsQa notification_hds-notification--alert__1MV7H", error: "Notification-module_error___-koD notification_hds-notification--error__3T1Of", boxShadow: "Notification-module_boxShadow__2yJQB notification_hds-notification--box-shadow__2kbD_" };
  e11(`.notification_hds-icon__29HQM{background-color:currentcolor;display:inline-block;height:var(--icon-size);-webkit-mask-image:var(--mask-image);mask-image:var(--mask-image);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:auto;mask-size:auto;width:var(--icon-size)}.notification_hds-icon--size-xs__19VKz{--icon-size:var(--spacing-layout-2-xs)}.notification_hds-icon--size-s__2Ffyw{--icon-size:var(--spacing-layout-xs)}.notification_hds-icon--size-m__28mpE{--icon-size:var(--spacing-layout-s)}.notification_hds-icon--size-l__T6YEf{--icon-size:var(--spacing-layout-m)}.notification_hds-icon--size-xl__18_OX{--icon-size:var(--spacing-layout-l)}.notification_hds-icon--alert-circle-fill__3er4k{--mask-image-alert-circle-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-alert-circle-fill)}.notification_hds-icon-start--alert-circle-fill__1r-B3{--mask-image-before:var(--mask-image-alert-circle-fill)}.notification_hds-icon-end--alert-circle-fill__2dkn2{--mask-image-after:var(--mask-image-alert-circle-fill)}.notification_hds-icon--check-circle-fill__2u1G4{--mask-image-check-circle-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-check-circle-fill)}.notification_hds-icon-start--check-circle-fill__2JuU0{--mask-image-before:var(--mask-image-check-circle-fill)}.notification_hds-icon-end--check-circle-fill__3YsAQ{--mask-image-after:var(--mask-image-check-circle-fill)}.notification_hds-icon--error-fill__jPWn1{--mask-image-error-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-error-fill)}.notification_hds-icon-start--error-fill__1sR7v{--mask-image-before:var(--mask-image-error-fill)}.notification_hds-icon-end--error-fill__1jyx_{--mask-image-after:var(--mask-image-error-fill)}.notification_hds-icon--info-circle-fill__1gXDU{--mask-image-info-circle-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12 3a9 9 0 100 18 9 9 0 000-18zm1 7v6.5h2V18H9v-1.5h2v-5H9V10h4zm-1.188-4a1.312 1.312 0 110 2.625 1.312 1.312 0 010-2.625z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-info-circle-fill)}.notification_hds-icon-start--info-circle-fill__rortu{--mask-image-before:var(--mask-image-info-circle-fill)}.notification_hds-icon-end--info-circle-fill__3ycxA{--mask-image-after:var(--mask-image-info-circle-fill)}.notification_hds-notification__2DQPN{--notification-background-color:var(--color-info-light);--notification-border-color:var(--color-info);--notification-border-width:var(--spacing-2-xs);--notification-icon-color:var(--color-info);--notification-color:var(--color-black-90);--notification-max-width-inline:none;--notification-max-width-toast:21rem;--notification-z-index-inline:auto;--notification-z-index-toast:99;--notification-offset:var(--spacing-layout-s);--notification-padding:var(--spacing-s);background-color:var(--notification-background-color);border:solid var(--notification-border-color);border-left-width:var(--notification-border-width);border-bottom-width:0;border-right-width:0;border-top-width:0;box-sizing:border-box;color:var(--notification-color);max-width:var(--notification-max-width-inline);padding:var(--notification-padding);position:relative;width:100%;z-index:var(--notification-z-index-inline)}.notification_hds-notification__content__5ylSS{display:grid;grid-gap:var(--spacing-s);gap:var(--spacing-s)}.notification_hds-notification__label__2t1lR{align-items:center;display:flex;font-size:var(--fontsize-heading-xs);font-weight:700;letter-spacing:0;line-height:24px;margin-right:var(--spacing-l)}.notification_hds-notification__2DQPN .notification_hds-icon__29HQM{--icon-size:var(--spacing-layout-xs)}.notification_hds-notification__label__2t1lR>.notification_hds-icon__29HQM{color:var(--notification-icon-color);flex:none;margin-right:var(--spacing-2-xs)}.notification_hds-notification__body__3cobH{font-size:var(--fontsize-body-s);line-height:24px}.notification_hds-notification__close-button__1yGIj{--notification-close-button-offset:var(--spacing-s);background:none;border:none;cursor:pointer;display:flex;outline:none;padding:0;position:absolute;right:var(--notification-close-button-offset);top:var(--notification-close-button-offset)}.notification_hds-notification__close-button__1yGIj:focus{box-shadow:0 0 0 3px var(--color-focus-outline)}.notification_hds-notification--small__1wVl6{--notification-padding:var(--spacing-2-xs)}.notification_hds-notification--small__1wVl6 .notification_hds-notification__content__5ylSS{display:flex;grid-gap:0;gap:0}.notification_hds-notification--small__1wVl6 .notification_hds-notification__label__2t1lR{margin-right:0}.notification_hds-notification--small__1wVl6 .notification_hds-notification__body__3cobH{margin-right:var(--spacing-l)}.notification_hds-notification--small__1wVl6 .notification_hds-notification__close-button__1yGIj{--notification-close-button-offset:var(--spacing-2-xs)}.notification_hds-notification--large__260Qm{--notification-padding:var(--spacing-l)}.notification_hds-notification--large__260Qm .notification_hds-notification__label__2t1lR{margin-right:0}.notification_hds-notification--large__260Qm .notification_hds-notification__close-button__1yGIj{--notification-close-button-offset:var(--spacing-2-xs)}.notification_hds-notification--bottom-center__5EgOP,.notification_hds-notification--bottom-left__eB4ZK,.notification_hds-notification--bottom-right__1SmfT,.notification_hds-notification--top-center__GDWo5,.notification_hds-notification--top-left__sIHO2,.notification_hds-notification--top-right__3Wa5K{border-left-width:0;border-bottom-width:0;border-right-width:0;border-top-width:var(--notification-border-width);max-width:var(--notification-max-width-toast);position:fixed;width:calc(100% - var(--spacing-l));z-index:var(--notification-z-index-toast)}.notification_hds-notification--top-left__sIHO2{left:var(--notification-offset);top:var(--notification-offset)}.notification_hds-notification--top-center__GDWo5{left:50%;top:var(--notification-offset);transform:translateX(-50%)}.notification_hds-notification--top-right__3Wa5K{right:var(--notification-offset);top:var(--notification-offset)}.notification_hds-notification--bottom-left__eB4ZK{bottom:var(--notification-offset);left:var(--notification-offset)}.notification_hds-notification--bottom-center__5EgOP{bottom:var(--notification-offset);left:50%;transform:translateX(-50%)}.notification_hds-notification--bottom-right__1SmfT{bottom:var(--notification-offset);right:var(--notification-offset)}@media only screen and (max-width:765.98px){.notification_hds-notification__2DQPN{--notification-offset:var(--spacing-s)}}.notification_hds-notification--success__1_3XZ{--notification-background-color:var(--color-success-light);--notification-border-color:var(--color-success);--notification-icon-color:var(--color-success)}.notification_hds-notification--alert__1MV7H{--notification-background-color:var(--color-alert-light);--notification-border-color:var(--color-alert-dark);--notification-icon-color:var(--color-alert-dark)}.notification_hds-notification--error__3T1Of{--notification-background-color:var(--color-error-light);--notification-border-color:var(--color-error);--notification-icon-color:var(--color-error)}.notification_hds-notification--box-shadow__2kbD_{box-shadow:var(--box-shadow-l)}.Notification-module_hds-icon__2ocjD{background-color:currentcolor;display:inline-block;height:var(--icon-size);-webkit-mask-image:var(--mask-image);mask-image:var(--mask-image);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:auto;mask-size:auto;width:var(--icon-size)}.Notification-module_hds-icon--size-xs__2Mj5D{--icon-size:var(--spacing-layout-2-xs)}.Notification-module_hds-icon--size-s__igOqE{--icon-size:var(--spacing-layout-xs)}.Notification-module_hds-icon--size-m__sxXOh{--icon-size:var(--spacing-layout-s)}.Notification-module_hds-icon--size-l__3Ho_A{--icon-size:var(--spacing-layout-m)}.Notification-module_hds-icon--size-xl__1cTta{--icon-size:var(--spacing-layout-l)}[class*=hds-icon-start--]:before{-webkit-mask-image:var(--mask-image-before);mask-image:var(--mask-image-before)}[class*=hds-icon-end--]:after,[class*=hds-icon-start--]:before{background-color:currentcolor;content:"";display:inline-flex;height:var(--icon-size,24px);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:contain;mask-size:contain;width:var(--icon-size,24px)}[class*=hds-icon-end--]:after{-webkit-mask-image:var(--mask-image-after);mask-image:var(--mask-image-after)}.Notification-module_hds-icon--alert-circle-fill__12XKS{--mask-image-alert-circle-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12 3a9 9 0 110 18 9 9 0 010-18zm1 13v2h-2v-2h2zm0-10v8h-2V6h2z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-alert-circle-fill)}.Notification-module_hds-icon-start--alert-circle-fill__TwQNY{--mask-image-before:var(--mask-image-alert-circle-fill)}.Notification-module_hds-icon-end--alert-circle-fill__3gb8C{--mask-image-after:var(--mask-image-alert-circle-fill)}.Notification-module_hds-icon--check-circle-fill__2wjh3{--mask-image-check-circle-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12 3a9 9 0 100 18 9 9 0 000-18zm4.5 5L18 9.5 10.5 17 6 12.5 7.5 11l3 3 6-6z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-check-circle-fill)}.Notification-module_hds-icon-start--check-circle-fill__2QULC{--mask-image-before:var(--mask-image-check-circle-fill)}.Notification-module_hds-icon-end--check-circle-fill__2gbRD{--mask-image-after:var(--mask-image-check-circle-fill)}.Notification-module_hds-icon--error-fill__159Nf{--mask-image-error-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M11.175 3.456c.349-.586 1.223-.607 1.61-.063l.04.063 9.052 15.21c.343.577-.072 1.285-.753 1.332l-.072.002H2.948c-.7 0-1.15-.689-.858-1.273l.033-.06 9.052-15.21zM13 16v2h-2v-2h2zm0-7.5v6h-2v-6h2z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-error-fill)}.Notification-module_hds-icon-start--error-fill__2FrGR{--mask-image-before:var(--mask-image-error-fill)}.Notification-module_hds-icon-end--error-fill__1qx8A{--mask-image-after:var(--mask-image-error-fill)}.Notification-module_hds-icon--info-circle-fill__1F7dp{--mask-image-info-circle-fill:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M12 3a9 9 0 100 18 9 9 0 000-18zm1 7v6.5h2V18H9v-1.5h2v-5H9V10h4zm-1.188-4a1.312 1.312 0 110 2.625 1.312 1.312 0 010-2.625z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-info-circle-fill)}.Notification-module_hds-icon-start--info-circle-fill__1-3q2{--mask-image-before:var(--mask-image-info-circle-fill)}.Notification-module_hds-icon-end--info-circle-fill__w7XD0{--mask-image-after:var(--mask-image-info-circle-fill)}.Notification-module_notification__3eUBu{overflow:hidden}.Notification-module_notification__3eUBu.Notification-module_noBorder__3HZZH{border:0;padding-top:calc(var(--notification-padding) + var(--notification-border-width))}.Notification-module_notification__3eUBu.Notification-module_noBorder__3HZZH .Notification-module_close__nX5bK{top:calc(var(--notification-close-button-offset) + var(--notification-border-width))}.Notification-module_autoClose__3mkBX{background-color:var(--notification-border-color);height:var(--notification-border-width);left:0;position:absolute;top:0;width:100%}.Notification-module_icon__3xieh{background-color:transparent}`);

  // ../../contrib/hdbt/node_modules/hds-react/getPlainTextContent-339bac5e.js
  var import_react51 = __toESM(require_react());
  var o16 = /* @__PURE__ */ __name((p5) => "string" == typeof p5 ? p5 : (0, import_react51.isValidElement)(p5) ? o16(p5.props.children) : Array.isArray(p5) ? p5.map(o16).join("") : "", "o");

  // ../../contrib/hdbt/node_modules/@react-aria/utils/dist/useLayoutEffect.mjs
  var import_react52 = __toESM(require_react(), 1);
  var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== "undefined" ? (0, import_react52.default).useLayoutEffect : () => {
  };

  // ../../contrib/hdbt/node_modules/@react-aria/utils/dist/useEffectEvent.mjs
  var import_react53 = __toESM(require_react(), 1);
  function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn3) {
    const ref = (0, import_react53.useRef)(null);
    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
      ref.current = fn3;
    }, [
      fn3
    ]);
    return (0, import_react53.useCallback)((...args) => {
      const f2 = ref.current;
      return f2 === null || f2 === void 0 ? void 0 : f2(...args);
    }, []);
  }
  __name($8ae05eaa5c114e9c$export$7f54fc3180508a52, "$8ae05eaa5c114e9c$export$7f54fc3180508a52");

  // ../../contrib/hdbt/node_modules/@react-aria/utils/dist/useId.mjs
  var import_react54 = __toESM(require_react(), 1);
  var $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
  var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
  function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
    if (idA === idB) return idA;
    let setIdsA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
    if (setIdsA) {
      setIdsA.forEach((fn3) => fn3(idB));
      return idB;
    }
    let setIdsB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
    if (setIdsB) {
      setIdsB.forEach((fn3) => fn3(idA));
      return idA;
    }
    return idB;
  }
  __name($bdb11010cef70236$export$cd8c9cb68f842629, "$bdb11010cef70236$export$cd8c9cb68f842629");

  // ../../contrib/hdbt/node_modules/@react-aria/utils/dist/chain.mjs
  function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
    return (...args) => {
      for (let callback of callbacks) if (typeof callback === "function") callback(...args);
    };
  }
  __name($ff5963eb1fccf552$export$e08e3b67e392101e, "$ff5963eb1fccf552$export$e08e3b67e392101e");

  // ../../contrib/hdbt/node_modules/clsx/dist/clsx.mjs
  function r28(e18) {
    var t21, f2, n21 = "";
    if ("string" == typeof e18 || "number" == typeof e18) n21 += e18;
    else if ("object" == typeof e18) if (Array.isArray(e18)) {
      var o18 = e18.length;
      for (t21 = 0; t21 < o18; t21++) e18[t21] && (f2 = r28(e18[t21])) && (n21 && (n21 += " "), n21 += f2);
    } else for (f2 in e18) e18[f2] && (n21 && (n21 += " "), n21 += f2);
    return n21;
  }
  __name(r28, "r");
  function clsx() {
    for (var e18, t21, f2 = 0, n21 = "", o18 = arguments.length; f2 < o18; f2++) (e18 = arguments[f2]) && (t21 = r28(e18)) && (n21 && (n21 += " "), n21 += t21);
    return n21;
  }
  __name(clsx, "clsx");
  var clsx_default = clsx;

  // ../../contrib/hdbt/node_modules/@react-aria/utils/dist/mergeProps.mjs
  function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
    let result = {
      ...args[0]
    };
    for (let i12 = 1; i12 < args.length; i12++) {
      let props = args[i12];
      for (let key in props) {
        let a21 = result[key];
        let b6 = props[key];
        if (typeof a21 === "function" && typeof b6 === "function" && // This is a lot faster than a regex.
        key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= /* 'A' */
        65 && key.charCodeAt(2) <= /* 'Z' */
        90) result[key] = (0, $ff5963eb1fccf552$export$e08e3b67e392101e)(a21, b6);
        else if ((key === "className" || key === "UNSAFE_className") && typeof a21 === "string" && typeof b6 === "string") result[key] = (0, clsx_default)(a21, b6);
        else if (key === "id" && a21 && b6) result.id = (0, $bdb11010cef70236$export$cd8c9cb68f842629)(a21, b6);
        else result[key] = b6 !== void 0 ? b6 : a21;
      }
    }
    return result;
  }
  __name($3ef42575df84b30b$export$9d1611c77c2fe928, "$3ef42575df84b30b$export$9d1611c77c2fe928");

  // ../../contrib/hdbt/node_modules/@react-aria/visually-hidden/dist/VisuallyHidden.mjs
  var import_react57 = __toESM(require_react(), 1);

  // ../../contrib/hdbt/node_modules/@react-aria/interactions/dist/utils.mjs
  var import_react55 = __toESM(require_react(), 1);
  var _$8a9cb279dc87e130$export$905e7fc544a71f36 = class _$8a9cb279dc87e130$export$905e7fc544a71f36 {
    isDefaultPrevented() {
      return this.nativeEvent.defaultPrevented;
    }
    preventDefault() {
      this.defaultPrevented = true;
      this.nativeEvent.preventDefault();
    }
    stopPropagation() {
      this.nativeEvent.stopPropagation();
      this.isPropagationStopped = () => true;
    }
    isPropagationStopped() {
      return false;
    }
    persist() {
    }
    constructor(type, nativeEvent) {
      this.nativeEvent = nativeEvent;
      this.target = nativeEvent.target;
      this.currentTarget = nativeEvent.currentTarget;
      this.relatedTarget = nativeEvent.relatedTarget;
      this.bubbles = nativeEvent.bubbles;
      this.cancelable = nativeEvent.cancelable;
      this.defaultPrevented = nativeEvent.defaultPrevented;
      this.eventPhase = nativeEvent.eventPhase;
      this.isTrusted = nativeEvent.isTrusted;
      this.timeStamp = nativeEvent.timeStamp;
      this.type = type;
    }
  };
  __name(_$8a9cb279dc87e130$export$905e7fc544a71f36, "$8a9cb279dc87e130$export$905e7fc544a71f36");
  var $8a9cb279dc87e130$export$905e7fc544a71f36 = _$8a9cb279dc87e130$export$905e7fc544a71f36;
  function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
    let stateRef = (0, import_react55.useRef)({
      isFocused: false,
      observer: null
    });
    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
      const state = stateRef.current;
      return () => {
        if (state.observer) {
          state.observer.disconnect();
          state.observer = null;
        }
      };
    }, []);
    let dispatchBlur = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((e18) => {
      onBlur === null || onBlur === void 0 ? void 0 : onBlur(e18);
    });
    return (0, import_react55.useCallback)((e18) => {
      if (e18.target instanceof HTMLButtonElement || e18.target instanceof HTMLInputElement || e18.target instanceof HTMLTextAreaElement || e18.target instanceof HTMLSelectElement) {
        stateRef.current.isFocused = true;
        let target = e18.target;
        let onBlurHandler = /* @__PURE__ */ __name((e19) => {
          stateRef.current.isFocused = false;
          if (target.disabled)
            dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e19));
          if (stateRef.current.observer) {
            stateRef.current.observer.disconnect();
            stateRef.current.observer = null;
          }
        }, "onBlurHandler");
        target.addEventListener("focusout", onBlurHandler, {
          once: true
        });
        stateRef.current.observer = new MutationObserver(() => {
          if (stateRef.current.isFocused && target.disabled) {
            var _stateRef_current_observer;
            (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
            let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
            target.dispatchEvent(new FocusEvent("blur", {
              relatedTarget: relatedTargetEl
            }));
            target.dispatchEvent(new FocusEvent("focusout", {
              bubbles: true,
              relatedTarget: relatedTargetEl
            }));
          }
        });
        stateRef.current.observer.observe(target, {
          attributes: true,
          attributeFilter: [
            "disabled"
          ]
        });
      }
    }, [
      dispatchBlur
    ]);
  }
  __name($8a9cb279dc87e130$export$715c682d09d639cc, "$8a9cb279dc87e130$export$715c682d09d639cc");

  // ../../contrib/hdbt/node_modules/@react-aria/interactions/dist/useFocusWithin.mjs
  var import_react56 = __toESM(require_react(), 1);
  function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
    let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
    let state = (0, import_react56.useRef)({
      isFocusWithin: false
    });
    let onBlur = (0, import_react56.useCallback)((e18) => {
      if (state.current.isFocusWithin && !e18.currentTarget.contains(e18.relatedTarget)) {
        state.current.isFocusWithin = false;
        if (onBlurWithin) onBlurWithin(e18);
        if (onFocusWithinChange) onFocusWithinChange(false);
      }
    }, [
      onBlurWithin,
      onFocusWithinChange,
      state
    ]);
    let onSyntheticFocus = (0, $8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
    let onFocus = (0, import_react56.useCallback)((e18) => {
      if (!state.current.isFocusWithin && document.activeElement === e18.target) {
        if (onFocusWithin) onFocusWithin(e18);
        if (onFocusWithinChange) onFocusWithinChange(true);
        state.current.isFocusWithin = true;
        onSyntheticFocus(e18);
      }
    }, [
      onFocusWithin,
      onFocusWithinChange,
      onSyntheticFocus
    ]);
    if (isDisabled) return {
      focusWithinProps: {
        // These should not have been null, that would conflict in mergeProps
        onFocus: void 0,
        onBlur: void 0
      }
    };
    return {
      focusWithinProps: {
        onFocus,
        onBlur
      }
    };
  }
  __name($9ab94262bd0047c7$export$420e68273165f4ec, "$9ab94262bd0047c7$export$420e68273165f4ec");

  // ../../contrib/hdbt/node_modules/@react-aria/visually-hidden/dist/VisuallyHidden.mjs
  var $5c3e21d68f1c4674$var$styles = {
    border: 0,
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    width: "1px",
    whiteSpace: "nowrap"
  };
  function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
    let { style, isFocusable } = props;
    let [isFocused, setFocused] = (0, import_react57.useState)(false);
    let { focusWithinProps } = (0, $9ab94262bd0047c7$export$420e68273165f4ec)({
      isDisabled: !isFocusable,
      onFocusWithinChange: /* @__PURE__ */ __name((val) => setFocused(val), "onFocusWithinChange")
    });
    let combinedStyles = (0, import_react57.useMemo)(() => {
      if (isFocused) return style;
      else if (style) return {
        ...$5c3e21d68f1c4674$var$styles,
        ...style
      };
      else return $5c3e21d68f1c4674$var$styles;
    }, [
      isFocused
    ]);
    return {
      visuallyHiddenProps: {
        ...focusWithinProps,
        style: combinedStyles
      }
    };
  }
  __name($5c3e21d68f1c4674$export$a966af930f325cab, "$5c3e21d68f1c4674$export$a966af930f325cab");
  function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
    let { children, elementType: Element3 = "div", isFocusable, style, ...otherProps } = props;
    let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
    return /* @__PURE__ */ (0, import_react57.default).createElement(Element3, (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, visuallyHiddenProps), children);
  }
  __name($5c3e21d68f1c4674$export$439d29a4e110a164, "$5c3e21d68f1c4674$export$439d29a4e110a164");

  // ../../contrib/hdbt/node_modules/hds-react/Notification-0c229cb2.js
  var import_react61 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
  var updateQueue2 = makeQueue2();
  var raf2 = /* @__PURE__ */ __name((fn3) => schedule2(fn3, updateQueue2), "raf");
  var writeQueue2 = makeQueue2();
  raf2.write = (fn3) => schedule2(fn3, writeQueue2);
  var onStartQueue2 = makeQueue2();
  raf2.onStart = (fn3) => schedule2(fn3, onStartQueue2);
  var onFrameQueue2 = makeQueue2();
  raf2.onFrame = (fn3) => schedule2(fn3, onFrameQueue2);
  var onFinishQueue2 = makeQueue2();
  raf2.onFinish = (fn3) => schedule2(fn3, onFinishQueue2);
  var timeouts2 = [];
  raf2.setTimeout = (handler, ms) => {
    let time = raf2.now() + ms;
    let cancel = /* @__PURE__ */ __name(() => {
      let i12 = timeouts2.findIndex((t21) => t21.cancel == cancel);
      if (~i12) timeouts2.splice(i12, 1);
      __raf2.count -= ~i12 ? 1 : 0;
    }, "cancel");
    let timeout = {
      time,
      handler,
      cancel
    };
    timeouts2.splice(findTimeout2(time), 0, timeout);
    __raf2.count += 1;
    start4();
    return timeout;
  };
  var findTimeout2 = /* @__PURE__ */ __name((time) => ~(~timeouts2.findIndex((t21) => t21.time > time) || ~timeouts2.length), "findTimeout");
  raf2.cancel = (fn3) => {
    updateQueue2.delete(fn3);
    writeQueue2.delete(fn3);
  };
  raf2.sync = (fn3) => {
    sync2 = true;
    raf2.batchedUpdates(fn3);
    sync2 = false;
  };
  raf2.throttle = (fn3) => {
    let lastArgs;
    function queuedFn() {
      try {
        fn3(...lastArgs);
      } finally {
        lastArgs = null;
      }
    }
    __name(queuedFn, "queuedFn");
    function throttled(...args) {
      lastArgs = args;
      raf2.onStart(queuedFn);
    }
    __name(throttled, "throttled");
    throttled.handler = fn3;
    throttled.cancel = () => {
      onStartQueue2.delete(queuedFn);
      lastArgs = null;
    };
    return throttled;
  };
  var nativeRaf2 = typeof window != "undefined" ? window.requestAnimationFrame : () => {
  };
  raf2.use = (impl) => nativeRaf2 = impl;
  raf2.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
  raf2.batchedUpdates = (fn3) => fn3();
  raf2.catch = console.error;
  raf2.frameLoop = "always";
  raf2.advance = () => {
    if (raf2.frameLoop !== "demand") {
      console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
    } else {
      update3();
    }
  };
  var ts2 = -1;
  var sync2 = false;
  function schedule2(fn3, queue) {
    if (sync2) {
      queue.delete(fn3);
      fn3(0);
    } else {
      queue.add(fn3);
      start4();
    }
  }
  __name(schedule2, "schedule");
  function start4() {
    if (ts2 < 0) {
      ts2 = 0;
      if (raf2.frameLoop !== "demand") {
        nativeRaf2(loop2);
      }
    }
  }
  __name(start4, "start");
  function loop2() {
    if (~ts2) {
      nativeRaf2(loop2);
      raf2.batchedUpdates(update3);
    }
  }
  __name(loop2, "loop");
  function update3() {
    let prevTs = ts2;
    ts2 = raf2.now();
    let count = findTimeout2(ts2);
    if (count) {
      eachSafely2(timeouts2.splice(0, count), (t21) => t21.handler());
      __raf2.count -= count;
    }
    onStartQueue2.flush();
    updateQueue2.flush(prevTs ? Math.min(64, ts2 - prevTs) : 16.667);
    onFrameQueue2.flush();
    writeQueue2.flush();
    onFinishQueue2.flush();
  }
  __name(update3, "update");
  function makeQueue2() {
    let next = /* @__PURE__ */ new Set();
    let current = next;
    return {
      add(fn3) {
        __raf2.count += current == next && !next.has(fn3) ? 1 : 0;
        next.add(fn3);
      },
      delete(fn3) {
        __raf2.count -= current == next && next.has(fn3) ? 1 : 0;
        return next.delete(fn3);
      },
      flush(arg) {
        if (current.size) {
          next = /* @__PURE__ */ new Set();
          __raf2.count -= current.size;
          eachSafely2(current, (fn3) => fn3(arg) && next.add(fn3));
          __raf2.count += next.size;
          current = next;
        }
      }
    };
  }
  __name(makeQueue2, "makeQueue");
  function eachSafely2(values, each3) {
    values.forEach((value) => {
      try {
        each3(value);
      } catch (e18) {
        raf2.catch(e18);
      }
    });
  }
  __name(eachSafely2, "eachSafely");
  var __raf2 = {
    count: 0,
    clear() {
      ts2 = -1;
      timeouts2 = [];
      onStartQueue2 = makeQueue2();
      updateQueue2 = makeQueue2();
      onFrameQueue2 = makeQueue2();
      writeQueue2 = makeQueue2();
      onFinishQueue2 = makeQueue2();
      __raf2.count = 0;
    }
  };

  // ../../contrib/hdbt/node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
  var React11 = __toESM(require_react());
  var import_react58 = __toESM(require_react());
  function noop3() {
  }
  __name(noop3, "noop");
  var defineHidden2 = /* @__PURE__ */ __name((obj, key, value) => Object.defineProperty(obj, key, {
    value,
    writable: true,
    configurable: true
  }), "defineHidden");
  var is2 = {
    arr: Array.isArray,
    obj: /* @__PURE__ */ __name((a21) => !!a21 && a21.constructor.name === "Object", "obj"),
    fun: /* @__PURE__ */ __name((a21) => typeof a21 === "function", "fun"),
    str: /* @__PURE__ */ __name((a21) => typeof a21 === "string", "str"),
    num: /* @__PURE__ */ __name((a21) => typeof a21 === "number", "num"),
    und: /* @__PURE__ */ __name((a21) => a21 === void 0, "und")
  };
  function isEqual4(a21, b6) {
    if (is2.arr(a21)) {
      if (!is2.arr(b6) || a21.length !== b6.length) return false;
      for (let i12 = 0; i12 < a21.length; i12++) {
        if (a21[i12] !== b6[i12]) return false;
      }
      return true;
    }
    return a21 === b6;
  }
  __name(isEqual4, "isEqual");
  var each2 = /* @__PURE__ */ __name((obj, fn3) => obj.forEach(fn3), "each");
  function eachProp2(obj, fn3, ctx3) {
    if (is2.arr(obj)) {
      for (let i12 = 0; i12 < obj.length; i12++) {
        fn3.call(ctx3, obj[i12], `${i12}`);
      }
      return;
    }
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn3.call(ctx3, obj[key], key);
      }
    }
  }
  __name(eachProp2, "eachProp");
  var toArray2 = /* @__PURE__ */ __name((a21) => is2.und(a21) ? [] : is2.arr(a21) ? a21 : [a21], "toArray");
  function flush3(queue, iterator) {
    if (queue.size) {
      const items = Array.from(queue);
      queue.clear();
      each2(items, iterator);
    }
  }
  __name(flush3, "flush");
  var flushCalls2 = /* @__PURE__ */ __name((queue, ...args) => flush3(queue, (fn3) => fn3(...args)), "flushCalls");
  var createStringInterpolator$12;
  var to4;
  var colors$12 = null;
  var skipAnimation2 = false;
  var willAdvance2 = noop3;
  var assign3 = /* @__PURE__ */ __name((globals3) => {
    if (globals3.to) to4 = globals3.to;
    if (globals3.now) raf2.now = globals3.now;
    if (globals3.colors !== void 0) colors$12 = globals3.colors;
    if (globals3.skipAnimation != null) skipAnimation2 = globals3.skipAnimation;
    if (globals3.createStringInterpolator) createStringInterpolator$12 = globals3.createStringInterpolator;
    if (globals3.requestAnimationFrame) raf2.use(globals3.requestAnimationFrame);
    if (globals3.batchedUpdates) raf2.batchedUpdates = globals3.batchedUpdates;
    if (globals3.willAdvance) willAdvance2 = globals3.willAdvance;
    if (globals3.frameLoop) raf2.frameLoop = globals3.frameLoop;
  }, "assign");
  var globals2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    get createStringInterpolator() {
      return createStringInterpolator$12;
    },
    get to() {
      return to4;
    },
    get colors() {
      return colors$12;
    },
    get skipAnimation() {
      return skipAnimation2;
    },
    get willAdvance() {
      return willAdvance2;
    },
    assign: assign3
  });
  var startQueue2 = /* @__PURE__ */ new Set();
  var currentFrame2 = [];
  var prevFrame2 = [];
  var priority2 = 0;
  var frameLoop2 = {
    get idle() {
      return !startQueue2.size && !currentFrame2.length;
    },
    start(animation) {
      if (priority2 > animation.priority) {
        startQueue2.add(animation);
        raf2.onStart(flushStartQueue2);
      } else {
        startSafely2(animation);
        raf2(advance2);
      }
    },
    advance: advance2,
    sort(animation) {
      if (priority2) {
        raf2.onFrame(() => frameLoop2.sort(animation));
      } else {
        const prevIndex = currentFrame2.indexOf(animation);
        if (~prevIndex) {
          currentFrame2.splice(prevIndex, 1);
          startUnsafely2(animation);
        }
      }
    },
    clear() {
      currentFrame2 = [];
      startQueue2.clear();
    }
  };
  function flushStartQueue2() {
    startQueue2.forEach(startSafely2);
    startQueue2.clear();
    raf2(advance2);
  }
  __name(flushStartQueue2, "flushStartQueue");
  function startSafely2(animation) {
    if (!currentFrame2.includes(animation)) startUnsafely2(animation);
  }
  __name(startSafely2, "startSafely");
  function startUnsafely2(animation) {
    currentFrame2.splice(findIndex3(currentFrame2, (other) => other.priority > animation.priority), 0, animation);
  }
  __name(startUnsafely2, "startUnsafely");
  function advance2(dt3) {
    const nextFrame = prevFrame2;
    for (let i12 = 0; i12 < currentFrame2.length; i12++) {
      const animation = currentFrame2[i12];
      priority2 = animation.priority;
      if (!animation.idle) {
        willAdvance2(animation);
        animation.advance(dt3);
        if (!animation.idle) {
          nextFrame.push(animation);
        }
      }
    }
    priority2 = 0;
    prevFrame2 = currentFrame2;
    prevFrame2.length = 0;
    currentFrame2 = nextFrame;
    return currentFrame2.length > 0;
  }
  __name(advance2, "advance");
  function findIndex3(arr, test) {
    const index = arr.findIndex(test);
    return index < 0 ? arr.length : index;
  }
  __name(findIndex3, "findIndex");
  var colors2 = {
    transparent: 0,
    aliceblue: 4042850303,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    burntsienna: 3934150143,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  var NUMBER2 = "[-+]?\\d*\\.?\\d+";
  var PERCENTAGE2 = NUMBER2 + "%";
  function call2(...parts) {
    return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
  }
  __name(call2, "call");
  var rgb2 = new RegExp("rgb" + call2(NUMBER2, NUMBER2, NUMBER2));
  var rgba2 = new RegExp("rgba" + call2(NUMBER2, NUMBER2, NUMBER2, NUMBER2));
  var hsl2 = new RegExp("hsl" + call2(NUMBER2, PERCENTAGE2, PERCENTAGE2));
  var hsla2 = new RegExp("hsla" + call2(NUMBER2, PERCENTAGE2, PERCENTAGE2, NUMBER2));
  var hex32 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex42 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex62 = /^#([0-9a-fA-F]{6})$/;
  var hex82 = /^#([0-9a-fA-F]{8})$/;
  function normalizeColor2(color) {
    let match4;
    if (typeof color === "number") {
      return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
    }
    if (match4 = hex62.exec(color)) return parseInt(match4[1] + "ff", 16) >>> 0;
    if (colors$12 && colors$12[color] !== void 0) {
      return colors$12[color];
    }
    if (match4 = rgb2.exec(color)) {
      return (parse2552(match4[1]) << 24 | parse2552(match4[2]) << 16 | parse2552(match4[3]) << 8 | 255) >>> 0;
    }
    if (match4 = rgba2.exec(color)) {
      return (parse2552(match4[1]) << 24 | parse2552(match4[2]) << 16 | parse2552(match4[3]) << 8 | parse12(match4[4])) >>> 0;
    }
    if (match4 = hex32.exec(color)) {
      return parseInt(match4[1] + match4[1] + match4[2] + match4[2] + match4[3] + match4[3] + "ff", 16) >>> 0;
    }
    if (match4 = hex82.exec(color)) return parseInt(match4[1], 16) >>> 0;
    if (match4 = hex42.exec(color)) {
      return parseInt(match4[1] + match4[1] + match4[2] + match4[2] + match4[3] + match4[3] + match4[4] + match4[4], 16) >>> 0;
    }
    if (match4 = hsl2.exec(color)) {
      return (hslToRgb2(parse3602(match4[1]), parsePercentage2(match4[2]), parsePercentage2(match4[3])) | 255) >>> 0;
    }
    if (match4 = hsla2.exec(color)) {
      return (hslToRgb2(parse3602(match4[1]), parsePercentage2(match4[2]), parsePercentage2(match4[3])) | parse12(match4[4])) >>> 0;
    }
    return null;
  }
  __name(normalizeColor2, "normalizeColor");
  function hue2rgb2(p5, q3, t21) {
    if (t21 < 0) t21 += 1;
    if (t21 > 1) t21 -= 1;
    if (t21 < 1 / 6) return p5 + (q3 - p5) * 6 * t21;
    if (t21 < 1 / 2) return q3;
    if (t21 < 2 / 3) return p5 + (q3 - p5) * (2 / 3 - t21) * 6;
    return p5;
  }
  __name(hue2rgb2, "hue2rgb");
  function hslToRgb2(h5, s21, l19) {
    const q3 = l19 < 0.5 ? l19 * (1 + s21) : l19 + s21 - l19 * s21;
    const p5 = 2 * l19 - q3;
    const r30 = hue2rgb2(p5, q3, h5 + 1 / 3);
    const g4 = hue2rgb2(p5, q3, h5);
    const b6 = hue2rgb2(p5, q3, h5 - 1 / 3);
    return Math.round(r30 * 255) << 24 | Math.round(g4 * 255) << 16 | Math.round(b6 * 255) << 8;
  }
  __name(hslToRgb2, "hslToRgb");
  function parse2552(str) {
    const int3 = parseInt(str, 10);
    if (int3 < 0) return 0;
    if (int3 > 255) return 255;
    return int3;
  }
  __name(parse2552, "parse255");
  function parse3602(str) {
    const int3 = parseFloat(str);
    return (int3 % 360 + 360) % 360 / 360;
  }
  __name(parse3602, "parse360");
  function parse12(str) {
    const num = parseFloat(str);
    if (num < 0) return 0;
    if (num > 1) return 255;
    return Math.round(num * 255);
  }
  __name(parse12, "parse1");
  function parsePercentage2(str) {
    const int3 = parseFloat(str);
    if (int3 < 0) return 0;
    if (int3 > 100) return 1;
    return int3 / 100;
  }
  __name(parsePercentage2, "parsePercentage");
  function colorToRgba2(input) {
    let int32Color = normalizeColor2(input);
    if (int32Color === null) return input;
    int32Color = int32Color || 0;
    let r30 = (int32Color & 4278190080) >>> 24;
    let g4 = (int32Color & 16711680) >>> 16;
    let b6 = (int32Color & 65280) >>> 8;
    let a21 = (int32Color & 255) / 255;
    return `rgba(${r30}, ${g4}, ${b6}, ${a21})`;
  }
  __name(colorToRgba2, "colorToRgba");
  var createInterpolator2 = /* @__PURE__ */ __name((range, output, extrapolate) => {
    if (is2.fun(range)) {
      return range;
    }
    if (is2.arr(range)) {
      return createInterpolator2({
        range,
        output,
        extrapolate
      });
    }
    if (is2.str(range.output[0])) {
      return createStringInterpolator$12(range);
    }
    const config3 = range;
    const outputRange = config3.output;
    const inputRange = config3.range || [0, 1];
    const extrapolateLeft = config3.extrapolateLeft || config3.extrapolate || "extend";
    const extrapolateRight = config3.extrapolateRight || config3.extrapolate || "extend";
    const easing = config3.easing || ((t21) => t21);
    return (input) => {
      const range2 = findRange2(input, inputRange);
      return interpolate2(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config3.map);
    };
  }, "createInterpolator");
  function interpolate2(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
    let result = map ? map(input) : input;
    if (result < inputMin) {
      if (extrapolateLeft === "identity") return result;
      else if (extrapolateLeft === "clamp") result = inputMin;
    }
    if (result > inputMax) {
      if (extrapolateRight === "identity") return result;
      else if (extrapolateRight === "clamp") result = inputMax;
    }
    if (outputMin === outputMax) return outputMin;
    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;
    if (inputMin === -Infinity) result = -result;
    else if (inputMax === Infinity) result = result - inputMin;
    else result = (result - inputMin) / (inputMax - inputMin);
    result = easing(result);
    if (outputMin === -Infinity) result = -result;
    else if (outputMax === Infinity) result = result + outputMin;
    else result = result * (outputMax - outputMin) + outputMin;
    return result;
  }
  __name(interpolate2, "interpolate");
  function findRange2(input, inputRange) {
    for (var i12 = 1; i12 < inputRange.length - 1; ++i12) if (inputRange[i12] >= input) break;
    return i12 - 1;
  }
  __name(findRange2, "findRange");
  function _extends4() {
    _extends4 = Object.assign || function(target) {
      for (var i12 = 1; i12 < arguments.length; i12++) {
        var source = arguments[i12];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  __name(_extends4, "_extends");
  var $get2 = Symbol.for("FluidValue.get");
  var $observers2 = Symbol.for("FluidValue.observers");
  var hasFluidValue2 = /* @__PURE__ */ __name((arg) => Boolean(arg && arg[$get2]), "hasFluidValue");
  var getFluidValue2 = /* @__PURE__ */ __name((arg) => arg && arg[$get2] ? arg[$get2]() : arg, "getFluidValue");
  var getFluidObservers2 = /* @__PURE__ */ __name((target) => target[$observers2] || null, "getFluidObservers");
  function callFluidObserver2(observer, event) {
    if (observer.eventObserved) {
      observer.eventObserved(event);
    } else {
      observer(event);
    }
  }
  __name(callFluidObserver2, "callFluidObserver");
  function callFluidObservers2(target, event) {
    let observers = target[$observers2];
    if (observers) {
      observers.forEach((observer) => {
        callFluidObserver2(observer, event);
      });
    }
  }
  __name(callFluidObservers2, "callFluidObservers");
  var _FluidValue2 = class _FluidValue2 {
    constructor(get) {
      this[$get2] = void 0;
      this[$observers2] = void 0;
      if (!get && !(get = this.get)) {
        throw Error("Unknown getter");
      }
      setFluidGetter2(this, get);
    }
  };
  __name(_FluidValue2, "FluidValue");
  var FluidValue2 = _FluidValue2;
  var setFluidGetter2 = /* @__PURE__ */ __name((target, get) => setHidden2(target, $get2, get), "setFluidGetter");
  function addFluidObserver2(target, observer) {
    if (target[$get2]) {
      let observers = target[$observers2];
      if (!observers) {
        setHidden2(target, $observers2, observers = /* @__PURE__ */ new Set());
      }
      if (!observers.has(observer)) {
        observers.add(observer);
        if (target.observerAdded) {
          target.observerAdded(observers.size, observer);
        }
      }
    }
    return observer;
  }
  __name(addFluidObserver2, "addFluidObserver");
  function removeFluidObserver2(target, observer) {
    let observers = target[$observers2];
    if (observers && observers.has(observer)) {
      const count = observers.size - 1;
      if (count) {
        observers.delete(observer);
      } else {
        target[$observers2] = null;
      }
      if (target.observerRemoved) {
        target.observerRemoved(count, observer);
      }
    }
  }
  __name(removeFluidObserver2, "removeFluidObserver");
  var setHidden2 = /* @__PURE__ */ __name((target, key, value) => Object.defineProperty(target, key, {
    value,
    writable: true,
    configurable: true
  }), "setHidden");
  var numberRegex2 = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var colorRegex2 = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
  var unitRegex2 = new RegExp(`(${numberRegex2.source})(%|[a-z]+)`, "i");
  var namedColorRegex2;
  var rgbaRegex2 = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
  var rgbaRound2 = /* @__PURE__ */ __name((_7, p1, p22, p32, p42) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p32)}, ${p42})`, "rgbaRound");
  var createStringInterpolator2 = /* @__PURE__ */ __name((config3) => {
    if (!namedColorRegex2) namedColorRegex2 = colors$12 ? new RegExp(`(${Object.keys(colors$12).join("|")})(?!\\w)`, "g") : /^\b$/;
    const output = config3.output.map((value) => getFluidValue2(value).replace(colorRegex2, colorToRgba2).replace(namedColorRegex2, colorToRgba2));
    const keyframes = output.map((value) => value.match(numberRegex2).map(Number));
    const outputRanges = keyframes[0].map((_7, i12) => keyframes.map((values) => {
      if (!(i12 in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i12];
    }));
    const interpolators = outputRanges.map((output2) => createInterpolator2(_extends4({}, config3, {
      output: output2
    })));
    return (input) => {
      var _output$find;
      const missingUnit = !unitRegex2.test(output[0]) && ((_output$find = output.find((value) => unitRegex2.test(value))) == null ? void 0 : _output$find.replace(numberRegex2, ""));
      let i12 = 0;
      return output[0].replace(numberRegex2, () => `${interpolators[i12++](input)}${missingUnit || ""}`).replace(rgbaRegex2, rgbaRound2);
    };
  }, "createStringInterpolator");
  var prefix2 = "react-spring: ";
  var once2 = /* @__PURE__ */ __name((fn3) => {
    const func = fn3;
    let called = false;
    if (typeof func != "function") {
      throw new TypeError(`${prefix2}once requires a function parameter`);
    }
    return (...args) => {
      if (!called) {
        func(...args);
        called = true;
      }
    };
  }, "once");
  var warnInterpolate2 = once2(console.warn);
  function deprecateInterpolate2() {
    warnInterpolate2(`${prefix2}The "interpolate" function is deprecated in v9 (use "to" instead)`);
  }
  __name(deprecateInterpolate2, "deprecateInterpolate");
  var warnDirectCall2 = once2(console.warn);
  function deprecateDirectCall2() {
    warnDirectCall2(`${prefix2}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
  }
  __name(deprecateDirectCall2, "deprecateDirectCall");
  function isAnimatedString2(value) {
    return is2.str(value) && (value[0] == "#" || /\d/.test(value) || value in (colors$12 || {}));
  }
  __name(isAnimatedString2, "isAnimatedString");
  var useOnce2 = /* @__PURE__ */ __name((effect7) => (0, import_react58.useEffect)(effect7, emptyDeps2), "useOnce");
  var emptyDeps2 = [];
  function useForceUpdate2() {
    const update5 = (0, import_react58.useState)()[1];
    const mounted = (0, import_react58.useState)(makeMountedRef2)[0];
    useOnce2(mounted.unmount);
    return () => {
      if (mounted.current) {
        update5({});
      }
    };
  }
  __name(useForceUpdate2, "useForceUpdate");
  function makeMountedRef2() {
    const mounted = {
      current: true,
      unmount: /* @__PURE__ */ __name(() => () => {
        mounted.current = false;
      }, "unmount")
    };
    return mounted;
  }
  __name(makeMountedRef2, "makeMountedRef");
  function useMemoOne2(getResult, inputs) {
    const [initial] = (0, import_react58.useState)(() => ({
      inputs,
      result: getResult()
    }));
    const committed = (0, import_react58.useRef)();
    const prevCache = committed.current;
    let cache2 = prevCache;
    if (cache2) {
      const useCache = Boolean(inputs && cache2.inputs && areInputsEqual2(inputs, cache2.inputs));
      if (!useCache) {
        cache2 = {
          inputs,
          result: getResult()
        };
      }
    } else {
      cache2 = initial;
    }
    (0, import_react58.useEffect)(() => {
      committed.current = cache2;
      if (prevCache == initial) {
        initial.inputs = initial.result = void 0;
      }
    }, [cache2]);
    return cache2.result;
  }
  __name(useMemoOne2, "useMemoOne");
  function areInputsEqual2(next, prev) {
    if (next.length !== prev.length) {
      return false;
    }
    for (let i12 = 0; i12 < next.length; i12++) {
      if (next[i12] !== prev[i12]) {
        return false;
      }
    }
    return true;
  }
  __name(areInputsEqual2, "areInputsEqual");
  function usePrev2(value) {
    const prevRef = (0, import_react58.useRef)();
    (0, import_react58.useEffect)(() => {
      prevRef.current = value;
    });
    return prevRef.current;
  }
  __name(usePrev2, "usePrev");
  var useLayoutEffect7 = typeof window !== "undefined" && window.document && window.document.createElement ? React11.useLayoutEffect : React11.useEffect;

  // ../../contrib/hdbt/node_modules/@react-spring/core/dist/react-spring-core.esm.js
  var React13 = __toESM(require_react());
  var import_react60 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
  var React12 = __toESM(require_react());
  var import_react59 = __toESM(require_react());
  var $node2 = Symbol.for("Animated:node");
  var isAnimated2 = /* @__PURE__ */ __name((value) => !!value && value[$node2] === value, "isAnimated");
  var getAnimated2 = /* @__PURE__ */ __name((owner) => owner && owner[$node2], "getAnimated");
  var setAnimated2 = /* @__PURE__ */ __name((owner, node) => defineHidden2(owner, $node2, node), "setAnimated");
  var getPayload2 = /* @__PURE__ */ __name((owner) => owner && owner[$node2] && owner[$node2].getPayload(), "getPayload");
  var _Animated2 = class _Animated2 {
    constructor() {
      this.payload = void 0;
      setAnimated2(this, this);
    }
    getPayload() {
      return this.payload || [];
    }
  };
  __name(_Animated2, "Animated");
  var Animated2 = _Animated2;
  var _AnimatedValue2 = class _AnimatedValue2 extends Animated2 {
    constructor(_value) {
      super();
      this.done = true;
      this.elapsedTime = void 0;
      this.lastPosition = void 0;
      this.lastVelocity = void 0;
      this.v0 = void 0;
      this.durationProgress = 0;
      this._value = _value;
      if (is2.num(this._value)) {
        this.lastPosition = this._value;
      }
    }
    static create(value) {
      return new _AnimatedValue2(value);
    }
    getPayload() {
      return [this];
    }
    getValue() {
      return this._value;
    }
    setValue(value, step) {
      if (is2.num(value)) {
        this.lastPosition = value;
        if (step) {
          value = Math.round(value / step) * step;
          if (this.done) {
            this.lastPosition = value;
          }
        }
      }
      if (this._value === value) {
        return false;
      }
      this._value = value;
      return true;
    }
    reset() {
      const {
        done
      } = this;
      this.done = false;
      if (is2.num(this._value)) {
        this.elapsedTime = 0;
        this.durationProgress = 0;
        this.lastPosition = this._value;
        if (done) this.lastVelocity = null;
        this.v0 = null;
      }
    }
  };
  __name(_AnimatedValue2, "AnimatedValue");
  var AnimatedValue2 = _AnimatedValue2;
  var _AnimatedString2 = class _AnimatedString2 extends AnimatedValue2 {
    constructor(value) {
      super(0);
      this._string = null;
      this._toString = void 0;
      this._toString = createInterpolator2({
        output: [value, value]
      });
    }
    static create(value) {
      return new _AnimatedString2(value);
    }
    getValue() {
      let value = this._string;
      return value == null ? this._string = this._toString(this._value) : value;
    }
    setValue(value) {
      if (is2.str(value)) {
        if (value == this._string) {
          return false;
        }
        this._string = value;
        this._value = 1;
      } else if (super.setValue(value)) {
        this._string = null;
      } else {
        return false;
      }
      return true;
    }
    reset(goal) {
      if (goal) {
        this._toString = createInterpolator2({
          output: [this.getValue(), goal]
        });
      }
      this._value = 0;
      super.reset();
    }
  };
  __name(_AnimatedString2, "AnimatedString");
  var AnimatedString2 = _AnimatedString2;
  var TreeContext2 = {
    dependencies: null
  };
  var _AnimatedObject2 = class _AnimatedObject2 extends Animated2 {
    constructor(source) {
      super();
      this.source = source;
      this.setValue(source);
    }
    getValue(animated3) {
      const values = {};
      eachProp2(this.source, (source, key) => {
        if (isAnimated2(source)) {
          values[key] = source.getValue(animated3);
        } else if (hasFluidValue2(source)) {
          values[key] = getFluidValue2(source);
        } else if (!animated3) {
          values[key] = source;
        }
      });
      return values;
    }
    setValue(source) {
      this.source = source;
      this.payload = this._makePayload(source);
    }
    reset() {
      if (this.payload) {
        each2(this.payload, (node) => node.reset());
      }
    }
    _makePayload(source) {
      if (source) {
        const payload = /* @__PURE__ */ new Set();
        eachProp2(source, this._addToPayload, payload);
        return Array.from(payload);
      }
    }
    _addToPayload(source) {
      if (TreeContext2.dependencies && hasFluidValue2(source)) {
        TreeContext2.dependencies.add(source);
      }
      const payload = getPayload2(source);
      if (payload) {
        each2(payload, (node) => this.add(node));
      }
    }
  };
  __name(_AnimatedObject2, "AnimatedObject");
  var AnimatedObject2 = _AnimatedObject2;
  var _AnimatedArray2 = class _AnimatedArray2 extends AnimatedObject2 {
    constructor(source) {
      super(source);
    }
    static create(source) {
      return new _AnimatedArray2(source);
    }
    getValue() {
      return this.source.map((node) => node.getValue());
    }
    setValue(source) {
      const payload = this.getPayload();
      if (source.length == payload.length) {
        return payload.map((node, i12) => node.setValue(source[i12])).some(Boolean);
      }
      super.setValue(source.map(makeAnimated2));
      return true;
    }
  };
  __name(_AnimatedArray2, "AnimatedArray");
  var AnimatedArray2 = _AnimatedArray2;
  function makeAnimated2(value) {
    const nodeType = isAnimatedString2(value) ? AnimatedString2 : AnimatedValue2;
    return nodeType.create(value);
  }
  __name(makeAnimated2, "makeAnimated");
  function getAnimatedType2(value) {
    const parentNode = getAnimated2(value);
    return parentNode ? parentNode.constructor : is2.arr(value) ? AnimatedArray2 : isAnimatedString2(value) ? AnimatedString2 : AnimatedValue2;
  }
  __name(getAnimatedType2, "getAnimatedType");
  function _extends5() {
    _extends5 = Object.assign || function(target) {
      for (var i12 = 1; i12 < arguments.length; i12++) {
        var source = arguments[i12];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  __name(_extends5, "_extends");
  var withAnimated2 = /* @__PURE__ */ __name((Component2, host3) => {
    const hasInstance = !is2.fun(Component2) || Component2.prototype && Component2.prototype.isReactComponent;
    return (0, import_react59.forwardRef)((givenProps, givenRef) => {
      const instanceRef = (0, import_react59.useRef)(null);
      const ref = hasInstance && (0, import_react59.useCallback)((value) => {
        instanceRef.current = updateRef2(givenRef, value);
      }, [givenRef]);
      const [props, deps] = getAnimatedState2(givenProps, host3);
      const forceUpdate = useForceUpdate2();
      const callback = /* @__PURE__ */ __name(() => {
        const instance = instanceRef.current;
        if (hasInstance && !instance) {
          return;
        }
        const didUpdate = instance ? host3.applyAnimatedValues(instance, props.getValue(true)) : false;
        if (didUpdate === false) {
          forceUpdate();
        }
      }, "callback");
      const observer = new PropsObserver2(callback, deps);
      const observerRef = (0, import_react59.useRef)();
      useLayoutEffect7(() => {
        const lastObserver = observerRef.current;
        observerRef.current = observer;
        each2(deps, (dep) => addFluidObserver2(dep, observer));
        if (lastObserver) {
          each2(lastObserver.deps, (dep) => removeFluidObserver2(dep, lastObserver));
          raf2.cancel(lastObserver.update);
        }
      });
      (0, import_react59.useEffect)(callback, []);
      useOnce2(() => () => {
        const observer2 = observerRef.current;
        each2(observer2.deps, (dep) => removeFluidObserver2(dep, observer2));
      });
      const usedProps = host3.getComponentProps(props.getValue());
      return React12.createElement(Component2, _extends5({}, usedProps, {
        ref
      }));
    });
  }, "withAnimated");
  var _PropsObserver2 = class _PropsObserver2 {
    constructor(update5, deps) {
      this.update = update5;
      this.deps = deps;
    }
    eventObserved(event) {
      if (event.type == "change") {
        raf2.write(this.update);
      }
    }
  };
  __name(_PropsObserver2, "PropsObserver");
  var PropsObserver2 = _PropsObserver2;
  function getAnimatedState2(props, host3) {
    const dependencies = /* @__PURE__ */ new Set();
    TreeContext2.dependencies = dependencies;
    if (props.style) props = _extends5({}, props, {
      style: host3.createAnimatedStyle(props.style)
    });
    props = new AnimatedObject2(props);
    TreeContext2.dependencies = null;
    return [props, dependencies];
  }
  __name(getAnimatedState2, "getAnimatedState");
  function updateRef2(ref, value) {
    if (ref) {
      if (is2.fun(ref)) ref(value);
      else ref.current = value;
    }
    return value;
  }
  __name(updateRef2, "updateRef");
  var cacheKey2 = Symbol.for("AnimatedComponent");
  var createHost2 = /* @__PURE__ */ __name((components, {
    applyAnimatedValues: _applyAnimatedValues = /* @__PURE__ */ __name(() => false, "_applyAnimatedValues"),
    createAnimatedStyle: _createAnimatedStyle = /* @__PURE__ */ __name((style) => new AnimatedObject2(style), "_createAnimatedStyle"),
    getComponentProps: _getComponentProps = /* @__PURE__ */ __name((props) => props, "_getComponentProps")
  } = {}) => {
    const hostConfig = {
      applyAnimatedValues: _applyAnimatedValues,
      createAnimatedStyle: _createAnimatedStyle,
      getComponentProps: _getComponentProps
    };
    const animated3 = /* @__PURE__ */ __name((Component2) => {
      const displayName = getDisplayName2(Component2) || "Anonymous";
      if (is2.str(Component2)) {
        Component2 = animated3[Component2] || (animated3[Component2] = withAnimated2(Component2, hostConfig));
      } else {
        Component2 = Component2[cacheKey2] || (Component2[cacheKey2] = withAnimated2(Component2, hostConfig));
      }
      Component2.displayName = `Animated(${displayName})`;
      return Component2;
    }, "animated");
    eachProp2(components, (Component2, key) => {
      if (is2.arr(components)) {
        key = getDisplayName2(Component2);
      }
      animated3[key] = animated3(Component2);
    });
    return {
      animated: animated3
    };
  }, "createHost");
  var getDisplayName2 = /* @__PURE__ */ __name((arg) => is2.str(arg) ? arg : arg && is2.str(arg.displayName) ? arg.displayName : is2.fun(arg) && arg.name || null, "getDisplayName");

  // ../../contrib/hdbt/node_modules/@react-spring/core/dist/react-spring-core.esm.js
  function _extends6() {
    _extends6 = Object.assign || function(target) {
      for (var i12 = 1; i12 < arguments.length; i12++) {
        var source = arguments[i12];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends6.apply(this, arguments);
  }
  __name(_extends6, "_extends");
  function callProp(value, ...args) {
    return is2.fun(value) ? value(...args) : value;
  }
  __name(callProp, "callProp");
  var matchProp = /* @__PURE__ */ __name((value, key) => value === true || !!(key && value && (is2.fun(value) ? value(key) : toArray2(value).includes(key))), "matchProp");
  var resolveProp = /* @__PURE__ */ __name((prop, key) => is2.obj(prop) ? key && prop[key] : prop, "resolveProp");
  var getDefaultProp = /* @__PURE__ */ __name((props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0, "getDefaultProp");
  var noopTransform = /* @__PURE__ */ __name((value) => value, "noopTransform");
  var getDefaultProps = /* @__PURE__ */ __name((props, transform = noopTransform) => {
    let keys = DEFAULT_PROPS;
    if (props.default && props.default !== true) {
      props = props.default;
      keys = Object.keys(props);
    }
    const defaults3 = {};
    for (const key of keys) {
      const value = transform(props[key], key);
      if (!is2.und(value)) {
        defaults3[key] = value;
      }
    }
    return defaults3;
  }, "getDefaultProps");
  var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
  var RESERVED_PROPS = {
    config: 1,
    from: 1,
    to: 1,
    ref: 1,
    loop: 1,
    reset: 1,
    pause: 1,
    cancel: 1,
    reverse: 1,
    immediate: 1,
    default: 1,
    delay: 1,
    onProps: 1,
    onStart: 1,
    onChange: 1,
    onPause: 1,
    onResume: 1,
    onRest: 1,
    onResolve: 1,
    items: 1,
    trail: 1,
    sort: 1,
    expires: 1,
    initial: 1,
    enter: 1,
    update: 1,
    leave: 1,
    children: 1,
    onDestroyed: 1,
    keys: 1,
    callId: 1,
    parentId: 1
  };
  function getForwardProps(props) {
    const forward = {};
    let count = 0;
    eachProp2(props, (value, prop) => {
      if (!RESERVED_PROPS[prop]) {
        forward[prop] = value;
        count++;
      }
    });
    if (count) {
      return forward;
    }
  }
  __name(getForwardProps, "getForwardProps");
  function inferTo(props) {
    const to5 = getForwardProps(props);
    if (to5) {
      const out = {
        to: to5
      };
      eachProp2(props, (val, key) => key in to5 || (out[key] = val));
      return out;
    }
    return _extends6({}, props);
  }
  __name(inferTo, "inferTo");
  function computeGoal(value) {
    value = getFluidValue2(value);
    return is2.arr(value) ? value.map(computeGoal) : isAnimatedString2(value) ? globals2.createStringInterpolator({
      range: [0, 1],
      output: [value, value]
    })(1) : value;
  }
  __name(computeGoal, "computeGoal");
  function hasProps(props) {
    for (const _7 in props) return true;
    return false;
  }
  __name(hasProps, "hasProps");
  function isAsyncTo(to5) {
    return is2.fun(to5) || is2.arr(to5) && is2.obj(to5[0]);
  }
  __name(isAsyncTo, "isAsyncTo");
  function detachRefs(ctrl, ref) {
    var _ctrl$ref;
    (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
    ref == null ? void 0 : ref.delete(ctrl);
  }
  __name(detachRefs, "detachRefs");
  function replaceRef(ctrl, ref) {
    if (ref && ctrl.ref !== ref) {
      var _ctrl$ref2;
      (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
      ref.add(ctrl);
      ctrl.ref = ref;
    }
  }
  __name(replaceRef, "replaceRef");
  var config2 = {
    default: {
      tension: 170,
      friction: 26
    },
    gentle: {
      tension: 120,
      friction: 14
    },
    wobbly: {
      tension: 180,
      friction: 12
    },
    stiff: {
      tension: 210,
      friction: 20
    },
    slow: {
      tension: 280,
      friction: 60
    },
    molasses: {
      tension: 280,
      friction: 120
    }
  };
  var linear2 = /* @__PURE__ */ __name((t21) => t21, "linear");
  var defaults2 = _extends6({}, config2.default, {
    mass: 1,
    damping: 1,
    easing: linear2,
    clamp: false
  });
  var _AnimationConfig = class _AnimationConfig {
    constructor() {
      this.tension = void 0;
      this.friction = void 0;
      this.frequency = void 0;
      this.damping = void 0;
      this.mass = void 0;
      this.velocity = 0;
      this.restVelocity = void 0;
      this.precision = void 0;
      this.progress = void 0;
      this.duration = void 0;
      this.easing = void 0;
      this.clamp = void 0;
      this.bounce = void 0;
      this.decay = void 0;
      this.round = void 0;
      Object.assign(this, defaults2);
    }
  };
  __name(_AnimationConfig, "AnimationConfig");
  var AnimationConfig = _AnimationConfig;
  function mergeConfig(config3, newConfig, defaultConfig2) {
    if (defaultConfig2) {
      defaultConfig2 = _extends6({}, defaultConfig2);
      sanitizeConfig(defaultConfig2, newConfig);
      newConfig = _extends6({}, defaultConfig2, newConfig);
    }
    sanitizeConfig(config3, newConfig);
    Object.assign(config3, newConfig);
    for (const key in defaults2) {
      if (config3[key] == null) {
        config3[key] = defaults2[key];
      }
    }
    let {
      mass,
      frequency,
      damping
    } = config3;
    if (!is2.und(frequency)) {
      if (frequency < 0.01) frequency = 0.01;
      if (damping < 0) damping = 0;
      config3.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
      config3.friction = 4 * Math.PI * damping * mass / frequency;
    }
    return config3;
  }
  __name(mergeConfig, "mergeConfig");
  function sanitizeConfig(config3, props) {
    if (!is2.und(props.decay)) {
      config3.duration = void 0;
    } else {
      const isTensionConfig = !is2.und(props.tension) || !is2.und(props.friction);
      if (isTensionConfig || !is2.und(props.frequency) || !is2.und(props.damping) || !is2.und(props.mass)) {
        config3.duration = void 0;
        config3.decay = void 0;
      }
      if (isTensionConfig) {
        config3.frequency = void 0;
      }
    }
  }
  __name(sanitizeConfig, "sanitizeConfig");
  var emptyArray = [];
  var _Animation = class _Animation {
    constructor() {
      this.changed = false;
      this.values = emptyArray;
      this.toValues = null;
      this.fromValues = emptyArray;
      this.to = void 0;
      this.from = void 0;
      this.config = new AnimationConfig();
      this.immediate = false;
    }
  };
  __name(_Animation, "Animation");
  var Animation = _Animation;
  function scheduleProps(callId, {
    key,
    props,
    defaultProps,
    state,
    actions
  }) {
    return new Promise((resolve, reject) => {
      var _props$cancel;
      let delay;
      let timeout;
      let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);
      if (cancel) {
        onStart();
      } else {
        if (!is2.und(props.pause)) {
          state.paused = matchProp(props.pause, key);
        }
        let pause = defaultProps == null ? void 0 : defaultProps.pause;
        if (pause !== true) {
          pause = state.paused || matchProp(pause, key);
        }
        delay = callProp(props.delay || 0, key);
        if (pause) {
          state.resumeQueue.add(onResume);
          actions.pause();
        } else {
          actions.resume();
          onResume();
        }
      }
      function onPause() {
        state.resumeQueue.add(onResume);
        state.timeouts.delete(timeout);
        timeout.cancel();
        delay = timeout.time - raf2.now();
      }
      __name(onPause, "onPause");
      function onResume() {
        if (delay > 0 && !globals2.skipAnimation) {
          timeout = raf2.setTimeout(onStart, delay);
          state.pauseQueue.add(onPause);
          state.timeouts.add(timeout);
        } else {
          onStart();
        }
      }
      __name(onResume, "onResume");
      function onStart() {
        state.pauseQueue.delete(onPause);
        state.timeouts.delete(timeout);
        if (callId <= (state.cancelId || 0)) {
          cancel = true;
        }
        try {
          actions.start(_extends6({}, props, {
            callId,
            cancel
          }), resolve);
        } catch (err) {
          reject(err);
        }
      }
      __name(onStart, "onStart");
    });
  }
  __name(scheduleProps, "scheduleProps");
  var getCombinedResult = /* @__PURE__ */ __name((target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished)), "getCombinedResult");
  var getNoopResult = /* @__PURE__ */ __name((value) => ({
    value,
    noop: true,
    finished: true,
    cancelled: false
  }), "getNoopResult");
  var getFinishedResult = /* @__PURE__ */ __name((value, finished, cancelled = false) => ({
    value,
    finished,
    cancelled
  }), "getFinishedResult");
  var getCancelledResult = /* @__PURE__ */ __name((value) => ({
    value,
    cancelled: true,
    finished: false
  }), "getCancelledResult");
  function runAsync(to5, props, state, target) {
    const {
      callId,
      parentId,
      onRest
    } = props;
    const {
      asyncTo: prevTo,
      promise: prevPromise
    } = state;
    if (!parentId && to5 === prevTo && !props.reset) {
      return prevPromise;
    }
    return state.promise = (async () => {
      state.asyncId = callId;
      state.asyncTo = to5;
      const defaultProps = getDefaultProps(props, (value, key) => key === "onRest" ? void 0 : value);
      let preventBail;
      let bail;
      const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
      const bailIfEnded = /* @__PURE__ */ __name((bailSignal) => {
        const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
        if (bailResult) {
          bailSignal.result = bailResult;
          bail(bailSignal);
          throw bailSignal;
        }
      }, "bailIfEnded");
      const animate = /* @__PURE__ */ __name((arg1, arg2) => {
        const bailSignal = new BailSignal();
        const skipAnimationSignal = new SkipAniamtionSignal();
        return (async () => {
          if (globals2.skipAnimation) {
            stopAsync(state);
            skipAnimationSignal.result = getFinishedResult(target, false);
            bail(skipAnimationSignal);
            throw skipAnimationSignal;
          }
          bailIfEnded(bailSignal);
          const props2 = is2.obj(arg1) ? _extends6({}, arg1) : _extends6({}, arg2, {
            to: arg1
          });
          props2.parentId = callId;
          eachProp2(defaultProps, (value, key) => {
            if (is2.und(props2[key])) {
              props2[key] = value;
            }
          });
          const result2 = await target.start(props2);
          bailIfEnded(bailSignal);
          if (state.paused) {
            await new Promise((resume) => {
              state.resumeQueue.add(resume);
            });
          }
          return result2;
        })();
      }, "animate");
      let result;
      if (globals2.skipAnimation) {
        stopAsync(state);
        return getFinishedResult(target, false);
      }
      try {
        let animating;
        if (is2.arr(to5)) {
          animating = (async (queue) => {
            for (const props2 of queue) {
              await animate(props2);
            }
          })(to5);
        } else {
          animating = Promise.resolve(to5(animate, target.stop.bind(target)));
        }
        await Promise.all([animating.then(preventBail), bailPromise]);
        result = getFinishedResult(target.get(), true, false);
      } catch (err) {
        if (err instanceof BailSignal) {
          result = err.result;
        } else if (err instanceof SkipAniamtionSignal) {
          result = err.result;
        } else {
          throw err;
        }
      } finally {
        if (callId == state.asyncId) {
          state.asyncId = parentId;
          state.asyncTo = parentId ? prevTo : void 0;
          state.promise = parentId ? prevPromise : void 0;
        }
      }
      if (is2.fun(onRest)) {
        raf2.batchedUpdates(() => {
          onRest(result, target, target.item);
        });
      }
      return result;
    })();
  }
  __name(runAsync, "runAsync");
  function stopAsync(state, cancelId) {
    flush3(state.timeouts, (t21) => t21.cancel());
    state.pauseQueue.clear();
    state.resumeQueue.clear();
    state.asyncId = state.asyncTo = state.promise = void 0;
    if (cancelId) state.cancelId = cancelId;
  }
  __name(stopAsync, "stopAsync");
  var _BailSignal = class _BailSignal extends Error {
    constructor() {
      super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
      this.result = void 0;
    }
  };
  __name(_BailSignal, "BailSignal");
  var BailSignal = _BailSignal;
  var _SkipAniamtionSignal = class _SkipAniamtionSignal extends Error {
    constructor() {
      super("SkipAnimationSignal");
      this.result = void 0;
    }
  };
  __name(_SkipAniamtionSignal, "SkipAniamtionSignal");
  var SkipAniamtionSignal = _SkipAniamtionSignal;
  var isFrameValue2 = /* @__PURE__ */ __name((value) => value instanceof FrameValue2, "isFrameValue");
  var nextId$12 = 1;
  var _FrameValue2 = class _FrameValue2 extends FluidValue2 {
    constructor(...args) {
      super(...args);
      this.id = nextId$12++;
      this.key = void 0;
      this._priority = 0;
    }
    get priority() {
      return this._priority;
    }
    set priority(priority3) {
      if (this._priority != priority3) {
        this._priority = priority3;
        this._onPriorityChange(priority3);
      }
    }
    get() {
      const node = getAnimated2(this);
      return node && node.getValue();
    }
    to(...args) {
      return globals2.to(this, args);
    }
    interpolate(...args) {
      deprecateInterpolate2();
      return globals2.to(this, args);
    }
    toJSON() {
      return this.get();
    }
    observerAdded(count) {
      if (count == 1) this._attach();
    }
    observerRemoved(count) {
      if (count == 0) this._detach();
    }
    _attach() {
    }
    _detach() {
    }
    _onChange(value, idle = false) {
      callFluidObservers2(this, {
        type: "change",
        parent: this,
        value,
        idle
      });
    }
    _onPriorityChange(priority3) {
      if (!this.idle) {
        frameLoop2.sort(this);
      }
      callFluidObservers2(this, {
        type: "priority",
        parent: this,
        priority: priority3
      });
    }
  };
  __name(_FrameValue2, "FrameValue");
  var FrameValue2 = _FrameValue2;
  var $P2 = Symbol.for("SpringPhase");
  var HAS_ANIMATED = 1;
  var IS_ANIMATING = 2;
  var IS_PAUSED = 4;
  var hasAnimated = /* @__PURE__ */ __name((target) => (target[$P2] & HAS_ANIMATED) > 0, "hasAnimated");
  var isAnimating = /* @__PURE__ */ __name((target) => (target[$P2] & IS_ANIMATING) > 0, "isAnimating");
  var isPaused = /* @__PURE__ */ __name((target) => (target[$P2] & IS_PAUSED) > 0, "isPaused");
  var setActiveBit = /* @__PURE__ */ __name((target, active) => active ? target[$P2] |= IS_ANIMATING | HAS_ANIMATED : target[$P2] &= ~IS_ANIMATING, "setActiveBit");
  var setPausedBit = /* @__PURE__ */ __name((target, paused) => paused ? target[$P2] |= IS_PAUSED : target[$P2] &= ~IS_PAUSED, "setPausedBit");
  var _SpringValue = class _SpringValue extends FrameValue2 {
    constructor(arg1, arg2) {
      super();
      this.key = void 0;
      this.animation = new Animation();
      this.queue = void 0;
      this.defaultProps = {};
      this._state = {
        paused: false,
        pauseQueue: /* @__PURE__ */ new Set(),
        resumeQueue: /* @__PURE__ */ new Set(),
        timeouts: /* @__PURE__ */ new Set()
      };
      this._pendingCalls = /* @__PURE__ */ new Set();
      this._lastCallId = 0;
      this._lastToId = 0;
      this._memoizedDuration = 0;
      if (!is2.und(arg1) || !is2.und(arg2)) {
        const props = is2.obj(arg1) ? _extends6({}, arg1) : _extends6({}, arg2, {
          from: arg1
        });
        if (is2.und(props.default)) {
          props.default = true;
        }
        this.start(props);
      }
    }
    get idle() {
      return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
    }
    get goal() {
      return getFluidValue2(this.animation.to);
    }
    get velocity() {
      const node = getAnimated2(this);
      return node instanceof AnimatedValue2 ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
    }
    get hasAnimated() {
      return hasAnimated(this);
    }
    get isAnimating() {
      return isAnimating(this);
    }
    get isPaused() {
      return isPaused(this);
    }
    advance(dt3) {
      let idle = true;
      let changed = false;
      const anim = this.animation;
      let {
        config: config3,
        toValues
      } = anim;
      const payload = getPayload2(anim.to);
      if (!payload && hasFluidValue2(anim.to)) {
        toValues = toArray2(getFluidValue2(anim.to));
      }
      anim.values.forEach((node2, i12) => {
        if (node2.done) return;
        const to5 = node2.constructor == AnimatedString2 ? 1 : payload ? payload[i12].lastPosition : toValues[i12];
        let finished = anim.immediate;
        let position = to5;
        if (!finished) {
          position = node2.lastPosition;
          if (config3.tension <= 0) {
            node2.done = true;
            return;
          }
          let elapsed = node2.elapsedTime += dt3;
          const from = anim.fromValues[i12];
          const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is2.arr(config3.velocity) ? config3.velocity[i12] : config3.velocity;
          let velocity;
          if (!is2.und(config3.duration)) {
            let p5 = 1;
            if (config3.duration > 0) {
              if (this._memoizedDuration !== config3.duration) {
                this._memoizedDuration = config3.duration;
                if (node2.durationProgress > 0) {
                  node2.elapsedTime = config3.duration * node2.durationProgress;
                  elapsed = node2.elapsedTime += dt3;
                }
              }
              p5 = (config3.progress || 0) + elapsed / this._memoizedDuration;
              p5 = p5 > 1 ? 1 : p5 < 0 ? 0 : p5;
              node2.durationProgress = p5;
            }
            position = from + config3.easing(p5) * (to5 - from);
            velocity = (position - node2.lastPosition) / dt3;
            finished = p5 == 1;
          } else if (config3.decay) {
            const decay = config3.decay === true ? 0.998 : config3.decay;
            const e18 = Math.exp(-(1 - decay) * elapsed);
            position = from + v0 / (1 - decay) * (1 - e18);
            finished = Math.abs(node2.lastPosition - position) < 0.1;
            velocity = v0 * e18;
          } else {
            velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
            const precision = config3.precision || (from == to5 ? 5e-3 : Math.min(1, Math.abs(to5 - from) * 1e-3));
            const restVelocity = config3.restVelocity || precision / 10;
            const bounceFactor = config3.clamp ? 0 : config3.bounce;
            const canBounce = !is2.und(bounceFactor);
            const isGrowing = from == to5 ? node2.v0 > 0 : from < to5;
            let isMoving;
            let isBouncing = false;
            const step = 1;
            const numSteps = Math.ceil(dt3 / step);
            for (let n21 = 0; n21 < numSteps; ++n21) {
              isMoving = Math.abs(velocity) > restVelocity;
              if (!isMoving) {
                finished = Math.abs(to5 - position) <= precision;
                if (finished) {
                  break;
                }
              }
              if (canBounce) {
                isBouncing = position == to5 || position > to5 == isGrowing;
                if (isBouncing) {
                  velocity = -velocity * bounceFactor;
                  position = to5;
                }
              }
              const springForce = -config3.tension * 1e-6 * (position - to5);
              const dampingForce = -config3.friction * 1e-3 * velocity;
              const acceleration = (springForce + dampingForce) / config3.mass;
              velocity = velocity + acceleration * step;
              position = position + velocity * step;
            }
          }
          node2.lastVelocity = velocity;
          if (Number.isNaN(position)) {
            console.warn(`Got NaN while animating:`, this);
            finished = true;
          }
        }
        if (payload && !payload[i12].done) {
          finished = false;
        }
        if (finished) {
          node2.done = true;
        } else {
          idle = false;
        }
        if (node2.setValue(position, config3.round)) {
          changed = true;
        }
      });
      const node = getAnimated2(this);
      const currVal = node.getValue();
      if (idle) {
        const finalVal = getFluidValue2(anim.to);
        if ((currVal !== finalVal || changed) && !config3.decay) {
          node.setValue(finalVal);
          this._onChange(finalVal);
        } else if (changed && config3.decay) {
          this._onChange(currVal);
        }
        this._stop();
      } else if (changed) {
        this._onChange(currVal);
      }
    }
    set(value) {
      raf2.batchedUpdates(() => {
        this._stop();
        this._focus(value);
        this._set(value);
      });
      return this;
    }
    pause() {
      this._update({
        pause: true
      });
    }
    resume() {
      this._update({
        pause: false
      });
    }
    finish() {
      if (isAnimating(this)) {
        const {
          to: to5,
          config: config3
        } = this.animation;
        raf2.batchedUpdates(() => {
          this._onStart();
          if (!config3.decay) {
            this._set(to5, false);
          }
          this._stop();
        });
      }
      return this;
    }
    update(props) {
      const queue = this.queue || (this.queue = []);
      queue.push(props);
      return this;
    }
    start(to5, arg2) {
      let queue;
      if (!is2.und(to5)) {
        queue = [is2.obj(to5) ? to5 : _extends6({}, arg2, {
          to: to5
        })];
      } else {
        queue = this.queue || [];
        this.queue = [];
      }
      return Promise.all(queue.map((props) => this._update(props))).then((results) => getCombinedResult(this, results));
    }
    stop(cancel) {
      const {
        to: to5
      } = this.animation;
      this._focus(this.get());
      stopAsync(this._state, cancel && this._lastCallId);
      raf2.batchedUpdates(() => this._stop(to5, cancel));
      return this;
    }
    reset() {
      this._update({
        reset: true
      });
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._start();
      } else if (event.type == "priority") {
        this.priority = event.priority + 1;
      }
    }
    _prepareNode(props) {
      const key = this.key || "";
      let {
        to: to5,
        from
      } = props;
      to5 = is2.obj(to5) ? to5[key] : to5;
      if (to5 == null || isAsyncTo(to5)) {
        to5 = void 0;
      }
      from = is2.obj(from) ? from[key] : from;
      if (from == null) {
        from = void 0;
      }
      const range = {
        to: to5,
        from
      };
      if (!hasAnimated(this)) {
        if (props.reverse) [to5, from] = [from, to5];
        from = getFluidValue2(from);
        if (!is2.und(from)) {
          this._set(from);
        } else if (!getAnimated2(this)) {
          this._set(to5);
        }
      }
      return range;
    }
    _update(_ref, isLoop) {
      let props = _extends6({}, _ref);
      const {
        key,
        defaultProps
      } = this;
      if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
      mergeActiveFn(this, props, "onProps");
      sendEvent(this, "onProps", props, this);
      const range = this._prepareNode(props);
      if (Object.isFrozen(this)) {
        throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
      }
      const state = this._state;
      return scheduleProps(++this._lastCallId, {
        key,
        props,
        defaultProps,
        state,
        actions: {
          pause: /* @__PURE__ */ __name(() => {
            if (!isPaused(this)) {
              setPausedBit(this, true);
              flushCalls2(state.pauseQueue);
              sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
            }
          }, "pause"),
          resume: /* @__PURE__ */ __name(() => {
            if (isPaused(this)) {
              setPausedBit(this, false);
              if (isAnimating(this)) {
                this._resume();
              }
              flushCalls2(state.resumeQueue);
              sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
            }
          }, "resume"),
          start: this._merge.bind(this, range)
        }
      }).then((result) => {
        if (props.loop && result.finished && !(isLoop && result.noop)) {
          const nextProps = createLoopUpdate(props);
          if (nextProps) {
            return this._update(nextProps, true);
          }
        }
        return result;
      });
    }
    _merge(range, props, resolve) {
      if (props.cancel) {
        this.stop(true);
        return resolve(getCancelledResult(this));
      }
      const hasToProp = !is2.und(range.to);
      const hasFromProp = !is2.und(range.from);
      if (hasToProp || hasFromProp) {
        if (props.callId > this._lastToId) {
          this._lastToId = props.callId;
        } else {
          return resolve(getCancelledResult(this));
        }
      }
      const {
        key,
        defaultProps,
        animation: anim
      } = this;
      const {
        to: prevTo,
        from: prevFrom
      } = anim;
      let {
        to: to5 = prevTo,
        from = prevFrom
      } = range;
      if (hasFromProp && !hasToProp && (!props.default || is2.und(to5))) {
        to5 = from;
      }
      if (props.reverse) [to5, from] = [from, to5];
      const hasFromChanged = !isEqual4(from, prevFrom);
      if (hasFromChanged) {
        anim.from = from;
      }
      from = getFluidValue2(from);
      const hasToChanged = !isEqual4(to5, prevTo);
      if (hasToChanged) {
        this._focus(to5);
      }
      const hasAsyncTo = isAsyncTo(props.to);
      const {
        config: config3
      } = anim;
      const {
        decay,
        velocity
      } = config3;
      if (hasToProp || hasFromProp) {
        config3.velocity = 0;
      }
      if (props.config && !hasAsyncTo) {
        mergeConfig(config3, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);
      }
      let node = getAnimated2(this);
      if (!node || is2.und(to5)) {
        return resolve(getFinishedResult(this, true));
      }
      const reset = is2.und(props.reset) ? hasFromProp && !props.default : !is2.und(from) && matchProp(props.reset, key);
      const value = reset ? from : this.get();
      const goal = computeGoal(to5);
      const isAnimatable = is2.num(goal) || is2.arr(goal) || isAnimatedString2(goal);
      const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
      if (hasToChanged) {
        const nodeType = getAnimatedType2(to5);
        if (nodeType !== node.constructor) {
          if (immediate) {
            node = this._set(goal);
          } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
        }
      }
      const goalType = node.constructor;
      let started = hasFluidValue2(to5);
      let finished = false;
      if (!started) {
        const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
        if (hasToChanged || hasValueChanged) {
          finished = isEqual4(computeGoal(value), goal);
          started = !finished;
        }
        if (!isEqual4(anim.immediate, immediate) && !immediate || !isEqual4(config3.decay, decay) || !isEqual4(config3.velocity, velocity)) {
          started = true;
        }
      }
      if (finished && isAnimating(this)) {
        if (anim.changed && !reset) {
          started = true;
        } else if (!started) {
          this._stop(prevTo);
        }
      }
      if (!hasAsyncTo) {
        if (started || hasFluidValue2(prevTo)) {
          anim.values = node.getPayload();
          anim.toValues = hasFluidValue2(to5) ? null : goalType == AnimatedString2 ? [1] : toArray2(goal);
        }
        if (anim.immediate != immediate) {
          anim.immediate = immediate;
          if (!immediate && !reset) {
            this._set(prevTo);
          }
        }
        if (started) {
          const {
            onRest
          } = anim;
          each2(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
          const result = getFinishedResult(this, checkFinished(this, prevTo));
          flushCalls2(this._pendingCalls, result);
          this._pendingCalls.add(resolve);
          if (anim.changed) raf2.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
        }
      }
      if (reset) {
        this._set(value);
      }
      if (hasAsyncTo) {
        resolve(runAsync(props.to, props, this._state, this));
      } else if (started) {
        this._start();
      } else if (isAnimating(this) && !hasToChanged) {
        this._pendingCalls.add(resolve);
      } else {
        resolve(getNoopResult(value));
      }
    }
    _focus(value) {
      const anim = this.animation;
      if (value !== anim.to) {
        if (getFluidObservers2(this)) {
          this._detach();
        }
        anim.to = value;
        if (getFluidObservers2(this)) {
          this._attach();
        }
      }
    }
    _attach() {
      let priority3 = 0;
      const {
        to: to5
      } = this.animation;
      if (hasFluidValue2(to5)) {
        addFluidObserver2(to5, this);
        if (isFrameValue2(to5)) {
          priority3 = to5.priority + 1;
        }
      }
      this.priority = priority3;
    }
    _detach() {
      const {
        to: to5
      } = this.animation;
      if (hasFluidValue2(to5)) {
        removeFluidObserver2(to5, this);
      }
    }
    _set(arg, idle = true) {
      const value = getFluidValue2(arg);
      if (!is2.und(value)) {
        const oldNode = getAnimated2(this);
        if (!oldNode || !isEqual4(value, oldNode.getValue())) {
          const nodeType = getAnimatedType2(value);
          if (!oldNode || oldNode.constructor != nodeType) {
            setAnimated2(this, nodeType.create(value));
          } else {
            oldNode.setValue(value);
          }
          if (oldNode) {
            raf2.batchedUpdates(() => {
              this._onChange(value, idle);
            });
          }
        }
      }
      return getAnimated2(this);
    }
    _onStart() {
      const anim = this.animation;
      if (!anim.changed) {
        anim.changed = true;
        sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
      }
    }
    _onChange(value, idle) {
      if (!idle) {
        this._onStart();
        callProp(this.animation.onChange, value, this);
      }
      callProp(this.defaultProps.onChange, value, this);
      super._onChange(value, idle);
    }
    _start() {
      const anim = this.animation;
      getAnimated2(this).reset(getFluidValue2(anim.to));
      if (!anim.immediate) {
        anim.fromValues = anim.values.map((node) => node.lastPosition);
      }
      if (!isAnimating(this)) {
        setActiveBit(this, true);
        if (!isPaused(this)) {
          this._resume();
        }
      }
    }
    _resume() {
      if (globals2.skipAnimation) {
        this.finish();
      } else {
        frameLoop2.start(this);
      }
    }
    _stop(goal, cancel) {
      if (isAnimating(this)) {
        setActiveBit(this, false);
        const anim = this.animation;
        each2(anim.values, (node) => {
          node.done = true;
        });
        if (anim.toValues) {
          anim.onChange = anim.onPause = anim.onResume = void 0;
        }
        callFluidObservers2(this, {
          type: "idle",
          parent: this
        });
        const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
        flushCalls2(this._pendingCalls, result);
        if (anim.changed) {
          anim.changed = false;
          sendEvent(this, "onRest", result, this);
        }
      }
    }
  };
  __name(_SpringValue, "SpringValue");
  var SpringValue = _SpringValue;
  function checkFinished(target, to5) {
    const goal = computeGoal(to5);
    const value = computeGoal(target.get());
    return isEqual4(value, goal);
  }
  __name(checkFinished, "checkFinished");
  function createLoopUpdate(props, loop3 = props.loop, to5 = props.to) {
    let loopRet = callProp(loop3);
    if (loopRet) {
      const overrides = loopRet !== true && inferTo(loopRet);
      const reverse = (overrides || props).reverse;
      const reset = !overrides || overrides.reset;
      return createUpdate(_extends6({}, props, {
        loop: loop3,
        default: false,
        pause: void 0,
        to: !reverse || isAsyncTo(to5) ? to5 : void 0,
        from: reset ? props.from : void 0,
        reset
      }, overrides));
    }
  }
  __name(createLoopUpdate, "createLoopUpdate");
  function createUpdate(props) {
    const {
      to: to5,
      from
    } = props = inferTo(props);
    const keys = /* @__PURE__ */ new Set();
    if (is2.obj(to5)) findDefined(to5, keys);
    if (is2.obj(from)) findDefined(from, keys);
    props.keys = keys.size ? Array.from(keys) : null;
    return props;
  }
  __name(createUpdate, "createUpdate");
  function declareUpdate(props) {
    const update5 = createUpdate(props);
    if (is2.und(update5.default)) {
      update5.default = getDefaultProps(update5);
    }
    return update5;
  }
  __name(declareUpdate, "declareUpdate");
  function findDefined(values, keys) {
    eachProp2(values, (value, key) => value != null && keys.add(key));
  }
  __name(findDefined, "findDefined");
  var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
  function mergeActiveFn(target, props, type) {
    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
  }
  __name(mergeActiveFn, "mergeActiveFn");
  function sendEvent(target, type, ...args) {
    var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
    (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
    (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
  }
  __name(sendEvent, "sendEvent");
  var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
  var nextId = 1;
  var _Controller = class _Controller {
    constructor(props, flush4) {
      this.id = nextId++;
      this.springs = {};
      this.queue = [];
      this.ref = void 0;
      this._flush = void 0;
      this._initialProps = void 0;
      this._lastAsyncId = 0;
      this._active = /* @__PURE__ */ new Set();
      this._changed = /* @__PURE__ */ new Set();
      this._started = false;
      this._item = void 0;
      this._state = {
        paused: false,
        pauseQueue: /* @__PURE__ */ new Set(),
        resumeQueue: /* @__PURE__ */ new Set(),
        timeouts: /* @__PURE__ */ new Set()
      };
      this._events = {
        onStart: /* @__PURE__ */ new Map(),
        onChange: /* @__PURE__ */ new Map(),
        onRest: /* @__PURE__ */ new Map()
      };
      this._onFrame = this._onFrame.bind(this);
      if (flush4) {
        this._flush = flush4;
      }
      if (props) {
        this.start(_extends6({
          default: true
        }, props));
      }
    }
    get idle() {
      return !this._state.asyncTo && Object.values(this.springs).every((spring) => spring.idle);
    }
    get item() {
      return this._item;
    }
    set item(item) {
      this._item = item;
    }
    get() {
      const values = {};
      this.each((spring, key) => values[key] = spring.get());
      return values;
    }
    set(values) {
      for (const key in values) {
        const value = values[key];
        if (!is2.und(value)) {
          this.springs[key].set(value);
        }
      }
    }
    update(props) {
      if (props) {
        this.queue.push(createUpdate(props));
      }
      return this;
    }
    start(props) {
      let {
        queue
      } = this;
      if (props) {
        queue = toArray2(props).map(createUpdate);
      } else {
        this.queue = [];
      }
      if (this._flush) {
        return this._flush(this, queue);
      }
      prepareKeys(this, queue);
      return flushUpdateQueue(this, queue);
    }
    stop(arg, keys) {
      if (arg !== !!arg) {
        keys = arg;
      }
      if (keys) {
        const springs = this.springs;
        each2(toArray2(keys), (key) => springs[key].stop(!!arg));
      } else {
        stopAsync(this._state, this._lastAsyncId);
        this.each((spring) => spring.stop(!!arg));
      }
      return this;
    }
    pause(keys) {
      if (is2.und(keys)) {
        this.start({
          pause: true
        });
      } else {
        const springs = this.springs;
        each2(toArray2(keys), (key) => springs[key].pause());
      }
      return this;
    }
    resume(keys) {
      if (is2.und(keys)) {
        this.start({
          pause: false
        });
      } else {
        const springs = this.springs;
        each2(toArray2(keys), (key) => springs[key].resume());
      }
      return this;
    }
    each(iterator) {
      eachProp2(this.springs, iterator);
    }
    _onFrame() {
      const {
        onStart,
        onChange,
        onRest
      } = this._events;
      const active = this._active.size > 0;
      const changed = this._changed.size > 0;
      if (active && !this._started || changed && !this._started) {
        this._started = true;
        flush3(onStart, ([onStart2, result]) => {
          result.value = this.get();
          onStart2(result, this, this._item);
        });
      }
      const idle = !active && this._started;
      const values = changed || idle && onRest.size ? this.get() : null;
      if (changed && onChange.size) {
        flush3(onChange, ([onChange2, result]) => {
          result.value = values;
          onChange2(result, this, this._item);
        });
      }
      if (idle) {
        this._started = false;
        flush3(onRest, ([onRest2, result]) => {
          result.value = values;
          onRest2(result, this, this._item);
        });
      }
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._changed.add(event.parent);
        if (!event.idle) {
          this._active.add(event.parent);
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else return;
      raf2.onFrame(this._onFrame);
    }
  };
  __name(_Controller, "Controller");
  var Controller = _Controller;
  function flushUpdateQueue(ctrl, queue) {
    return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
  }
  __name(flushUpdateQueue, "flushUpdateQueue");
  async function flushUpdate(ctrl, props, isLoop) {
    const {
      keys,
      to: to5,
      from,
      loop: loop3,
      onRest,
      onResolve
    } = props;
    const defaults3 = is2.obj(props.default) && props.default;
    if (loop3) {
      props.loop = false;
    }
    if (to5 === false) props.to = null;
    if (from === false) props.from = null;
    const asyncTo = is2.arr(to5) || is2.fun(to5) ? to5 : void 0;
    if (asyncTo) {
      props.to = void 0;
      props.onRest = void 0;
      if (defaults3) {
        defaults3.onRest = void 0;
      }
    } else {
      each2(BATCHED_EVENTS, (key) => {
        const handler = props[key];
        if (is2.fun(handler)) {
          const queue = ctrl["_events"][key];
          props[key] = ({
            finished,
            cancelled
          }) => {
            const result2 = queue.get(handler);
            if (result2) {
              if (!finished) result2.finished = false;
              if (cancelled) result2.cancelled = true;
            } else {
              queue.set(handler, {
                value: null,
                finished: finished || false,
                cancelled: cancelled || false
              });
            }
          };
          if (defaults3) {
            defaults3[key] = props[key];
          }
        }
      });
    }
    const state = ctrl["_state"];
    if (props.pause === !state.paused) {
      state.paused = props.pause;
      flushCalls2(props.pause ? state.pauseQueue : state.resumeQueue);
    } else if (state.paused) {
      props.pause = true;
    }
    const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
    const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
    if (asyncTo || cancel && state.asyncId) {
      promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: noop3,
          resume: noop3,
          start(props2, resolve) {
            if (cancel) {
              stopAsync(state, ctrl["_lastAsyncId"]);
              resolve(getCancelledResult(ctrl));
            } else {
              props2.onRest = onRest;
              resolve(runAsync(asyncTo, props2, state, ctrl));
            }
          }
        }
      }));
    }
    if (state.paused) {
      await new Promise((resume) => {
        state.resumeQueue.add(resume);
      });
    }
    const result = getCombinedResult(ctrl, await Promise.all(promises));
    if (loop3 && result.finished && !(isLoop && result.noop)) {
      const nextProps = createLoopUpdate(props, loop3, to5);
      if (nextProps) {
        prepareKeys(ctrl, [nextProps]);
        return flushUpdate(ctrl, nextProps, true);
      }
    }
    if (onResolve) {
      raf2.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
    }
    return result;
  }
  __name(flushUpdate, "flushUpdate");
  function getSprings(ctrl, props) {
    const springs = _extends6({}, ctrl.springs);
    if (props) {
      each2(toArray2(props), (props2) => {
        if (is2.und(props2.keys)) {
          props2 = createUpdate(props2);
        }
        if (!is2.obj(props2.to)) {
          props2 = _extends6({}, props2, {
            to: void 0
          });
        }
        prepareSprings(springs, props2, (key) => {
          return createSpring(key);
        });
      });
    }
    setSprings(ctrl, springs);
    return springs;
  }
  __name(getSprings, "getSprings");
  function setSprings(ctrl, springs) {
    eachProp2(springs, (spring, key) => {
      if (!ctrl.springs[key]) {
        ctrl.springs[key] = spring;
        addFluidObserver2(spring, ctrl);
      }
    });
  }
  __name(setSprings, "setSprings");
  function createSpring(key, observer) {
    const spring = new SpringValue();
    spring.key = key;
    if (observer) {
      addFluidObserver2(spring, observer);
    }
    return spring;
  }
  __name(createSpring, "createSpring");
  function prepareSprings(springs, props, create) {
    if (props.keys) {
      each2(props.keys, (key) => {
        const spring = springs[key] || (springs[key] = create(key));
        spring["_prepareNode"](props);
      });
    }
  }
  __name(prepareSprings, "prepareSprings");
  function prepareKeys(ctrl, queue) {
    each2(queue, (props) => {
      prepareSprings(ctrl.springs, props, (key) => {
        return createSpring(key, ctrl);
      });
    });
  }
  __name(prepareKeys, "prepareKeys");
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i12;
    for (i12 = 0; i12 < sourceKeys.length; i12++) {
      key = sourceKeys[i12];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  __name(_objectWithoutPropertiesLoose3, "_objectWithoutPropertiesLoose");
  var _excluded$32 = ["children"];
  var SpringContext2 = /* @__PURE__ */ __name((_ref) => {
    let {
      children
    } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded$32);
    const inherited = (0, import_react60.useContext)(ctx2);
    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
    props = useMemoOne2(() => ({
      pause,
      immediate
    }), [pause, immediate]);
    const {
      Provider
    } = ctx2;
    return React13.createElement(Provider, {
      value: props
    }, children);
  }, "SpringContext");
  var ctx2 = makeContext2(SpringContext2, {});
  SpringContext2.Provider = ctx2.Provider;
  SpringContext2.Consumer = ctx2.Consumer;
  function makeContext2(target, init) {
    Object.assign(target, React13.createContext(init));
    target.Provider._context = target;
    target.Consumer._context = target;
    return target;
  }
  __name(makeContext2, "makeContext");
  var SpringRef = /* @__PURE__ */ __name(() => {
    const current = [];
    const SpringRef2 = /* @__PURE__ */ __name(function SpringRef3(props) {
      deprecateDirectCall2();
      const results = [];
      each2(current, (ctrl, i12) => {
        if (is2.und(props)) {
          results.push(ctrl.start());
        } else {
          const update5 = _getProps(props, ctrl, i12);
          if (update5) {
            results.push(ctrl.start(update5));
          }
        }
      });
      return results;
    }, "SpringRef");
    SpringRef2.current = current;
    SpringRef2.add = function(ctrl) {
      if (!current.includes(ctrl)) {
        current.push(ctrl);
      }
    };
    SpringRef2.delete = function(ctrl) {
      const i12 = current.indexOf(ctrl);
      if (~i12) current.splice(i12, 1);
    };
    SpringRef2.pause = function() {
      each2(current, (ctrl) => ctrl.pause(...arguments));
      return this;
    };
    SpringRef2.resume = function() {
      each2(current, (ctrl) => ctrl.resume(...arguments));
      return this;
    };
    SpringRef2.set = function(values) {
      each2(current, (ctrl) => ctrl.set(values));
    };
    SpringRef2.start = function(props) {
      const results = [];
      each2(current, (ctrl, i12) => {
        if (is2.und(props)) {
          results.push(ctrl.start());
        } else {
          const update5 = this._getProps(props, ctrl, i12);
          if (update5) {
            results.push(ctrl.start(update5));
          }
        }
      });
      return results;
    };
    SpringRef2.stop = function() {
      each2(current, (ctrl) => ctrl.stop(...arguments));
      return this;
    };
    SpringRef2.update = function(props) {
      each2(current, (ctrl, i12) => ctrl.update(this._getProps(props, ctrl, i12)));
      return this;
    };
    const _getProps = /* @__PURE__ */ __name(function _getProps2(arg, ctrl, index) {
      return is2.fun(arg) ? arg(index, ctrl) : arg;
    }, "_getProps");
    SpringRef2._getProps = _getProps;
    return SpringRef2;
  }, "SpringRef");
  function useSprings(length, props, deps) {
    const propsFn = is2.fun(props) && props;
    if (propsFn && !deps) deps = [];
    const ref = (0, import_react60.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
    const layoutId = (0, import_react60.useRef)(0);
    const forceUpdate = useForceUpdate2();
    const state = (0, import_react60.useMemo)(() => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
          setSprings(ctrl, springs2);
          state.queue.push(() => {
            resolve(flushUpdateQueue(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }), []);
    const ctrls = (0, import_react60.useRef)([...state.ctrls]);
    const updates = [];
    const prevLength = usePrev2(length) || 0;
    (0, import_react60.useMemo)(() => {
      each2(ctrls.current.slice(length, prevLength), (ctrl) => {
        detachRefs(ctrl, ref);
        ctrl.stop(true);
      });
      ctrls.current.length = length;
      declareUpdates(prevLength, length);
    }, [length]);
    (0, import_react60.useMemo)(() => {
      declareUpdates(0, Math.min(prevLength, length));
    }, deps);
    function declareUpdates(startIndex, endIndex) {
      for (let i12 = startIndex; i12 < endIndex; i12++) {
        const ctrl = ctrls.current[i12] || (ctrls.current[i12] = new Controller(null, state.flush));
        const update5 = propsFn ? propsFn(i12, ctrl) : props[i12];
        if (update5) {
          updates[i12] = declareUpdate(update5);
        }
      }
    }
    __name(declareUpdates, "declareUpdates");
    const springs = ctrls.current.map((ctrl, i12) => getSprings(ctrl, updates[i12]));
    const context = (0, import_react60.useContext)(SpringContext2);
    const prevContext = usePrev2(context);
    const hasContext = context !== prevContext && hasProps(context);
    useLayoutEffect7(() => {
      layoutId.current++;
      state.ctrls = ctrls.current;
      const {
        queue
      } = state;
      if (queue.length) {
        state.queue = [];
        each2(queue, (cb) => cb());
      }
      each2(ctrls.current, (ctrl, i12) => {
        ref == null ? void 0 : ref.add(ctrl);
        if (hasContext) {
          ctrl.start({
            default: context
          });
        }
        const update5 = updates[i12];
        if (update5) {
          replaceRef(ctrl, update5.ref);
          if (ctrl.ref) {
            ctrl.queue.push(update5);
          } else {
            ctrl.start(update5);
          }
        }
      });
    });
    useOnce2(() => () => {
      each2(state.ctrls, (ctrl) => ctrl.stop(true));
    });
    const values = springs.map((x) => _extends6({}, x));
    return ref ? [values, ref] : values;
  }
  __name(useSprings, "useSprings");
  function useSpring(props, deps) {
    const isFn = is2.fun(props);
    const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
    return isFn || arguments.length == 2 ? [values, ref] : values;
  }
  __name(useSpring, "useSpring");
  var TransitionPhase2;
  (function(TransitionPhase3) {
    TransitionPhase3["MOUNT"] = "mount";
    TransitionPhase3["ENTER"] = "enter";
    TransitionPhase3["UPDATE"] = "update";
    TransitionPhase3["LEAVE"] = "leave";
  })(TransitionPhase2 || (TransitionPhase2 = {}));
  var _Interpolation2 = class _Interpolation2 extends FrameValue2 {
    constructor(source, args) {
      super();
      this.key = void 0;
      this.idle = true;
      this.calc = void 0;
      this._active = /* @__PURE__ */ new Set();
      this.source = source;
      this.calc = createInterpolator2(...args);
      const value = this._get();
      const nodeType = getAnimatedType2(value);
      setAnimated2(this, nodeType.create(value));
    }
    advance(_dt) {
      const value = this._get();
      const oldValue = this.get();
      if (!isEqual4(value, oldValue)) {
        getAnimated2(this).setValue(value);
        this._onChange(value, this.idle);
      }
      if (!this.idle && checkIdle2(this._active)) {
        becomeIdle2(this);
      }
    }
    _get() {
      const inputs = is2.arr(this.source) ? this.source.map(getFluidValue2) : toArray2(getFluidValue2(this.source));
      return this.calc(...inputs);
    }
    _start() {
      if (this.idle && !checkIdle2(this._active)) {
        this.idle = false;
        each2(getPayload2(this), (node) => {
          node.done = false;
        });
        if (globals2.skipAnimation) {
          raf2.batchedUpdates(() => this.advance());
          becomeIdle2(this);
        } else {
          frameLoop2.start(this);
        }
      }
    }
    _attach() {
      let priority3 = 1;
      each2(toArray2(this.source), (source) => {
        if (hasFluidValue2(source)) {
          addFluidObserver2(source, this);
        }
        if (isFrameValue2(source)) {
          if (!source.idle) {
            this._active.add(source);
          }
          priority3 = Math.max(priority3, source.priority + 1);
        }
      });
      this.priority = priority3;
      this._start();
    }
    _detach() {
      each2(toArray2(this.source), (source) => {
        if (hasFluidValue2(source)) {
          removeFluidObserver2(source, this);
        }
      });
      this._active.clear();
      becomeIdle2(this);
    }
    eventObserved(event) {
      if (event.type == "change") {
        if (event.idle) {
          this.advance();
        } else {
          this._active.add(event.parent);
          this._start();
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else if (event.type == "priority") {
        this.priority = toArray2(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue2(parent) ? parent.priority : 0) + 1), 0);
      }
    }
  };
  __name(_Interpolation2, "Interpolation");
  var Interpolation2 = _Interpolation2;
  function isIdle2(source) {
    return source.idle !== false;
  }
  __name(isIdle2, "isIdle");
  function checkIdle2(active) {
    return !active.size || Array.from(active).every(isIdle2);
  }
  __name(checkIdle2, "checkIdle");
  function becomeIdle2(self2) {
    if (!self2.idle) {
      self2.idle = true;
      each2(getPayload2(self2), (node) => {
        node.done = true;
      });
      callFluidObservers2(self2, {
        type: "idle",
        parent: self2
      });
    }
  }
  __name(becomeIdle2, "becomeIdle");
  globals2.assign({
    createStringInterpolator: createStringInterpolator2,
    to: /* @__PURE__ */ __name((source, args) => new Interpolation2(source, args), "to")
  });
  var update4 = frameLoop2.advance;

  // ../../contrib/hdbt/node_modules/@react-spring/web/dist/react-spring-web.esm.js
  var import_react_dom3 = __toESM(require_react_dom());
  function _objectWithoutPropertiesLoose4(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i12;
    for (i12 = 0; i12 < sourceKeys.length; i12++) {
      key = sourceKeys[i12];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  __name(_objectWithoutPropertiesLoose4, "_objectWithoutPropertiesLoose");
  var _excluded$22 = ["style", "children", "scrollTop", "scrollLeft"];
  var isCustomPropRE2 = /^--/;
  function dangerousStyleValue2(name, value) {
    if (value == null || typeof value === "boolean" || value === "") return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE2.test(name) && !(isUnitlessNumber2.hasOwnProperty(name) && isUnitlessNumber2[name])) return value + "px";
    return ("" + value).trim();
  }
  __name(dangerousStyleValue2, "dangerousStyleValue");
  var attributeCache2 = {};
  function applyAnimatedValues2(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const _ref = props, {
      style,
      children,
      scrollTop,
      scrollLeft
    } = _ref, attributes = _objectWithoutPropertiesLoose4(_ref, _excluded$22);
    const values = Object.values(attributes);
    const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache2[name] || (attributeCache2[name] = name.replace(/([A-Z])/g, (n21) => "-" + n21.toLowerCase())));
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (let name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue2(name, style[name]);
        if (isCustomPropRE2.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names.forEach((name, i12) => {
      instance.setAttribute(name, values[i12]);
    });
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
  }
  __name(applyAnimatedValues2, "applyAnimatedValues");
  var isUnitlessNumber2 = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey2 = /* @__PURE__ */ __name((prefix3, key) => prefix3 + key.charAt(0).toUpperCase() + key.substring(1), "prefixKey");
  var prefixes2 = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber2 = Object.keys(isUnitlessNumber2).reduce((acc, prop) => {
    prefixes2.forEach((prefix3) => acc[prefixKey2(prefix3, prop)] = acc[prop]);
    return acc;
  }, isUnitlessNumber2);
  var _excluded$12 = ["x", "y", "z"];
  var domTransforms2 = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms2 = /^(translate)/;
  var degTransforms2 = /^(rotate|skew)/;
  var addUnit2 = /* @__PURE__ */ __name((value, unit) => is2.num(value) && value !== 0 ? value + unit : value, "addUnit");
  var isValueIdentity2 = /* @__PURE__ */ __name((value, id) => is2.arr(value) ? value.every((v4) => isValueIdentity2(v4, id)) : is2.num(value) ? value === id : parseFloat(value) === id, "isValueIdentity");
  var _AnimatedStyle2 = class _AnimatedStyle2 extends AnimatedObject2 {
    constructor(_ref) {
      let {
        x,
        y: y2,
        z: z3
      } = _ref, style = _objectWithoutPropertiesLoose4(_ref, _excluded$12);
      const inputs = [];
      const transforms = [];
      if (x || y2 || z3) {
        inputs.push([x || 0, y2 || 0, z3 || 0]);
        transforms.push((xyz) => [`translate3d(${xyz.map((v4) => addUnit2(v4, "px")).join(",")})`, isValueIdentity2(xyz, 0)]);
      }
      eachProp2(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms2.test(key)) {
          delete style[key];
          if (is2.und(value)) return;
          const unit = pxTransforms2.test(key) ? "px" : degTransforms2.test(key) ? "deg" : "";
          inputs.push(toArray2(value));
          transforms.push(key === "rotate3d" ? ([x2, y3, z4, deg]) => [`rotate3d(${x2},${y3},${z4},${addUnit2(deg, unit)})`, isValueIdentity2(deg, 0)] : (input) => [`${key}(${input.map((v4) => addUnit2(v4, unit)).join(",")})`, isValueIdentity2(input, key.startsWith("scale") ? 1 : 0)]);
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform2(inputs, transforms);
      }
      super(style);
    }
  };
  __name(_AnimatedStyle2, "AnimatedStyle");
  var AnimatedStyle2 = _AnimatedStyle2;
  var _FluidTransform2 = class _FluidTransform2 extends FluidValue2 {
    constructor(inputs, transforms) {
      super();
      this._value = null;
      this.inputs = inputs;
      this.transforms = transforms;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity = true;
      each2(this.inputs, (input, i12) => {
        const arg1 = getFluidValue2(input[0]);
        const [t21, id] = this.transforms[i12](is2.arr(arg1) ? arg1 : input.map(getFluidValue2));
        transform += " " + t21;
        identity = identity && id;
      });
      return identity ? "none" : transform;
    }
    observerAdded(count) {
      if (count == 1) each2(this.inputs, (input) => each2(input, (value) => hasFluidValue2(value) && addFluidObserver2(value, this)));
    }
    observerRemoved(count) {
      if (count == 0) each2(this.inputs, (input) => each2(input, (value) => hasFluidValue2(value) && removeFluidObserver2(value, this)));
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers2(this, event);
    }
  };
  __name(_FluidTransform2, "FluidTransform");
  var FluidTransform2 = _FluidTransform2;
  var primitives2 = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
  var _excluded2 = ["scrollTop", "scrollLeft"];
  globals2.assign({
    batchedUpdates: import_react_dom3.unstable_batchedUpdates,
    createStringInterpolator: createStringInterpolator2,
    colors: colors2
  });
  var host2 = createHost2(primitives2, {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle: /* @__PURE__ */ __name((style) => new AnimatedStyle2(style), "createAnimatedStyle"),
    getComponentProps: /* @__PURE__ */ __name((_ref) => {
      let props = _objectWithoutPropertiesLoose4(_ref, _excluded2);
      return props;
    }, "getComponentProps")
  });
  var animated2 = host2.animated;

  // ../../contrib/hdbt/node_modules/hds-react/Notification-0c229cb2.js
  var g3;
  !function(e18) {
    e18.Small = "small", e18.Medium = "medium", e18.Large = "large";
  }(g3 || (g3 = {}));
  var y = { info: s10, success: i8, error: o12, alert: i7 };
  var v3 = /* @__PURE__ */ __name(({ visuallyHidden: e18, children: t21 }) => e18 ? import_react61.default.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, t21) : t21, "v");
  var C = import_react61.default.forwardRef((n21, f2) => {
    var { autoClose: u10 = false, autoCloseDuration: b6, boxShadow: p5 = false, children: C2, className: h5 = "", closeAnimationDuration: j2 = 85, closeButtonLabelText: N3, dismissible: E2 = false, displayAutoCloseProgress: w = true, invisible: I2 = false, label: x, notificationAriaLabel: L2 = "Notification", position: T = "inline", onClose: A2 = /* @__PURE__ */ __name(() => null, "A"), size: S2 = g3.Medium, style: D, type: O2 = "info", headingLevel: $3 = 2 } = n21, z3 = o10(n21, ["autoClose", "autoCloseDuration", "boxShadow", "children", "className", "closeAnimationDuration", "closeButtonLabelText", "dismissible", "displayAutoCloseProgress", "invisible", "label", "notificationAriaLabel", "position", "onClose", "size", "style", "type", "headingLevel"]);
    const B2 = "inline" !== T;
    B2 && S2 === g3.Large && (console.warn(`Size '${S2}' is only allowed for inline positioned notifications`), S2 = g3.Medium), !B2 && u10 && (console.warn("The 'autoClose' property is not allowed for inline positioned notifications"), u10 = false);
    const [F3, H3] = (0, import_react61.useState)(true), M = (0, import_react61.useCallback)(() => {
      H3(false), setTimeout(() => A2(), j2);
    }, [A2, j2]), P2 = b6 > 0 || !u10 ? b6 : (() => {
      const e18 = 60 * (o16(C2).length + o16(x).length) + 1e3;
      return e18 < 4e3 ? 4e3 : e18;
    })();
    (0, import_react61.useEffect)(() => {
      if (u10) {
        const e18 = setTimeout(() => {
          M();
        }, P2);
        return () => clearTimeout(e18);
      }
    }, [u10, b6, M]);
    const k = y[O2], R3 = B2 ? ((e18) => {
      const o18 = e18.includes("center");
      return { from: { transform: `translate3d(${o18 ? "-50%" : "0"}, ${e18.includes("top") ? "-" : ""}32px, 0)`, opacity: 0.66 }, to: { transform: `translate3d(${o18 ? "-50%" : "0"}, 0, 0)`, opacity: 1 }, config: { friction: 30, tension: 300 } };
    })(T) : {}, _7 = { from: { opacity: 1 }, to: { opacity: 0 }, config: { duration: j2 } };
    const q3 = w ? /* @__PURE__ */ ((e18) => ({ from: { transform: "translate3d(0%, 0, 0)" }, to: { transform: "translate3d(-100%, 0, 0)" }, config: { duration: e18 } }))(P2) : {}, G3 = useSpring(F3 ? R3 : _7), J3 = useSpring(q3);
    return import_react61.default.createElement(v3, { visuallyHidden: I2 }, import_react61.default.createElement(animated2.section, Object.assign({}, z3, { style: Object.assign(Object.assign({}, G3), D), className: r17(o15[T], o15.notification, o15[S2], o15[O2], u10 && o15.noBorder, p5 && o15.boxShadow, h5), "aria-label": L2, role: B2 || I2 ? "alert" : void 0 }), u10 && import_react61.default.createElement(animated2.div, { style: J3, className: o15.autoClose }), import_react61.default.createElement("div", { className: o15.content, ref: f2 }, x && import_react61.default.createElement("div", Object.assign({ className: o15.label }, B2 || I2 ? {} : { role: "heading", "aria-level": $3 }), import_react61.default.createElement(k, { className: o15.icon }), import_react61.default.createElement(v3, { visuallyHidden: S2 === g3.Small }, x)), C2 && import_react61.default.createElement("div", { className: o15.body }, C2)), E2 && import_react61.default.createElement("button", { className: r17(o15.close, o15[O2]), type: "button", title: N3, "aria-label": N3, onClick: M }, import_react61.default.createElement(s15, null))));
  });

  // ../../contrib/hdbt/node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js
  var import_core11 = __toESM(require_core2(), 1);
  var import_sha2562 = __toESM(require_sha2562(), 1);
  var import_enc_base642 = __toESM(require_enc_base642(), 1);
  var import_enc_utf82 = __toESM(require_enc_utf82(), 1);

  // ../../contrib/hdbt/node_modules/jwt-decode/build/jwt-decode.esm.js
  function e16(e18) {
    this.message = e18;
  }
  __name(e16, "e");
  e16.prototype = new Error(), e16.prototype.name = "InvalidCharacterError";
  var r29 = "undefined" != typeof window && window.atob && window.atob.bind(window) || function(r30) {
    var t21 = String(r30).replace(/=+$/, "");
    if (t21.length % 4 == 1) throw new e16("'atob' failed: The string to be decoded is not correctly encoded.");
    for (var n21, o18, a21 = 0, i12 = 0, c6 = ""; o18 = t21.charAt(i12++); ~o18 && (n21 = a21 % 4 ? 64 * n21 + o18 : o18, a21++ % 4) ? c6 += String.fromCharCode(255 & n21 >> (-2 * a21 & 6)) : 0) o18 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o18);
    return c6;
  };
  function n18(e18) {
    this.message = e18;
  }
  __name(n18, "n");
  n18.prototype = new Error(), n18.prototype.name = "InvalidTokenError";

  // ../../contrib/hdbt/node_modules/oidc-client-ts/dist/esm/oidc-client-ts.js
  var nopLogger2 = {
    debug: /* @__PURE__ */ __name(() => void 0, "debug"),
    info: /* @__PURE__ */ __name(() => void 0, "info"),
    warn: /* @__PURE__ */ __name(() => void 0, "warn"),
    error: /* @__PURE__ */ __name(() => void 0, "error")
  };
  var level2;
  var logger3;
  var Log2 = /* @__PURE__ */ ((Log22) => {
    Log22[Log22["NONE"] = 0] = "NONE";
    Log22[Log22["ERROR"] = 1] = "ERROR";
    Log22[Log22["WARN"] = 2] = "WARN";
    Log22[Log22["INFO"] = 3] = "INFO";
    Log22[Log22["DEBUG"] = 4] = "DEBUG";
    return Log22;
  })(Log2 || {});
  ((Log22) => {
    function reset() {
      level2 = 3;
      logger3 = nopLogger2;
    }
    __name(reset, "reset");
    Log22.reset = reset;
    function setLevel(value) {
      if (!(0 <= value && value <= 4)) {
        throw new Error("Invalid log level");
      }
      level2 = value;
    }
    __name(setLevel, "setLevel");
    Log22.setLevel = setLevel;
    function setLogger(value) {
      logger3 = value;
    }
    __name(setLogger, "setLogger");
    Log22.setLogger = setLogger;
  })(Log2 || (Log2 = {}));
  Log2.reset();
  var DefaultStaleStateAgeInSeconds2 = 60 * 15;
  var DefaultClockSkewInSeconds2 = 60 * 5;

  // ../../contrib/hdbt/node_modules/hds-react/Tag-d0bc79a1.js
  var import_react62 = __toESM(require_react());
  var n19;
  var s19;
  var l17 = { tag: "Tag-module_tag__3bo5S tag_hds-tag__3MKf3", large: "Tag-module_large__1ZNIX tag_hds-tag--large__1bVs5", action: "Tag-module_action__4ky2K tag_hds-tag--action__Az-Fm", link: "Tag-module_link__3f99r tag_hds-tag--link__1470y", icon: "Tag-module_icon__or2kN tag_hds-tag__icon__2_xWY", multiline: "Tag-module_multiline__24sap tag_hds-tag--multiline__yHIcb" };
  e11(`.tag_hds-icon__2LFMT{background-color:currentcolor;display:inline-block;height:var(--icon-size);-webkit-mask-image:var(--mask-image);mask-image:var(--mask-image);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:auto;mask-size:auto;width:var(--icon-size)}.tag_hds-icon--size-xs__L1nV_{--icon-size:var(--spacing-layout-2-xs)}.tag_hds-icon--size-s__23CMA{--icon-size:var(--spacing-layout-xs)}.tag_hds-icon--size-m__2zCBY{--icon-size:var(--spacing-layout-s)}.tag_hds-icon--size-l__UuAMZ{--icon-size:var(--spacing-layout-m)}.tag_hds-icon--size-xl__2f_bT{--icon-size:var(--spacing-layout-l)}[class*=hds-icon-start--]:before{-webkit-mask-image:var(--mask-image-before);mask-image:var(--mask-image-before)}[class*=hds-icon-end--]:after,[class*=hds-icon-start--]:before{background-color:currentcolor;content:"";display:inline-flex;height:var(--icon-size,24px);-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;-webkit-mask-size:contain;mask-size:contain;width:var(--icon-size,24px)}[class*=hds-icon-end--]:after{-webkit-mask-image:var(--mask-image-after);mask-image:var(--mask-image-after)}.tag_hds-icon--cross__2tq88{--mask-image-cross:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18 7.5L13.5 12l4.5 4.5-1.5 1.5-4.5-4.5L7.5 18 6 16.5l4.5-4.5L6 7.5 7.5 6l4.5 4.5L16.5 6 18 7.5z' fill='currentColor'/%3E%3C/svg%3E");--mask-image:var(--mask-image-cross)}.tag_hds-icon-start--cross__Efj_S{--mask-image-before:var(--mask-image-cross)}.tag_hds-icon-end--cross__3_S2q{--mask-image-after:var(--mask-image-cross)}.tag_hds-tag__3MKf3{--computed-background-color:var(--background-color,var(--color-black-10));--computed-background-color-focus:var(--background-color-focus,var(--computed-background-color,transparent));--computed-background-color-hover:var(--background-color-hover,var(--computed-background-color-focus,transparent));--computed-background-color-active:var(--background-color-active,var(--computed-background-color-hover,transparent));--computed-border-color:var(--border-color,var(--computed-background-color));--computed-border-color-focus:var(--border-color-focus,var(--computed-border-color,transparent));--computed-border-color-hover:var(--border-color-hover,var(--computed-border-color-focus,transparent));--computed-border-color-active:var(--border-color-active,var(--computed-border-color-hover,transparent));--computed-color:var(--color,--color-black-90);--computed-color-focus:var(--color-focus,var(--computed-color,inherit));--computed-color-hover:var(--color-hover,var(--computed-color-focus,inherit));--computed-color-active:var(--color-active,var(--computed-color-hover,inherit));--computed-outline-color:var(--outline-color,transparent);--font-size:var(--fontsize-body-s);--gap:var(--spacing-3-xs);--height:32px;--icon-reposition:-4px;--icon-size:24px;--outline-width:2px;--padding-horizontal:12px;--padding-vertical:3px;align-items:center;background-color:var(--computed-background-color);border-radius:calc(var(--height) / 2);box-sizing:border-box;color:var(--computed-color,inherit);display:inline-flex;flex-direction:row;font-size:var(--font-size);font-weight:500;grid-gap:var(--gap);gap:var(--gap);justify-content:center;line-height:var(--lineheight-l);max-width:100%;min-height:var(--height);outline:none;outline-offset:2px;overflow:hidden;padding:var(--padding-vertical) var(--padding-horizontal)}.tag_hds-tag__3MKf3:after{flex-shrink:0;margin-right:var(--icon-reposition)}.tag_hds-tag__3MKf3:before{flex-shrink:0;margin-left:var(--icon-reposition)}.tag_hds-tag__3MKf3>span{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.tag_hds-tag--large__1bVs5{--font-size:var(--fontsize-body-m);--gap:var(--spacing-2-xs);--height:48px;--icon-reposition:-8px;--outline-width:3px;--padding-horizontal:20px;--padding-vertical:10px}.tag_hds-tag--action__Az-Fm{--border-color:var(--color-black-90);border:1px solid var(--computed-border-color);padding:calc(var(--padding-vertical) - 1px) calc(var(--padding-horizontal) - 1px)}.tag_hds-tag--multiline__yHIcb>span{-webkit-hyphens:auto;hyphens:auto;white-space:normal}.tag_hds-tag--link__1470y{text-decoration:underline}.tag_hds-tag--action__Az-Fm,.tag_hds-tag--link__1470y{--background-color-hover:var(--color-black-20);--outline-color:var(--color-focus-outline);cursor:pointer}.tag_hds-tag--action__Az-Fm.tag_focus-visible__2sNDw,.tag_hds-tag--action__Az-Fm:focus-visible,.tag_hds-tag--link__1470y.tag_focus-visible__2sNDw,.tag_hds-tag--link__1470y:focus-visible{background-color:var(--computed-background-color-focus);border-color:var(--computed-border-color-focus);color:var(--computed-color-focus)}.tag_hds-tag--action__Az-Fm:hover,.tag_hds-tag--link__1470y:hover{background-color:var(--computed-background-color-hover);border-color:var(--computed-border-color-hover);color:var(--computed-color-hover)}.tag_hds-tag--action__Az-Fm:active,.tag_hds-tag--link__1470y:active{background-color:var(--computed-background-color-active);border-color:var(--computed-border-color-active);color:var(--computed-color-active)}.tag_hds-tag--action__Az-Fm.tag_focus-visible__2sNDw,.tag_hds-tag--action__Az-Fm:active:hover,.tag_hds-tag--action__Az-Fm:focus-visible,.tag_hds-tag--link__1470y.tag_focus-visible__2sNDw,.tag_hds-tag--link__1470y:active:hover,.tag_hds-tag--link__1470y:focus-visible{box-shadow:none;outline:var(--outline-width) solid var(--computed-outline-color)}.tag_hds-icon__2LFMT.tag_hds-tag__icon__2_xWY,.tag_hds-tag__icon__2_xWY{flex-shrink:0;height:var(--icon-size);width:var(--icon-size)}.tag_hds-tag__icon__2_xWY:first-child{margin-left:var(--icon-reposition)}.tag_hds-tag__icon__2_xWY:last-child{margin-right:var(--icon-reposition)}`), function(o18) {
    o18.Action = "action", o18.Informative = "informative", o18.Link = "link";
  }(n19 || (n19 = {})), function(o18) {
    o18.Small = "small", o18.Large = "large";
  }(s19 || (s19 = {}));
  var d15 = (0, import_react62.forwardRef)((e18, r30) => {
    var { children: d16, className: g4, onClick: _7, onDelete: m6, size: u10 = s19.Small, theme: v4, href: h5, iconStart: p5, iconEnd: b6, multiline: k = false } = e18, f2 = o10(e18, ["children", "className", "onClick", "onDelete", "size", "theme", "href", "iconStart", "iconEnd", "multiline"]);
    const z3 = !!m6, x = m6 || _7, w = !!x;
    let y2 = n19.Informative, E2 = null;
    x ? (y2 = n19.Action, E2 = "button") : h5 && (y2 = n19.Link);
    const A2 = d9(l17.tag, v4), N3 = l17.large, F3 = r17(l17.tag, u10 === s19.Large && N3, A2, g4, l17[y2], k && l17.multiline), j2 = p5 ? import_react62.default.createElement("div", { className: r17(l17.icon), "aria-hidden": "true" }, p5) : null, L2 = b6 ? import_react62.default.createElement("div", { className: r17(l17.icon), "aria-hidden": "true" }, b6) : null, T = /* @__PURE__ */ __name((o18) => {
      "Enter" !== o18.key && " " !== o18.key || x(o18);
    }, "T"), C2 = /* @__PURE__ */ __name((o18) => import_react62.default.createElement("a", Object.assign({ ref: r30, className: r17(F3, l17.link), href: h5 }, f2), o18.children), "C"), M = /* @__PURE__ */ __name((o18) => import_react62.default.createElement("div", Object.assign({ className: F3, ref: r30 }, w && { tabIndex: 0, role: E2, onClick: x, onKeyDown: T }, f2), o18.children), "M"), I2 = import_react62.default.createElement(import_react62.default.Fragment, null, j2, import_react62.default.createElement("span", null, d16), L2, z3 && !L2 ? import_react62.default.createElement(s15, { className: l17.icon }) : null);
    return h5 ? import_react62.default.createElement(C2, null, I2) : import_react62.default.createElement(M, null, I2);
  });

  // ../../contrib/hdbt/node_modules/hds-react/index.js
  var import_crc_322 = __toESM(require_crc322());
  var import_react63 = __toESM(require_react());
  var import_lodash9 = __toESM(require_lodash2());
  var import_cookie2 = __toESM(require_cookie2());
  var import_react_dom4 = __toESM(require_react_dom());

  // ../../contrib/hdbt/src/js/react/common/DateRangeSelect.tsx
  var import_react66 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/luxon/src/errors.js
  var _LuxonError2 = class _LuxonError2 extends Error {
  };
  __name(_LuxonError2, "LuxonError");
  var LuxonError2 = _LuxonError2;
  var _InvalidDateTimeError2 = class _InvalidDateTimeError2 extends LuxonError2 {
    constructor(reason) {
      super(`Invalid DateTime: ${reason.toMessage()}`);
    }
  };
  __name(_InvalidDateTimeError2, "InvalidDateTimeError");
  var InvalidDateTimeError2 = _InvalidDateTimeError2;
  var _InvalidIntervalError2 = class _InvalidIntervalError2 extends LuxonError2 {
    constructor(reason) {
      super(`Invalid Interval: ${reason.toMessage()}`);
    }
  };
  __name(_InvalidIntervalError2, "InvalidIntervalError");
  var InvalidIntervalError2 = _InvalidIntervalError2;
  var _InvalidDurationError2 = class _InvalidDurationError2 extends LuxonError2 {
    constructor(reason) {
      super(`Invalid Duration: ${reason.toMessage()}`);
    }
  };
  __name(_InvalidDurationError2, "InvalidDurationError");
  var InvalidDurationError2 = _InvalidDurationError2;
  var _ConflictingSpecificationError2 = class _ConflictingSpecificationError2 extends LuxonError2 {
  };
  __name(_ConflictingSpecificationError2, "ConflictingSpecificationError");
  var ConflictingSpecificationError2 = _ConflictingSpecificationError2;
  var _InvalidUnitError2 = class _InvalidUnitError2 extends LuxonError2 {
    constructor(unit) {
      super(`Invalid unit ${unit}`);
    }
  };
  __name(_InvalidUnitError2, "InvalidUnitError");
  var InvalidUnitError2 = _InvalidUnitError2;
  var _InvalidArgumentError2 = class _InvalidArgumentError2 extends LuxonError2 {
  };
  __name(_InvalidArgumentError2, "InvalidArgumentError");
  var InvalidArgumentError2 = _InvalidArgumentError2;
  var _ZoneIsAbstractError2 = class _ZoneIsAbstractError2 extends LuxonError2 {
    constructor() {
      super("Zone is an abstract class");
    }
  };
  __name(_ZoneIsAbstractError2, "ZoneIsAbstractError");
  var ZoneIsAbstractError2 = _ZoneIsAbstractError2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/formats.js
  var n20 = "numeric";
  var s20 = "short";
  var l18 = "long";
  var DATE_SHORT2 = {
    year: n20,
    month: n20,
    day: n20
  };
  var DATE_MED2 = {
    year: n20,
    month: s20,
    day: n20
  };
  var DATE_MED_WITH_WEEKDAY2 = {
    year: n20,
    month: s20,
    day: n20,
    weekday: s20
  };
  var DATE_FULL2 = {
    year: n20,
    month: l18,
    day: n20
  };
  var DATE_HUGE2 = {
    year: n20,
    month: l18,
    day: n20,
    weekday: l18
  };
  var TIME_SIMPLE2 = {
    hour: n20,
    minute: n20
  };
  var TIME_WITH_SECONDS2 = {
    hour: n20,
    minute: n20,
    second: n20
  };
  var TIME_WITH_SHORT_OFFSET2 = {
    hour: n20,
    minute: n20,
    second: n20,
    timeZoneName: s20
  };
  var TIME_WITH_LONG_OFFSET2 = {
    hour: n20,
    minute: n20,
    second: n20,
    timeZoneName: l18
  };
  var TIME_24_SIMPLE2 = {
    hour: n20,
    minute: n20,
    hourCycle: "h23"
  };
  var TIME_24_WITH_SECONDS2 = {
    hour: n20,
    minute: n20,
    second: n20,
    hourCycle: "h23"
  };
  var TIME_24_WITH_SHORT_OFFSET2 = {
    hour: n20,
    minute: n20,
    second: n20,
    hourCycle: "h23",
    timeZoneName: s20
  };
  var TIME_24_WITH_LONG_OFFSET2 = {
    hour: n20,
    minute: n20,
    second: n20,
    hourCycle: "h23",
    timeZoneName: l18
  };
  var DATETIME_SHORT2 = {
    year: n20,
    month: n20,
    day: n20,
    hour: n20,
    minute: n20
  };
  var DATETIME_SHORT_WITH_SECONDS2 = {
    year: n20,
    month: n20,
    day: n20,
    hour: n20,
    minute: n20,
    second: n20
  };
  var DATETIME_MED2 = {
    year: n20,
    month: s20,
    day: n20,
    hour: n20,
    minute: n20
  };
  var DATETIME_MED_WITH_SECONDS2 = {
    year: n20,
    month: s20,
    day: n20,
    hour: n20,
    minute: n20,
    second: n20
  };
  var DATETIME_MED_WITH_WEEKDAY2 = {
    year: n20,
    month: s20,
    day: n20,
    weekday: s20,
    hour: n20,
    minute: n20
  };
  var DATETIME_FULL2 = {
    year: n20,
    month: l18,
    day: n20,
    hour: n20,
    minute: n20,
    timeZoneName: s20
  };
  var DATETIME_FULL_WITH_SECONDS2 = {
    year: n20,
    month: l18,
    day: n20,
    hour: n20,
    minute: n20,
    second: n20,
    timeZoneName: s20
  };
  var DATETIME_HUGE2 = {
    year: n20,
    month: l18,
    day: n20,
    weekday: l18,
    hour: n20,
    minute: n20,
    timeZoneName: l18
  };
  var DATETIME_HUGE_WITH_SECONDS2 = {
    year: n20,
    month: l18,
    day: n20,
    weekday: l18,
    hour: n20,
    minute: n20,
    second: n20,
    timeZoneName: l18
  };

  // ../../contrib/hdbt/node_modules/luxon/src/zone.js
  var _Zone2 = class _Zone2 {
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get type() {
      throw new ZoneIsAbstractError2();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */
    get name() {
      throw new ZoneIsAbstractError2();
    }
    get ianaName() {
      return this.name;
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */
    get isUniversal() {
      throw new ZoneIsAbstractError2();
    }
    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts3, opts) {
      throw new ZoneIsAbstractError2();
    }
    /**
     * Returns the offset's value as a string
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts3, format4) {
      throw new ZoneIsAbstractError2();
    }
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts3) {
      throw new ZoneIsAbstractError2();
    }
    /**
     * Return whether this Zone is equal to another zone
     * @abstract
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      throw new ZoneIsAbstractError2();
    }
    /**
     * Return whether this Zone is valid.
     * @abstract
     * @type {boolean}
     */
    get isValid() {
      throw new ZoneIsAbstractError2();
    }
  };
  __name(_Zone2, "Zone");
  var Zone2 = _Zone2;

  // ../../contrib/hdbt/node_modules/luxon/src/zones/systemZone.js
  var singleton3 = null;
  var _SystemZone2 = class _SystemZone2 extends Zone2 {
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    static get instance() {
      if (singleton3 === null) {
        singleton3 = new _SystemZone2();
      }
      return singleton3;
    }
    /** @override **/
    get type() {
      return "system";
    }
    /** @override **/
    get name() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName(ts3, { format: format4, locale: locale2 }) {
      return parseZoneInfo2(ts3, format4, locale2);
    }
    /** @override **/
    formatOffset(ts3, format4) {
      return formatOffset2(this.offset(ts3), format4);
    }
    /** @override **/
    offset(ts3) {
      return -new Date(ts3).getTimezoneOffset();
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "system";
    }
    /** @override **/
    get isValid() {
      return true;
    }
  };
  __name(_SystemZone2, "SystemZone");
  var SystemZone2 = _SystemZone2;

  // ../../contrib/hdbt/node_modules/luxon/src/zones/IANAZone.js
  var dtfCache2 = {};
  function makeDTF2(zone) {
    if (!dtfCache2[zone]) {
      dtfCache2[zone] = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        era: "short"
      });
    }
    return dtfCache2[zone];
  }
  __name(makeDTF2, "makeDTF");
  var typeToPos2 = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
  };
  function hackyOffset2(dtf, date) {
    const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
    return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
  }
  __name(hackyOffset2, "hackyOffset");
  function partsOffset2(dtf, date) {
    const formatted = dtf.formatToParts(date);
    const filled = [];
    for (let i12 = 0; i12 < formatted.length; i12++) {
      const { type, value } = formatted[i12];
      const pos = typeToPos2[type];
      if (type === "era") {
        filled[pos] = value;
      } else if (!isUndefined3(pos)) {
        filled[pos] = parseInt(value, 10);
      }
    }
    return filled;
  }
  __name(partsOffset2, "partsOffset");
  var ianaZoneCache2 = {};
  var _IANAZone2 = class _IANAZone2 extends Zone2 {
    /**
     * @param {string} name - Zone name
     * @return {IANAZone}
     */
    static create(name) {
      if (!ianaZoneCache2[name]) {
        ianaZoneCache2[name] = new _IANAZone2(name);
      }
      return ianaZoneCache2[name];
    }
    /**
     * Reset local caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCache() {
      ianaZoneCache2 = {};
      dtfCache2 = {};
    }
    /**
     * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
     * @param {string} s - The string to check validity on
     * @example IANAZone.isValidSpecifier("America/New_York") //=> true
     * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
     * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
     * @return {boolean}
     */
    static isValidSpecifier(s21) {
      return this.isValidZone(s21);
    }
    /**
     * Returns whether the provided string identifies a real zone
     * @param {string} zone - The string to check
     * @example IANAZone.isValidZone("America/New_York") //=> true
     * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
     * @example IANAZone.isValidZone("Sport~~blorp") //=> false
     * @return {boolean}
     */
    static isValidZone(zone) {
      if (!zone) {
        return false;
      }
      try {
        new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
        return true;
      } catch (e18) {
        return false;
      }
    }
    constructor(name) {
      super();
      this.zoneName = name;
      this.valid = _IANAZone2.isValidZone(name);
    }
    /** @override **/
    get type() {
      return "iana";
    }
    /** @override **/
    get name() {
      return this.zoneName;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName(ts3, { format: format4, locale: locale2 }) {
      return parseZoneInfo2(ts3, format4, locale2, this.name);
    }
    /** @override **/
    formatOffset(ts3, format4) {
      return formatOffset2(this.offset(ts3), format4);
    }
    /** @override **/
    offset(ts3) {
      const date = new Date(ts3);
      if (isNaN(date)) return NaN;
      const dtf = makeDTF2(this.name);
      let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset2(dtf, date) : hackyOffset2(dtf, date);
      if (adOrBc === "BC") {
        year = -Math.abs(year) + 1;
      }
      const adjustedHour = hour === 24 ? 0 : hour;
      const asUTC = objToLocalTS2({
        year,
        month,
        day,
        hour: adjustedHour,
        minute,
        second,
        millisecond: 0
      });
      let asTS = +date;
      const over = asTS % 1e3;
      asTS -= over >= 0 ? over : 1e3 + over;
      return (asUTC - asTS) / (60 * 1e3);
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "iana" && otherZone.name === this.name;
    }
    /** @override **/
    get isValid() {
      return this.valid;
    }
  };
  __name(_IANAZone2, "IANAZone");
  var IANAZone2 = _IANAZone2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/locale.js
  var intlLFCache2 = {};
  function getCachedLF2(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlLFCache2[key];
    if (!dtf) {
      dtf = new Intl.ListFormat(locString, opts);
      intlLFCache2[key] = dtf;
    }
    return dtf;
  }
  __name(getCachedLF2, "getCachedLF");
  var intlDTCache2 = {};
  function getCachedDTF2(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlDTCache2[key];
    if (!dtf) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache2[key] = dtf;
    }
    return dtf;
  }
  __name(getCachedDTF2, "getCachedDTF");
  var intlNumCache2 = {};
  function getCachedINF2(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let inf = intlNumCache2[key];
    if (!inf) {
      inf = new Intl.NumberFormat(locString, opts);
      intlNumCache2[key] = inf;
    }
    return inf;
  }
  __name(getCachedINF2, "getCachedINF");
  var intlRelCache2 = {};
  function getCachedRTF2(locString, opts = {}) {
    const { base, ...cacheKeyOpts } = opts;
    const key = JSON.stringify([locString, cacheKeyOpts]);
    let inf = intlRelCache2[key];
    if (!inf) {
      inf = new Intl.RelativeTimeFormat(locString, opts);
      intlRelCache2[key] = inf;
    }
    return inf;
  }
  __name(getCachedRTF2, "getCachedRTF");
  var sysLocaleCache2 = null;
  function systemLocale2() {
    if (sysLocaleCache2) {
      return sysLocaleCache2;
    } else {
      sysLocaleCache2 = new Intl.DateTimeFormat().resolvedOptions().locale;
      return sysLocaleCache2;
    }
  }
  __name(systemLocale2, "systemLocale");
  function parseLocaleString2(localeStr) {
    const xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) {
      localeStr = localeStr.substring(0, xIndex);
    }
    const uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
      return [localeStr];
    } else {
      let options;
      let selectedStr;
      try {
        options = getCachedDTF2(localeStr).resolvedOptions();
        selectedStr = localeStr;
      } catch (e18) {
        const smaller = localeStr.substring(0, uIndex);
        options = getCachedDTF2(smaller).resolvedOptions();
        selectedStr = smaller;
      }
      const { numberingSystem, calendar } = options;
      return [selectedStr, numberingSystem, calendar];
    }
  }
  __name(parseLocaleString2, "parseLocaleString");
  function intlConfigString2(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
      if (!localeStr.includes("-u-")) {
        localeStr += "-u";
      }
      if (outputCalendar) {
        localeStr += `-ca-${outputCalendar}`;
      }
      if (numberingSystem) {
        localeStr += `-nu-${numberingSystem}`;
      }
      return localeStr;
    } else {
      return localeStr;
    }
  }
  __name(intlConfigString2, "intlConfigString");
  function mapMonths2(f2) {
    const ms = [];
    for (let i12 = 1; i12 <= 12; i12++) {
      const dt3 = DateTime2.utc(2016, i12, 1);
      ms.push(f2(dt3));
    }
    return ms;
  }
  __name(mapMonths2, "mapMonths");
  function mapWeekdays2(f2) {
    const ms = [];
    for (let i12 = 1; i12 <= 7; i12++) {
      const dt3 = DateTime2.utc(2016, 11, 13 + i12);
      ms.push(f2(dt3));
    }
    return ms;
  }
  __name(mapWeekdays2, "mapWeekdays");
  function listStuff2(loc, length, defaultOK, englishFn, intlFn) {
    const mode = loc.listingMode(defaultOK);
    if (mode === "error") {
      return null;
    } else if (mode === "en") {
      return englishFn(length);
    } else {
      return intlFn(length);
    }
  }
  __name(listStuff2, "listStuff");
  function supportsFastNumbers2(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
      return false;
    } else {
      return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
    }
  }
  __name(supportsFastNumbers2, "supportsFastNumbers");
  var _PolyNumberFormatter2 = class _PolyNumberFormatter2 {
    constructor(intl, forceSimple, opts) {
      this.padTo = opts.padTo || 0;
      this.floor = opts.floor || false;
      const { padTo, floor, ...otherOpts } = opts;
      if (!forceSimple || Object.keys(otherOpts).length > 0) {
        const intlOpts = { useGrouping: false, ...opts };
        if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
        this.inf = getCachedINF2(intl, intlOpts);
      }
    }
    format(i12) {
      if (this.inf) {
        const fixed = this.floor ? Math.floor(i12) : i12;
        return this.inf.format(fixed);
      } else {
        const fixed = this.floor ? Math.floor(i12) : roundTo2(i12, 3);
        return padStart2(fixed, this.padTo);
      }
    }
  };
  __name(_PolyNumberFormatter2, "PolyNumberFormatter");
  var PolyNumberFormatter2 = _PolyNumberFormatter2;
  var _PolyDateFormatter2 = class _PolyDateFormatter2 {
    constructor(dt3, intl, opts) {
      this.opts = opts;
      this.originalZone = void 0;
      let z3 = void 0;
      if (this.opts.timeZone) {
        this.dt = dt3;
      } else if (dt3.zone.type === "fixed") {
        const gmtOffset = -1 * (dt3.offset / 60);
        const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
        if (dt3.offset !== 0 && IANAZone2.create(offsetZ).valid) {
          z3 = offsetZ;
          this.dt = dt3;
        } else {
          z3 = "UTC";
          this.dt = dt3.offset === 0 ? dt3 : dt3.setZone("UTC").plus({ minutes: dt3.offset });
          this.originalZone = dt3.zone;
        }
      } else if (dt3.zone.type === "system") {
        this.dt = dt3;
      } else if (dt3.zone.type === "iana") {
        this.dt = dt3;
        z3 = dt3.zone.name;
      } else {
        z3 = "UTC";
        this.dt = dt3.setZone("UTC").plus({ minutes: dt3.offset });
        this.originalZone = dt3.zone;
      }
      const intlOpts = { ...this.opts };
      intlOpts.timeZone = intlOpts.timeZone || z3;
      this.dtf = getCachedDTF2(intl, intlOpts);
    }
    format() {
      if (this.originalZone) {
        return this.formatToParts().map(({ value }) => value).join("");
      }
      return this.dtf.format(this.dt.toJSDate());
    }
    formatToParts() {
      const parts = this.dtf.formatToParts(this.dt.toJSDate());
      if (this.originalZone) {
        return parts.map((part) => {
          if (part.type === "timeZoneName") {
            const offsetName = this.originalZone.offsetName(this.dt.ts, {
              locale: this.dt.locale,
              format: this.opts.timeZoneName
            });
            return {
              ...part,
              value: offsetName
            };
          } else {
            return part;
          }
        });
      }
      return parts;
    }
    resolvedOptions() {
      return this.dtf.resolvedOptions();
    }
  };
  __name(_PolyDateFormatter2, "PolyDateFormatter");
  var PolyDateFormatter2 = _PolyDateFormatter2;
  var _PolyRelFormatter2 = class _PolyRelFormatter2 {
    constructor(intl, isEnglish, opts) {
      this.opts = { style: "long", ...opts };
      if (!isEnglish && hasRelative2()) {
        this.rtf = getCachedRTF2(intl, opts);
      }
    }
    format(count, unit) {
      if (this.rtf) {
        return this.rtf.format(count, unit);
      } else {
        return formatRelativeTime2(unit, count, this.opts.numeric, this.opts.style !== "long");
      }
    }
    formatToParts(count, unit) {
      if (this.rtf) {
        return this.rtf.formatToParts(count, unit);
      } else {
        return [];
      }
    }
  };
  __name(_PolyRelFormatter2, "PolyRelFormatter");
  var PolyRelFormatter2 = _PolyRelFormatter2;
  var _Locale2 = class _Locale2 {
    static fromOpts(opts) {
      return _Locale2.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
    }
    static create(locale2, numberingSystem, outputCalendar, defaultToEN = false) {
      const specifiedLocale = locale2 || Settings2.defaultLocale;
      const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale2());
      const numberingSystemR = numberingSystem || Settings2.defaultNumberingSystem;
      const outputCalendarR = outputCalendar || Settings2.defaultOutputCalendar;
      return new _Locale2(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
    }
    static resetCache() {
      sysLocaleCache2 = null;
      intlDTCache2 = {};
      intlNumCache2 = {};
      intlRelCache2 = {};
    }
    static fromObject({ locale: locale2, numberingSystem, outputCalendar } = {}) {
      return _Locale2.create(locale2, numberingSystem, outputCalendar);
    }
    constructor(locale2, numbering, outputCalendar, specifiedLocale) {
      const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString2(locale2);
      this.locale = parsedLocale;
      this.numberingSystem = numbering || parsedNumberingSystem || null;
      this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
      this.intl = intlConfigString2(this.locale, this.numberingSystem, this.outputCalendar);
      this.weekdaysCache = { format: {}, standalone: {} };
      this.monthsCache = { format: {}, standalone: {} };
      this.meridiemCache = null;
      this.eraCache = {};
      this.specifiedLocale = specifiedLocale;
      this.fastNumbersCached = null;
    }
    get fastNumbers() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers2(this);
      }
      return this.fastNumbersCached;
    }
    listingMode() {
      const isActuallyEn = this.isEnglish();
      const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
      return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    }
    clone(alts) {
      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
        return this;
      } else {
        return _Locale2.create(
          alts.locale || this.specifiedLocale,
          alts.numberingSystem || this.numberingSystem,
          alts.outputCalendar || this.outputCalendar,
          alts.defaultToEN || false
        );
      }
    }
    redefaultToEN(alts = {}) {
      return this.clone({ ...alts, defaultToEN: true });
    }
    redefaultToSystem(alts = {}) {
      return this.clone({ ...alts, defaultToEN: false });
    }
    months(length, format4 = false, defaultOK = true) {
      return listStuff2(this, length, defaultOK, months2, () => {
        const intl = format4 ? { month: length, day: "numeric" } : { month: length }, formatStr = format4 ? "format" : "standalone";
        if (!this.monthsCache[formatStr][length]) {
          this.monthsCache[formatStr][length] = mapMonths2((dt3) => this.extract(dt3, intl, "month"));
        }
        return this.monthsCache[formatStr][length];
      });
    }
    weekdays(length, format4 = false, defaultOK = true) {
      return listStuff2(this, length, defaultOK, weekdays2, () => {
        const intl = format4 ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format4 ? "format" : "standalone";
        if (!this.weekdaysCache[formatStr][length]) {
          this.weekdaysCache[formatStr][length] = mapWeekdays2(
            (dt3) => this.extract(dt3, intl, "weekday")
          );
        }
        return this.weekdaysCache[formatStr][length];
      });
    }
    meridiems(defaultOK = true) {
      return listStuff2(
        this,
        void 0,
        defaultOK,
        () => meridiems2,
        () => {
          if (!this.meridiemCache) {
            const intl = { hour: "numeric", hourCycle: "h12" };
            this.meridiemCache = [DateTime2.utc(2016, 11, 13, 9), DateTime2.utc(2016, 11, 13, 19)].map(
              (dt3) => this.extract(dt3, intl, "dayperiod")
            );
          }
          return this.meridiemCache;
        }
      );
    }
    eras(length, defaultOK = true) {
      return listStuff2(this, length, defaultOK, eras2, () => {
        const intl = { era: length };
        if (!this.eraCache[length]) {
          this.eraCache[length] = [DateTime2.utc(-40, 1, 1), DateTime2.utc(2017, 1, 1)].map(
            (dt3) => this.extract(dt3, intl, "era")
          );
        }
        return this.eraCache[length];
      });
    }
    extract(dt3, intlOpts, field) {
      const df = this.dtFormatter(dt3, intlOpts), results = df.formatToParts(), matching = results.find((m6) => m6.type.toLowerCase() === field);
      return matching ? matching.value : null;
    }
    numberFormatter(opts = {}) {
      return new PolyNumberFormatter2(this.intl, opts.forceSimple || this.fastNumbers, opts);
    }
    dtFormatter(dt3, intlOpts = {}) {
      return new PolyDateFormatter2(dt3, this.intl, intlOpts);
    }
    relFormatter(opts = {}) {
      return new PolyRelFormatter2(this.intl, this.isEnglish(), opts);
    }
    listFormatter(opts = {}) {
      return getCachedLF2(this.intl, opts);
    }
    isEnglish() {
      return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
    }
    equals(other) {
      return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
    }
  };
  __name(_Locale2, "Locale");
  var Locale2 = _Locale2;

  // ../../contrib/hdbt/node_modules/luxon/src/zones/fixedOffsetZone.js
  var singleton4 = null;
  var _FixedOffsetZone2 = class _FixedOffsetZone2 extends Zone2 {
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    static get utcInstance() {
      if (singleton4 === null) {
        singleton4 = new _FixedOffsetZone2(0);
      }
      return singleton4;
    }
    /**
     * Get an instance with a specified offset
     * @param {number} offset - The offset in minutes
     * @return {FixedOffsetZone}
     */
    static instance(offset5) {
      return offset5 === 0 ? _FixedOffsetZone2.utcInstance : new _FixedOffsetZone2(offset5);
    }
    /**
     * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
     * @param {string} s - The offset string to parse
     * @example FixedOffsetZone.parseSpecifier("UTC+6")
     * @example FixedOffsetZone.parseSpecifier("UTC+06")
     * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
     * @return {FixedOffsetZone}
     */
    static parseSpecifier(s21) {
      if (s21) {
        const r30 = s21.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
        if (r30) {
          return new _FixedOffsetZone2(signedOffset2(r30[1], r30[2]));
        }
      }
      return null;
    }
    constructor(offset5) {
      super();
      this.fixed = offset5;
    }
    /** @override **/
    get type() {
      return "fixed";
    }
    /** @override **/
    get name() {
      return this.fixed === 0 ? "UTC" : `UTC${formatOffset2(this.fixed, "narrow")}`;
    }
    get ianaName() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return `Etc/GMT${formatOffset2(-this.fixed, "narrow")}`;
      }
    }
    /** @override **/
    offsetName() {
      return this.name;
    }
    /** @override **/
    formatOffset(ts3, format4) {
      return formatOffset2(this.fixed, format4);
    }
    /** @override **/
    get isUniversal() {
      return true;
    }
    /** @override **/
    offset() {
      return this.fixed;
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    }
    /** @override **/
    get isValid() {
      return true;
    }
  };
  __name(_FixedOffsetZone2, "FixedOffsetZone");
  var FixedOffsetZone2 = _FixedOffsetZone2;

  // ../../contrib/hdbt/node_modules/luxon/src/zones/invalidZone.js
  var _InvalidZone2 = class _InvalidZone2 extends Zone2 {
    constructor(zoneName) {
      super();
      this.zoneName = zoneName;
    }
    /** @override **/
    get type() {
      return "invalid";
    }
    /** @override **/
    get name() {
      return this.zoneName;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName() {
      return null;
    }
    /** @override **/
    formatOffset() {
      return "";
    }
    /** @override **/
    offset() {
      return NaN;
    }
    /** @override **/
    equals() {
      return false;
    }
    /** @override **/
    get isValid() {
      return false;
    }
  };
  __name(_InvalidZone2, "InvalidZone");
  var InvalidZone2 = _InvalidZone2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/zoneUtil.js
  function normalizeZone2(input, defaultZone3) {
    let offset5;
    if (isUndefined3(input) || input === null) {
      return defaultZone3;
    } else if (input instanceof Zone2) {
      return input;
    } else if (isString3(input)) {
      const lowered = input.toLowerCase();
      if (lowered === "default") return defaultZone3;
      else if (lowered === "local" || lowered === "system") return SystemZone2.instance;
      else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone2.utcInstance;
      else return FixedOffsetZone2.parseSpecifier(lowered) || IANAZone2.create(input);
    } else if (isNumber2(input)) {
      return FixedOffsetZone2.instance(input);
    } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
      return input;
    } else {
      return new InvalidZone2(input);
    }
  }
  __name(normalizeZone2, "normalizeZone");

  // ../../contrib/hdbt/node_modules/luxon/src/settings.js
  var now2 = /* @__PURE__ */ __name(() => Date.now(), "now");
  var defaultZone2 = "system";
  var defaultLocale2 = null;
  var defaultNumberingSystem2 = null;
  var defaultOutputCalendar2 = null;
  var twoDigitCutoffYear2 = 60;
  var throwOnInvalid2;
  var _Settings2 = class _Settings2 {
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    static get now() {
      return now2;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    static set now(n21) {
      now2 = n21;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */
    static set defaultZone(zone) {
      defaultZone2 = zone;
    }
    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    static get defaultZone() {
      return normalizeZone2(defaultZone2, SystemZone2.instance);
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultLocale() {
      return defaultLocale2;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultLocale(locale2) {
      defaultLocale2 = locale2;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultNumberingSystem() {
      return defaultNumberingSystem2;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultNumberingSystem(numberingSystem) {
      defaultNumberingSystem2 = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultOutputCalendar() {
      return defaultOutputCalendar2;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultOutputCalendar(outputCalendar) {
      defaultOutputCalendar2 = outputCalendar;
    }
    /**
     * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     */
    static get twoDigitCutoffYear() {
      return twoDigitCutoffYear2;
    }
    /**
     * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century
     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
     * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50
     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50
     */
    static set twoDigitCutoffYear(cutoffYear) {
      twoDigitCutoffYear2 = cutoffYear % 100;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static get throwOnInvalid() {
      return throwOnInvalid2;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static set throwOnInvalid(t21) {
      throwOnInvalid2 = t21;
    }
    /**
     * Reset Luxon's global caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCaches() {
      Locale2.resetCache();
      IANAZone2.resetCache();
    }
  };
  __name(_Settings2, "Settings");
  var Settings2 = _Settings2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/util.js
  function isUndefined3(o18) {
    return typeof o18 === "undefined";
  }
  __name(isUndefined3, "isUndefined");
  function isNumber2(o18) {
    return typeof o18 === "number";
  }
  __name(isNumber2, "isNumber");
  function isInteger2(o18) {
    return typeof o18 === "number" && o18 % 1 === 0;
  }
  __name(isInteger2, "isInteger");
  function isString3(o18) {
    return typeof o18 === "string";
  }
  __name(isString3, "isString");
  function isDate2(o18) {
    return Object.prototype.toString.call(o18) === "[object Date]";
  }
  __name(isDate2, "isDate");
  function hasRelative2() {
    try {
      return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e18) {
      return false;
    }
  }
  __name(hasRelative2, "hasRelative");
  function maybeArray2(thing) {
    return Array.isArray(thing) ? thing : [thing];
  }
  __name(maybeArray2, "maybeArray");
  function bestBy2(arr, by, compare2) {
    if (arr.length === 0) {
      return void 0;
    }
    return arr.reduce((best, next) => {
      const pair = [by(next), next];
      if (!best) {
        return pair;
      } else if (compare2(best[0], pair[0]) === best[0]) {
        return best;
      } else {
        return pair;
      }
    }, null)[1];
  }
  __name(bestBy2, "bestBy");
  function pick2(obj, keys) {
    return keys.reduce((a21, k) => {
      a21[k] = obj[k];
      return a21;
    }, {});
  }
  __name(pick2, "pick");
  function hasOwnProperty2(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  __name(hasOwnProperty2, "hasOwnProperty");
  function integerBetween2(thing, bottom3, top3) {
    return isInteger2(thing) && thing >= bottom3 && thing <= top3;
  }
  __name(integerBetween2, "integerBetween");
  function floorMod2(x, n21) {
    return x - n21 * Math.floor(x / n21);
  }
  __name(floorMod2, "floorMod");
  function padStart2(input, n21 = 2) {
    const isNeg = input < 0;
    let padded;
    if (isNeg) {
      padded = "-" + ("" + -input).padStart(n21, "0");
    } else {
      padded = ("" + input).padStart(n21, "0");
    }
    return padded;
  }
  __name(padStart2, "padStart");
  function parseInteger2(string) {
    if (isUndefined3(string) || string === null || string === "") {
      return void 0;
    } else {
      return parseInt(string, 10);
    }
  }
  __name(parseInteger2, "parseInteger");
  function parseFloating2(string) {
    if (isUndefined3(string) || string === null || string === "") {
      return void 0;
    } else {
      return parseFloat(string);
    }
  }
  __name(parseFloating2, "parseFloating");
  function parseMillis2(fraction) {
    if (isUndefined3(fraction) || fraction === null || fraction === "") {
      return void 0;
    } else {
      const f2 = parseFloat("0." + fraction) * 1e3;
      return Math.floor(f2);
    }
  }
  __name(parseMillis2, "parseMillis");
  function roundTo2(number, digits, towardZero = false) {
    const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number * factor) / factor;
  }
  __name(roundTo2, "roundTo");
  function isLeapYear2(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  __name(isLeapYear2, "isLeapYear");
  function daysInYear2(year) {
    return isLeapYear2(year) ? 366 : 365;
  }
  __name(daysInYear2, "daysInYear");
  function daysInMonth2(year, month) {
    const modMonth = floorMod2(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
    if (modMonth === 2) {
      return isLeapYear2(modYear) ? 29 : 28;
    } else {
      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
    }
  }
  __name(daysInMonth2, "daysInMonth");
  function objToLocalTS2(obj) {
    let d16 = Date.UTC(
      obj.year,
      obj.month - 1,
      obj.day,
      obj.hour,
      obj.minute,
      obj.second,
      obj.millisecond
    );
    if (obj.year < 100 && obj.year >= 0) {
      d16 = new Date(d16);
      d16.setUTCFullYear(obj.year, obj.month - 1, obj.day);
    }
    return +d16;
  }
  __name(objToLocalTS2, "objToLocalTS");
  function weeksInWeekYear2(weekYear) {
    const p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7, last = weekYear - 1, p22 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
    return p1 === 4 || p22 === 3 ? 53 : 52;
  }
  __name(weeksInWeekYear2, "weeksInWeekYear");
  function untruncateYear2(year) {
    if (year > 99) {
      return year;
    } else return year > Settings2.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
  }
  __name(untruncateYear2, "untruncateYear");
  function parseZoneInfo2(ts3, offsetFormat, locale2, timeZone = null) {
    const date = new Date(ts3), intlOpts = {
      hourCycle: "h23",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    };
    if (timeZone) {
      intlOpts.timeZone = timeZone;
    }
    const modified = { timeZoneName: offsetFormat, ...intlOpts };
    const parsed = new Intl.DateTimeFormat(locale2, modified).formatToParts(date).find((m6) => m6.type.toLowerCase() === "timezonename");
    return parsed ? parsed.value : null;
  }
  __name(parseZoneInfo2, "parseZoneInfo");
  function signedOffset2(offHourStr, offMinuteStr) {
    let offHour = parseInt(offHourStr, 10);
    if (Number.isNaN(offHour)) {
      offHour = 0;
    }
    const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
  }
  __name(signedOffset2, "signedOffset");
  function asNumber2(value) {
    const numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
      throw new InvalidArgumentError2(`Invalid unit value ${value}`);
    return numericValue;
  }
  __name(asNumber2, "asNumber");
  function normalizeObject2(obj, normalizer) {
    const normalized = {};
    for (const u10 in obj) {
      if (hasOwnProperty2(obj, u10)) {
        const v4 = obj[u10];
        if (v4 === void 0 || v4 === null) continue;
        normalized[normalizer(u10)] = asNumber2(v4);
      }
    }
    return normalized;
  }
  __name(normalizeObject2, "normalizeObject");
  function formatOffset2(offset5, format4) {
    const hours = Math.trunc(Math.abs(offset5 / 60)), minutes = Math.trunc(Math.abs(offset5 % 60)), sign = offset5 >= 0 ? "+" : "-";
    switch (format4) {
      case "short":
        return `${sign}${padStart2(hours, 2)}:${padStart2(minutes, 2)}`;
      case "narrow":
        return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
      case "techie":
        return `${sign}${padStart2(hours, 2)}${padStart2(minutes, 2)}`;
      default:
        throw new RangeError(`Value format ${format4} is out of range for property format`);
    }
  }
  __name(formatOffset2, "formatOffset");
  function timeObject2(obj) {
    return pick2(obj, ["hour", "minute", "second", "millisecond"]);
  }
  __name(timeObject2, "timeObject");

  // ../../contrib/hdbt/node_modules/luxon/src/impl/english.js
  var monthsLong2 = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  var monthsShort2 = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  var monthsNarrow2 = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
  function months2(length) {
    switch (length) {
      case "narrow":
        return [...monthsNarrow2];
      case "short":
        return [...monthsShort2];
      case "long":
        return [...monthsLong2];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      case "2-digit":
        return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
      default:
        return null;
    }
  }
  __name(months2, "months");
  var weekdaysLong2 = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
  ];
  var weekdaysShort2 = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
  var weekdaysNarrow2 = ["M", "T", "W", "T", "F", "S", "S"];
  function weekdays2(length) {
    switch (length) {
      case "narrow":
        return [...weekdaysNarrow2];
      case "short":
        return [...weekdaysShort2];
      case "long":
        return [...weekdaysLong2];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7"];
      default:
        return null;
    }
  }
  __name(weekdays2, "weekdays");
  var meridiems2 = ["AM", "PM"];
  var erasLong2 = ["Before Christ", "Anno Domini"];
  var erasShort2 = ["BC", "AD"];
  var erasNarrow2 = ["B", "A"];
  function eras2(length) {
    switch (length) {
      case "narrow":
        return [...erasNarrow2];
      case "short":
        return [...erasShort2];
      case "long":
        return [...erasLong2];
      default:
        return null;
    }
  }
  __name(eras2, "eras");
  function meridiemForDateTime2(dt3) {
    return meridiems2[dt3.hour < 12 ? 0 : 1];
  }
  __name(meridiemForDateTime2, "meridiemForDateTime");
  function weekdayForDateTime2(dt3, length) {
    return weekdays2(length)[dt3.weekday - 1];
  }
  __name(weekdayForDateTime2, "weekdayForDateTime");
  function monthForDateTime2(dt3, length) {
    return months2(length)[dt3.month - 1];
  }
  __name(monthForDateTime2, "monthForDateTime");
  function eraForDateTime2(dt3, length) {
    return eras2(length)[dt3.year < 0 ? 0 : 1];
  }
  __name(eraForDateTime2, "eraForDateTime");
  function formatRelativeTime2(unit, count, numeric = "always", narrow = false) {
    const units = {
      years: ["year", "yr."],
      quarters: ["quarter", "qtr."],
      months: ["month", "mo."],
      weeks: ["week", "wk."],
      days: ["day", "day", "days"],
      hours: ["hour", "hr."],
      minutes: ["minute", "min."],
      seconds: ["second", "sec."]
    };
    const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
    if (numeric === "auto" && lastable) {
      const isDay = unit === "days";
      switch (count) {
        case 1:
          return isDay ? "tomorrow" : `next ${units[unit][0]}`;
        case -1:
          return isDay ? "yesterday" : `last ${units[unit][0]}`;
        case 0:
          return isDay ? "today" : `this ${units[unit][0]}`;
        default:
      }
    }
    const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
    return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
  }
  __name(formatRelativeTime2, "formatRelativeTime");

  // ../../contrib/hdbt/node_modules/luxon/src/impl/formatter.js
  function stringifyTokens2(splits, tokenToString) {
    let s21 = "";
    for (const token of splits) {
      if (token.literal) {
        s21 += token.val;
      } else {
        s21 += tokenToString(token.val);
      }
    }
    return s21;
  }
  __name(stringifyTokens2, "stringifyTokens");
  var macroTokenToFormatOpts2 = {
    D: DATE_SHORT2,
    DD: DATE_MED2,
    DDD: DATE_FULL2,
    DDDD: DATE_HUGE2,
    t: TIME_SIMPLE2,
    tt: TIME_WITH_SECONDS2,
    ttt: TIME_WITH_SHORT_OFFSET2,
    tttt: TIME_WITH_LONG_OFFSET2,
    T: TIME_24_SIMPLE2,
    TT: TIME_24_WITH_SECONDS2,
    TTT: TIME_24_WITH_SHORT_OFFSET2,
    TTTT: TIME_24_WITH_LONG_OFFSET2,
    f: DATETIME_SHORT2,
    ff: DATETIME_MED2,
    fff: DATETIME_FULL2,
    ffff: DATETIME_HUGE2,
    F: DATETIME_SHORT_WITH_SECONDS2,
    FF: DATETIME_MED_WITH_SECONDS2,
    FFF: DATETIME_FULL_WITH_SECONDS2,
    FFFF: DATETIME_HUGE_WITH_SECONDS2
  };
  var _Formatter2 = class _Formatter2 {
    static create(locale2, opts = {}) {
      return new _Formatter2(locale2, opts);
    }
    static parseFormat(fmt) {
      let current = null, currentFull = "", bracketed = false;
      const splits = [];
      for (let i12 = 0; i12 < fmt.length; i12++) {
        const c6 = fmt.charAt(i12);
        if (c6 === "'") {
          if (currentFull.length > 0) {
            splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
          }
          current = null;
          currentFull = "";
          bracketed = !bracketed;
        } else if (bracketed) {
          currentFull += c6;
        } else if (c6 === current) {
          currentFull += c6;
        } else {
          if (currentFull.length > 0) {
            splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
          }
          currentFull = c6;
          current = c6;
        }
      }
      if (currentFull.length > 0) {
        splits.push({ literal: bracketed || /^\s+$/.test(currentFull), val: currentFull });
      }
      return splits;
    }
    static macroTokenToFormatOpts(token) {
      return macroTokenToFormatOpts2[token];
    }
    constructor(locale2, formatOpts) {
      this.opts = formatOpts;
      this.loc = locale2;
      this.systemLoc = null;
    }
    formatWithSystemDefault(dt3, opts) {
      if (this.systemLoc === null) {
        this.systemLoc = this.loc.redefaultToSystem();
      }
      const df = this.systemLoc.dtFormatter(dt3, { ...this.opts, ...opts });
      return df.format();
    }
    formatDateTime(dt3, opts = {}) {
      const df = this.loc.dtFormatter(dt3, { ...this.opts, ...opts });
      return df.format();
    }
    formatDateTimeParts(dt3, opts = {}) {
      const df = this.loc.dtFormatter(dt3, { ...this.opts, ...opts });
      return df.formatToParts();
    }
    formatInterval(interval, opts = {}) {
      const df = this.loc.dtFormatter(interval.start, { ...this.opts, ...opts });
      return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    }
    resolvedOptions(dt3, opts = {}) {
      const df = this.loc.dtFormatter(dt3, { ...this.opts, ...opts });
      return df.resolvedOptions();
    }
    num(n21, p5 = 0) {
      if (this.opts.forceSimple) {
        return padStart2(n21, p5);
      }
      const opts = { ...this.opts };
      if (p5 > 0) {
        opts.padTo = p5;
      }
      return this.loc.numberFormatter(opts).format(n21);
    }
    formatDateTimeFromString(dt3, fmt) {
      const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = /* @__PURE__ */ __name((opts, extract) => this.loc.extract(dt3, opts, extract), "string"), formatOffset3 = /* @__PURE__ */ __name((opts) => {
        if (dt3.isOffsetFixed && dt3.offset === 0 && opts.allowZ) {
          return "Z";
        }
        return dt3.isValid ? dt3.zone.formatOffset(dt3.ts, opts.format) : "";
      }, "formatOffset"), meridiem = /* @__PURE__ */ __name(() => knownEnglish ? meridiemForDateTime2(dt3) : string({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), "meridiem"), month = /* @__PURE__ */ __name((length, standalone) => knownEnglish ? monthForDateTime2(dt3, length) : string(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), "month"), weekday = /* @__PURE__ */ __name((length, standalone) => knownEnglish ? weekdayForDateTime2(dt3, length) : string(
        standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
        "weekday"
      ), "weekday"), maybeMacro = /* @__PURE__ */ __name((token) => {
        const formatOpts = _Formatter2.macroTokenToFormatOpts(token);
        if (formatOpts) {
          return this.formatWithSystemDefault(dt3, formatOpts);
        } else {
          return token;
        }
      }, "maybeMacro"), era = /* @__PURE__ */ __name((length) => knownEnglish ? eraForDateTime2(dt3, length) : string({ era: length }, "era"), "era"), tokenToString = /* @__PURE__ */ __name((token) => {
        switch (token) {
          // ms
          case "S":
            return this.num(dt3.millisecond);
          case "u":
          // falls through
          case "SSS":
            return this.num(dt3.millisecond, 3);
          // seconds
          case "s":
            return this.num(dt3.second);
          case "ss":
            return this.num(dt3.second, 2);
          // fractional seconds
          case "uu":
            return this.num(Math.floor(dt3.millisecond / 10), 2);
          case "uuu":
            return this.num(Math.floor(dt3.millisecond / 100));
          // minutes
          case "m":
            return this.num(dt3.minute);
          case "mm":
            return this.num(dt3.minute, 2);
          // hours
          case "h":
            return this.num(dt3.hour % 12 === 0 ? 12 : dt3.hour % 12);
          case "hh":
            return this.num(dt3.hour % 12 === 0 ? 12 : dt3.hour % 12, 2);
          case "H":
            return this.num(dt3.hour);
          case "HH":
            return this.num(dt3.hour, 2);
          // offset
          case "Z":
            return formatOffset3({ format: "narrow", allowZ: this.opts.allowZ });
          case "ZZ":
            return formatOffset3({ format: "short", allowZ: this.opts.allowZ });
          case "ZZZ":
            return formatOffset3({ format: "techie", allowZ: this.opts.allowZ });
          case "ZZZZ":
            return dt3.zone.offsetName(dt3.ts, { format: "short", locale: this.loc.locale });
          case "ZZZZZ":
            return dt3.zone.offsetName(dt3.ts, { format: "long", locale: this.loc.locale });
          // zone
          case "z":
            return dt3.zoneName;
          // meridiems
          case "a":
            return meridiem();
          // dates
          case "d":
            return useDateTimeFormatter ? string({ day: "numeric" }, "day") : this.num(dt3.day);
          case "dd":
            return useDateTimeFormatter ? string({ day: "2-digit" }, "day") : this.num(dt3.day, 2);
          // weekdays - standalone
          case "c":
            return this.num(dt3.weekday);
          case "ccc":
            return weekday("short", true);
          case "cccc":
            return weekday("long", true);
          case "ccccc":
            return weekday("narrow", true);
          // weekdays - format
          case "E":
            return this.num(dt3.weekday);
          case "EEE":
            return weekday("short", false);
          case "EEEE":
            return weekday("long", false);
          case "EEEEE":
            return weekday("narrow", false);
          // months - standalone
          case "L":
            return useDateTimeFormatter ? string({ month: "numeric", day: "numeric" }, "month") : this.num(dt3.month);
          case "LL":
            return useDateTimeFormatter ? string({ month: "2-digit", day: "numeric" }, "month") : this.num(dt3.month, 2);
          case "LLL":
            return month("short", true);
          case "LLLL":
            return month("long", true);
          case "LLLLL":
            return month("narrow", true);
          // months - format
          case "M":
            return useDateTimeFormatter ? string({ month: "numeric" }, "month") : this.num(dt3.month);
          case "MM":
            return useDateTimeFormatter ? string({ month: "2-digit" }, "month") : this.num(dt3.month, 2);
          case "MMM":
            return month("short", false);
          case "MMMM":
            return month("long", false);
          case "MMMMM":
            return month("narrow", false);
          // years
          case "y":
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt3.year);
          case "yy":
            return useDateTimeFormatter ? string({ year: "2-digit" }, "year") : this.num(dt3.year.toString().slice(-2), 2);
          case "yyyy":
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt3.year, 4);
          case "yyyyyy":
            return useDateTimeFormatter ? string({ year: "numeric" }, "year") : this.num(dt3.year, 6);
          // eras
          case "G":
            return era("short");
          case "GG":
            return era("long");
          case "GGGGG":
            return era("narrow");
          case "kk":
            return this.num(dt3.weekYear.toString().slice(-2), 2);
          case "kkkk":
            return this.num(dt3.weekYear, 4);
          case "W":
            return this.num(dt3.weekNumber);
          case "WW":
            return this.num(dt3.weekNumber, 2);
          case "o":
            return this.num(dt3.ordinal);
          case "ooo":
            return this.num(dt3.ordinal, 3);
          case "q":
            return this.num(dt3.quarter);
          case "qq":
            return this.num(dt3.quarter, 2);
          case "X":
            return this.num(Math.floor(dt3.ts / 1e3));
          case "x":
            return this.num(dt3.ts);
          default:
            return maybeMacro(token);
        }
      }, "tokenToString");
      return stringifyTokens2(_Formatter2.parseFormat(fmt), tokenToString);
    }
    formatDurationFromString(dur, fmt) {
      const tokenToField = /* @__PURE__ */ __name((token) => {
        switch (token[0]) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
            return "hour";
          case "d":
            return "day";
          case "w":
            return "week";
          case "M":
            return "month";
          case "y":
            return "year";
          default:
            return null;
        }
      }, "tokenToField"), tokenToString = /* @__PURE__ */ __name((lildur) => (token) => {
        const mapped = tokenToField(token);
        if (mapped) {
          return this.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      }, "tokenToString"), tokens = _Formatter2.parseFormat(fmt), realTokens = tokens.reduce(
        (found, { literal, val }) => literal ? found : found.concat(val),
        []
      ), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t21) => t21));
      return stringifyTokens2(tokens, tokenToString(collapsed));
    }
  };
  __name(_Formatter2, "Formatter");
  var Formatter2 = _Formatter2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/invalid.js
  var _Invalid2 = class _Invalid2 {
    constructor(reason, explanation) {
      this.reason = reason;
      this.explanation = explanation;
    }
    toMessage() {
      if (this.explanation) {
        return `${this.reason}: ${this.explanation}`;
      } else {
        return this.reason;
      }
    }
  };
  __name(_Invalid2, "Invalid");
  var Invalid2 = _Invalid2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/regexParser.js
  var ianaRegex2 = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
  function combineRegexes2(...regexes) {
    const full = regexes.reduce((f2, r30) => f2 + r30.source, "");
    return RegExp(`^${full}$`);
  }
  __name(combineRegexes2, "combineRegexes");
  function combineExtractors2(...extractors) {
    return (m6) => extractors.reduce(
      ([mergedVals, mergedZone, cursor], ex) => {
        const [val, zone, next] = ex(m6, cursor);
        return [{ ...mergedVals, ...val }, zone || mergedZone, next];
      },
      [{}, null, 1]
    ).slice(0, 2);
  }
  __name(combineExtractors2, "combineExtractors");
  function parse5(s21, ...patterns) {
    if (s21 == null) {
      return [null, null];
    }
    for (const [regex, extractor] of patterns) {
      const m6 = regex.exec(s21);
      if (m6) {
        return extractor(m6);
      }
    }
    return [null, null];
  }
  __name(parse5, "parse");
  function simpleParse2(...keys) {
    return (match4, cursor) => {
      const ret = {};
      let i12;
      for (i12 = 0; i12 < keys.length; i12++) {
        ret[keys[i12]] = parseInteger2(match4[cursor + i12]);
      }
      return [ret, null, cursor + i12];
    };
  }
  __name(simpleParse2, "simpleParse");
  var offsetRegex2 = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
  var isoExtendedZone2 = `(?:${offsetRegex2.source}?(?:\\[(${ianaRegex2.source})\\])?)?`;
  var isoTimeBaseRegex2 = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
  var isoTimeRegex2 = RegExp(`${isoTimeBaseRegex2.source}${isoExtendedZone2}`);
  var isoTimeExtensionRegex2 = RegExp(`(?:T${isoTimeRegex2.source})?`);
  var isoYmdRegex2 = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
  var isoWeekRegex2 = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
  var isoOrdinalRegex2 = /(\d{4})-?(\d{3})/;
  var extractISOWeekData2 = simpleParse2("weekYear", "weekNumber", "weekDay");
  var extractISOOrdinalData2 = simpleParse2("year", "ordinal");
  var sqlYmdRegex2 = /(\d{4})-(\d\d)-(\d\d)/;
  var sqlTimeRegex2 = RegExp(
    `${isoTimeBaseRegex2.source} ?(?:${offsetRegex2.source}|(${ianaRegex2.source}))?`
  );
  var sqlTimeExtensionRegex2 = RegExp(`(?: ${sqlTimeRegex2.source})?`);
  function int2(match4, pos, fallback) {
    const m6 = match4[pos];
    return isUndefined3(m6) ? fallback : parseInteger2(m6);
  }
  __name(int2, "int");
  function extractISOYmd2(match4, cursor) {
    const item = {
      year: int2(match4, cursor),
      month: int2(match4, cursor + 1, 1),
      day: int2(match4, cursor + 2, 1)
    };
    return [item, null, cursor + 3];
  }
  __name(extractISOYmd2, "extractISOYmd");
  function extractISOTime2(match4, cursor) {
    const item = {
      hours: int2(match4, cursor, 0),
      minutes: int2(match4, cursor + 1, 0),
      seconds: int2(match4, cursor + 2, 0),
      milliseconds: parseMillis2(match4[cursor + 3])
    };
    return [item, null, cursor + 4];
  }
  __name(extractISOTime2, "extractISOTime");
  function extractISOOffset2(match4, cursor) {
    const local = !match4[cursor] && !match4[cursor + 1], fullOffset = signedOffset2(match4[cursor + 1], match4[cursor + 2]), zone = local ? null : FixedOffsetZone2.instance(fullOffset);
    return [{}, zone, cursor + 3];
  }
  __name(extractISOOffset2, "extractISOOffset");
  function extractIANAZone2(match4, cursor) {
    const zone = match4[cursor] ? IANAZone2.create(match4[cursor]) : null;
    return [{}, zone, cursor + 1];
  }
  __name(extractIANAZone2, "extractIANAZone");
  var isoTimeOnly2 = RegExp(`^T?${isoTimeBaseRegex2.source}$`);
  var isoDuration2 = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
  function extractISODuration2(match4) {
    const [s21, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match4;
    const hasNegativePrefix = s21[0] === "-";
    const negativeSeconds = secondStr && secondStr[0] === "-";
    const maybeNegate = /* @__PURE__ */ __name((num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num, "maybeNegate");
    return [
      {
        years: maybeNegate(parseFloating2(yearStr)),
        months: maybeNegate(parseFloating2(monthStr)),
        weeks: maybeNegate(parseFloating2(weekStr)),
        days: maybeNegate(parseFloating2(dayStr)),
        hours: maybeNegate(parseFloating2(hourStr)),
        minutes: maybeNegate(parseFloating2(minuteStr)),
        seconds: maybeNegate(parseFloating2(secondStr), secondStr === "-0"),
        milliseconds: maybeNegate(parseMillis2(millisecondsStr), negativeSeconds)
      }
    ];
  }
  __name(extractISODuration2, "extractISODuration");
  var obsOffsets2 = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };
  function fromStrings2(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = {
      year: yearStr.length === 2 ? untruncateYear2(parseInteger2(yearStr)) : parseInteger2(yearStr),
      month: monthsShort2.indexOf(monthStr) + 1,
      day: parseInteger2(dayStr),
      hour: parseInteger2(hourStr),
      minute: parseInteger2(minuteStr)
    };
    if (secondStr) result.second = parseInteger2(secondStr);
    if (weekdayStr) {
      result.weekday = weekdayStr.length > 3 ? weekdaysLong2.indexOf(weekdayStr) + 1 : weekdaysShort2.indexOf(weekdayStr) + 1;
    }
    return result;
  }
  __name(fromStrings2, "fromStrings");
  var rfc28222 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
  function extractRFC28222(match4) {
    const [
      ,
      weekdayStr,
      dayStr,
      monthStr,
      yearStr,
      hourStr,
      minuteStr,
      secondStr,
      obsOffset,
      milOffset,
      offHourStr,
      offMinuteStr
    ] = match4, result = fromStrings2(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    let offset5;
    if (obsOffset) {
      offset5 = obsOffsets2[obsOffset];
    } else if (milOffset) {
      offset5 = 0;
    } else {
      offset5 = signedOffset2(offHourStr, offMinuteStr);
    }
    return [result, new FixedOffsetZone2(offset5)];
  }
  __name(extractRFC28222, "extractRFC2822");
  function preprocessRFC28222(s21) {
    return s21.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
  }
  __name(preprocessRFC28222, "preprocessRFC2822");
  var rfc11232 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
  var rfc8502 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
  var ascii2 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
  function extractRFC1123Or8502(match4) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match4, result = fromStrings2(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone2.utcInstance];
  }
  __name(extractRFC1123Or8502, "extractRFC1123Or850");
  function extractASCII2(match4) {
    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match4, result = fromStrings2(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone2.utcInstance];
  }
  __name(extractASCII2, "extractASCII");
  var isoYmdWithTimeExtensionRegex2 = combineRegexes2(isoYmdRegex2, isoTimeExtensionRegex2);
  var isoWeekWithTimeExtensionRegex2 = combineRegexes2(isoWeekRegex2, isoTimeExtensionRegex2);
  var isoOrdinalWithTimeExtensionRegex2 = combineRegexes2(isoOrdinalRegex2, isoTimeExtensionRegex2);
  var isoTimeCombinedRegex2 = combineRegexes2(isoTimeRegex2);
  var extractISOYmdTimeAndOffset2 = combineExtractors2(
    extractISOYmd2,
    extractISOTime2,
    extractISOOffset2,
    extractIANAZone2
  );
  var extractISOWeekTimeAndOffset2 = combineExtractors2(
    extractISOWeekData2,
    extractISOTime2,
    extractISOOffset2,
    extractIANAZone2
  );
  var extractISOOrdinalDateAndTime2 = combineExtractors2(
    extractISOOrdinalData2,
    extractISOTime2,
    extractISOOffset2,
    extractIANAZone2
  );
  var extractISOTimeAndOffset2 = combineExtractors2(
    extractISOTime2,
    extractISOOffset2,
    extractIANAZone2
  );
  function parseISODate2(s21) {
    return parse5(
      s21,
      [isoYmdWithTimeExtensionRegex2, extractISOYmdTimeAndOffset2],
      [isoWeekWithTimeExtensionRegex2, extractISOWeekTimeAndOffset2],
      [isoOrdinalWithTimeExtensionRegex2, extractISOOrdinalDateAndTime2],
      [isoTimeCombinedRegex2, extractISOTimeAndOffset2]
    );
  }
  __name(parseISODate2, "parseISODate");
  function parseRFC2822Date2(s21) {
    return parse5(preprocessRFC28222(s21), [rfc28222, extractRFC28222]);
  }
  __name(parseRFC2822Date2, "parseRFC2822Date");
  function parseHTTPDate2(s21) {
    return parse5(
      s21,
      [rfc11232, extractRFC1123Or8502],
      [rfc8502, extractRFC1123Or8502],
      [ascii2, extractASCII2]
    );
  }
  __name(parseHTTPDate2, "parseHTTPDate");
  function parseISODuration2(s21) {
    return parse5(s21, [isoDuration2, extractISODuration2]);
  }
  __name(parseISODuration2, "parseISODuration");
  var extractISOTimeOnly2 = combineExtractors2(extractISOTime2);
  function parseISOTimeOnly2(s21) {
    return parse5(s21, [isoTimeOnly2, extractISOTimeOnly2]);
  }
  __name(parseISOTimeOnly2, "parseISOTimeOnly");
  var sqlYmdWithTimeExtensionRegex2 = combineRegexes2(sqlYmdRegex2, sqlTimeExtensionRegex2);
  var sqlTimeCombinedRegex2 = combineRegexes2(sqlTimeRegex2);
  var extractISOTimeOffsetAndIANAZone2 = combineExtractors2(
    extractISOTime2,
    extractISOOffset2,
    extractIANAZone2
  );
  function parseSQL2(s21) {
    return parse5(
      s21,
      [sqlYmdWithTimeExtensionRegex2, extractISOYmdTimeAndOffset2],
      [sqlTimeCombinedRegex2, extractISOTimeOffsetAndIANAZone2]
    );
  }
  __name(parseSQL2, "parseSQL");

  // ../../contrib/hdbt/node_modules/luxon/src/duration.js
  var INVALID4 = "Invalid Duration";
  var lowOrderMatrix2 = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1e3
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1e3
    },
    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
    minutes: { seconds: 60, milliseconds: 60 * 1e3 },
    seconds: { milliseconds: 1e3 }
  };
  var casualMatrix2 = {
    years: {
      quarters: 4,
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1e3
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      seconds: 91 * 24 * 60 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1e3
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix2
  };
  var daysInYearAccurate2 = 146097 / 400;
  var daysInMonthAccurate2 = 146097 / 4800;
  var accurateMatrix2 = {
    years: {
      quarters: 4,
      months: 12,
      weeks: daysInYearAccurate2 / 7,
      days: daysInYearAccurate2,
      hours: daysInYearAccurate2 * 24,
      minutes: daysInYearAccurate2 * 24 * 60,
      seconds: daysInYearAccurate2 * 24 * 60 * 60,
      milliseconds: daysInYearAccurate2 * 24 * 60 * 60 * 1e3
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate2 / 28,
      days: daysInYearAccurate2 / 4,
      hours: daysInYearAccurate2 * 24 / 4,
      minutes: daysInYearAccurate2 * 24 * 60 / 4,
      seconds: daysInYearAccurate2 * 24 * 60 * 60 / 4,
      milliseconds: daysInYearAccurate2 * 24 * 60 * 60 * 1e3 / 4
    },
    months: {
      weeks: daysInMonthAccurate2 / 7,
      days: daysInMonthAccurate2,
      hours: daysInMonthAccurate2 * 24,
      minutes: daysInMonthAccurate2 * 24 * 60,
      seconds: daysInMonthAccurate2 * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate2 * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix2
  };
  var orderedUnits3 = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
  ];
  var reverseUnits2 = orderedUnits3.slice(0).reverse();
  function clone3(dur, alts, clear = false) {
    const conf = {
      values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
      loc: dur.loc.clone(alts.loc),
      conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
      matrix: alts.matrix || dur.matrix
    };
    return new Duration2(conf);
  }
  __name(clone3, "clone");
  function antiTrunc(n21) {
    return n21 < 0 ? Math.floor(n21) : Math.ceil(n21);
  }
  __name(antiTrunc, "antiTrunc");
  function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
    const conv = matrix[toUnit][fromUnit], raw = fromMap[fromUnit] / conv, sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]), added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
    toMap[toUnit] += added;
    fromMap[fromUnit] -= added * conv;
  }
  __name(convert, "convert");
  function normalizeValues2(matrix, vals) {
    reverseUnits2.reduce((previous, current) => {
      if (!isUndefined3(vals[current])) {
        if (previous) {
          convert(matrix, vals, previous, vals, current);
        }
        return current;
      } else {
        return previous;
      }
    }, null);
  }
  __name(normalizeValues2, "normalizeValues");
  function removeZeroes2(vals) {
    const newVals = {};
    for (const [key, value] of Object.entries(vals)) {
      if (value !== 0) {
        newVals[key] = value;
      }
    }
    return newVals;
  }
  __name(removeZeroes2, "removeZeroes");
  var _Duration2 = class _Duration2 {
    /**
     * @private
     */
    constructor(config3) {
      const accurate = config3.conversionAccuracy === "longterm" || false;
      let matrix = accurate ? accurateMatrix2 : casualMatrix2;
      if (config3.matrix) {
        matrix = config3.matrix;
      }
      this.values = config3.values;
      this.loc = config3.loc || Locale2.create();
      this.conversionAccuracy = accurate ? "longterm" : "casual";
      this.invalid = config3.invalid || null;
      this.matrix = matrix;
      this.isLuxonDuration = true;
    }
    /**
     * Create Duration from a number of milliseconds.
     * @param {number} count of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    static fromMillis(count, opts) {
      return _Duration2.fromObject({ milliseconds: count }, opts);
    }
    /**
     * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
     * If this object is empty then a zero milliseconds duration is returned.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.years
     * @param {number} obj.quarters
     * @param {number} obj.months
     * @param {number} obj.weeks
     * @param {number} obj.days
     * @param {number} obj.hours
     * @param {number} obj.minutes
     * @param {number} obj.seconds
     * @param {number} obj.milliseconds
     * @param {Object} [opts=[]] - options for creating this Duration
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the custom conversion system to use
     * @return {Duration}
     */
    static fromObject(obj, opts = {}) {
      if (obj == null || typeof obj !== "object") {
        throw new InvalidArgumentError2(
          `Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`
        );
      }
      return new _Duration2({
        values: normalizeObject2(obj, _Duration2.normalizeUnit),
        loc: Locale2.fromObject(opts),
        conversionAccuracy: opts.conversionAccuracy,
        matrix: opts.matrix
      });
    }
    /**
     * Create a Duration from DurationLike.
     *
     * @param {Object | number | Duration} durationLike
     * One of:
     * - object with keys like 'years' and 'hours'.
     * - number representing milliseconds
     * - Duration instance
     * @return {Duration}
     */
    static fromDurationLike(durationLike) {
      if (isNumber2(durationLike)) {
        return _Duration2.fromMillis(durationLike);
      } else if (_Duration2.isDuration(durationLike)) {
        return durationLike;
      } else if (typeof durationLike === "object") {
        return _Duration2.fromObject(durationLike);
      } else {
        throw new InvalidArgumentError2(
          `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
        );
      }
    }
    /**
     * Create a Duration from an ISO 8601 duration string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the preset conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
     * @return {Duration}
     */
    static fromISO(text, opts) {
      const [parsed] = parseISODuration2(text);
      if (parsed) {
        return _Duration2.fromObject(parsed, opts);
      } else {
        return _Duration2.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }
    /**
     * Create a Duration from an ISO 8601 time string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
     * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @return {Duration}
     */
    static fromISOTime(text, opts) {
      const [parsed] = parseISOTimeOnly2(text);
      if (parsed) {
        return _Duration2.fromObject(parsed, opts);
      } else {
        return _Duration2.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }
    /**
     * Create an invalid Duration.
     * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Duration}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError2("need to specify a reason the Duration is invalid");
      }
      const invalid = reason instanceof Invalid2 ? reason : new Invalid2(reason, explanation);
      if (Settings2.throwOnInvalid) {
        throw new InvalidDurationError2(invalid);
      } else {
        return new _Duration2({ invalid });
      }
    }
    /**
     * @private
     */
    static normalizeUnit(unit) {
      const normalized = {
        year: "years",
        years: "years",
        quarter: "quarters",
        quarters: "quarters",
        month: "months",
        months: "months",
        week: "weeks",
        weeks: "weeks",
        day: "days",
        days: "days",
        hour: "hours",
        hours: "hours",
        minute: "minutes",
        minutes: "minutes",
        second: "seconds",
        seconds: "seconds",
        millisecond: "milliseconds",
        milliseconds: "milliseconds"
      }[unit ? unit.toLowerCase() : unit];
      if (!normalized) throw new InvalidUnitError2(unit);
      return normalized;
    }
    /**
     * Check if an object is a Duration. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDuration(o18) {
      return o18 && o18.isLuxonDuration || false;
    }
    /**
     * Get  the locale of a Duration, such 'en-GB'
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
     * * `S` for milliseconds
     * * `s` for seconds
     * * `m` for minutes
     * * `h` for hours
     * * `d` for days
     * * `w` for weeks
     * * `M` for months
     * * `y` for years
     * Notes:
     * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
     * * Tokens can be escaped by wrapping with single quotes.
     * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
     * @param {string} fmt - the format string
     * @param {Object} opts - options
     * @param {boolean} [opts.floor=true] - floor numerical values
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      const fmtOpts = {
        ...opts,
        floor: opts.round !== false && opts.floor !== false
      };
      return this.isValid ? Formatter2.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID4;
    }
    /**
     * Returns a string representation of a Duration with all units included.
     * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
     * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
     * @example
     * ```js
     * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
     * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
     * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
     * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
     * ```
     */
    toHuman(opts = {}) {
      const l19 = orderedUnits3.map((unit) => {
        const val = this.values[unit];
        if (isUndefined3(val)) {
          return null;
        }
        return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
      }).filter((n21) => n21);
      return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l19);
    }
    /**
     * Returns a JavaScript object with this Duration's values.
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
     * @return {Object}
     */
    toObject() {
      if (!this.isValid) return {};
      return { ...this.values };
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Duration.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
     * @return {string}
     */
    toISO() {
      if (!this.isValid) return null;
      let s21 = "P";
      if (this.years !== 0) s21 += this.years + "Y";
      if (this.months !== 0 || this.quarters !== 0) s21 += this.months + this.quarters * 3 + "M";
      if (this.weeks !== 0) s21 += this.weeks + "W";
      if (this.days !== 0) s21 += this.days + "D";
      if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
        s21 += "T";
      if (this.hours !== 0) s21 += this.hours + "H";
      if (this.minutes !== 0) s21 += this.minutes + "M";
      if (this.seconds !== 0 || this.milliseconds !== 0)
        s21 += roundTo2(this.seconds + this.milliseconds / 1e3, 3) + "S";
      if (s21 === "P") s21 += "T0S";
      return s21;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
     * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
     * @return {string}
     */
    toISOTime(opts = {}) {
      if (!this.isValid) return null;
      const millis = this.toMillis();
      if (millis < 0 || millis >= 864e5) return null;
      opts = {
        suppressMilliseconds: false,
        suppressSeconds: false,
        includePrefix: false,
        format: "extended",
        ...opts
      };
      const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
      let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";
      if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
        fmt += opts.format === "basic" ? "ss" : ":ss";
        if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
          fmt += ".SSS";
        }
      }
      let str = value.toFormat(fmt);
      if (opts.includePrefix) {
        str = "T" + str;
      }
      return str;
    }
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
     * @return {string}
     */
    toString() {
      return this.toISO();
    }
    /**
     * Returns an milliseconds value of this Duration.
     * @return {number}
     */
    toMillis() {
      return this.as("milliseconds");
    }
    /**
     * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }
    /**
     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    plus(duration) {
      if (!this.isValid) return this;
      const dur = _Duration2.fromDurationLike(duration), result = {};
      for (const k of orderedUnits3) {
        if (hasOwnProperty2(dur.values, k) || hasOwnProperty2(this.values, k)) {
          result[k] = dur.get(k) + this.get(k);
        }
      }
      return clone3(this, { values: result }, true);
    }
    /**
     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    minus(duration) {
      if (!this.isValid) return this;
      const dur = _Duration2.fromDurationLike(duration);
      return this.plus(dur.negate());
    }
    /**
     * Scale this Duration by the specified amount. Return a newly-constructed Duration.
     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
     * @return {Duration}
     */
    mapUnits(fn3) {
      if (!this.isValid) return this;
      const result = {};
      for (const k of Object.keys(this.values)) {
        result[k] = asNumber2(fn3(this.values[k], k));
      }
      return clone3(this, { values: result }, true);
    }
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
     * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
     * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
     * @return {number}
     */
    get(unit) {
      return this[_Duration2.normalizeUnit(unit)];
    }
    /**
     * "Set" the values of specified units. Return a newly-constructed Duration.
     * @param {Object} values - a mapping of units to numbers
     * @example dur.set({ years: 2017 })
     * @example dur.set({ hours: 8, minutes: 30 })
     * @return {Duration}
     */
    set(values) {
      if (!this.isValid) return this;
      const mixed = { ...this.values, ...normalizeObject2(values, _Duration2.normalizeUnit) };
      return clone3(this, { values: mixed });
    }
    /**
     * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
     * @example dur.reconfigure({ locale: 'en-GB' })
     * @return {Duration}
     */
    reconfigure({ locale: locale2, numberingSystem, conversionAccuracy, matrix } = {}) {
      const loc = this.loc.clone({ locale: locale2, numberingSystem });
      const opts = { loc, matrix, conversionAccuracy };
      return clone3(this, opts);
    }
    /**
     * Return the length of the duration in the specified unit.
     * @param {string} unit - a unit such as 'minutes' or 'days'
     * @example Duration.fromObject({years: 1}).as('days') //=> 365
     * @example Duration.fromObject({years: 1}).as('months') //=> 12
     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
     * @return {number}
     */
    as(unit) {
      return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    }
    /**
     * Reduce this Duration to its canonical representation in its current units.
     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
     * @return {Duration}
     */
    normalize() {
      if (!this.isValid) return this;
      const vals = this.toObject();
      normalizeValues2(this.matrix, vals);
      return clone3(this, { values: vals }, true);
    }
    /**
     * Rescale units to its largest representation
     * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
     * @return {Duration}
     */
    rescale() {
      if (!this.isValid) return this;
      const vals = removeZeroes2(this.normalize().shiftToAll().toObject());
      return clone3(this, { values: vals }, true);
    }
    /**
     * Convert this Duration into its representation in a different set of units.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
     * @return {Duration}
     */
    shiftTo(...units) {
      if (!this.isValid) return this;
      if (units.length === 0) {
        return this;
      }
      units = units.map((u10) => _Duration2.normalizeUnit(u10));
      const built = {}, accumulated = {}, vals = this.toObject();
      let lastUnit;
      for (const k of orderedUnits3) {
        if (units.indexOf(k) >= 0) {
          lastUnit = k;
          let own = 0;
          for (const ak in accumulated) {
            own += this.matrix[ak][k] * accumulated[ak];
            accumulated[ak] = 0;
          }
          if (isNumber2(vals[k])) {
            own += vals[k];
          }
          const i12 = Math.trunc(own);
          built[k] = i12;
          accumulated[k] = (own * 1e3 - i12 * 1e3) / 1e3;
          for (const down in vals) {
            if (orderedUnits3.indexOf(down) > orderedUnits3.indexOf(k)) {
              convert(this.matrix, vals, down, built, k);
            }
          }
        } else if (isNumber2(vals[k])) {
          accumulated[k] = vals[k];
        }
      }
      for (const key in accumulated) {
        if (accumulated[key] !== 0) {
          built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
        }
      }
      return clone3(this, { values: built }, true).normalize();
    }
    /**
     * Shift this Duration to all available units.
     * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
     * @return {Duration}
     */
    shiftToAll() {
      if (!this.isValid) return this;
      return this.shiftTo(
        "years",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
      );
    }
    /**
     * Return the negative of this Duration.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
     * @return {Duration}
     */
    negate() {
      if (!this.isValid) return this;
      const negated = {};
      for (const k of Object.keys(this.values)) {
        negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
      }
      return clone3(this, { values: negated }, true);
    }
    /**
     * Get the years.
     * @type {number}
     */
    get years() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */
    get quarters() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */
    get months() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */
    get weeks() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */
    get days() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */
    get hours() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */
    get minutes() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */
    get seconds() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */
    get milliseconds() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Equality check
     * Two Durations are equal iff they have the same units and the same values for each unit.
     * @param {Duration} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }
      if (!this.loc.equals(other.loc)) {
        return false;
      }
      function eq(v1, v22) {
        if (v1 === void 0 || v1 === 0) return v22 === void 0 || v22 === 0;
        return v1 === v22;
      }
      __name(eq, "eq");
      for (const u10 of orderedUnits3) {
        if (!eq(this.values[u10], other.values[u10])) {
          return false;
        }
      }
      return true;
    }
  };
  __name(_Duration2, "Duration");
  var Duration2 = _Duration2;

  // ../../contrib/hdbt/node_modules/luxon/src/interval.js
  var INVALID5 = "Invalid Interval";
  function validateStartEnd2(start5, end3) {
    if (!start5 || !start5.isValid) {
      return Interval2.invalid("missing or invalid start");
    } else if (!end3 || !end3.isValid) {
      return Interval2.invalid("missing or invalid end");
    } else if (end3 < start5) {
      return Interval2.invalid(
        "end before start",
        `The end of an interval must be after its start, but you had start=${start5.toISO()} and end=${end3.toISO()}`
      );
    } else {
      return null;
    }
  }
  __name(validateStartEnd2, "validateStartEnd");
  var _Interval2 = class _Interval2 {
    /**
     * @private
     */
    constructor(config3) {
      this.s = config3.start;
      this.e = config3.end;
      this.invalid = config3.invalid || null;
      this.isLuxonInterval = true;
    }
    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Interval}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError2("need to specify a reason the Interval is invalid");
      }
      const invalid = reason instanceof Invalid2 ? reason : new Invalid2(reason, explanation);
      if (Settings2.throwOnInvalid) {
        throw new InvalidIntervalError2(invalid);
      } else {
        return new _Interval2({ invalid });
      }
    }
    /**
     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
     * @param {DateTime|Date|Object} start
     * @param {DateTime|Date|Object} end
     * @return {Interval}
     */
    static fromDateTimes(start5, end3) {
      const builtStart = friendlyDateTime2(start5), builtEnd = friendlyDateTime2(end3);
      const validateError = validateStartEnd2(builtStart, builtEnd);
      if (validateError == null) {
        return new _Interval2({
          start: builtStart,
          end: builtEnd
        });
      } else {
        return validateError;
      }
    }
    /**
     * Create an Interval from a start DateTime and a Duration to extend to.
     * @param {DateTime|Date|Object} start
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static after(start5, duration) {
      const dur = Duration2.fromDurationLike(duration), dt3 = friendlyDateTime2(start5);
      return _Interval2.fromDateTimes(dt3, dt3.plus(dur));
    }
    /**
     * Create an Interval from an end DateTime and a Duration to extend backwards to.
     * @param {DateTime|Date|Object} end
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static before(end3, duration) {
      const dur = Duration2.fromDurationLike(duration), dt3 = friendlyDateTime2(end3);
      return _Interval2.fromDateTimes(dt3.minus(dur), dt3);
    }
    /**
     * Create an Interval from an ISO 8601 string.
     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
     * @param {string} text - the ISO string to parse
     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {Interval}
     */
    static fromISO(text, opts) {
      const [s21, e18] = (text || "").split("/", 2);
      if (s21 && e18) {
        let start5, startIsValid;
        try {
          start5 = DateTime2.fromISO(s21, opts);
          startIsValid = start5.isValid;
        } catch (e19) {
          startIsValid = false;
        }
        let end3, endIsValid;
        try {
          end3 = DateTime2.fromISO(e18, opts);
          endIsValid = end3.isValid;
        } catch (e19) {
          endIsValid = false;
        }
        if (startIsValid && endIsValid) {
          return _Interval2.fromDateTimes(start5, end3);
        }
        if (startIsValid) {
          const dur = Duration2.fromISO(e18, opts);
          if (dur.isValid) {
            return _Interval2.after(start5, dur);
          }
        } else if (endIsValid) {
          const dur = Duration2.fromISO(s21, opts);
          if (dur.isValid) {
            return _Interval2.before(end3, dur);
          }
        }
      }
      return _Interval2.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
    /**
     * Check if an object is an Interval. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isInterval(o18) {
      return o18 && o18.isLuxonInterval || false;
    }
    /**
     * Returns the start of the Interval
     * @type {DateTime}
     */
    get start() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */
    get end() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */
    get isValid() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Returns the length of the Interval in the specified unit.
     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
     * @return {number}
     */
    length(unit = "milliseconds") {
      return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
    }
    /**
     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
     * @param {string} [unit='milliseconds'] - the unit of time to count.
     * @return {number}
     */
    count(unit = "milliseconds") {
      if (!this.isValid) return NaN;
      const start5 = this.start.startOf(unit), end3 = this.end.startOf(unit);
      return Math.floor(end3.diff(start5, unit).get(unit)) + (end3.valueOf() !== this.end.valueOf());
    }
    /**
     * Returns whether this Interval's start and end are both in the same unit of time
     * @param {string} unit - the unit of time to check sameness on
     * @return {boolean}
     */
    hasSame(unit) {
      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    }
    /**
     * Return whether this Interval has the same start and end DateTimes.
     * @return {boolean}
     */
    isEmpty() {
      return this.s.valueOf() === this.e.valueOf();
    }
    /**
     * Return whether this Interval's start is after the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isAfter(dateTime) {
      if (!this.isValid) return false;
      return this.s > dateTime;
    }
    /**
     * Return whether this Interval's end is before the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isBefore(dateTime) {
      if (!this.isValid) return false;
      return this.e <= dateTime;
    }
    /**
     * Return whether this Interval contains the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    contains(dateTime) {
      if (!this.isValid) return false;
      return this.s <= dateTime && this.e > dateTime;
    }
    /**
     * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
     * @param {Object} values - the values to set
     * @param {DateTime} values.start - the starting DateTime
     * @param {DateTime} values.end - the ending DateTime
     * @return {Interval}
     */
    set({ start: start5, end: end3 } = {}) {
      if (!this.isValid) return this;
      return _Interval2.fromDateTimes(start5 || this.s, end3 || this.e);
    }
    /**
     * Split this Interval at each of the specified DateTimes
     * @param {...DateTime} dateTimes - the unit of time to count.
     * @return {Array}
     */
    splitAt(...dateTimes) {
      if (!this.isValid) return [];
      const sorted = dateTimes.map(friendlyDateTime2).filter((d16) => this.contains(d16)).sort(), results = [];
      let { s: s21 } = this, i12 = 0;
      while (s21 < this.e) {
        const added = sorted[i12] || this.e, next = +added > +this.e ? this.e : added;
        results.push(_Interval2.fromDateTimes(s21, next));
        s21 = next;
        i12 += 1;
      }
      return results;
    }
    /**
     * Split this Interval into smaller Intervals, each of the specified length.
     * Left over time is grouped into a smaller interval
     * @param {Duration|Object|number} duration - The length of each resulting interval.
     * @return {Array}
     */
    splitBy(duration) {
      const dur = Duration2.fromDurationLike(duration);
      if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
        return [];
      }
      let { s: s21 } = this, idx = 1, next;
      const results = [];
      while (s21 < this.e) {
        const added = this.start.plus(dur.mapUnits((x) => x * idx));
        next = +added > +this.e ? this.e : added;
        results.push(_Interval2.fromDateTimes(s21, next));
        s21 = next;
        idx += 1;
      }
      return results;
    }
    /**
     * Split this Interval into the specified number of smaller intervals.
     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
     * @return {Array}
     */
    divideEqually(numberOfParts) {
      if (!this.isValid) return [];
      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    }
    /**
     * Return whether this Interval overlaps with the specified Interval
     * @param {Interval} other
     * @return {boolean}
     */
    overlaps(other) {
      return this.e > other.s && this.s < other.e;
    }
    /**
     * Return whether this Interval's end is adjacent to the specified Interval's start.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsStart(other) {
      if (!this.isValid) return false;
      return +this.e === +other.s;
    }
    /**
     * Return whether this Interval's start is adjacent to the specified Interval's end.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsEnd(other) {
      if (!this.isValid) return false;
      return +other.e === +this.s;
    }
    /**
     * Return whether this Interval engulfs the start and end of the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    engulfs(other) {
      if (!this.isValid) return false;
      return this.s <= other.s && this.e >= other.e;
    }
    /**
     * Return whether this Interval has the same start and end as the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }
      return this.s.equals(other.s) && this.e.equals(other.e);
    }
    /**
     * Return an Interval representing the intersection of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
     * Returns null if the intersection is empty, meaning, the intervals don't intersect.
     * @param {Interval} other
     * @return {Interval}
     */
    intersection(other) {
      if (!this.isValid) return this;
      const s21 = this.s > other.s ? this.s : other.s, e18 = this.e < other.e ? this.e : other.e;
      if (s21 >= e18) {
        return null;
      } else {
        return _Interval2.fromDateTimes(s21, e18);
      }
    }
    /**
     * Return an Interval representing the union of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
     * @param {Interval} other
     * @return {Interval}
     */
    union(other) {
      if (!this.isValid) return this;
      const s21 = this.s < other.s ? this.s : other.s, e18 = this.e > other.e ? this.e : other.e;
      return _Interval2.fromDateTimes(s21, e18);
    }
    /**
     * Merge an array of Intervals into a equivalent minimal set of Intervals.
     * Combines overlapping and adjacent Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static merge(intervals) {
      const [found, final] = intervals.sort((a21, b6) => a21.s - b6.s).reduce(
        ([sofar, current], item) => {
          if (!current) {
            return [sofar, item];
          } else if (current.overlaps(item) || current.abutsStart(item)) {
            return [sofar, current.union(item)];
          } else {
            return [sofar.concat([current]), item];
          }
        },
        [[], null]
      );
      if (final) {
        found.push(final);
      }
      return found;
    }
    /**
     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static xor(intervals) {
      let start5 = null, currentCount = 0;
      const results = [], ends = intervals.map((i12) => [
        { time: i12.s, type: "s" },
        { time: i12.e, type: "e" }
      ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a21, b6) => a21.time - b6.time);
      for (const i12 of arr) {
        currentCount += i12.type === "s" ? 1 : -1;
        if (currentCount === 1) {
          start5 = i12.time;
        } else {
          if (start5 && +start5 !== +i12.time) {
            results.push(_Interval2.fromDateTimes(start5, i12.time));
          }
          start5 = null;
        }
      }
      return _Interval2.merge(results);
    }
    /**
     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
     * @param {...Interval} intervals
     * @return {Array}
     */
    difference(...intervals) {
      return _Interval2.xor([this].concat(intervals)).map((i12) => this.intersection(i12)).filter((i12) => i12 && !i12.isEmpty());
    }
    /**
     * Returns a string representation of this Interval appropriate for debugging.
     * @return {string}
     */
    toString() {
      if (!this.isValid) return INVALID5;
      return `[${this.s.toISO()} – ${this.e.toISO()})`;
    }
    /**
     * Returns a localized string representing this Interval. Accepts the same options as the
     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
     * is browser-specific, but in general it will return an appropriate representation of the
     * Interval in the assigned locale. Defaults to the system's locale if no locale has been
     * specified.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
     * Intl.DateTimeFormat constructor options.
     * @param {Object} opts - Options to override the configuration of the start DateTime.
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT2, opts = {}) {
      return this.isValid ? Formatter2.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID5;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Interval.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISO(opts) {
      if (!this.isValid) return INVALID5;
      return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
    }
    /**
     * Returns an ISO 8601-compliant string representation of date of this Interval.
     * The time components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {string}
     */
    toISODate() {
      if (!this.isValid) return INVALID5;
      return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }
    /**
     * Returns an ISO 8601-compliant string representation of time of this Interval.
     * The date components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISOTime(opts) {
      if (!this.isValid) return INVALID5;
      return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
    }
    /**
     * Returns a string representation of this Interval formatted according to the specified format
     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
     * formatting tool.
     * @param {string} dateFormat - The format string. This string formats the start and end time.
     * See {@link DateTime#toFormat} for details.
     * @param {Object} opts - Options.
     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
     * representations.
     * @return {string}
     */
    toFormat(dateFormat, { separator = " – " } = {}) {
      if (!this.isValid) return INVALID5;
      return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
    }
    /**
     * Return a Duration representing the time spanned by this interval.
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
     * @return {Duration}
     */
    toDuration(unit, opts) {
      if (!this.isValid) {
        return Duration2.invalid(this.invalidReason);
      }
      return this.e.diff(this.s, unit, opts);
    }
    /**
     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
     * @param {function} mapFn
     * @return {Interval}
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
     */
    mapEndpoints(mapFn) {
      return _Interval2.fromDateTimes(mapFn(this.s), mapFn(this.e));
    }
  };
  __name(_Interval2, "Interval");
  var Interval2 = _Interval2;

  // ../../contrib/hdbt/node_modules/luxon/src/info.js
  var _Info2 = class _Info2 {
    /**
     * Return whether the specified zone contains a DST.
     * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
     * @return {boolean}
     */
    static hasDST(zone = Settings2.defaultZone) {
      const proto = DateTime2.now().setZone(zone).set({ month: 12 });
      return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
    }
    /**
     * Return whether the specified zone is a valid IANA specifier.
     * @param {string} zone - Zone to check
     * @return {boolean}
     */
    static isValidIANAZone(zone) {
      return IANAZone2.isValidZone(zone);
    }
    /**
     * Converts the input into a {@link Zone} instance.
     *
     * * If `input` is already a Zone instance, it is returned unchanged.
     * * If `input` is a string containing a valid time zone name, a Zone instance
     *   with that name is returned.
     * * If `input` is a string that doesn't refer to a known time zone, a Zone
     *   instance with {@link Zone#isValid} == false is returned.
     * * If `input is a number, a Zone instance with the specified fixed offset
     *   in minutes is returned.
     * * If `input` is `null` or `undefined`, the default zone is returned.
     * @param {string|Zone|number} [input] - the value to be converted
     * @return {Zone}
     */
    static normalizeZone(input) {
      return normalizeZone2(input, Settings2.defaultZone);
    }
    /**
     * Return an array of standalone month names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @example Info.months()[0] //=> 'January'
     * @example Info.months('short')[0] //=> 'Jan'
     * @example Info.months('numeric')[0] //=> '1'
     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
     * @return {Array}
     */
    static months(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
      return (locObj || Locale2.create(locale2, numberingSystem, outputCalendar)).months(length);
    }
    /**
     * Return an array of format month names.
     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
     * changes the string.
     * See {@link Info#months}
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @return {Array}
     */
    static monthsFormat(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
      return (locObj || Locale2.create(locale2, numberingSystem, outputCalendar)).months(length, true);
    }
    /**
     * Return an array of standalone week names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @example Info.weekdays()[0] //=> 'Monday'
     * @example Info.weekdays('short')[0] //=> 'Mon'
     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
     * @return {Array}
     */
    static weekdays(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale2.create(locale2, numberingSystem, null)).weekdays(length);
    }
    /**
     * Return an array of format week names.
     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
     * changes the string.
     * See {@link Info#weekdays}
     * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale=null] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @return {Array}
     */
    static weekdaysFormat(length = "long", { locale: locale2 = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale2.create(locale2, numberingSystem, null)).weekdays(length, true);
    }
    /**
     * Return an array of meridiems.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.meridiems() //=> [ 'AM', 'PM' ]
     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
     * @return {Array}
     */
    static meridiems({ locale: locale2 = null } = {}) {
      return Locale2.create(locale2).meridiems();
    }
    /**
     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
     * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.eras() //=> [ 'BC', 'AD' ]
     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
     * @return {Array}
     */
    static eras(length = "short", { locale: locale2 = null } = {}) {
      return Locale2.create(locale2, null, "gregory").eras(length);
    }
    /**
     * Return the set of available features in this environment.
     * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
     * Keys:
     * * `relative`: whether this environment supports relative time formatting
     * @example Info.features() //=> { relative: false }
     * @return {Object}
     */
    static features() {
      return { relative: hasRelative2() };
    }
  };
  __name(_Info2, "Info");
  var Info2 = _Info2;

  // ../../contrib/hdbt/node_modules/luxon/src/impl/diff.js
  function dayDiff2(earlier, later) {
    const utcDayStart = /* @__PURE__ */ __name((dt3) => dt3.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), "utcDayStart"), ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(Duration2.fromMillis(ms).as("days"));
  }
  __name(dayDiff2, "dayDiff");
  function highOrderDiffs2(cursor, later, units) {
    const differs = [
      ["years", (a21, b6) => b6.year - a21.year],
      ["quarters", (a21, b6) => b6.quarter - a21.quarter + (b6.year - a21.year) * 4],
      ["months", (a21, b6) => b6.month - a21.month + (b6.year - a21.year) * 12],
      [
        "weeks",
        (a21, b6) => {
          const days = dayDiff2(a21, b6);
          return (days - days % 7) / 7;
        }
      ],
      ["days", dayDiff2]
    ];
    const results = {};
    const earlier = cursor;
    let lowestOrder, highWater;
    for (const [unit, differ] of differs) {
      if (units.indexOf(unit) >= 0) {
        lowestOrder = unit;
        results[unit] = differ(cursor, later);
        highWater = earlier.plus(results);
        if (highWater > later) {
          results[unit]--;
          cursor = earlier.plus(results);
        } else {
          cursor = highWater;
        }
      }
    }
    return [cursor, results, highWater, lowestOrder];
  }
  __name(highOrderDiffs2, "highOrderDiffs");
  function diff_default2(earlier, later, units, opts) {
    let [cursor, results, highWater, lowestOrder] = highOrderDiffs2(earlier, later, units);
    const remainingMillis = later - cursor;
    const lowerOrderUnits = units.filter(
      (u10) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u10) >= 0
    );
    if (lowerOrderUnits.length === 0) {
      if (highWater < later) {
        highWater = cursor.plus({ [lowestOrder]: 1 });
      }
      if (highWater !== cursor) {
        results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
      }
    }
    const duration = Duration2.fromObject(results, opts);
    if (lowerOrderUnits.length > 0) {
      return Duration2.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
    } else {
      return duration;
    }
  }
  __name(diff_default2, "default");

  // ../../contrib/hdbt/node_modules/luxon/src/impl/digits.js
  var numberingSystems2 = {
    arab: "[٠-٩]",
    arabext: "[۰-۹]",
    bali: "[᭐-᭙]",
    beng: "[০-৯]",
    deva: "[०-९]",
    fullwide: "[０-９]",
    gujr: "[૦-૯]",
    hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
    khmr: "[០-៩]",
    knda: "[೦-೯]",
    laoo: "[໐-໙]",
    limb: "[᥆-᥏]",
    mlym: "[൦-൯]",
    mong: "[᠐-᠙]",
    mymr: "[၀-၉]",
    orya: "[୦-୯]",
    tamldec: "[௦-௯]",
    telu: "[౦-౯]",
    thai: "[๐-๙]",
    tibt: "[༠-༩]",
    latn: "\\d"
  };
  var numberingSystemsUTF162 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881]
  };
  var hanidecChars2 = numberingSystems2.hanidec.replace(/[\[|\]]/g, "").split("");
  function parseDigits2(str) {
    let value = parseInt(str, 10);
    if (isNaN(value)) {
      value = "";
      for (let i12 = 0; i12 < str.length; i12++) {
        const code = str.charCodeAt(i12);
        if (str[i12].search(numberingSystems2.hanidec) !== -1) {
          value += hanidecChars2.indexOf(str[i12]);
        } else {
          for (const key in numberingSystemsUTF162) {
            const [min3, max3] = numberingSystemsUTF162[key];
            if (code >= min3 && code <= max3) {
              value += code - min3;
            }
          }
        }
      }
      return parseInt(value, 10);
    } else {
      return value;
    }
  }
  __name(parseDigits2, "parseDigits");
  function digitRegex2({ numberingSystem }, append = "") {
    return new RegExp(`${numberingSystems2[numberingSystem || "latn"]}${append}`);
  }
  __name(digitRegex2, "digitRegex");

  // ../../contrib/hdbt/node_modules/luxon/src/impl/tokenParser.js
  var MISSING_FTP2 = "missing Intl.DateTimeFormat.formatToParts support";
  function intUnit2(regex, post = (i12) => i12) {
    return { regex, deser: /* @__PURE__ */ __name(([s21]) => post(parseDigits2(s21)), "deser") };
  }
  __name(intUnit2, "intUnit");
  var NBSP2 = String.fromCharCode(160);
  var spaceOrNBSP2 = `[ ${NBSP2}]`;
  var spaceOrNBSPRegExp2 = new RegExp(spaceOrNBSP2, "g");
  function fixListRegex2(s21) {
    return s21.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp2, spaceOrNBSP2);
  }
  __name(fixListRegex2, "fixListRegex");
  function stripInsensitivities2(s21) {
    return s21.replace(/\./g, "").replace(spaceOrNBSPRegExp2, " ").toLowerCase();
  }
  __name(stripInsensitivities2, "stripInsensitivities");
  function oneOf2(strings, startIndex) {
    if (strings === null) {
      return null;
    } else {
      return {
        regex: RegExp(strings.map(fixListRegex2).join("|")),
        deser: /* @__PURE__ */ __name(([s21]) => strings.findIndex((i12) => stripInsensitivities2(s21) === stripInsensitivities2(i12)) + startIndex, "deser")
      };
    }
  }
  __name(oneOf2, "oneOf");
  function offset4(regex, groups) {
    return { regex, deser: /* @__PURE__ */ __name(([, h5, m6]) => signedOffset2(h5, m6), "deser"), groups };
  }
  __name(offset4, "offset");
  function simple2(regex) {
    return { regex, deser: /* @__PURE__ */ __name(([s21]) => s21, "deser") };
  }
  __name(simple2, "simple");
  function escapeToken2(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }
  __name(escapeToken2, "escapeToken");
  function unitForToken2(token, loc) {
    const one = digitRegex2(loc), two = digitRegex2(loc, "{2}"), three = digitRegex2(loc, "{3}"), four = digitRegex2(loc, "{4}"), six = digitRegex2(loc, "{6}"), oneOrTwo = digitRegex2(loc, "{1,2}"), oneToThree = digitRegex2(loc, "{1,3}"), oneToSix = digitRegex2(loc, "{1,6}"), oneToNine = digitRegex2(loc, "{1,9}"), twoToFour = digitRegex2(loc, "{2,4}"), fourToSix = digitRegex2(loc, "{4,6}"), literal = /* @__PURE__ */ __name((t21) => ({ regex: RegExp(escapeToken2(t21.val)), deser: /* @__PURE__ */ __name(([s21]) => s21, "deser"), literal: true }), "literal"), unitate = /* @__PURE__ */ __name((t21) => {
      if (token.literal) {
        return literal(t21);
      }
      switch (t21.val) {
        // era
        case "G":
          return oneOf2(loc.eras("short", false), 0);
        case "GG":
          return oneOf2(loc.eras("long", false), 0);
        // years
        case "y":
          return intUnit2(oneToSix);
        case "yy":
          return intUnit2(twoToFour, untruncateYear2);
        case "yyyy":
          return intUnit2(four);
        case "yyyyy":
          return intUnit2(fourToSix);
        case "yyyyyy":
          return intUnit2(six);
        // months
        case "M":
          return intUnit2(oneOrTwo);
        case "MM":
          return intUnit2(two);
        case "MMM":
          return oneOf2(loc.months("short", true, false), 1);
        case "MMMM":
          return oneOf2(loc.months("long", true, false), 1);
        case "L":
          return intUnit2(oneOrTwo);
        case "LL":
          return intUnit2(two);
        case "LLL":
          return oneOf2(loc.months("short", false, false), 1);
        case "LLLL":
          return oneOf2(loc.months("long", false, false), 1);
        // dates
        case "d":
          return intUnit2(oneOrTwo);
        case "dd":
          return intUnit2(two);
        // ordinals
        case "o":
          return intUnit2(oneToThree);
        case "ooo":
          return intUnit2(three);
        // time
        case "HH":
          return intUnit2(two);
        case "H":
          return intUnit2(oneOrTwo);
        case "hh":
          return intUnit2(two);
        case "h":
          return intUnit2(oneOrTwo);
        case "mm":
          return intUnit2(two);
        case "m":
          return intUnit2(oneOrTwo);
        case "q":
          return intUnit2(oneOrTwo);
        case "qq":
          return intUnit2(two);
        case "s":
          return intUnit2(oneOrTwo);
        case "ss":
          return intUnit2(two);
        case "S":
          return intUnit2(oneToThree);
        case "SSS":
          return intUnit2(three);
        case "u":
          return simple2(oneToNine);
        case "uu":
          return simple2(oneOrTwo);
        case "uuu":
          return intUnit2(one);
        // meridiem
        case "a":
          return oneOf2(loc.meridiems(), 0);
        // weekYear (k)
        case "kkkk":
          return intUnit2(four);
        case "kk":
          return intUnit2(twoToFour, untruncateYear2);
        // weekNumber (W)
        case "W":
          return intUnit2(oneOrTwo);
        case "WW":
          return intUnit2(two);
        // weekdays
        case "E":
        case "c":
          return intUnit2(one);
        case "EEE":
          return oneOf2(loc.weekdays("short", false, false), 1);
        case "EEEE":
          return oneOf2(loc.weekdays("long", false, false), 1);
        case "ccc":
          return oneOf2(loc.weekdays("short", true, false), 1);
        case "cccc":
          return oneOf2(loc.weekdays("long", true, false), 1);
        // offset/zone
        case "Z":
        case "ZZ":
          return offset4(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
        case "ZZZ":
          return offset4(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
        // because we don't have any way to figure out what they are
        case "z":
          return simple2(/[a-z_+-/]{1,256}?/i);
        // this special-case "token" represents a place where a macro-token expanded into a white-space literal
        // in this case we accept any non-newline white-space
        case " ":
          return simple2(/[^\S\n\r]/);
        default:
          return literal(t21);
      }
    }, "unitate");
    const unit = unitate(token) || {
      invalidReason: MISSING_FTP2
    };
    unit.token = token;
    return unit;
  }
  __name(unitForToken2, "unitForToken");
  var partTypeStyleToTokenVal2 = {
    year: {
      "2-digit": "yy",
      numeric: "yyyyy"
    },
    month: {
      numeric: "M",
      "2-digit": "MM",
      short: "MMM",
      long: "MMMM"
    },
    day: {
      numeric: "d",
      "2-digit": "dd"
    },
    weekday: {
      short: "EEE",
      long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour: {
      numeric: "h",
      "2-digit": "hh"
    },
    minute: {
      numeric: "m",
      "2-digit": "mm"
    },
    second: {
      numeric: "s",
      "2-digit": "ss"
    },
    timeZoneName: {
      long: "ZZZZZ",
      short: "ZZZ"
    }
  };
  function tokenForPart2(part, formatOpts) {
    const { type, value } = part;
    if (type === "literal") {
      const isSpace = /^\s+$/.test(value);
      return {
        literal: !isSpace,
        val: isSpace ? " " : value
      };
    }
    const style = formatOpts[type];
    let val = partTypeStyleToTokenVal2[type];
    if (typeof val === "object") {
      val = val[style];
    }
    if (val) {
      return {
        literal: false,
        val
      };
    }
    return void 0;
  }
  __name(tokenForPart2, "tokenForPart");
  function buildRegex2(units) {
    const re3 = units.map((u10) => u10.regex).reduce((f2, r30) => `${f2}(${r30.source})`, "");
    return [`^${re3}$`, units];
  }
  __name(buildRegex2, "buildRegex");
  function match3(input, regex, handlers) {
    const matches = input.match(regex);
    if (matches) {
      const all = {};
      let matchIndex = 1;
      for (const i12 in handlers) {
        if (hasOwnProperty2(handlers, i12)) {
          const h5 = handlers[i12], groups = h5.groups ? h5.groups + 1 : 1;
          if (!h5.literal && h5.token) {
            all[h5.token.val[0]] = h5.deser(matches.slice(matchIndex, matchIndex + groups));
          }
          matchIndex += groups;
        }
      }
      return [matches, all];
    } else {
      return [matches, {}];
    }
  }
  __name(match3, "match");
  function dateTimeFromMatches2(matches) {
    const toField = /* @__PURE__ */ __name((token) => {
      switch (token) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
        case "H":
          return "hour";
        case "d":
          return "day";
        case "o":
          return "ordinal";
        case "L":
        case "M":
          return "month";
        case "y":
          return "year";
        case "E":
        case "c":
          return "weekday";
        case "W":
          return "weekNumber";
        case "k":
          return "weekYear";
        case "q":
          return "quarter";
        default:
          return null;
      }
    }, "toField");
    let zone = null;
    let specificOffset;
    if (!isUndefined3(matches.z)) {
      zone = IANAZone2.create(matches.z);
    }
    if (!isUndefined3(matches.Z)) {
      if (!zone) {
        zone = new FixedOffsetZone2(matches.Z);
      }
      specificOffset = matches.Z;
    }
    if (!isUndefined3(matches.q)) {
      matches.M = (matches.q - 1) * 3 + 1;
    }
    if (!isUndefined3(matches.h)) {
      if (matches.h < 12 && matches.a === 1) {
        matches.h += 12;
      } else if (matches.h === 12 && matches.a === 0) {
        matches.h = 0;
      }
    }
    if (matches.G === 0 && matches.y) {
      matches.y = -matches.y;
    }
    if (!isUndefined3(matches.u)) {
      matches.S = parseMillis2(matches.u);
    }
    const vals = Object.keys(matches).reduce((r30, k) => {
      const f2 = toField(k);
      if (f2) {
        r30[f2] = matches[k];
      }
      return r30;
    }, {});
    return [vals, zone, specificOffset];
  }
  __name(dateTimeFromMatches2, "dateTimeFromMatches");
  var dummyDateTimeCache2 = null;
  function getDummyDateTime2() {
    if (!dummyDateTimeCache2) {
      dummyDateTimeCache2 = DateTime2.fromMillis(1555555555555);
    }
    return dummyDateTimeCache2;
  }
  __name(getDummyDateTime2, "getDummyDateTime");
  function maybeExpandMacroToken2(token, locale2) {
    if (token.literal) {
      return token;
    }
    const formatOpts = Formatter2.macroTokenToFormatOpts(token.val);
    const tokens = formatOptsToTokens2(formatOpts, locale2);
    if (tokens == null || tokens.includes(void 0)) {
      return token;
    }
    return tokens;
  }
  __name(maybeExpandMacroToken2, "maybeExpandMacroToken");
  function expandMacroTokens2(tokens, locale2) {
    return Array.prototype.concat(...tokens.map((t21) => maybeExpandMacroToken2(t21, locale2)));
  }
  __name(expandMacroTokens2, "expandMacroTokens");
  function explainFromTokens2(locale2, input, format4) {
    const tokens = expandMacroTokens2(Formatter2.parseFormat(format4), locale2), units = tokens.map((t21) => unitForToken2(t21, locale2)), disqualifyingUnit = units.find((t21) => t21.invalidReason);
    if (disqualifyingUnit) {
      return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };
    } else {
      const [regexString, handlers] = buildRegex2(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match3(input, regex, handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches2(matches) : [null, null, void 0];
      if (hasOwnProperty2(matches, "a") && hasOwnProperty2(matches, "H")) {
        throw new ConflictingSpecificationError2(
          "Can't include meridiem when specifying 24-hour format"
        );
      }
      return { input, tokens, regex, rawMatches, matches, result, zone, specificOffset };
    }
  }
  __name(explainFromTokens2, "explainFromTokens");
  function parseFromTokens2(locale2, input, format4) {
    const { result, zone, specificOffset, invalidReason } = explainFromTokens2(locale2, input, format4);
    return [result, zone, specificOffset, invalidReason];
  }
  __name(parseFromTokens2, "parseFromTokens");
  function formatOptsToTokens2(formatOpts, locale2) {
    if (!formatOpts) {
      return null;
    }
    const formatter = Formatter2.create(locale2, formatOpts);
    const parts = formatter.formatDateTimeParts(getDummyDateTime2());
    return parts.map((p5) => tokenForPart2(p5, formatOpts));
  }
  __name(formatOptsToTokens2, "formatOptsToTokens");

  // ../../contrib/hdbt/node_modules/luxon/src/impl/conversions.js
  var nonLeapLadder2 = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
  var leapLadder2 = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
  function unitOutOfRange2(unit, value) {
    return new Invalid2(
      "unit out of range",
      `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
    );
  }
  __name(unitOutOfRange2, "unitOutOfRange");
  function dayOfWeek2(year, month, day) {
    const d16 = new Date(Date.UTC(year, month - 1, day));
    if (year < 100 && year >= 0) {
      d16.setUTCFullYear(d16.getUTCFullYear() - 1900);
    }
    const js = d16.getUTCDay();
    return js === 0 ? 7 : js;
  }
  __name(dayOfWeek2, "dayOfWeek");
  function computeOrdinal2(year, month, day) {
    return day + (isLeapYear2(year) ? leapLadder2 : nonLeapLadder2)[month - 1];
  }
  __name(computeOrdinal2, "computeOrdinal");
  function uncomputeOrdinal2(year, ordinal) {
    const table2 = isLeapYear2(year) ? leapLadder2 : nonLeapLadder2, month0 = table2.findIndex((i12) => i12 < ordinal), day = ordinal - table2[month0];
    return { month: month0 + 1, day };
  }
  __name(uncomputeOrdinal2, "uncomputeOrdinal");
  function gregorianToWeek2(gregObj) {
    const { year, month, day } = gregObj, ordinal = computeOrdinal2(year, month, day), weekday = dayOfWeek2(year, month, day);
    let weekNumber = Math.floor((ordinal - weekday + 10) / 7), weekYear;
    if (weekNumber < 1) {
      weekYear = year - 1;
      weekNumber = weeksInWeekYear2(weekYear);
    } else if (weekNumber > weeksInWeekYear2(year)) {
      weekYear = year + 1;
      weekNumber = 1;
    } else {
      weekYear = year;
    }
    return { weekYear, weekNumber, weekday, ...timeObject2(gregObj) };
  }
  __name(gregorianToWeek2, "gregorianToWeek");
  function weekToGregorian2(weekData) {
    const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = dayOfWeek2(weekYear, 1, 4), yearInDays = daysInYear2(weekYear);
    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3, year;
    if (ordinal < 1) {
      year = weekYear - 1;
      ordinal += daysInYear2(year);
    } else if (ordinal > yearInDays) {
      year = weekYear + 1;
      ordinal -= daysInYear2(weekYear);
    } else {
      year = weekYear;
    }
    const { month, day } = uncomputeOrdinal2(year, ordinal);
    return { year, month, day, ...timeObject2(weekData) };
  }
  __name(weekToGregorian2, "weekToGregorian");
  function gregorianToOrdinal2(gregData) {
    const { year, month, day } = gregData;
    const ordinal = computeOrdinal2(year, month, day);
    return { year, ordinal, ...timeObject2(gregData) };
  }
  __name(gregorianToOrdinal2, "gregorianToOrdinal");
  function ordinalToGregorian2(ordinalData) {
    const { year, ordinal } = ordinalData;
    const { month, day } = uncomputeOrdinal2(year, ordinal);
    return { year, month, day, ...timeObject2(ordinalData) };
  }
  __name(ordinalToGregorian2, "ordinalToGregorian");
  function hasInvalidWeekData2(obj) {
    const validYear = isInteger2(obj.weekYear), validWeek = integerBetween2(obj.weekNumber, 1, weeksInWeekYear2(obj.weekYear)), validWeekday = integerBetween2(obj.weekday, 1, 7);
    if (!validYear) {
      return unitOutOfRange2("weekYear", obj.weekYear);
    } else if (!validWeek) {
      return unitOutOfRange2("week", obj.week);
    } else if (!validWeekday) {
      return unitOutOfRange2("weekday", obj.weekday);
    } else return false;
  }
  __name(hasInvalidWeekData2, "hasInvalidWeekData");
  function hasInvalidOrdinalData2(obj) {
    const validYear = isInteger2(obj.year), validOrdinal = integerBetween2(obj.ordinal, 1, daysInYear2(obj.year));
    if (!validYear) {
      return unitOutOfRange2("year", obj.year);
    } else if (!validOrdinal) {
      return unitOutOfRange2("ordinal", obj.ordinal);
    } else return false;
  }
  __name(hasInvalidOrdinalData2, "hasInvalidOrdinalData");
  function hasInvalidGregorianData2(obj) {
    const validYear = isInteger2(obj.year), validMonth = integerBetween2(obj.month, 1, 12), validDay = integerBetween2(obj.day, 1, daysInMonth2(obj.year, obj.month));
    if (!validYear) {
      return unitOutOfRange2("year", obj.year);
    } else if (!validMonth) {
      return unitOutOfRange2("month", obj.month);
    } else if (!validDay) {
      return unitOutOfRange2("day", obj.day);
    } else return false;
  }
  __name(hasInvalidGregorianData2, "hasInvalidGregorianData");
  function hasInvalidTimeData2(obj) {
    const { hour, minute, second, millisecond } = obj;
    const validHour = integerBetween2(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween2(minute, 0, 59), validSecond = integerBetween2(second, 0, 59), validMillisecond = integerBetween2(millisecond, 0, 999);
    if (!validHour) {
      return unitOutOfRange2("hour", hour);
    } else if (!validMinute) {
      return unitOutOfRange2("minute", minute);
    } else if (!validSecond) {
      return unitOutOfRange2("second", second);
    } else if (!validMillisecond) {
      return unitOutOfRange2("millisecond", millisecond);
    } else return false;
  }
  __name(hasInvalidTimeData2, "hasInvalidTimeData");

  // ../../contrib/hdbt/node_modules/luxon/src/datetime.js
  var INVALID6 = "Invalid DateTime";
  var MAX_DATE2 = 864e13;
  function unsupportedZone2(zone) {
    return new Invalid2("unsupported zone", `the zone "${zone.name}" is not supported`);
  }
  __name(unsupportedZone2, "unsupportedZone");
  function possiblyCachedWeekData2(dt3) {
    if (dt3.weekData === null) {
      dt3.weekData = gregorianToWeek2(dt3.c);
    }
    return dt3.weekData;
  }
  __name(possiblyCachedWeekData2, "possiblyCachedWeekData");
  function clone4(inst, alts) {
    const current = {
      ts: inst.ts,
      zone: inst.zone,
      c: inst.c,
      o: inst.o,
      loc: inst.loc,
      invalid: inst.invalid
    };
    return new DateTime2({ ...current, ...alts, old: current });
  }
  __name(clone4, "clone");
  function fixOffset2(localTS, o18, tz) {
    let utcGuess = localTS - o18 * 60 * 1e3;
    const o22 = tz.offset(utcGuess);
    if (o18 === o22) {
      return [utcGuess, o18];
    }
    utcGuess -= (o22 - o18) * 60 * 1e3;
    const o32 = tz.offset(utcGuess);
    if (o22 === o32) {
      return [utcGuess, o22];
    }
    return [localTS - Math.min(o22, o32) * 60 * 1e3, Math.max(o22, o32)];
  }
  __name(fixOffset2, "fixOffset");
  function tsToObj2(ts3, offset5) {
    ts3 += offset5 * 60 * 1e3;
    const d16 = new Date(ts3);
    return {
      year: d16.getUTCFullYear(),
      month: d16.getUTCMonth() + 1,
      day: d16.getUTCDate(),
      hour: d16.getUTCHours(),
      minute: d16.getUTCMinutes(),
      second: d16.getUTCSeconds(),
      millisecond: d16.getUTCMilliseconds()
    };
  }
  __name(tsToObj2, "tsToObj");
  function objToTS2(obj, offset5, zone) {
    return fixOffset2(objToLocalTS2(obj), offset5, zone);
  }
  __name(objToTS2, "objToTS");
  function adjustTime2(inst, dur) {
    const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c6 = {
      ...inst.c,
      year,
      month,
      day: Math.min(inst.c.day, daysInMonth2(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
    }, millisToAdd = Duration2.fromObject({
      years: dur.years - Math.trunc(dur.years),
      quarters: dur.quarters - Math.trunc(dur.quarters),
      months: dur.months - Math.trunc(dur.months),
      weeks: dur.weeks - Math.trunc(dur.weeks),
      days: dur.days - Math.trunc(dur.days),
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds
    }).as("milliseconds"), localTS = objToLocalTS2(c6);
    let [ts3, o18] = fixOffset2(localTS, oPre, inst.zone);
    if (millisToAdd !== 0) {
      ts3 += millisToAdd;
      o18 = inst.zone.offset(ts3);
    }
    return { ts: ts3, o: o18 };
  }
  __name(adjustTime2, "adjustTime");
  function parseDataToDateTime2(parsed, parsedZone, opts, format4, text, specificOffset) {
    const { setZone, zone } = opts;
    if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
      const interpretationZone = parsedZone || zone, inst = DateTime2.fromObject(parsed, {
        ...opts,
        zone: interpretationZone,
        specificOffset
      });
      return setZone ? inst : inst.setZone(zone);
    } else {
      return DateTime2.invalid(
        new Invalid2("unparsable", `the input "${text}" can't be parsed as ${format4}`)
      );
    }
  }
  __name(parseDataToDateTime2, "parseDataToDateTime");
  function toTechFormat2(dt3, format4, allowZ = true) {
    return dt3.isValid ? Formatter2.create(Locale2.create("en-US"), {
      allowZ,
      forceSimple: true
    }).formatDateTimeFromString(dt3, format4) : null;
  }
  __name(toTechFormat2, "toTechFormat");
  function toISODate2(o18, extended) {
    const longFormat = o18.c.year > 9999 || o18.c.year < 0;
    let c6 = "";
    if (longFormat && o18.c.year >= 0) c6 += "+";
    c6 += padStart2(o18.c.year, longFormat ? 6 : 4);
    if (extended) {
      c6 += "-";
      c6 += padStart2(o18.c.month);
      c6 += "-";
      c6 += padStart2(o18.c.day);
    } else {
      c6 += padStart2(o18.c.month);
      c6 += padStart2(o18.c.day);
    }
    return c6;
  }
  __name(toISODate2, "toISODate");
  function toISOTime2(o18, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
    let c6 = padStart2(o18.c.hour);
    if (extended) {
      c6 += ":";
      c6 += padStart2(o18.c.minute);
      if (o18.c.second !== 0 || !suppressSeconds) {
        c6 += ":";
      }
    } else {
      c6 += padStart2(o18.c.minute);
    }
    if (o18.c.second !== 0 || !suppressSeconds) {
      c6 += padStart2(o18.c.second);
      if (o18.c.millisecond !== 0 || !suppressMilliseconds) {
        c6 += ".";
        c6 += padStart2(o18.c.millisecond, 3);
      }
    }
    if (includeOffset) {
      if (o18.isOffsetFixed && o18.offset === 0 && !extendedZone) {
        c6 += "Z";
      } else if (o18.o < 0) {
        c6 += "-";
        c6 += padStart2(Math.trunc(-o18.o / 60));
        c6 += ":";
        c6 += padStart2(Math.trunc(-o18.o % 60));
      } else {
        c6 += "+";
        c6 += padStart2(Math.trunc(o18.o / 60));
        c6 += ":";
        c6 += padStart2(Math.trunc(o18.o % 60));
      }
    }
    if (extendedZone) {
      c6 += "[" + o18.zone.ianaName + "]";
    }
    return c6;
  }
  __name(toISOTime2, "toISOTime");
  var defaultUnitValues2 = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var defaultWeekUnitValues2 = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var defaultOrdinalUnitValues2 = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var orderedUnits4 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
  var orderedWeekUnits2 = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
  ];
  var orderedOrdinalUnits2 = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
  function normalizeUnit2(unit) {
    const normalized = {
      year: "year",
      years: "year",
      month: "month",
      months: "month",
      day: "day",
      days: "day",
      hour: "hour",
      hours: "hour",
      minute: "minute",
      minutes: "minute",
      quarter: "quarter",
      quarters: "quarter",
      second: "second",
      seconds: "second",
      millisecond: "millisecond",
      milliseconds: "millisecond",
      weekday: "weekday",
      weekdays: "weekday",
      weeknumber: "weekNumber",
      weeksnumber: "weekNumber",
      weeknumbers: "weekNumber",
      weekyear: "weekYear",
      weekyears: "weekYear",
      ordinal: "ordinal"
    }[unit.toLowerCase()];
    if (!normalized) throw new InvalidUnitError2(unit);
    return normalized;
  }
  __name(normalizeUnit2, "normalizeUnit");
  function quickDT2(obj, opts) {
    const zone = normalizeZone2(opts.zone, Settings2.defaultZone), loc = Locale2.fromObject(opts), tsNow = Settings2.now();
    let ts3, o18;
    if (!isUndefined3(obj.year)) {
      for (const u10 of orderedUnits4) {
        if (isUndefined3(obj[u10])) {
          obj[u10] = defaultUnitValues2[u10];
        }
      }
      const invalid = hasInvalidGregorianData2(obj) || hasInvalidTimeData2(obj);
      if (invalid) {
        return DateTime2.invalid(invalid);
      }
      const offsetProvis = zone.offset(tsNow);
      [ts3, o18] = objToTS2(obj, offsetProvis, zone);
    } else {
      ts3 = tsNow;
    }
    return new DateTime2({ ts: ts3, zone, loc, o: o18 });
  }
  __name(quickDT2, "quickDT");
  function diffRelative2(start5, end3, opts) {
    const round3 = isUndefined3(opts.round) ? true : opts.round, format4 = /* @__PURE__ */ __name((c6, unit) => {
      c6 = roundTo2(c6, round3 || opts.calendary ? 0 : 2, true);
      const formatter = end3.loc.clone(opts).relFormatter(opts);
      return formatter.format(c6, unit);
    }, "format"), differ = /* @__PURE__ */ __name((unit) => {
      if (opts.calendary) {
        if (!end3.hasSame(start5, unit)) {
          return end3.startOf(unit).diff(start5.startOf(unit), unit).get(unit);
        } else return 0;
      } else {
        return end3.diff(start5, unit).get(unit);
      }
    }, "differ");
    if (opts.unit) {
      return format4(differ(opts.unit), opts.unit);
    }
    for (const unit of opts.units) {
      const count = differ(unit);
      if (Math.abs(count) >= 1) {
        return format4(count, unit);
      }
    }
    return format4(start5 > end3 ? -0 : 0, opts.units[opts.units.length - 1]);
  }
  __name(diffRelative2, "diffRelative");
  function lastOpts2(argList) {
    let opts = {}, args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
      opts = argList[argList.length - 1];
      args = Array.from(argList).slice(0, argList.length - 1);
    } else {
      args = Array.from(argList);
    }
    return [opts, args];
  }
  __name(lastOpts2, "lastOpts");
  var _DateTime2 = class _DateTime2 {
    /**
     * @access private
     */
    constructor(config3) {
      const zone = config3.zone || Settings2.defaultZone;
      let invalid = config3.invalid || (Number.isNaN(config3.ts) ? new Invalid2("invalid input") : null) || (!zone.isValid ? unsupportedZone2(zone) : null);
      this.ts = isUndefined3(config3.ts) ? Settings2.now() : config3.ts;
      let c6 = null, o18 = null;
      if (!invalid) {
        const unchanged = config3.old && config3.old.ts === this.ts && config3.old.zone.equals(zone);
        if (unchanged) {
          [c6, o18] = [config3.old.c, config3.old.o];
        } else {
          const ot3 = zone.offset(this.ts);
          c6 = tsToObj2(this.ts, ot3);
          invalid = Number.isNaN(c6.year) ? new Invalid2("invalid input") : null;
          c6 = invalid ? null : c6;
          o18 = invalid ? null : ot3;
        }
      }
      this._zone = zone;
      this.loc = config3.loc || Locale2.create();
      this.invalid = invalid;
      this.weekData = null;
      this.c = c6;
      this.o = o18;
      this.isLuxonDateTime = true;
    }
    // CONSTRUCT
    /**
     * Create a DateTime for the current instant, in the system's time zone.
     *
     * Use Settings to override these default values if needed.
     * @example DateTime.now().toISO() //~> now in the ISO format
     * @return {DateTime}
     */
    static now() {
      return new _DateTime2({});
    }
    /**
     * Create a local DateTime
     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month, 1-indexed
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                                  //~> now
     * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
     * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
     * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
     * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */
    static local() {
      const [opts, args] = lastOpts2(arguments), [year, month, day, hour, minute, second, millisecond] = args;
      return quickDT2({ year, month, day, hour, minute, second, millisecond }, opts);
    }
    /**
     * Create a DateTime in UTC
     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @param {Object} options - configuration options for the DateTime
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @example DateTime.utc()                                              //~> now
     * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
     * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
     * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
     * @return {DateTime}
     */
    static utc() {
      const [opts, args] = lastOpts2(arguments), [year, month, day, hour, minute, second, millisecond] = args;
      opts.zone = FixedOffsetZone2.utcInstance;
      return quickDT2({ year, month, day, hour, minute, second, millisecond }, opts);
    }
    /**
     * Create a DateTime from a JavaScript Date object. Uses the default zone.
     * @param {Date} date - a JavaScript Date object
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @return {DateTime}
     */
    static fromJSDate(date, options = {}) {
      const ts3 = isDate2(date) ? date.valueOf() : NaN;
      if (Number.isNaN(ts3)) {
        return _DateTime2.invalid("invalid input");
      }
      const zoneToUse = normalizeZone2(options.zone, Settings2.defaultZone);
      if (!zoneToUse.isValid) {
        return _DateTime2.invalid(unsupportedZone2(zoneToUse));
      }
      return new _DateTime2({
        ts: ts3,
        zone: zoneToUse,
        loc: Locale2.fromObject(options)
      });
    }
    /**
     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} milliseconds - a number of milliseconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromMillis(milliseconds, options = {}) {
      if (!isNumber2(milliseconds)) {
        throw new InvalidArgumentError2(
          `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
        );
      } else if (milliseconds < -MAX_DATE2 || milliseconds > MAX_DATE2) {
        return _DateTime2.invalid("Timestamp out of range");
      } else {
        return new _DateTime2({
          ts: milliseconds,
          zone: normalizeZone2(options.zone, Settings2.defaultZone),
          loc: Locale2.fromObject(options)
        });
      }
    }
    /**
     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} seconds - a number of seconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromSeconds(seconds, options = {}) {
      if (!isNumber2(seconds)) {
        throw new InvalidArgumentError2("fromSeconds requires a numerical input");
      } else {
        return new _DateTime2({
          ts: seconds * 1e3,
          zone: normalizeZone2(options.zone, Settings2.defaultZone),
          loc: Locale2.fromObject(options)
        });
      }
    }
    /**
     * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.year - a year, such as 1987
     * @param {number} obj.month - a month, 1-12
     * @param {number} obj.day - a day of the month, 1-31, depending on the month
     * @param {number} obj.ordinal - day of the year, 1-365 or 366
     * @param {number} obj.weekYear - an ISO week year
     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
     * @param {number} obj.hour - hour of the day, 0-23
     * @param {number} obj.minute - minute of the hour, 0-59
     * @param {number} obj.second - second of the minute, 0-59
     * @param {number} obj.millisecond - millisecond of the second, 0-999
     * @param {Object} opts - options for creating this DateTime
     * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
     * @return {DateTime}
     */
    static fromObject(obj, opts = {}) {
      obj = obj || {};
      const zoneToUse = normalizeZone2(opts.zone, Settings2.defaultZone);
      if (!zoneToUse.isValid) {
        return _DateTime2.invalid(unsupportedZone2(zoneToUse));
      }
      const tsNow = Settings2.now(), offsetProvis = !isUndefined3(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), normalized = normalizeObject2(obj, normalizeUnit2), containsOrdinal = !isUndefined3(normalized.ordinal), containsGregorYear = !isUndefined3(normalized.year), containsGregorMD = !isUndefined3(normalized.month) || !isUndefined3(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber, loc = Locale2.fromObject(opts);
      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError2(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }
      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError2("Can't mix ordinal dates with month/day");
      }
      const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
      let units, defaultValues, objNow = tsToObj2(tsNow, offsetProvis);
      if (useWeekData) {
        units = orderedWeekUnits2;
        defaultValues = defaultWeekUnitValues2;
        objNow = gregorianToWeek2(objNow);
      } else if (containsOrdinal) {
        units = orderedOrdinalUnits2;
        defaultValues = defaultOrdinalUnitValues2;
        objNow = gregorianToOrdinal2(objNow);
      } else {
        units = orderedUnits4;
        defaultValues = defaultUnitValues2;
      }
      let foundFirst = false;
      for (const u10 of units) {
        const v4 = normalized[u10];
        if (!isUndefined3(v4)) {
          foundFirst = true;
        } else if (foundFirst) {
          normalized[u10] = defaultValues[u10];
        } else {
          normalized[u10] = objNow[u10];
        }
      }
      const higherOrderInvalid = useWeekData ? hasInvalidWeekData2(normalized) : containsOrdinal ? hasInvalidOrdinalData2(normalized) : hasInvalidGregorianData2(normalized), invalid = higherOrderInvalid || hasInvalidTimeData2(normalized);
      if (invalid) {
        return _DateTime2.invalid(invalid);
      }
      const gregorian = useWeekData ? weekToGregorian2(normalized) : containsOrdinal ? ordinalToGregorian2(normalized) : normalized, [tsFinal, offsetFinal] = objToTS2(gregorian, offsetProvis, zoneToUse), inst = new _DateTime2({
        ts: tsFinal,
        zone: zoneToUse,
        o: offsetFinal,
        loc
      });
      if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
        return _DateTime2.invalid(
          "mismatched weekday",
          `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
        );
      }
      return inst;
    }
    /**
     * Create a DateTime from an ISO 8601 string
     * @param {string} text - the ISO string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromISO('2016-05-25T09:08:34.123')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
     * @example DateTime.fromISO('2016-W05-4')
     * @return {DateTime}
     */
    static fromISO(text, opts = {}) {
      const [vals, parsedZone] = parseISODate2(text);
      return parseDataToDateTime2(vals, parsedZone, opts, "ISO 8601", text);
    }
    /**
     * Create a DateTime from an RFC 2822 string
     * @param {string} text - the RFC 2822 string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
     * @return {DateTime}
     */
    static fromRFC2822(text, opts = {}) {
      const [vals, parsedZone] = parseRFC2822Date2(text);
      return parseDataToDateTime2(vals, parsedZone, opts, "RFC 2822", text);
    }
    /**
     * Create a DateTime from an HTTP header date
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @param {string} text - the HTTP header date
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
     * @return {DateTime}
     */
    static fromHTTP(text, opts = {}) {
      const [vals, parsedZone] = parseHTTPDate2(text);
      return parseDataToDateTime2(vals, parsedZone, opts, "HTTP", opts);
    }
    /**
     * Create a DateTime from an input string and format string.
     * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromFormat(text, fmt, opts = {}) {
      if (isUndefined3(text) || isUndefined3(fmt)) {
        throw new InvalidArgumentError2("fromFormat requires an input string and a format");
      }
      const { locale: locale2 = null, numberingSystem = null } = opts, localeToUse = Locale2.fromOpts({
        locale: locale2,
        numberingSystem,
        defaultToEN: true
      }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens2(localeToUse, text, fmt);
      if (invalid) {
        return _DateTime2.invalid(invalid);
      } else {
        return parseDataToDateTime2(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
      }
    }
    /**
     * @deprecated use fromFormat instead
     */
    static fromString(text, fmt, opts = {}) {
      return _DateTime2.fromFormat(text, fmt, opts);
    }
    /**
     * Create a DateTime from a SQL date, time, or datetime
     * Defaults to en-US if no locale has been specified, regardless of the system's locale
     * @param {string} text - the string to parse
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @example DateTime.fromSQL('2017-05-15')
     * @example DateTime.fromSQL('2017-05-15 09:12:34')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
     * @example DateTime.fromSQL('09:12:34.342')
     * @return {DateTime}
     */
    static fromSQL(text, opts = {}) {
      const [vals, parsedZone] = parseSQL2(text);
      return parseDataToDateTime2(vals, parsedZone, opts, "SQL", text);
    }
    /**
     * Create an invalid DateTime.
     * @param {DateTime} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {DateTime}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError2("need to specify a reason the DateTime is invalid");
      }
      const invalid = reason instanceof Invalid2 ? reason : new Invalid2(reason, explanation);
      if (Settings2.throwOnInvalid) {
        throw new InvalidDateTimeError2(invalid);
      } else {
        return new _DateTime2({ invalid });
      }
    }
    /**
     * Check if an object is an instance of DateTime. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDateTime(o18) {
      return o18 && o18.isLuxonDateTime || false;
    }
    /**
     * Produce the format string for a set of options
     * @param formatOpts
     * @param localeOpts
     * @returns {string}
     */
    static parseFormatForOpts(formatOpts, localeOpts = {}) {
      const tokenList = formatOptsToTokens2(formatOpts, Locale2.fromObject(localeOpts));
      return !tokenList ? null : tokenList.map((t21) => t21 ? t21.val : null).join("");
    }
    /**
     * Produce the the fully expanded format token for the locale
     * Does NOT quote characters, so quoted tokens will not round trip correctly
     * @param fmt
     * @param localeOpts
     * @returns {string}
     */
    static expandFormat(fmt, localeOpts = {}) {
      const expanded = expandMacroTokens2(Formatter2.parseFormat(fmt), Locale2.fromObject(localeOpts));
      return expanded.map((t21) => t21.val).join("");
    }
    // INFO
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
     * @return {number}
     */
    get(unit) {
      return this[unit];
    }
    /**
     * Returns whether the DateTime is valid. Invalid DateTimes occur when:
     * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
     * * The DateTime was created by an operation on another invalid date
     * @type {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */
    get outputCalendar() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */
    get zone() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */
    get zoneName() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */
    get year() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */
    get quarter() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */
    get month() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */
    get day() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */
    get hour() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */
    get minute() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */
    get second() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */
    get millisecond() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */
    get weekYear() {
      return this.isValid ? possiblyCachedWeekData2(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */
    get weekNumber() {
      return this.isValid ? possiblyCachedWeekData2(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */
    get weekday() {
      return this.isValid ? possiblyCachedWeekData2(this).weekday : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */
    get ordinal() {
      return this.isValid ? gregorianToOrdinal2(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */
    get monthShort() {
      return this.isValid ? Info2.months("short", { locObj: this.loc })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */
    get monthLong() {
      return this.isValid ? Info2.months("long", { locObj: this.loc })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */
    get weekdayShort() {
      return this.isValid ? Info2.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */
    get weekdayLong() {
      return this.isValid ? Info2.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */
    get offset() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameShort() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameLong() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */
    get isOffsetFixed() {
      return this.isValid ? this.zone.isUniversal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */
    get isInDST() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
      }
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */
    get isInLeapYear() {
      return isLeapYear2(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */
    get daysInMonth() {
      return daysInMonth2(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */
    get daysInYear() {
      return this.isValid ? daysInYear2(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */
    get weeksInWeekYear() {
      return this.isValid ? weeksInWeekYear2(this.weekYear) : NaN;
    }
    /**
     * Returns the resolved Intl options for this DateTime.
     * This is useful in understanding the behavior of formatting methods
     * @param {Object} opts - the same options as toLocaleString
     * @return {Object}
     */
    resolvedLocaleOptions(opts = {}) {
      const { locale: locale2, numberingSystem, calendar } = Formatter2.create(
        this.loc.clone(opts),
        opts
      ).resolvedOptions(this);
      return { locale: locale2, numberingSystem, outputCalendar: calendar };
    }
    // TRANSFORM
    /**
     * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
     *
     * Equivalent to {@link DateTime#setZone}('utc')
     * @param {number} [offset=0] - optionally, an offset from UTC in minutes
     * @param {Object} [opts={}] - options to pass to `setZone()`
     * @return {DateTime}
     */
    toUTC(offset5 = 0, opts = {}) {
      return this.setZone(FixedOffsetZone2.instance(offset5), opts);
    }
    /**
     * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
     *
     * Equivalent to `setZone('local')`
     * @return {DateTime}
     */
    toLocal() {
      return this.setZone(Settings2.defaultZone);
    }
    /**
     * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
     *
     * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
     * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
     * @param {Object} opts - options
     * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
     * @return {DateTime}
     */
    setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
      zone = normalizeZone2(zone, Settings2.defaultZone);
      if (zone.equals(this.zone)) {
        return this;
      } else if (!zone.isValid) {
        return _DateTime2.invalid(unsupportedZone2(zone));
      } else {
        let newTS = this.ts;
        if (keepLocalTime || keepCalendarTime) {
          const offsetGuess = zone.offset(this.ts);
          const asObj = this.toObject();
          [newTS] = objToTS2(asObj, offsetGuess, zone);
        }
        return clone4(this, { ts: newTS, zone });
      }
    }
    /**
     * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
     * @param {Object} properties - the properties to set
     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
     * @return {DateTime}
     */
    reconfigure({ locale: locale2, numberingSystem, outputCalendar } = {}) {
      const loc = this.loc.clone({ locale: locale2, numberingSystem, outputCalendar });
      return clone4(this, { loc });
    }
    /**
     * "Set" the locale. Returns a newly-constructed DateTime.
     * Just a convenient alias for reconfigure({ locale })
     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
     * @return {DateTime}
     */
    setLocale(locale2) {
      return this.reconfigure({ locale: locale2 });
    }
    /**
     * "Set" the values of specified units. Returns a newly-constructed DateTime.
     * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
     * @param {Object} values - a mapping of units to numbers
     * @example dt.set({ year: 2017 })
     * @example dt.set({ hour: 8, minute: 30 })
     * @example dt.set({ weekday: 5 })
     * @example dt.set({ year: 2005, ordinal: 234 })
     * @return {DateTime}
     */
    set(values) {
      if (!this.isValid) return this;
      const normalized = normalizeObject2(values, normalizeUnit2), settingWeekStuff = !isUndefined3(normalized.weekYear) || !isUndefined3(normalized.weekNumber) || !isUndefined3(normalized.weekday), containsOrdinal = !isUndefined3(normalized.ordinal), containsGregorYear = !isUndefined3(normalized.year), containsGregorMD = !isUndefined3(normalized.month) || !isUndefined3(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError2(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }
      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError2("Can't mix ordinal dates with month/day");
      }
      let mixed;
      if (settingWeekStuff) {
        mixed = weekToGregorian2({ ...gregorianToWeek2(this.c), ...normalized });
      } else if (!isUndefined3(normalized.ordinal)) {
        mixed = ordinalToGregorian2({ ...gregorianToOrdinal2(this.c), ...normalized });
      } else {
        mixed = { ...this.toObject(), ...normalized };
        if (isUndefined3(normalized.day)) {
          mixed.day = Math.min(daysInMonth2(mixed.year, mixed.month), mixed.day);
        }
      }
      const [ts3, o18] = objToTS2(mixed, this.o, this.zone);
      return clone4(this, { ts: ts3, o: o18 });
    }
    /**
     * Add a period of time to this DateTime and return the resulting DateTime
     *
     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @example DateTime.now().plus(123) //~> in 123 milliseconds
     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
     * @return {DateTime}
     */
    plus(duration) {
      if (!this.isValid) return this;
      const dur = Duration2.fromDurationLike(duration);
      return clone4(this, adjustTime2(this, dur));
    }
    /**
     * Subtract a period of time to this DateTime and return the resulting DateTime
     * See {@link DateTime#plus}
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     @return {DateTime}
     */
    minus(duration) {
      if (!this.isValid) return this;
      const dur = Duration2.fromDurationLike(duration).negate();
      return clone4(this, adjustTime2(this, dur));
    }
    /**
     * "Set" this DateTime to the beginning of a unit of time.
     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
     * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
     * @return {DateTime}
     */
    startOf(unit) {
      if (!this.isValid) return this;
      const o18 = {}, normalizedUnit = Duration2.normalizeUnit(unit);
      switch (normalizedUnit) {
        case "years":
          o18.month = 1;
        // falls through
        case "quarters":
        case "months":
          o18.day = 1;
        // falls through
        case "weeks":
        case "days":
          o18.hour = 0;
        // falls through
        case "hours":
          o18.minute = 0;
        // falls through
        case "minutes":
          o18.second = 0;
        // falls through
        case "seconds":
          o18.millisecond = 0;
          break;
        case "milliseconds":
          break;
      }
      if (normalizedUnit === "weeks") {
        o18.weekday = 1;
      }
      if (normalizedUnit === "quarters") {
        const q3 = Math.ceil(this.month / 3);
        o18.month = (q3 - 1) * 3 + 1;
      }
      return this.set(o18);
    }
    /**
     * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
     * @return {DateTime}
     */
    endOf(unit) {
      return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit).minus(1) : this;
    }
    // OUTPUT
    /**
     * Returns a string representation of this DateTime formatted according to the specified format string.
     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @param {string} fmt - the format string
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
     * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      return this.isValid ? Formatter2.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID6;
    }
    /**
     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
     * of the DateTime in the assigned locale.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toLocaleString(); //=> 4/20/2017
     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT2, opts = {}) {
      return this.isValid ? Formatter2.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID6;
    }
    /**
     * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
     * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
     * @example DateTime.now().toLocaleParts(); //=> [
     *                                   //=>   { type: 'day', value: '25' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'month', value: '05' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'year', value: '1982' }
     *                                   //=> ]
     */
    toLocaleParts(opts = {}) {
      return this.isValid ? Formatter2.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
     * @return {string}
     */
    toISO({
      format: format4 = "extended",
      suppressSeconds = false,
      suppressMilliseconds = false,
      includeOffset = true,
      extendedZone = false
    } = {}) {
      if (!this.isValid) {
        return null;
      }
      const ext = format4 === "extended";
      let c6 = toISODate2(this, ext);
      c6 += "T";
      c6 += toISOTime2(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
      return c6;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's date component
     * @param {Object} opts - options
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
     * @return {string}
     */
    toISODate({ format: format4 = "extended" } = {}) {
      if (!this.isValid) {
        return null;
      }
      return toISODate2(this, format4 === "extended");
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's week date
     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
     * @return {string}
     */
    toISOWeekDate() {
      return toTechFormat2(this, "kkkk-'W'WW-c");
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's time component
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
     * @return {string}
     */
    toISOTime({
      suppressMilliseconds = false,
      suppressSeconds = false,
      includeOffset = true,
      includePrefix = false,
      extendedZone = false,
      format: format4 = "extended"
    } = {}) {
      if (!this.isValid) {
        return null;
      }
      let c6 = includePrefix ? "T" : "";
      return c6 + toISOTime2(
        this,
        format4 === "extended",
        suppressSeconds,
        suppressMilliseconds,
        includeOffset,
        extendedZone
      );
    }
    /**
     * Returns an RFC 2822-compatible string representation of this DateTime
     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
     * @return {string}
     */
    toRFC2822() {
      return toTechFormat2(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
     * Specifically, the string conforms to RFC 1123.
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
     * @return {string}
     */
    toHTTP() {
      return toTechFormat2(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Date
     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
     * @return {string}
     */
    toSQLDate() {
      if (!this.isValid) {
        return null;
      }
      return toISODate2(this, true);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Time
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc().toSQL() //=> '05:15:16.345'
     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
     * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
     * @return {string}
     */
    toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
      let fmt = "HH:mm:ss.SSS";
      if (includeZone || includeOffset) {
        if (includeOffsetSpace) {
          fmt += " ";
        }
        if (includeZone) {
          fmt += "z";
        } else if (includeOffset) {
          fmt += "ZZ";
        }
      }
      return toTechFormat2(this, fmt, true);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
     * @return {string}
     */
    toSQL(opts = {}) {
      if (!this.isValid) {
        return null;
      }
      return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
    }
    /**
     * Returns a string representation of this DateTime appropriate for debugging
     * @return {string}
     */
    toString() {
      return this.isValid ? this.toISO() : INVALID6;
    }
    /**
     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }
    /**
     * Returns the epoch milliseconds of this DateTime.
     * @return {number}
     */
    toMillis() {
      return this.isValid ? this.ts : NaN;
    }
    /**
     * Returns the epoch seconds of this DateTime.
     * @return {number}
     */
    toSeconds() {
      return this.isValid ? this.ts / 1e3 : NaN;
    }
    /**
     * Returns the epoch seconds (as a whole number) of this DateTime.
     * @return {number}
     */
    toUnixInteger() {
      return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
    }
    /**
     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }
    /**
     * Returns a BSON serializable equivalent to this DateTime.
     * @return {Date}
     */
    toBSON() {
      return this.toJSDate();
    }
    /**
     * Returns a JavaScript object with this DateTime's year, month, day, and so on.
     * @param opts - options for generating the object
     * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
     * @return {Object}
     */
    toObject(opts = {}) {
      if (!this.isValid) return {};
      const base = { ...this.c };
      if (opts.includeConfig) {
        base.outputCalendar = this.outputCalendar;
        base.numberingSystem = this.loc.numberingSystem;
        base.locale = this.loc.locale;
      }
      return base;
    }
    /**
     * Returns a JavaScript Date equivalent to this DateTime.
     * @return {Date}
     */
    toJSDate() {
      return new Date(this.isValid ? this.ts : NaN);
    }
    // COMPARE
    /**
     * Return the difference between two DateTimes as a Duration.
     * @param {DateTime} otherDateTime - the DateTime to compare this one to
     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example
     * var i1 = DateTime.fromISO('1982-05-25T09:45'),
     *     i2 = DateTime.fromISO('1983-10-14T10:30');
     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
     * @return {Duration}
     */
    diff(otherDateTime, unit = "milliseconds", opts = {}) {
      if (!this.isValid || !otherDateTime.isValid) {
        return Duration2.invalid("created by diffing an invalid DateTime");
      }
      const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
      const units = maybeArray2(unit).map(Duration2.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default2(earlier, later, units, durOpts);
      return otherIsLater ? diffed.negate() : diffed;
    }
    /**
     * Return the difference between this DateTime and right now.
     * See {@link DateTime#diff}
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    diffNow(unit = "milliseconds", opts = {}) {
      return this.diff(_DateTime2.now(), unit, opts);
    }
    /**
     * Return an Interval spanning between this DateTime and another DateTime
     * @param {DateTime} otherDateTime - the other end point of the Interval
     * @return {Interval}
     */
    until(otherDateTime) {
      return this.isValid ? Interval2.fromDateTimes(this, otherDateTime) : this;
    }
    /**
     * Return whether this DateTime is in the same unit of time as another DateTime.
     * Higher-order units must also be identical for this function to return `true`.
     * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
     * @param {DateTime} otherDateTime - the other DateTime
     * @param {string} unit - the unit of time to check sameness on
     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
     * @return {boolean}
     */
    hasSame(otherDateTime, unit) {
      if (!this.isValid) return false;
      const inputMs = otherDateTime.valueOf();
      const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
      return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
    }
    /**
     * Equality check
     * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
     * To compare just the millisecond values, use `+dt1 === +dt2`.
     * @param {DateTime} other - the other DateTime
     * @return {boolean}
     */
    equals(other) {
      return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
    }
    /**
     * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
     * platform supports Intl.RelativeTimeFormat. Rounds down by default.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
     * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
     * @param {boolean} [options.round=true] - whether to round the numbers in the output.
     * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
     * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
     */
    toRelative(options = {}) {
      if (!this.isValid) return null;
      const base = options.base || _DateTime2.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
      let units = ["years", "months", "days", "hours", "minutes", "seconds"];
      let unit = options.unit;
      if (Array.isArray(options.unit)) {
        units = options.unit;
        unit = void 0;
      }
      return diffRelative2(base, this.plus(padding), {
        ...options,
        numeric: "always",
        units,
        unit
      });
    }
    /**
     * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
     * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
     */
    toRelativeCalendar(options = {}) {
      if (!this.isValid) return null;
      return diffRelative2(options.base || _DateTime2.fromObject({}, { zone: this.zone }), this, {
        ...options,
        numeric: "auto",
        units: ["years", "months", "days"],
        calendary: true
      });
    }
    /**
     * Return the min of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
     * @return {DateTime} the min DateTime, or undefined if called with no argument
     */
    static min(...dateTimes) {
      if (!dateTimes.every(_DateTime2.isDateTime)) {
        throw new InvalidArgumentError2("min requires all arguments be DateTimes");
      }
      return bestBy2(dateTimes, (i12) => i12.valueOf(), Math.min);
    }
    /**
     * Return the max of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
     * @return {DateTime} the max DateTime, or undefined if called with no argument
     */
    static max(...dateTimes) {
      if (!dateTimes.every(_DateTime2.isDateTime)) {
        throw new InvalidArgumentError2("max requires all arguments be DateTimes");
      }
      return bestBy2(dateTimes, (i12) => i12.valueOf(), Math.max);
    }
    // MISC
    /**
     * Explain how a string would be parsed by fromFormat()
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see description)
     * @param {Object} options - options taken by fromFormat()
     * @return {Object}
     */
    static fromFormatExplain(text, fmt, options = {}) {
      const { locale: locale2 = null, numberingSystem = null } = options, localeToUse = Locale2.fromOpts({
        locale: locale2,
        numberingSystem,
        defaultToEN: true
      });
      return explainFromTokens2(localeToUse, text, fmt);
    }
    /**
     * @deprecated use fromFormatExplain instead
     */
    static fromStringExplain(text, fmt, options = {}) {
      return _DateTime2.fromFormatExplain(text, fmt, options);
    }
    // FORMAT PRESETS
    /**
     * {@link DateTime#toLocaleString} format like 10/14/1983
     * @type {Object}
     */
    static get DATE_SHORT() {
      return DATE_SHORT2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED() {
      return DATE_MED2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED_WITH_WEEKDAY() {
      return DATE_MED_WITH_WEEKDAY2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */
    static get DATE_FULL() {
      return DATE_FULL2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */
    static get DATE_HUGE() {
      return DATE_HUGE2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_SIMPLE() {
      return TIME_SIMPLE2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SECONDS() {
      return TIME_WITH_SECONDS2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SHORT_OFFSET() {
      return TIME_WITH_SHORT_OFFSET2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_LONG_OFFSET() {
      return TIME_WITH_LONG_OFFSET2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_SIMPLE() {
      return TIME_24_SIMPLE2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SECONDS() {
      return TIME_24_WITH_SECONDS2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SHORT_OFFSET() {
      return TIME_24_WITH_SHORT_OFFSET2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_LONG_OFFSET() {
      return TIME_24_WITH_LONG_OFFSET2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT() {
      return DATETIME_SHORT2;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT_WITH_SECONDS() {
      return DATETIME_SHORT_WITH_SECONDS2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED() {
      return DATETIME_MED2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_SECONDS() {
      return DATETIME_MED_WITH_SECONDS2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_WEEKDAY() {
      return DATETIME_MED_WITH_WEEKDAY2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL() {
      return DATETIME_FULL2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL_WITH_SECONDS() {
      return DATETIME_FULL_WITH_SECONDS2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE() {
      return DATETIME_HUGE2;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE_WITH_SECONDS() {
      return DATETIME_HUGE_WITH_SECONDS2;
    }
  };
  __name(_DateTime2, "DateTime");
  var DateTime2 = _DateTime2;
  function friendlyDateTime2(dateTimeish) {
    if (DateTime2.isDateTime(dateTimeish)) {
      return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber2(dateTimeish.valueOf())) {
      return DateTime2.fromJSDate(dateTimeish);
    } else if (dateTimeish && typeof dateTimeish === "object") {
      return DateTime2.fromObject(dateTimeish);
    } else {
      throw new InvalidArgumentError2(
        `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
      );
    }
  }
  __name(friendlyDateTime2, "friendlyDateTime");

  // ../../contrib/hdbt/src/js/react/common/Collapsible.tsx
  var import_react65 = __toESM(require_react());

  // ../../contrib/hdbt/src/js/react/common/Icon.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function Icon(props) {
    const {
      icon,
      className,
      label,
      onClick
    } = props;
    const iconLabelledBy = `hdbt-icon--${Math.floor(Math.random() * 99999)}`;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "span",
      {
        className: `hel-icon hel-icon--${icon} ${typeof className !== "undefined" ? className : ""}`,
        "aria-labelledby": label && iconLabelledBy,
        "aria-hidden": label ? "true" : "false",
        onClick,
        children: label && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "is-hidden", id: iconLabelledBy, children: label })
      }
    );
  }
  __name(Icon, "Icon");
  var Icon_default = Icon;

  // ../../contrib/hdbt/src/js/react/common/hooks/useOutsideClick.tsx
  var import_react64 = __toESM(require_react());
  var useOutsideClick = /* @__PURE__ */ __name((ref, callback) => {
    (0, import_react64.useEffect)(() => {
      const handleClick = /* @__PURE__ */ __name((event) => {
        if (ref.current && !ref.current.contains(event.target)) {
          callback();
        }
      }, "handleClick");
      document.addEventListener("click", handleClick);
      document.addEventListener("focusin", handleClick);
      return () => {
        document.removeEventListener("click", handleClick);
        document.removeEventListener("focusin", handleClick);
      };
    });
  }, "useOutsideClick");
  var useOutsideClick_default = useOutsideClick;

  // ../../contrib/hdbt/src/js/react/common/Collapsible.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  function Collapsible({ active, ariaControls, dialogLabel, helper, id, label, title, children, showHandle }) {
    const [isActive, setActive] = (0, import_react65.useState)(active || false);
    const ref = (0, import_react65.useRef)(null);
    const helperIds = [
      helper ? `${id}-helper` : void 0,
      `${id}-title`
    ].filter(Boolean);
    const getHandle = /* @__PURE__ */ __name(() => {
      if (showHandle !== false) {
        return isActive ? /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Icon_default, { icon: "angle-up", className: "collapsible__handle", onClick: () => setActive(!isActive) }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(Icon_default, { icon: "angle-down", className: "collapsible__handle", onClick: () => setActive(!isActive) });
      }
    }, "getHandle");
    useOutsideClick_default(ref, () => {
      setActive(false);
    });
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "collapsible-wrapper", ref, children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("label", { className: "collapsible__label", htmlFor: id, children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
        "button",
        {
          id,
          type: "button",
          className: "collapsible__element collapsible__control",
          "aria-controls": ariaControls,
          "aria-expanded": isActive,
          "aria-describedby": helperIds.join(" "),
          "aria-haspopup": "dialog",
          onClick: () => setActive(!isActive),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { id: `${id}-title`, className: "collapsible__title", children: title }),
            getHandle()
          ]
        }
      ),
      isActive && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "div",
        {
          className: "collapsible__element collapsible__children",
          role: "dialog",
          "aria-label": dialogLabel,
          children
        }
      ),
      helper && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { id: `${id}-helper`, className: "collapsible__helper", children: helper })
    ] });
  }
  __name(Collapsible, "Collapsible");
  var Collapsible_default = Collapsible;

  // ../../contrib/hdbt/src/js/react/common/helpers/GetDateString.ts
  var getDateString = /* @__PURE__ */ __name(({ startDate, endDate, showLabels }) => {
    if ((!startDate || !startDate.isValid) && (!endDate || !endDate.isValid)) {
      return Drupal.t("All dates", {}, { context: "Events search" });
    }
    if (startDate && startDate.isValid && (!endDate || !endDate.isValid)) {
      if (showLabels) {
        return Drupal.t("From @date", { "@date": startDate.toFormat(HDS_DATE_FORMAT) }, { context: "Events search" });
      }
      return startDate.toFormat(HDS_DATE_FORMAT);
    }
    if ((!startDate || !startDate.isValid) && endDate?.isValid) {
      if (showLabels) {
        return Drupal.t("Until @date", { "@date": endDate.toFormat(HDS_DATE_FORMAT) }, { context: "Events search" });
      }
      return `- ${endDate.toFormat(HDS_DATE_FORMAT)}`;
    }
    if (showLabels) {
      return Drupal.t("From @date until @date2", { "@date": startDate?.toFormat(HDS_DATE_FORMAT), "@date2": endDate?.toFormat(HDS_DATE_FORMAT) }, { context: "Events search" });
    }
    return `${startDate?.toFormat(HDS_DATE_FORMAT) || "unset?"} - ${endDate?.toFormat(HDS_DATE_FORMAT)}`;
  }, "getDateString");
  var GetDateString_default = getDateString;

  // ../../contrib/hdbt/src/js/react/common/DateRangeSelect.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var dateHelperText = Drupal.t("Use the format D.M.YYYY", {}, { context: "React search: date range select" });
  var getDateTimeFromHDSFormat = /* @__PURE__ */ __name((d16) => DateTime2.fromFormat(d16, HDS_DATE_FORMAT, { locale: "fi" }), "getDateTimeFromHDSFormat");
  var isOutOfRange = /* @__PURE__ */ __name(({ endDate, startDate }) => !!(startDate && endDate && startDate.startOf("day") >= endDate.startOf("day")), "isOutOfRange");
  var INVALID_DATE = /* @__PURE__ */ __name((dt3) => {
    if (!dt3) {
      return false;
    }
    if (dt3.year > 9999) {
      return true;
    }
    return !dt3.isValid;
  }, "INVALID_DATE");
  var DateRangeSelect = /* @__PURE__ */ __name(({
    dialogLabel = Drupal.t("Choose date", {}, { context: "React search: date range select" }),
    endDate,
    endDateHelperText = dateHelperText,
    endDateId = "end-date",
    endDateLabel = Drupal.t("Last day of the time period", {}, { context: "React search: date range select" }),
    helperText = Drupal.t("Select a time period for the event", {}, { context: "React search: date range select" }),
    id,
    label,
    language = "fi",
    setEnd,
    setStart,
    startDate,
    startDateHelperText = dateHelperText,
    startDateId = "start-date",
    startDateLabel = Drupal.t("First day of the time period", {}, { context: "React search: date range select" }),
    title
  }) => {
    const [endDisabled, setEndDisabled] = (0, import_react66.useState)(false);
    const [errors, setErrors] = (0, import_react66.useState)({});
    (0, import_react66.useEffect)(() => {
      if (endDisabled && endDate) {
        setEnd(void 0);
      }
    }, [endDate, endDisabled]);
    const collapsibleTitleText = GetDateString_default({
      endDate: endDate ? DateTime2.fromFormat(endDate, HDS_DATE_FORMAT, { locale: "fi" }) : void 0,
      startDate: startDate ? DateTime2.fromFormat(startDate, HDS_DATE_FORMAT, { locale: "fi" }) : void 0
    });
    const collapsibleTitleSRText = GetDateString_default({
      endDate: endDate ? DateTime2.fromFormat(endDate, HDS_DATE_FORMAT, { locale: "fi" }) : void 0,
      startDate: startDate ? DateTime2.fromFormat(startDate, HDS_DATE_FORMAT, { locale: "fi" }) : void 0,
      showLabels: true
    });
    const collapsibleTitleSRLabel = Drupal.t("Selected time period: @period", { "@period": collapsibleTitleSRText }, { context: "React search: date range select" });
    const collapsibleTitle = /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { className: "visually-hidden", children: collapsibleTitleSRLabel }),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("span", { "aria-hidden": "true", children: collapsibleTitleText })
    ] });
    const startDateErrorText = Drupal.t("Invalid start date", {}, { context: "React search: date range select" });
    const endDateErrorText = Drupal.t("Invalid end date", {}, { context: "React search: date range select" });
    const onStartChange = /* @__PURE__ */ __name((d16) => {
      const end3 = endDate ? getDateTimeFromHDSFormat(endDate) : void 0;
      const start5 = getDateTimeFromHDSFormat(d16);
      if (INVALID_DATE(start5)) {
        console.warn("invalid start date", { start: start5, end: end3 });
        if (d16.length === 0) {
          setStart(void 0);
          setErrors({ ...errors, start: void 0 });
        } else {
          setErrors({ ...errors, start: startDateErrorText });
        }
      } else {
        if (isOutOfRange({ startDate: start5, endDate: end3 }) && end3) {
          console.warn("Selected start date is out of range with end date, setting end date to next day after start date.");
          setEnd(start5.plus({ "days": 1 }).toFormat(HDS_DATE_FORMAT));
        }
        setStart(start5.toFormat(HDS_DATE_FORMAT));
        setErrors({ ...errors, start: void 0 });
      }
    }, "onStartChange");
    const onEndChange = /* @__PURE__ */ __name((d16) => {
      const start5 = startDate ? getDateTimeFromHDSFormat(startDate) : void 0;
      const end3 = getDateTimeFromHDSFormat(d16);
      if (INVALID_DATE(end3)) {
        console.warn("invalid end date", { end: end3, d: d16 });
        if (d16.length === 0) {
          setErrors({ ...errors, end: void 0 });
          setEnd(void 0);
        } else {
          setErrors({ ...errors, end: endDateErrorText });
        }
      } else {
        if (isOutOfRange({ startDate: start5, endDate: end3 }) && start5) {
          console.warn("Selected end date is out of range, setting end date to next day after start date.");
          setEnd(start5.plus({ "days": 1 }).toFormat(HDS_DATE_FORMAT));
        } else {
          setEnd(end3.toFormat(HDS_DATE_FORMAT));
        }
        setErrors({ ...errors, end: void 0 });
      }
    }, "onEndChange");
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "hdbt-search__filter hdbt-search--react__dropdown", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Collapsible_default, { ...{ id, label, dialogLabel }, helper: helperText, title: collapsibleTitle, children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "event-form__date-container", children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        Bt2,
        {
          className: "hdbt-search__filter hdbt-search__date-input",
          errorText: errors.start,
          helperText: startDateHelperText,
          id: startDateId,
          invalid: !!errors.start,
          label: startDateLabel,
          language,
          onChange: onStartChange,
          value: startDate
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        v2,
        {
          checked: endDisabled,
          id: "date-range-select__end-date-disabled",
          label: Drupal.t("The last day of the time period is the same as the first day", {}, { context: "React search: date range select" }),
          onChange: () => setEndDisabled(!endDisabled)
        }
      ),
      !endDisabled && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        Bt2,
        {
          className: "hdbt-search__filter hdbt-search__date-input",
          errorText: errors.end,
          helperText: endDateHelperText,
          id: endDateId,
          invalid: !!errors.end,
          label: endDateLabel,
          language,
          onChange: onEndChange,
          value: endDate
        }
      )
    ] }) }) });
  }, "DateRangeSelect");

  // ../../contrib/hdbt/src/js/react/common/FilterButton.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var FilterButton = /* @__PURE__ */ __name(({ value, clearSelection }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    "li",
    {
      className: "content-tags__tags__tag content-tags__tags--interactive",
      children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
        d15,
        {
          className: "hdbt-search__remove-selection-button",
          onDelete: clearSelection,
          size: s19.Large,
          "aria-label": Drupal.t(
            "Remove @item from search results",
            { "@item": value.toString() },
            { context: "Search: remove item aria label" }
          ),
          theme: {
            "--background-color-hover": "var(--hdbt-color-black)",
            "--background-color": "var(--background-color-disabled)",
            /* @ts-ignore */
            "--color-hover": "var(--color-white)",
            "--outline-color": "var(--hdbt-color-black)",
            "--outline-color-hover": "var(--hdbt-color-black)",
            "--border-color-hover": "var(--hdbt-color-black)"
          },
          children: value
        }
      )
    },
    `${value.toString()}`
  ), "FilterButton");
  var FilterButton_default = FilterButton;

  // ../../contrib/hdbt/src/js/react/common/SelectionsWrapper.tsx
  var import_react67 = __toESM(require_react());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var SelectionsWrapper = /* @__PURE__ */ __name(({ showClearButton, resetForm, children }) => {
    const hasContent = typeof children === "string" ? children.trim().length > 0 : import_react67.Children.toArray(children).some((child) => child !== false && child !== void 0);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "hdbt-search__selections-wrapper", children: hasContent && /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("ul", { className: "hdbt-search__selections-container content-tags__tags", children: [
      children,
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("li", { className: "hdbt-search__clear-all", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        u6,
        {
          "aria-hidden": !showClearButton,
          className: "hdbt-search__clear-all-button",
          iconStart: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(s15, { className: "hdbt-search__clear-all-icon" }),
          onClick: resetForm,
          style: showClearButton ? {} : { visibility: "hidden" },
          variant: n14.Supplementary,
          children: Drupal.t("Clear selections", {}, { context: "React search: clear selections" })
        }
      ) })
    ] }) });
  }, "SelectionsWrapper");
  var SelectionsWrapper_default = SelectionsWrapper;

  // src/js/react/apps/allu-decisions-search/containers/FormContainer.tsx
  var import_jsx_runtime6 = __toESM(require_jsx_runtime2());
  var FormContainer = /* @__PURE__ */ __name(({
    typeOptions
  }) => {
    const selections = useAtomValue(selectionsAtom);
    const setSelections = useSetAtom(setSelectionsAtom);
    const [type, setType] = (0, import_react68.useState)(selections.type);
    const [dates, setDates] = (0, import_react68.useState)({
      start: selections.start,
      end: selections.end
    });
    const onSubmit = /* @__PURE__ */ __name((event) => {
      event.preventDefault();
      const form = event.currentTarget;
      const { q: q3 } = form.elements;
      const values = {};
      if (q3?.value.length) {
        values.q = q3.value;
      }
      if (type?.length) {
        values.type = type;
      }
      if (dates.start) {
        values.start = dates.start;
      }
      if (dates.end) {
        values.end = dates.end;
      }
      setSelections(values);
    }, "onSubmit");
    const resetForm = /* @__PURE__ */ __name(() => {
      setSelections(RESET);
      setType(void 0);
      setDates({ start: void 0, end: void 0 });
    }, "resetForm");
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
      "form",
      {
        className: "hdbt-search--react__form-container",
        onSubmit,
        role: "search",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            n6,
            {
              className: "hdbt-search__filter hdbt-search--react__text-field",
              defaultValue: selections.q,
              id: "q",
              label: Drupal.t("Street name", {}, { context: "Allu decision search" }),
              placeholder: Drupal.t("Eg. Mannerheimintie", {}, { context: "Allu decision search" }),
              type: "search"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "hdbt-search--react__dropdown-filters", children: [
            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
              po,
              {
                className: "hdbt-search--react__dropdown",
                clearable: true,
                disabled: !typeOptions,
                multiSelect: true,
                noTags: true,
                onChange: setType,
                options: typeOptions || [],
                texts: {
                  label: Drupal.t("Decision type", {}, { context: "Allu decision search" }),
                  placeholder: Drupal.t("All types", {}, { context: "Allu decision search" })
                },
                value: type
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
              DateRangeSelect,
              {
                endDate: dates.end,
                helperText: Drupal.t("Eg. 5.11.2024 - 10.11.2024", {}, { context: "Allu decision search" }),
                id: "date-range-select",
                label: Drupal.t("Date of decision", {}, { context: "Allu decision search" }),
                title: Drupal.t("Date of decision", {}, { context: "Allu decision search" }),
                setStart: (d16) => setDates({ ...dates, start: d16 }),
                setEnd: (d16) => setDates({ ...dates, end: d16 }),
                startDate: dates.start
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            u,
            {
              className: "hdbt-search--react__submit-button",
              theme: t3.Black,
              type: "submit",
              children: Drupal.t("Search")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
            SelectionsWrapper_default,
            {
              resetForm,
              showClearButton: true,
              children: [
                selections.type && selections.type.map((typeSelection) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                  FilterButton_default,
                  {
                    value: typeSelection.label,
                    clearSelection: () => {
                      const filtered = selections.type?.filter((currentType) => currentType.value !== typeSelection.value);
                      const newValue = !filtered || !filtered.length ? void 0 : filtered;
                      setSelections({
                        type: newValue
                      }, true);
                      setType(newValue);
                    }
                  },
                  typeSelection.value
                )),
                (selections.start || selections.end) && /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                  FilterButton_default,
                  {
                    clearSelection: () => {
                      setSelections({
                        start: void 0,
                        end: void 0
                      }, true);
                      setDates({ start: void 0, end: void 0 });
                    },
                    value: `${selections.start || ""} - ${selections.end || ""}`
                  }
                )
              ]
            }
          )
        ]
      }
    );
  }, "FormContainer");

  // src/js/react/apps/allu-decisions-search/containers/ResultsContainer.tsx
  var import_react74 = __toESM(require_react());

  // ../../contrib/hdbt/node_modules/html-react-parser/esm/index.mjs
  var import_lib = __toESM(require_lib9(), 1);
  var import_lib2 = __toESM(require_lib9(), 1);
  var esm_default = import_lib.default.default || import_lib.default;

  // ../../contrib/hdbt/src/js/react/common/Tags.tsx
  var import_react69 = __toESM(require_react());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  function Tags({ tags, isInteractive, langAttribute, insideCard }) {
    const typeClass = isInteractive ? "content-tags__tags--interactive" : "content-tags__tags--static";
    const Element3 = insideCard ? "div" : "section";
    return import_react69.default.createElement(
      Element3,
      {
        className: "content-tags content-tags--card",
        "aria-label": Drupal.t("Tags", {}, { context: "Label for screen reader software users explaining that this is a list of tags related to this page." }),
        role: insideCard ? "group" : void 0
        // When inside a card, use role="group" to group the tags together.
      },
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("ul", { className: `content-tags__tags ${typeClass}`, children: tags.map(
        (item, key) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("li", { className: "content-tags__tags__tag", ...langAttribute, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
          d15,
          {
            className: `${item.color ? `content-tags__tags__tag--${item.color}` : ""}`,
            children: item.tag
          }
        ) }, `{item.tag}-${key}`)
      ) })
    );
  }
  __name(Tags, "Tags");
  var Tags_default = Tags;

  // ../../contrib/hdbt/src/js/react/common/ExternalLink.tsx
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var ExternalLink = /* @__PURE__ */ __name(({
    href,
    title,
    className,
    "data-hds-component": dataHdsComponent,
    "data-hds-variant": dataHdsVariant,
    rel
  }) => {
    const dataAttributes = {
      ...dataHdsComponent && { "data-hds-component": dataHdsComponent },
      ...dataHdsVariant && { "data-hds-variant": dataHdsVariant }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
      "a",
      {
        href,
        className,
        "data-is-external": "true",
        ...dataAttributes,
        rel,
        children: [
          title,
          !dataHdsComponent && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "link__type link__type--external" }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "visually-hidden", children: Drupal.t(
            "Link leads to external service",
            {},
            { context: "Explanation for screen-reader software that the icon visible next to this link means that the link leads to an external service." }
          ) })
        ]
      }
    );
  }, "ExternalLink");
  var ExternalLink_default = ExternalLink;

  // ../../contrib/hdbt/src/js/react/common/Card.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var Metarow = /* @__PURE__ */ __name(({ icon, label, content, langAttribute }) => /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "card__meta", children: [
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "card__meta__icon", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Icon_default, { icon }) }),
    /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("span", { className: "card__meta__label", children: [
      label,
      ": "
    ] }),
    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "card__meta__content", ...langAttribute, children: content })
  ] }), "Metarow");
  function CardItem({
    cardCategoryTag,
    cardDescription,
    cardDescriptionHtml,
    cardHelptext,
    cardHelptextHtml,
    cardImage,
    cardModifierClass,
    cardTags,
    cardTitle,
    cardTitleLevel,
    cardUrl,
    cardUrlExternal = false,
    date,
    dateLabel,
    daterange,
    dateRangeLabel,
    distance,
    langAttribute,
    language,
    languageEducation,
    languageLabel,
    location,
    locationLabel,
    registrationRequired,
    signUp,
    theme,
    themeLabel,
    time,
    timeLabel,
    weightedEducation
  }) {
    const cardClass = `
    card
    ${cardModifierClass ? ` ${cardModifierClass}` : ""}
    ${cardUrlExternal ? " card--external" : ""}
  `;
    const HeadingTag = cardTitleLevel ? `h${cardTitleLevel}` : "h4";
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: cardClass, children: [
      cardImage && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "card__image", children: cardImage }),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "card__text", children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(HeadingTag, { className: "card__title", children: !cardUrlExternal ? /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("a", { href: cardUrl, className: "card__link", rel: "bookmark", children: cardTitle }) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ExternalLink_default, { href: cardUrl, title: cardTitle, className: "card__link", rel: "bookmark" }) }),
        cardCategoryTag && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "card__category", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Tags_default, { tags: [cardCategoryTag], insideCard: true }) }),
        cardDescription && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "card__description", children: cardDescriptionHtml ? esm_default(cardDescription) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { ...langAttribute, children: cardDescription }) }),
        cardHelptext && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "card__helptext", children: cardHelptextHtml ? esm_default(cardHelptext) : /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { children: cardHelptext }) }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "card__metas", children: [
          location && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "location", label: locationLabel || Drupal.t("Location", {}, { context: "React search" }), content: location }),
          distance && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "map", label: Drupal.t("Distance", {}, { context: "React search" }), content: distance }),
          date && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "clock", label: dateLabel || Drupal.t("Date", {}, { context: "React search" }), content: date }),
          daterange && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "calendar", label: dateRangeLabel || Drupal.t("Estimated schedule", {}, { context: "React search" }), content: daterange, langAttribute }),
          theme && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "locate", label: themeLabel || Drupal.t("Theme", {}, { context: "React search" }), content: theme }),
          weightedEducation && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "layers", label: Drupal.t("Weighted curriculum education", {}, { context: "TPR Ontologyword details schools" }), content: weightedEducation }),
          languageEducation && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "group", label: Drupal.t("Language offering", {}, { context: "TPR Ontologyword details schools" }), content: languageEducation }),
          language && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "globe", label: languageLabel || Drupal.t("Language", {}, { context: "React search" }), content: language }),
          time && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "calendar", label: timeLabel || Drupal.t("Time", {}, { context: "Time of event" }), content: time }),
          signUp && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "bell", label: Drupal.t("Registration time", {}, { context: "Event signup period" }), content: signUp, langAttribute }),
          registrationRequired && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Metarow, { icon: "info-circle", label: Drupal.t("Additional information", {}, { context: "Event additional information label" }), content: Drupal.t("The event requires registration or a ticket.", {}, { context: "Event additional information value" }) })
        ] }),
        cardTags && cardTags.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "card__tags", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Tags_default, { tags: cardTags, langAttribute, insideCard: true }) })
      ] })
    ] });
  }
  __name(CardItem, "CardItem");
  var Card_default = CardItem;

  // src/js/react/apps/allu-decisions-search/components/ResultCard.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime2());
  var getShortAddress = /* @__PURE__ */ __name((address) => {
    const regex = /(?:^|(?:[.!?]\s))(\w+)/;
    const matches = address.match(regex);
    if (matches && matches.length) {
      return matches[0];
    }
    return null;
  }, "getShortAddress");
  var ResultCard = /* @__PURE__ */ __name(({
    address,
    approval_type,
    document_created,
    document_type,
    label,
    url
  }) => {
    const getCardTitle = /* @__PURE__ */ __name(() => {
      let result = matchTypeLabel(document_type[0]);
      if (address?.length) {
        const shortAddress = getShortAddress(address[0]);
        result = shortAddress ? `${result}, ${shortAddress}` : result;
      }
      return `${result}, ${Drupal.t("identifier", { context: "Allu decision search" })} ${label[0]} (pdf)`;
    }, "getCardTitle");
    const getTime = /* @__PURE__ */ __name(() => {
      if (document_created?.length) {
        const date = new Date(document_created[0] * 1e3);
        return date.toLocaleString("fi-FI", {
          day: "numeric",
          month: "numeric",
          year: "numeric"
        });
      }
    }, "getTime");
    const getFullAddress = /* @__PURE__ */ __name(() => {
      if (!address?.[0]) {
        return "";
      }
      if (address[0].length > 165) {
        return `${address[0].slice(0, 165)}...`;
      }
      return address[0];
    }, "getFullAddress");
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      Card_default,
      {
        cardModifierClass: "card--border",
        cardTags: approval_type?.includes("WORK_FINISHED") ? [{ tag: Drupal.t("Work complete", {}, { context: "Allu decision search" }) }] : [],
        cardTitle: getCardTitle(),
        cardUrl: url?.[0] ?? "",
        location: getFullAddress(),
        locationLabel: Drupal.t("Address", {}, { context: "Allu decision search" }),
        time: getTime(),
        timeLabel: Drupal.t("Date of decision", {}, { context: "Allu decision search" })
      }
    );
  }, "ResultCard");

  // ../../contrib/hdbt/src/js/react/common/Pagination.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var getPagination = /* @__PURE__ */ __name((current, pages, totalPages) => {
    const pagesPerSide = Math.floor(pages / 2);
    let pagesLeft = pagesPerSide * 2;
    const prevPages = [];
    const nextPages = [];
    if (pagesPerSide > 0) {
      for (let i12 = current - 1; prevPages.length < pagesPerSide && i12 >= 1; i12--) {
        prevPages.push(i12);
        pagesLeft -= 1;
      }
      for (let i12 = current + 1; pagesLeft > 0 && i12 <= totalPages; i12++) {
        nextPages.push(i12);
        pagesLeft -= 1;
      }
    }
    prevPages.reverse();
    return {
      prevPages,
      nextPages
    };
  }, "getPagination");
  var Pagination = /* @__PURE__ */ __name(({ updatePage, currentPage, pages, totalPages }) => {
    const { prevPages, nextPages } = getPagination(currentPage, pages, totalPages);
    const prevPageExists = currentPage > 1;
    const nextPageExists = currentPage < totalPages;
    const firstWithinRange = prevPages.includes(1) || !prevPages.length;
    const lastWithinRange = nextPages.includes(totalPages) || !nextPages.length;
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { className: "hds-pagination-container", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
      "nav",
      {
        className: "hds-pagination pager",
        role: "navigation",
        "aria-label": Drupal.t("Pagination", {}, { context: "Pagination aria-label" }),
        "data-next": Drupal.t("Next", {}, { context: "Pagination next page link text" }),
        children: [
          prevPageExists ? /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
            "a",
            {
              "aria-label": `${Drupal.t("Go to previous page number", {}, { context: "Pagination previous page link title" })} ${currentPage}`,
              className: "hds-button hds-pagination__button-prev",
              href: `?page=${currentPage}`,
              onClick: (e18) => {
                if (prevPageExists) {
                  updatePage(e18, currentPage - 1);
                }
              },
              title: `${Drupal.t("Go to previous page number", {}, { context: "Pagination previous page link title" })} ${currentPage}`,
              type: "button",
              rel: "prev",
              role: "button",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Icon_default, { icon: "angle-left" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { "aria-hidden": "true", className: "hds-pagination__button-prev-label", children: Drupal.t("Previous", {}, { context: "Pagination previous page link text" }) })
              ]
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
            "button",
            {
              className: "hds-button hds-pagination__button-prev",
              disabled: true,
              title: Drupal.t("Go to previous page", {}, { context: "Pagination previous page link title" }),
              type: "button",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Icon_default, { icon: "angle-left" }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { "aria-hidden": "true", className: "hds-pagination__button-prev-label", children: Drupal.t("Previous", {}, { context: "Pagination previous page link text" }) })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("ul", { className: "pager__items js-pager__items hds-pagination__pages", children: [
            !firstWithinRange && /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
                "a",
                {
                  href: "?page=1",
                  onClick: (e18) => {
                    if (prevPageExists) {
                      updatePage(e18, 1);
                    }
                  },
                  className: "hds-pagination__item-link",
                  children: "1"
                }
              ) }),
              prevPages[0] - 1 > 0 && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { className: "pager__item pager__item--ellipsis", role: "presentation", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "hds-pagination__item-ellipsis", children: "…" }) })
            ] }),
            prevPages.map((pageIndex, i12) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { className: "pager__item", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
              "a",
              {
                "aria-label": Drupal.t("Go to page @key", { "@key": pageIndex }, { context: "React search pager" }),
                href: `?page=${pageIndex}`,
                className: "hds-pagination__item-link",
                onClick: (e18) => updatePage(e18, pageIndex),
                children: pageIndex
              },
              pageIndex
            ) }, i12)),
            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { className: "pager__item is-active", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
              "a",
              {
                href: `?page=${currentPage}`,
                className: "hds-pagination__item-link hds-pagination__item-link--active",
                children: currentPage
              }
            ) }),
            nextPages.map((pageIndex, i12) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { className: "pager__item", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
              "a",
              {
                "aria-label": Drupal.t("Go to page @key", { "@key": pageIndex }, { context: "React search pager" }),
                href: `?page=${pageIndex}`,
                className: "hds-pagination__item-link",
                onClick: (e18) => updatePage(e18, pageIndex),
                children: pageIndex
              },
              pageIndex
            ) }, i12)),
            !lastWithinRange && /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(import_jsx_runtime11.Fragment, { children: [
              nextPages[nextPages.length - 1] + 1 !== totalPages && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { className: "hds-pagination__item-ellipsis", children: "..." }) }),
              /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
                "a",
                {
                  href: `?page=${totalPages}`,
                  onClick: (e18) => updatePage(e18, totalPages),
                  className: "hds-pagination__item-link",
                  children: totalPages
                }
              ) })
            ] })
          ] }),
          nextPageExists ? /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
            "a",
            {
              "aria-label": `${Drupal.t("Go to next page number", {}, { context: "Pagination next page link title" })} ${currentPage + 1}`,
              className: "hds-button hds-pagination__button-next",
              href: `?page=${currentPage + 2}`,
              onClick: (e18) => {
                if (nextPageExists) {
                  updatePage(e18, currentPage + 1);
                }
              },
              title: `${Drupal.t("Go to next page number", {}, { context: "Pagination next page link title" })} ${currentPage + 1}`,
              type: "button",
              rel: "next",
              role: "button",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { "aria-hidden": "true", className: "hds-pagination__button-next-label", children: Drupal.t("Next", {}, { context: "Pagination next page link text" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Icon_default, { icon: "angle-right" })
              ]
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
            "button",
            {
              className: "hds-button hds-pagination__button-next",
              disabled: true,
              title: Drupal.t("Go to next page", {}, { context: "Pagination next page link title" }),
              type: "button",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("span", { "aria-hidden": "true", className: "hds-pagination__button-next-label", children: Drupal.t("Next", {}, { context: "Pagination next page link text" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Icon_default, { icon: "angle-right" })
              ]
            }
          )
        ]
      }
    ) });
  }, "Pagination");
  var Pagination_default = Pagination;

  // ../../contrib/hdbt/src/js/react/common/ResultsHeader.tsx
  var import_react70 = __toESM(require_react());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var ResultsHeader = (0, import_react70.forwardRef)(({ resultText, optionalResultsText, actions, actionsClass }, ref) => /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "hdbt-search--react__result-top-area", children: [
    /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("h3", { className: "hdbt-search--react__results--title", ref, children: [
      resultText,
      " ",
      optionalResultsText && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
        "(",
        optionalResultsText,
        ")"
      ] })
    ] }),
    actions && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: actionsClass, children: actions })
  ] }));
  var ResultsHeader_default = ResultsHeader;

  // ../../contrib/hdbt/src/js/react/common/CardGhost.tsx
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var CardGhost = /* @__PURE__ */ __name(({
    bordered = false
  }) => /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: `card card--ghost${bordered ? " card--border" : ""}`, children: [
    /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "card__image" }),
    /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "card__text", children: [
      /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "card__title" }),
      /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "card__description" })
    ] })
  ] }), "CardGhost");

  // ../../contrib/hdbt/src/js/react/common/GhostList.tsx
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var GhostList = /* @__PURE__ */ __name(({
    bordered = false,
    count
  }) => /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { "aria-live": "assertive", children: [
    /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "visually-hidden", children: Drupal.t("Search results are loading", {}, { context: "React search: results loading" }) }),
    Array.from(Array(count)).map((_7, i12) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(CardGhost, { bordered }, i12))
  ] }), "GhostList");

  // ../../contrib/hdbt/src/js/react/common/hooks/useScrollToResults.ts
  var import_react71 = __toESM(require_react());
  var useScrollToResults = /* @__PURE__ */ __name((ref, shouldScrollOnRender) => {
    (0, import_react71.useEffect)(() => {
      const { current } = ref;
      if (current && shouldScrollOnRender) {
        current.setAttribute("tabindex", "-1");
        current.focus({ preventScroll: true });
        current.scrollIntoView({ behavior: "smooth", block: "center" });
      }
    }, [ref, shouldScrollOnRender]);
  }, "useScrollToResults");
  var useScrollToResults_default = useScrollToResults;

  // ../../contrib/hdbt/src/js/react/common/ResultsError.tsx
  var import_react72 = __toESM(require_react());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var ResultsError = (0, import_react72.forwardRef)(({
    className,
    error: error2,
    errorMessage,
    headingLevel = 3
  }, ref) => {
    if (!(error2 instanceof TypeError)) {
      console.error("Error loading data from Elastic:", error2);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className, ref, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      C,
      {
        label: Drupal.t("An error occurred while loading the content", {}, { context: "React search" }),
        type: "error",
        headingLevel,
        children: errorMessage || Drupal.t("Please reload the page or try again later.", {}, { context: "React search" })
      }
    ) });
  });
  var ResultsError_default = ResultsError;

  // ../../contrib/hdbt/src/js/react/common/ResultsEmpty.tsx
  var import_react73 = __toESM(require_react());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var ResultsEmpty = (0, import_react73.forwardRef)(({ title, content, wrapperClass = "react-search__results" }, ref) => /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: wrapperClass, children: [
    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
      ResultsHeader_default,
      {
        resultText: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: Drupal.t("No results", {}, { context: "Unit search no results title" }) }),
        ref
      }
    ),
    /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("p", { children: Drupal.t("No results were found for the criteria you entered. Try changing your search criteria.", {}, { context: "React search: no search results" }) })
  ] }));
  var ResultsEmpty_default = ResultsEmpty;

  // src/js/react/apps/allu-decisions-search/containers/ResultsContainer.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime2());
  var ResultsContainer = /* @__PURE__ */ __name(({
    data,
    error: error2,
    isLoading
  }) => {
    const setSelections = useSetAtom(setSelectionsAtom);
    const scrollTarget = (0, import_react74.createRef)();
    const currentPage = useAtomValue(getPageAtom);
    const size = 10;
    useScrollToResults_default(scrollTarget, true);
    if (!data && isLoading) {
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        GhostList,
        {
          count: size,
          bordered: true
        }
      );
    }
    if (error2) {
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        ResultsError_default,
        {
          error: error2,
          className: "react-search__results",
          ref: scrollTarget
        }
      );
    }
    if (!data?.hits?.hits.length) {
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ResultsEmpty_default, { ref: scrollTarget });
    }
    const results = data.hits.hits;
    const total = data.hits.total.value;
    const pages = Math.floor(total / size);
    const addLastPage = total > size && total % size;
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "react-search__results", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        ResultsHeader_default,
        {
          resultText: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_jsx_runtime17.Fragment, { children: Drupal.formatPlural(total, "1 decision", "@count decisions", {
            "@count": total
          }, {
            context: "Allu decision search"
          }) }),
          ref: scrollTarget
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "hdbt-search--react__results--container", children: [
        results.map(({ _source }) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ResultCard, { ..._source }, _source.search_api_id[0])),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          Pagination_default,
          {
            currentPage: Number(currentPage) || 1,
            pages: 5,
            totalPages: addLastPage ? pages + 1 : pages,
            updatePage: (event, index) => {
              event.preventDefault();
              setSelections({
                page: index.toString()
              }, true);
            }
          }
        )
      ] })
    ] });
  }, "ResultsContainer");

  // ../../contrib/hdbt/src/js/react/common/hooks/useTimeoutFetch.ts
  async function useTimeoutFetch(url, options, timeout = 8e3) {
    const controller = new AbortController();
    const enforceTimeout = setTimeout(() => controller.abort(), timeout);
    const result = await fetch(url, {
      ...options,
      signal: controller.signal
    });
    clearTimeout(enforceTimeout);
    return result;
  }
  __name(useTimeoutFetch, "useTimeoutFetch");

  // src/js/react/apps/allu-decisions-search/containers/SearchContainer.tsx
  var import_jsx_runtime18 = __toESM(require_jsx_runtime2());
  var DATA_ENDPOINT = `${drupalSettings.helfi_react_search.elastic_proxy_url}/paatokset_allu`;
  var SearchContainer = /* @__PURE__ */ __name(() => {
    const url = useAtomValue(urlAtom);
    const typeOptions = (0, import_react75.useRef)(void 0);
    const readSelections = useAtomCallback(
      (0, import_react75.useCallback)((get) => get(selectionsAtom), [])
    );
    const fetcher = /* @__PURE__ */ __name(async () => {
      const queryBody = formQuery(readSelections());
      if (typeOptions.current) {
        const response2 = await useTimeoutFetch(`${DATA_ENDPOINT}/_search`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(queryBody)
        });
        const json2 = await response2.json();
        return json2;
      }
      const ndjsonHeader = "{}";
      const response = await useTimeoutFetch(`${DATA_ENDPOINT}/_msearch`, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-ndjson"
        },
        body: `${ndjsonHeader}
${JSON.stringify({
          aggs: {
            typeOptions: {
              terms: {
                field: "document_type",
                size: 5e5
              }
            }
          }
        })}
${ndjsonHeader}
${JSON.stringify(queryBody)}
`
      });
      const json = await response.json();
      const [aggs, results] = json.responses;
      if (aggs.aggregations?.typeOptions?.buckets) {
        typeOptions.current = aggs.aggregations.typeOptions.buckets.map((bucket) => ({
          label: matchTypeLabel(bucket.key),
          value: bucket.key
        }));
      }
      ;
      return results;
    }, "fetcher");
    const { data, error: error2, isLoading } = useSWR(url || DATA_ENDPOINT, fetcher, {
      revalidateOnFocus: false
    });
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FormContainer, { typeOptions: typeOptions.current }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        ResultsContainer,
        {
          ...{ data, error: error2, isLoading }
        }
      )
    ] });
  }, "SearchContainer");

  // src/js/react/apps/allu-decisions-search/index.tsx
  var import_jsx_runtime19 = __toESM(require_jsx_runtime2());
  var rootSelector = "allu-decisions-search";
  var rootElement = document.getElementById(rootSelector);
  if (rootElement) {
    import_react_dom5.default.render(
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_react76.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ErrorBoundary, { fallback: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ResultsError_default, { error: "Allu decisions search crashed" }), children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(SearchContainer, {}) }) }),
      rootElement
    );
  }
})();
//# sourceMappingURL=allu-decisions-search.min.js.map
