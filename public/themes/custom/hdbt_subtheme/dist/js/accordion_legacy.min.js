/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/accordion_legacy.js":
/*!************************************!*\
  !*** ./src/js/accordion_legacy.js ***!
  \************************************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', function accordionListeners() {\n  // Bind closing function to the additional close button at the bottom of\n  // the content. For reasons unknown to man the close button cannot be\n  // actual button. If you change it from span to button the click event\n  // is no longer registered and the functionality doesn't work.\n  function closeFold(folds) {\n    const closeButton = folds.content.querySelector('.accordion-item__button--close');\n    function moveFocus(element) {\n      element.closest('.accordion-legacy__wrapper').querySelector('.accordion-item__button--toggle').focus();\n    }\n    function closeFolds(e) {\n      folds.close();\n      e.preventDefault();\n      moveFocus(this);\n    }\n    closeButton.addEventListener('mousedown', closeFolds);\n    closeButton.addEventListener('keypress', function closeFoldsOnKey(e) {\n      if (e.which === 13 || e.which === 32) {\n        closeFolds(e);\n      }\n    });\n  }\n\n  // Find all accordions.\n  const accordions = document.getElementsByClassName('handorgel');\n  window.handorgel_accordions = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const singleAccordion of accordions) {\n    /* global handorgel */\n    // eslint-disable-next-line new-cap\n    const accordion = new handorgel(singleAccordion, {\n      // whether multiple folds can be opened at once\n      multiSelectable: false,\n      // whether the folds are collapsible\n      collapsible: true,\n      // whether ARIA attributes are enabled\n      ariaEnabled: true,\n      // whether W3C keyboard shortcuts are enabled\n      keyboardInteraction: true,\n      // whether to loop header focus (sets focus back to first/last header when end/start reached)\n      carouselFocus: true,\n      // attribute for the header or content to open folds at initialization\n      initialOpenAttribute: 'data-open',\n      // whether to use transition at initial open\n      initialOpenTransition: true,\n      // delay used to show initial transition\n      initialOpenTransitionDelay: 200,\n      // header/content class if fold is open\n      headerOpenClass: 'handorgel__header--open',\n      contentOpenClass: 'handorgel__content--open',\n      // header/content class if fold has been opened (transition finished)\n      headerOpenedClass: 'handorgel__header--opened',\n      contentOpenedClass: 'handorgel__content--opened',\n      // header/content class if fold has been focused\n      headerFocusClass: 'handorgel__header--focus',\n      contentFocusClass: 'handorgel__content--focus',\n      // header/content class if fold is disabled\n      headerDisabledClass: 'handorgel__header--disabled',\n      contentDisabledClass: 'handorgel__content--disabled'\n    });\n\n    // Add a global variable so that we can open accordions with anchor links where needed\n    window.handorgel_accordions.push(accordion);\n\n    // Get all the folds associated to the accordion.\n    const {\n      folds\n    } = accordion;\n\n    // Go through each fold.\n    folds.forEach(closeFold);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvanMvYWNjb3JkaW9uX2xlZ2FjeS5qcyIsIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFjY29yZGlvbkxpc3RlbmVycyIsImNsb3NlRm9sZCIsImZvbGRzIiwiY2xvc2VCdXR0b24iLCJjb250ZW50IiwicXVlcnlTZWxlY3RvciIsIm1vdmVGb2N1cyIsImVsZW1lbnQiLCJjbG9zZXN0IiwiZm9jdXMiLCJjbG9zZUZvbGRzIiwiZSIsImNsb3NlIiwicHJldmVudERlZmF1bHQiLCJjbG9zZUZvbGRzT25LZXkiLCJ3aGljaCIsImFjY29yZGlvbnMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwid2luZG93IiwiaGFuZG9yZ2VsX2FjY29yZGlvbnMiLCJzaW5nbGVBY2NvcmRpb24iLCJhY2NvcmRpb24iLCJoYW5kb3JnZWwiLCJtdWx0aVNlbGVjdGFibGUiLCJjb2xsYXBzaWJsZSIsImFyaWFFbmFibGVkIiwia2V5Ym9hcmRJbnRlcmFjdGlvbiIsImNhcm91c2VsRm9jdXMiLCJpbml0aWFsT3BlbkF0dHJpYnV0ZSIsImluaXRpYWxPcGVuVHJhbnNpdGlvbiIsImluaXRpYWxPcGVuVHJhbnNpdGlvbkRlbGF5IiwiaGVhZGVyT3BlbkNsYXNzIiwiY29udGVudE9wZW5DbGFzcyIsImhlYWRlck9wZW5lZENsYXNzIiwiY29udGVudE9wZW5lZENsYXNzIiwiaGVhZGVyRm9jdXNDbGFzcyIsImNvbnRlbnRGb2N1c0NsYXNzIiwiaGVhZGVyRGlzYWJsZWRDbGFzcyIsImNvbnRlbnREaXNhYmxlZENsYXNzIiwicHVzaCIsImZvckVhY2giXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2hkYnRfc3VidGhlbWUvLi9zcmMvanMvYWNjb3JkaW9uX2xlZ2FjeS5qcz8yMWM4Il0sInNvdXJjZXNDb250ZW50IjpbImRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiBhY2NvcmRpb25MaXN0ZW5lcnMoKSB7XG4gIC8vIEJpbmQgY2xvc2luZyBmdW5jdGlvbiB0byB0aGUgYWRkaXRpb25hbCBjbG9zZSBidXR0b24gYXQgdGhlIGJvdHRvbSBvZlxuICAvLyB0aGUgY29udGVudC4gRm9yIHJlYXNvbnMgdW5rbm93biB0byBtYW4gdGhlIGNsb3NlIGJ1dHRvbiBjYW5ub3QgYmVcbiAgLy8gYWN0dWFsIGJ1dHRvbi4gSWYgeW91IGNoYW5nZSBpdCBmcm9tIHNwYW4gdG8gYnV0dG9uIHRoZSBjbGljayBldmVudFxuICAvLyBpcyBubyBsb25nZXIgcmVnaXN0ZXJlZCBhbmQgdGhlIGZ1bmN0aW9uYWxpdHkgZG9lc24ndCB3b3JrLlxuICBmdW5jdGlvbiBjbG9zZUZvbGQoZm9sZHMpIHtcbiAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IGZvbGRzLmNvbnRlbnQucXVlcnlTZWxlY3RvcignLmFjY29yZGlvbi1pdGVtX19idXR0b24tLWNsb3NlJyk7XG5cbiAgICBmdW5jdGlvbiBtb3ZlRm9jdXMoZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5jbG9zZXN0KCcuYWNjb3JkaW9uLWxlZ2FjeV9fd3JhcHBlcicpLnF1ZXJ5U2VsZWN0b3IoJy5hY2NvcmRpb24taXRlbV9fYnV0dG9uLS10b2dnbGUnKS5mb2N1cygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlRm9sZHMoZSkge1xuICAgICAgZm9sZHMuY2xvc2UoKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyh0aGlzKTtcbiAgICB9XG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgY2xvc2VGb2xkcyk7XG5cbiAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGZ1bmN0aW9uIGNsb3NlRm9sZHNPbktleShlKSB7XG4gICAgICBpZiAoZS53aGljaCA9PT0gMTMgfHwgZS53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgY2xvc2VGb2xkcyhlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIEZpbmQgYWxsIGFjY29yZGlvbnMuXG4gIGNvbnN0IGFjY29yZGlvbnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdoYW5kb3JnZWwnKTtcbiAgd2luZG93LmhhbmRvcmdlbF9hY2NvcmRpb25zID0gW107XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAoY29uc3Qgc2luZ2xlQWNjb3JkaW9uIG9mIGFjY29yZGlvbnMpIHtcbiAgICAvKiBnbG9iYWwgaGFuZG9yZ2VsICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5ldy1jYXBcbiAgICBjb25zdCBhY2NvcmRpb24gPSBuZXcgaGFuZG9yZ2VsKHNpbmdsZUFjY29yZGlvbiwge1xuICAgICAgLy8gd2hldGhlciBtdWx0aXBsZSBmb2xkcyBjYW4gYmUgb3BlbmVkIGF0IG9uY2VcbiAgICAgIG11bHRpU2VsZWN0YWJsZTogZmFsc2UsXG4gICAgICAvLyB3aGV0aGVyIHRoZSBmb2xkcyBhcmUgY29sbGFwc2libGVcbiAgICAgIGNvbGxhcHNpYmxlOiB0cnVlLFxuXG4gICAgICAvLyB3aGV0aGVyIEFSSUEgYXR0cmlidXRlcyBhcmUgZW5hYmxlZFxuICAgICAgYXJpYUVuYWJsZWQ6IHRydWUsXG4gICAgICAvLyB3aGV0aGVyIFczQyBrZXlib2FyZCBzaG9ydGN1dHMgYXJlIGVuYWJsZWRcbiAgICAgIGtleWJvYXJkSW50ZXJhY3Rpb246IHRydWUsXG4gICAgICAvLyB3aGV0aGVyIHRvIGxvb3AgaGVhZGVyIGZvY3VzIChzZXRzIGZvY3VzIGJhY2sgdG8gZmlyc3QvbGFzdCBoZWFkZXIgd2hlbiBlbmQvc3RhcnQgcmVhY2hlZClcbiAgICAgIGNhcm91c2VsRm9jdXM6IHRydWUsXG5cbiAgICAgIC8vIGF0dHJpYnV0ZSBmb3IgdGhlIGhlYWRlciBvciBjb250ZW50IHRvIG9wZW4gZm9sZHMgYXQgaW5pdGlhbGl6YXRpb25cbiAgICAgIGluaXRpYWxPcGVuQXR0cmlidXRlOiAnZGF0YS1vcGVuJyxcbiAgICAgIC8vIHdoZXRoZXIgdG8gdXNlIHRyYW5zaXRpb24gYXQgaW5pdGlhbCBvcGVuXG4gICAgICBpbml0aWFsT3BlblRyYW5zaXRpb246IHRydWUsXG4gICAgICAvLyBkZWxheSB1c2VkIHRvIHNob3cgaW5pdGlhbCB0cmFuc2l0aW9uXG4gICAgICBpbml0aWFsT3BlblRyYW5zaXRpb25EZWxheTogMjAwLFxuXG4gICAgICAvLyBoZWFkZXIvY29udGVudCBjbGFzcyBpZiBmb2xkIGlzIG9wZW5cbiAgICAgIGhlYWRlck9wZW5DbGFzczogJ2hhbmRvcmdlbF9faGVhZGVyLS1vcGVuJyxcbiAgICAgIGNvbnRlbnRPcGVuQ2xhc3M6ICdoYW5kb3JnZWxfX2NvbnRlbnQtLW9wZW4nLFxuXG4gICAgICAvLyBoZWFkZXIvY29udGVudCBjbGFzcyBpZiBmb2xkIGhhcyBiZWVuIG9wZW5lZCAodHJhbnNpdGlvbiBmaW5pc2hlZClcbiAgICAgIGhlYWRlck9wZW5lZENsYXNzOiAnaGFuZG9yZ2VsX19oZWFkZXItLW9wZW5lZCcsXG4gICAgICBjb250ZW50T3BlbmVkQ2xhc3M6ICdoYW5kb3JnZWxfX2NvbnRlbnQtLW9wZW5lZCcsXG5cbiAgICAgIC8vIGhlYWRlci9jb250ZW50IGNsYXNzIGlmIGZvbGQgaGFzIGJlZW4gZm9jdXNlZFxuICAgICAgaGVhZGVyRm9jdXNDbGFzczogJ2hhbmRvcmdlbF9faGVhZGVyLS1mb2N1cycsXG4gICAgICBjb250ZW50Rm9jdXNDbGFzczogJ2hhbmRvcmdlbF9fY29udGVudC0tZm9jdXMnLFxuXG4gICAgICAvLyBoZWFkZXIvY29udGVudCBjbGFzcyBpZiBmb2xkIGlzIGRpc2FibGVkXG4gICAgICBoZWFkZXJEaXNhYmxlZENsYXNzOiAnaGFuZG9yZ2VsX19oZWFkZXItLWRpc2FibGVkJyxcbiAgICAgIGNvbnRlbnREaXNhYmxlZENsYXNzOiAnaGFuZG9yZ2VsX19jb250ZW50LS1kaXNhYmxlZCcsXG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYSBnbG9iYWwgdmFyaWFibGUgc28gdGhhdCB3ZSBjYW4gb3BlbiBhY2NvcmRpb25zIHdpdGggYW5jaG9yIGxpbmtzIHdoZXJlIG5lZWRlZFxuICAgIHdpbmRvdy5oYW5kb3JnZWxfYWNjb3JkaW9ucy5wdXNoKGFjY29yZGlvbik7XG5cbiAgICAvLyBHZXQgYWxsIHRoZSBmb2xkcyBhc3NvY2lhdGVkIHRvIHRoZSBhY2NvcmRpb24uXG4gICAgY29uc3QgeyBmb2xkcyB9ID0gYWNjb3JkaW9uO1xuXG4gICAgLy8gR28gdGhyb3VnaCBlYWNoIGZvbGQuXG4gICAgZm9sZHMuZm9yRWFjaChjbG9zZUZvbGQpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsU0FBU0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDMUU7RUFDQTtFQUNBO0VBQ0E7RUFDQSxTQUFTQyxTQUFTQSxDQUFDQyxLQUFLLEVBQUU7SUFDeEIsTUFBTUMsV0FBVyxHQUFHRCxLQUFLLENBQUNFLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDLGdDQUFnQyxDQUFDO0lBRWpGLFNBQVNDLFNBQVNBLENBQUNDLE9BQU8sRUFBRTtNQUMxQkEsT0FBTyxDQUFDQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQ0gsYUFBYSxDQUFDLGlDQUFpQyxDQUFDLENBQUNJLEtBQUssQ0FBQyxDQUFDO0lBQ3hHO0lBRUEsU0FBU0MsVUFBVUEsQ0FBQ0MsQ0FBQyxFQUFFO01BQ3JCVCxLQUFLLENBQUNVLEtBQUssQ0FBQyxDQUFDO01BQ2JELENBQUMsQ0FBQ0UsY0FBYyxDQUFDLENBQUM7TUFDbEJQLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDakI7SUFDQUgsV0FBVyxDQUFDSixnQkFBZ0IsQ0FBQyxXQUFXLEVBQUVXLFVBQVUsQ0FBQztJQUVyRFAsV0FBVyxDQUFDSixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsU0FBU2UsZUFBZUEsQ0FBQ0gsQ0FBQyxFQUFFO01BQ25FLElBQUlBLENBQUMsQ0FBQ0ksS0FBSyxLQUFLLEVBQUUsSUFBSUosQ0FBQyxDQUFDSSxLQUFLLEtBQUssRUFBRSxFQUFFO1FBQ3BDTCxVQUFVLENBQUNDLENBQUMsQ0FBQztNQUNmO0lBQ0YsQ0FBQyxDQUFDO0VBQ0o7O0VBRUE7RUFDQSxNQUFNSyxVQUFVLEdBQUdsQixRQUFRLENBQUNtQixzQkFBc0IsQ0FBQyxXQUFXLENBQUM7RUFDL0RDLE1BQU0sQ0FBQ0Msb0JBQW9CLEdBQUcsRUFBRTs7RUFFaEM7RUFDQSxLQUFLLE1BQU1DLGVBQWUsSUFBSUosVUFBVSxFQUFFO0lBQ3hDO0lBQ0E7SUFDQSxNQUFNSyxTQUFTLEdBQUcsSUFBSUMsU0FBUyxDQUFDRixlQUFlLEVBQUU7TUFDL0M7TUFDQUcsZUFBZSxFQUFFLEtBQUs7TUFDdEI7TUFDQUMsV0FBVyxFQUFFLElBQUk7TUFFakI7TUFDQUMsV0FBVyxFQUFFLElBQUk7TUFDakI7TUFDQUMsbUJBQW1CLEVBQUUsSUFBSTtNQUN6QjtNQUNBQyxhQUFhLEVBQUUsSUFBSTtNQUVuQjtNQUNBQyxvQkFBb0IsRUFBRSxXQUFXO01BQ2pDO01BQ0FDLHFCQUFxQixFQUFFLElBQUk7TUFDM0I7TUFDQUMsMEJBQTBCLEVBQUUsR0FBRztNQUUvQjtNQUNBQyxlQUFlLEVBQUUseUJBQXlCO01BQzFDQyxnQkFBZ0IsRUFBRSwwQkFBMEI7TUFFNUM7TUFDQUMsaUJBQWlCLEVBQUUsMkJBQTJCO01BQzlDQyxrQkFBa0IsRUFBRSw0QkFBNEI7TUFFaEQ7TUFDQUMsZ0JBQWdCLEVBQUUsMEJBQTBCO01BQzVDQyxpQkFBaUIsRUFBRSwyQkFBMkI7TUFFOUM7TUFDQUMsbUJBQW1CLEVBQUUsNkJBQTZCO01BQ2xEQyxvQkFBb0IsRUFBRTtJQUN4QixDQUFDLENBQUM7O0lBRUY7SUFDQXBCLE1BQU0sQ0FBQ0Msb0JBQW9CLENBQUNvQixJQUFJLENBQUNsQixTQUFTLENBQUM7O0lBRTNDO0lBQ0EsTUFBTTtNQUFFbkI7SUFBTSxDQUFDLEdBQUdtQixTQUFTOztJQUUzQjtJQUNBbkIsS0FBSyxDQUFDc0MsT0FBTyxDQUFDdkMsU0FBUyxDQUFDO0VBQzFCO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119\n//# sourceURL=webpack-internal:///./src/js/accordion_legacy.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/accordion_legacy.js"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=accordion_legacy.min.js.map