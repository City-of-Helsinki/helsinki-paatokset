{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{%
  set classes = [
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  first_paragraph_grey ? 'has-first-gray-bg-block',
  'trustee-content',
]
%}

<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if label and view_mode != 'full' and not hide_label %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  <div class="trustee-top-container">
    <span>{{ content.field_trustee_title }}</span>
    <span>{{ content.field_trustee_council_group }}</span>
  </div>
  <div class="trustee-image">
    {{ content.field_trustee_image }}
  </div>
  {% if
    content.field_trustee_profession|render or
    content.field_trustee_home_district|render or
    content.field_trustee_email|render or
    content.field_trustee_homepage|render or
    content.field_trustee_phone|render or
    policymaker_declaration|render
  %}
    <div class="trustee-information">
      {% if content.field_trustee_profession|render %}
        <div class="information-row">
          <div class="label">
            {{ "Profession"|t({}, { context: "Trustee labels"}) }}:
          </div>
          {{ content.field_trustee_profession }}
        </div>
      {% endif %}
      {% if content.field_trustee_home_district|render %}
        <div class="information-row">
          <div class="label">
            {{ "Home district"|t({}, { context: "Trustee labels"}) }}:
          </div>
          {{ content.field_trustee_home_district }}
        </div>
      {% endif %}
      {% if content.field_trustee_phone|render %}
        <div class="information-row">
          <div class="label">
            {{ "Phone number"|t({}, { context: "Trustee labels"}) }}:
          </div>
          {{ content.field_trustee_phone }}
        </div>
      {% endif %}
      {% if content.field_trustee_email|render %}
        <div class="information-row">
          <div class="label">
            {{ "Email"|t({}, { context: "Trustee labels"}) }}:
          </div>
          {{ content.field_trustee_email }}
        </div>
      {% endif %}
      {% if content.field_trustee_homepage|render %}
        <div class="information-row">
          <div class="label">
            {{ "Homepage"|t({}, { context: "Trustee labels"}) }}:
          </div>
          {{ content.field_trustee_homepage }}
        </div>
      {% endif %}

      {% if policymaker_declaration %}
        <div class="information-row information-row--pm-declaration">{{ policymaker_declaration }}</div>
      {% endif %}
    </div>
  {% endif %}

  {% embed "@hdbt/misc/component.twig" with {
    component_classes: [
      'component--accordion',
      'component--accordion-bg-white',
      'component--accordion-trustee',
    ],
    component_content_class: 'accordion',
  } %}
    {% block component_content %}
      <button type="button" class="accordion-item__button js-accordion__button--toggle-all accordion__button--is-open is-hidden">
        <span {{ alternative_language ? create_attribute(({ 'lang': lang_attributes.fallback_lang, 'dir': lang_attributes.fallback_dir })) }}>{{ 'Open all'|t({}, {'context': 'Accordion open all'}) }}</span>
      </button>
      {% if speaking_turns.content is not empty %}
        {% set speaking_turns_content %}
          {% for year, statements in speaking_turns.content %}
            <h3 class="speaking-turn__group__title">{{ year }}</h3>
            {% for row in statements %}
              <div class="speaking-turn">
                <a class="speaking-turn__link" href="{{ row.link }}">{{ row.speaking_turn }}</a>
              </div>
            {% endfor %}
          {% endfor %}
        {% endset %}
        {% include '@hdbt/component/accordion.twig' ignore missing with {
          heading_level: 'h2',
          heading: speaking_turns.title,
          content: speaking_turns_content,
        } %}
      {% endif %}

      {% if initiatives.content is not empty %}
        {% include '@hdbt/component/accordion.twig' ignore missing with {
          heading_level: 'h2',
          heading: initiatives.title,
          content: initiatives.content,
        } %}
      {% endif %}

      {% if resolutions.content is not empty %}
        {% set resolutions_content %}
          {% for row in resolutions.content %}
            <div class="resolution">
              <div class="date">{{ row.Date|date("d.m.Y") }}</div>
              <a class="title" href="{{ row.FileURI }}">{{row.Title}}</a>
            </div>
          {% endfor %}
        {% endset %}
        {% include '@hdbt/component/accordion.twig' ignore missing with {
          heading_level: 'h2',
          heading: resolutions.title,
          content: resolutions_content,
        } %}
      {% endif %}

      {% if memberships.content is not empty %}
        {% set memberships_content %}
          {% for row in memberships.content %}
            <div class="membership">{{ row }}</div>
          {% endfor %}
        {% endset %}
        {% include '@hdbt/component/accordion.twig' ignore missing with {
          heading_level: 'h2',
          heading: memberships.title,
          content: memberships_content,
        } %}
      {% endif %}

    {% endblock component_content %}
  {% endembed %}
</article>
