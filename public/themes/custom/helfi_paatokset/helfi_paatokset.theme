<?php

/**
 * @file
 * Functions to support theming in the City of Helsinki - Päätökset theme.
 */

use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\paatokset_ahjo_api\Service\TrusteeService;

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function helfi_paatokset_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_secure_url;
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = $base_secure_url . '/' . $theme_handler->getTheme('helfi_paatokset')->getPath() . '/dist/icons/sprite.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function helfi_paatokset_preprocess(&$variables) {
  $variables['helfi_paatokset_icons_path'] = helfi_paatokset_get_icons_path();
  $variables['current_language'] = Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
}

/**
 * Implements hook_preprocess_html() for HTML document templates.
 *
 * Create path to default theme for mobile icons (favicon, apple touch icon,
 * Android icons, ... defined in html tpl.
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_html(&$variables) {
  global $base_secure_url;
  $variables['theme_path'] = file_create_url($base_secure_url . '/' . drupal_get_path('theme', 'helfi_paatokset'));
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function helfi_paatokset_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Retrieve the node object for revisions.
    $node = (is_numeric($node) && !$node instanceof Node) ? Node::load($node) : $node;
    $suggestions[] = 'page__' . $node->bundle();
  }

  if ($taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
    $suggestions[] = 'page__taxonomy__term__' . $taxonomy_term->bundle();
  }

  $request = \Drupal::request();

  if ($exception = $request->attributes->get('exception')) {
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, [401, 403, 404])) {
      $suggestions[] = 'page__' . $status_code;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_links__language_block(&$variables) {
  foreach ($variables['links'] as $langCode => &$link) {
    switch ($langCode) {
      case 'en':
        $link['text'] = 'English';
        break;

      case 'sv':
        $link['text'] = 'Svenska';
        break;

      case 'fi':
        $link['text'] = 'Suomi';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_region().
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_region(&$variables) {
  $user = User::load(\Drupal::currentUser()->id());
  $variables['username'] = $user->getAccountName();
  $variables['logged_in'] = \Drupal::currentUser()->isAuthenticated();
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 *
 * {@inheritdoc}
 */
function helfi_paatokset_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (!empty($variables['menu_block_configuration']['custom_suggestion']) && $variables['menu_block_configuration']['custom_suggestion'] === 'block__menu_block__main__desktop') {
    $suggestions[] = 'menu__main__desktop';
  }

  if (isset($variables['attributes']['block_id'])) {
    if($variables['attributes']['block_id'] === 'helfi_paatokset_mobile_navigation') {
      $suggestions[] = 'menu__mobile';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_paatokset_theme_suggestions_block_alter(&$suggestions, $variables) {
  $element = $variables['elements'];

  if (isset($element['#configuration']['custom_suggestion'])) {
    $suggestions[] = $element['#configuration']['custom_suggestion'];
  }

  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('helfi_paatokset_', '', $suggestion);
  }

  if(isset($element['#id']) && $element['#id'] === 'views_block__news_block_1') {
    $suggestions[] = 'block__views_block__news_latest_news';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function helfi_paatokset_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  if($variables['view']->id() === 'news') {
    $suggestions[] = 'views_view_unformatted__news__latest_news';
  }
}

/**
 * Implements hook_preprocess_container().
 */
function helfi_paatokset_preprocess_container(&$variables) {
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-search__tags-container', $variables['element']['#attributes']['class'])) {
    $variables['tags'] = $variables['element']['#tags'];
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function helfi_paatokset_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-search__tags-container', $variables['element']['#attributes']['class'])) {
    $suggestions[] = 'advanced_search__tags_container';
  }
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-fields-container', $variables['element']['#attributes']['class'])) {
    $suggestions[] = 'advanced_search__advanced_fields_container';
  }
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-search-link-container', $variables['element']['#attributes']['class'])) {
    $suggestions[] = 'advanced_search_link_container';
  }
}

/**
 * Implements hook_theme().
 */
function helfi_paatokset_theme($existing, $type, $theme, $path) {
  return [
    'advanced_search__advanced_fields_container' => [
      'base hook' => 'container',
      'template' => 'form/advanced-search--advanced-fields-container'
    ],
    'advanced_search__tags_container' => [
      'base hook' => 'container',
      'template' => 'form/advanced-search--tags-container'
    ],
    'advanced_search_link_container' => [
      'base hook' => 'container',
      'template' => 'form/advanced-search-link-container'
    ]
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_block(&$variables) {
    // Handle Sidebar menu block.
    if (
      $variables['base_plugin_id'] === 'menu_block_current_language' &&
      $variables['elements']['#id'] === 'helfi_paatokset_main_navigation_level_2' &&
      !empty($variables['content']['#items'])
    ) {
      // Get any current menu level item.
      $current_level_menu_item = reset($variables['content']['#items']);

      if (isset($current_level_menu_item['original_link'])) {
        $original_link = $current_level_menu_item['original_link'];
        $parent = $original_link->getParent();

        // Check if current menu item has parent and serve it as variable.
        if ($parent) {
          $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
          $parent_item = $menu_link_manager->createInstance($parent);

          if ($parent_item) {
            $variables['menu_link_parent'] = [
              'title' => $parent_item->getTitle(),
              'url' => $parent_item->getUrlObject(),
            ];
          }
        }
      }
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_node(&$variables) {
  $node = $variables['node'];

  if (!$node instanceof NodeInterface) {
    return;
  }

  if (in_array($node->bundle(), ['case', 'decision'])) {
    $variables['banner_content'] = [
      'link' => [
        'url' => '/fi/tietoa-paatoksenteosta/paatoksenteon-sanakirja',
        'label' => t('Siirry sanakirjaan'),
        'classes' => 'banner__button hds-button hds-button--primary hdbt-icon hdbt-icon--link-external',
        'target_new' => TRUE,
      ],
      'title' => t('Sanat hukassa?'),
      'description' => t('Päätöksenteon sanakirja selventää kaupungin päätöksentekoon liittyviä termejä.')
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_node__trustee(&$variables) {
  $node = $variables['node'];

  if (!$node instanceof NodeInterface) {
    return;
  }

  if($node->get('field_trustee_initiatives')) {
    $content_initiatives = [];
    foreach($node->get('field_trustee_initiatives') as $json) {
      $content_initiatives[] = [json_decode($json->value)];
    };
    $variables['initiatives'] = [
      'title' => t('Valtuutetun tekemät aloitteet'),
      'content' => $content_initiatives
    ];
  };

  if($node->get('field_trustee_resolutions')) {
    $content_resolutions = [];
    foreach($node->get('field_trustee_resolutions') as $json) {
      $content_resolutions[] = [json_decode($json->value)];
    };
    $variables['resolutions'] = [
      'title' => t('Valtuutetun tekemät ponnet'),
      'content' => $content_resolutions
    ];
  };

  if ($speaking_turns = TrusteeService::getSpeakingTurns($node)) {
    $variables['speaking_turns'] = [
      'title' => t('Valtuutetun puheenvuorot'),
      'content' => $speaking_turns,
    ];
  }

  $trustee_title = TrusteeService::getTrusteeTitle($node);
  if ($trustee_title) {
    $variables['content']['field_trustee_title'] = $trustee_title;
  }

  if(isset($node->field_policymaker_reference->entity)) {
    $policymaker = $node->field_policymaker_reference->entity;
    $pmLink = Link::fromTextAndUrl(
      $policymaker->title->value,
      $policymaker->toUrl()
    )->toString();

    $variables['policymaker_declaration'] = t(
      '@trustee is @policymaker',
      [
        '@trustee' => TrusteeService::getTrusteeName($node),
        '@policymaker' => $pmLink
      ]
    );
  };

  // Check if there are any DOAs for the trustee
  $doaQuery = \Drupal::entityQuery('media')
    ->condition('bundle', 'declaration_of_affiliation')
    ->condition('field__policymaker_reference', $node->id())
    ->execute();

  if(!empty($doaQuery)) {
    // Display only one DOA for the page - there should be only one of these per trustee.
    $doa = Media::load(reset($doaQuery));
    $doaEntity = $doa->field_document->entity;
    if(isset($doaEntity) && isset($doaEntity->uri)) {
      $doaUrl = $doaEntity->getFileUri();
      $doaLinkText = Markup::create(
        '<i class="hel-icon hel-icon--document"></i>' . TrusteeService::getTrusteeName($node). ' (pdf)'
      );
      $doaLink = Link::fromTextAndUrl($doaLinkText, Url::fromUri(file_create_url($doaUrl)));
      $variables['doa'] = $doaLink->toRenderable();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_field__node__title__trustee(&$variables) {
  $title = $variables['items'][0]['content']['#context']['value'];
  $variables['items'][0]['content']['#context']['value'] = TrusteeService::transformTrusteeName($title);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_paragraph__news_liftups(&$variables) {
  $main_article_id = null;
  $main_article_query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'imported_article')
    ->condition('field_image_url', '', '!=')
    ->range(0, 1);
  $main_article_results = $main_article_query->execute();

  if(!empty($main_article_results)) {
    $main_article_id = reset($main_article_results);
  }

  $query = \Drupal::entityQuery('node')
    ->condition('status', 1)
    ->condition('type', 'imported_article')
    ->sort('field_published', 'DESC')
    ->range(0, 5);

  if($main_article_id) {
    $query->condition('nid', $main_article_id, '!=');
  }

  $article_ids = $query->execute();
  $article_nodes = $main_article_id ?
    Node::loadMultiple(array_merge([$main_article_id], $article_ids)) :
    Node::loadMultiple($article_ids);
  $articles = [];

  if(!empty($article_nodes)) {
    foreach($article_nodes as $article_node) {
      if($article_node->id() === $main_article_id) {
        $articles[] = [
          'title' => $article_node->title->value,
          'lead' => $article_node->body->view('teaser'),
          'lead_image' => $article_node->field_image_url->uri,
          'image_alt' => $article_node->field_image_alt->value,
          'image_title' => $article_node->field_image_title->value,
          'url' => $article_node->toUrl(),
          'published' => date('d.m.y H:i', $article_node->field_published->date->getTimeStamp())
        ];
      }
      else {
        $articles[] = [
          'title' => $article_node->title->value,
          'url' => $article_node->toUrl(),
          'published' => date('d.m.y H:i', $article_node->field_published->date->getTimeStamp())
        ];
      }
    }
  }

  $variables['articles'] = $articles;
}

/**
 * Implements hook_preprocess_html() for HTML document templates.
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_menu(&$variables) {
  $variables['#attached']['library'][] = 'hdbt/desktop-menu-toggle';

  if(isset($variables['menu_name']) && $variables['menu_name'] === 'main') {
    $variables['allow_collabsible'] = true;
  }
}

/**
 * Set a variable to always show sidebar in policymaker pages.
 * 
 * Implements hook_preprocess_page().
 */
function helfi_paatokset_preprocess_page(&$variables) {
  if(isset($variables['page']['sidebar_first']) && array_key_exists('policymakersidenavigation', $variables['page']['sidebar_first'])) {
    $variables['page_has_sidebar'] = true;
    $variables['move_before_content'] = true;
    $variables['has_navigation'] = true;
  }
}
