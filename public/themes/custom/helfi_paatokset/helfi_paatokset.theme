<?php

/**
 * @file
 * Functions to support theming in the City of Helsinki - Päätökset theme.
 */

use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function helfi_paatokset_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_secure_url;
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = $base_secure_url . '/' . $theme_handler->getTheme('helfi_paatokset')->getPath() . '/dist/icons/sprite.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function helfi_paatokset_preprocess(&$variables) {
  $variables['helfi_paatokset_icons_path'] = helfi_paatokset_get_icons_path();
  $variables['current_language'] = Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
  $variables['#attached']['drupalSettings']['iconsPath'] = $variables['icons_path'];
}

/**
 * Implements hook_preprocess_html() for HTML document templates.
 *
 * Create path to default theme for mobile icons (favicon, apple touch icon,
 * Android icons, ... defined in html tpl.
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_html(&$variables) {
  global $base_secure_url;
  $variables['theme_path'] = file_create_url($base_secure_url . '/' . drupal_get_path('theme', 'helfi_paatokset'));
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function helfi_paatokset_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Retrieve the node object for revisions.
    $node = (is_numeric($node) && !$node instanceof Node) ? Node::load($node) : $node;
    $suggestions[] = 'page__' . $node->bundle();
  }

  if ($taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
    $suggestions[] = 'page__taxonomy__term__' . $taxonomy_term->bundle();
  }

  $request = \Drupal::request();

  if ($exception = $request->attributes->get('exception')) {
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, [401, 403, 404])) {
      $suggestions[] = 'page__' . $status_code;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_links__language_block(&$variables) {
  foreach ($variables['links'] as $langCode => &$link) {
    switch ($langCode) {
      case 'en':
        $link['text'] = 'English';
        break;

      case 'sv':
        $link['text'] = 'Svenska';
        break;

      case 'fi':
        $link['text'] = 'Suomi';
        break;
    }
  }
}

/**
 * Implements hook_preprocess_region().
 *
 * {@inheritdoc}
 */
function helfi_paatokset_preprocess_region(&$variables) {
  $user = User::load(\Drupal::currentUser()->id());
  $variables['username'] = $user->getAccountName();
  $variables['logged_in'] = \Drupal::currentUser()->isAuthenticated();
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 *
 * {@inheritdoc}
 */
function helfi_paatokset_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (!empty($variables['menu_block_configuration']['custom_suggestion']) && $variables['menu_block_configuration']['custom_suggestion'] === 'block__menu_block__main__desktop') {
    $suggestions[] = 'menu__main__desktop';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function helfi_paatokset_theme_suggestions_block_alter(&$suggestions, $variables) {
  $element = $variables['elements'];

  if (isset($element['#configuration']['custom_suggestion'])) {
    $suggestions[] = $element['#configuration']['custom_suggestion'];
  }

  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('helfi_paatokset_', '', $suggestion);
  }
}

/**
 * Implements hook_preprocess_container().
 */
function helfi_paatokset_preprocess_container(&$variables) {
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-search__tags-container', $variables['element']['#attributes']['class'])) {
    $variables['tags'] = $variables['element']['#tags'];
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function helfi_paatokset_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-search__tags-container', $variables['element']['#attributes']['class'])) {
    $suggestions[] = 'advanced_search__tags_container';
  }
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-fields-container', $variables['element']['#attributes']['class'])) {
    $suggestions[] = 'advanced_search__advanced_fields_container';
  }
  if (isset($variables['element']['#attributes']['class']) && in_array('advanced-search-link-container', $variables['element']['#attributes']['class'])) {
    $suggestions[] = 'advanced_search_link_container';
  }
}

/**
 * Implements hook_theme().
 */
function helfi_paatokset_theme($existing, $type, $theme, $path) {
  return [
    'advanced_search__advanced_fields_container' => [
      'base hook' => 'container',
      'template' => 'form/advanced-search--advanced-fields-container'
    ],
    'advanced_search__tags_container' => [
      'base hook' => 'container',
      'template' => 'form/advanced-search--tags-container'
    ],
    'advanced_search_link_container' => [
      'base hook' => 'container',
      'template' => 'form/advanced-search-link-container'
    ]
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_block(&$variables) {
    // Handle Sidebar menu block.
    if (
      $variables['base_plugin_id'] === 'menu_block_current_language' &&
      $variables['elements']['#id'] === 'helfi_paatokset_main_navigation_level_2' &&
      !empty($variables['content']['#items'])
    ) {
      // Get any current menu level item.
      $current_level_menu_item = reset($variables['content']['#items']);
  
      if (isset($current_level_menu_item['original_link'])) {
        $original_link = $current_level_menu_item['original_link'];
        $parent = $original_link->getParent();
  
        // Check if current menu item has parent and serve it as variable.
        if ($parent) {
          $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
          $parent_item = $menu_link_manager->createInstance($parent);
  
          if ($parent_item) {
            $variables['menu_link_parent'] = [
              'title' => $parent_item->getTitle(),
              'url' => $parent_item->getUrlObject(),
            ];
          }
        }
      }
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_node__case(&$variables) {
  $link = [
    '#url' => '/fi/tietoa-paatoksenteosta/paatoksenteon-sanakirja',
    '#title' => t('Siirry sanakirjaan'),
  ];

  $variables['banner_content'] = [
    'link' => $link,
    'title' => t('Sanat hukassa?'),
    'icon' => '',
    'description' => t('Päätöksenteon sanakirja selventää kaupungin päätöksentekoon liittyviä termejä.')
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_node__decision(&$variables) {
  $link = [
    '#url' => '/fi/tietoa-paatoksenteosta/paatoksenteon-sanakirja',
    '#title' => t('Siirry sanakirjaan'),
  ];

  $variables['banner_content'] = [
    'link' => $link,
    'title' => t('Sanat hukassa?'),
    'icon' => '',
    'description' => t('Päätöksenteon sanakirja selventää kaupungin päätöksentekoon liittyviä termejä.')
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_node__trustee(&$variables) {
  $node = $variables['node'];

  if($node->get('field_trustee_initiatives')) {
    $content_initiatives = [];
    foreach($node->get('field_trustee_initiatives') as $json) {
      $content_initiatives[] = [json_decode($json->value)];
    };
    $variables['initiatives'] = [
      'title' => t('Valtuutetun tekemät aloitteet'),
      'content' => $content_initiatives
    ];
  };
  
  if($node->get('field_trustee_resolutions')) {
    $content_resolutions = [];
    foreach($node->get('field_trustee_resolutions') as $json) {
      $content_resolutions[] = [json_decode($json->value)];
    };
    $variables['resolutions'] = [
      'title' => t('Valtuutetun tekemät ponnet'),
      'content' => $content_resolutions
    ];
  };

  //TO-DO: change to use actual data from datapumppu
  $content_speaking_turns[] = [
    'meeting' => 'Kaupunginvaltuuston kokous 2021/26',
    'speaking_turn' => '13. Kansanäänestysaloite Malmin lentokentän säilyttämisestä ilmailukäytössä (2:13)',
    'link' => '/'
  ];

  $variables['speaking_turns'] = [
    'title' => t('Valtuutetun puheenvuorot'),
    'content' => $content_speaking_turns
  ];
  
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_paatokset_preprocess_field__node__title__trustee(&$variables) {
  $old = explode(',', $variables['items'][0]['content']['#context']['value']);
  $new = $old[1] . ' ' . $old[0];

  $variables['items'][0]['content']['#context']['value'] = $new;
}

